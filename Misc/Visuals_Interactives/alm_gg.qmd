



```{r}
#| eval: false
#| 
library(ggplot2)
library(patchwork)
library(dplyr)

bp <- c("#2C3E50", "#E74C3C", "#3498DB", "#F39C12", "#8E44AD", "#1ABC9C")  # Color palette

# Define points for nodes
nodes <- tibble(
  x = c(0.5, 1.5, 0, 1, 2, 0.5, 1.5),
  y = c(3, 3, 2, 2, 2, 1, 1),
  type = c("circle", "circle", "triangle", "triangle", "triangle", "circle", "circle")
)

# Define lines for associations
associations <- tibble(
  x = c(0.5, 1.5, 0.5, 1.5, 0, 1, 2, 0.5, 1.5),
  y = c(3, 3, 3, 3, 2, 2, 2, 2, 2),
  xend = c(0, 1, 1, 2, 0.5, 0.5, 1.5, 1.5, 1.5),
  yend = c(2, 2, 2, 2, 1, 1, 1, 1, 1)
)

# Plot nodes and lines
plot <- ggplot() +
  geom_segment(data = associations, aes(x = x, y = y, xend = xend, yend = yend), 
               arrow = arrow(type = "open", length = unit(0.2, "inches")), 
               color = bp[1]) +
  geom_point(data = filter(nodes, type == "circle"), aes(x = x, y = y), shape = 16, size = 5, fill = "white", color = bp[1]) +
  geom_polygon(data = filter(nodes, type == "triangle"), aes(x = x, y = y), fill = "white", color = bp[1], size = 1) +
  annotate("text", x = 0.5, y = 3.2, label = "Category nodes") +
  annotate("text", x = 1, y = 2.2, label = "Learned association weights", angle = 90, hjust = 1) +
  annotate("text", x = 1, y = 1.2, label = "Learned attention strengths", angle = 90, hjust = 1) +
  annotate("text", x = 1, y = 2.2, label = "Exemplar nodes") +
  annotate("text", x = 1, y = 0.8, label = "Stimulus dimension nodes") +
  theme_void()

print(plot)



```


```{r}


library(ggplot2)
library(tidyverse)

# Data for category, exemplar, and stimulus dimension nodes
df_nodes <- tibble(
  x = c(0, 1, 0.5, 0.5, 0.5),
  y = c(1, 1, 2, 0, 1.5),
  label = c("Category nodes", "Category nodes", "Exemplar nodes", 
            "Stimulus dimension nodes", "Learned association strengths"),
  type = c("category", "category", "exemplar", "stimulus", "association"),
  fill = c(NA, NA, "blue", NA, NA)  # Gradient fill for exemplar node
)

# Data for arrows
df_arrows <- tibble(
  x_start = c(0, 1, 0.5, 0.5, 0.5, 0.5),
  y_start = c(1, 1, 2, 0, 2, 0),
  x_end = c(0.5, 0.5, 0.5, 0.5, 0, 1),
  y_end = c(1.5, 1.5, 1.5, 1.5, 1, 1)
)

# Create the base plot
p <- ggplot() +
  geom_segment(data = df_arrows, 
               aes(x = x_start, y = y_start, xend = x_end, yend = y_end),
               arrow = arrow(type = "closed", length = unit(0.15, "inches"))) +
  geom_text(data = df_nodes, 
            aes(x = x, y = y, label = label), 
            vjust = "inward", size = 4) +
  theme_void() +
  theme(legend.position = "none")

# Modify the exemplar node in df_nodes with a numeric value for activation level
df_nodes$activation <- ifelse(df_nodes$type == "exemplar", 0.8, NA)  # Example value 0.8

# Updated code segment
p + geom_point(data = df_nodes %>% filter(type == "exemplar"), 
               aes(x = x, y = y, fill = activation), 
               shape = 21, size = 5, color = "black") +
    scale_fill_gradient(low = "white", high = "blue", na.value = NA)



```

```{r}

library(ggplot2)
library(tidyr)

# Define the matrix size
n_rows <- 8
n_cols <- 10

# Create an empty matrix
category_matrix <- matrix(NA, n_rows, n_cols)

# Fill the matrix based on the figure
# 1 for rule training instances and 2 for exceptions
category_matrix[1:4, 1:2] <- 1
category_matrix[5:8, 1:2] <- 2
category_matrix[1:2, 3:10] <- 2
category_matrix[3:4, 3:10] <- 1
category_matrix[5:6, 3:10] <- 1
category_matrix[7:8, 3:10] <- 2

# Convert the matrix to a tidy data frame for plotting
category_df <- as.data.frame(as.table(category_matrix))

# Plot
ggplot(category_df, aes(x=Var2, y=-Var1)) +
  geom_tile(aes(fill=factor(category_matrix)), color="black") +
  scale_fill_manual(values=c("black", "white")) +
  theme_minimal() +
  labs(fill="Category", 
       title="Category Structure for Experiment 2",
       x="Segment Position", 
       y="Rectangle Height")


```


```{r}
#| eval: false
library(tidyverse)

# Define the architecture

# Rule Module
rule_module <- function(input, weights) {
  # Activate rule nodes based on the input and boundary
  activated_rule <- ifelse(input > some_boundary_value, 1, 0) # some_boundary_value needs to be defined
  return(activated_rule * weights)
}

# Exemplar Module (ALCOVE)
exemplar_module <- function(input, exemplars, attention_weights, exemplar_weights) {
  # Compute similarity between input and each exemplar
  similarity <- rowSums((input - exemplars)^2 * attention_weights)
  activations <- exp(-similarity)
  
  # Compute category response
  response <- sum(activations * exemplar_weights)
  
  return(response)
}

# Gating Mechanism
gating_mechanism <- function(rule_output, exemplar_output, g) {
  return(g * rule_output + (1 - g) * exemplar_output)
}

# Initialize parameters
rule_weights <- runif(2)  # Example weights for the rule module, actual initialization may differ
exemplars <- matrix(runif(10), ncol=2)  # Assuming 5 exemplars with 2-dimensional input for demonstration purposes
attention_weights <- runif(2)  # Example attention weights
exemplar_weights <- runif(5)  # Example weights for the exemplar module
g <- 0.5  # Example gating parameter, the actual value should be set based on the model

# Simulate the model with an input
input_data <- c(0.5, 0.5)  # Example 2-dimensional input

rule_output <- rule_module(input_data, rule_weights)
exemplar_output <- exemplar_module(input_data, exemplars, attention_weights, exemplar_weights)
final_output <- gating_mechanism(rule_output, exemplar_output, g)

print(final_output)

```

