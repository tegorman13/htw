---
title: Individual ABC Fits
author: Thomas Gorman
date: "`r Sys.Date()`"
code-fold: true
code-tools: true
execute: 
  warning: false
  eval: true
---



```{r}
pacman::p_load(dplyr,purrr,tidyr,ggplot2, data.table, here, patchwork, conflicted, stringr)
conflict_prefer_all("dplyr", quiet = TRUE)
options(scipen = 999)
walk(c("Display_Functions","fun_alm"), ~ source(here::here(paste0("Functions/", .x, ".R"))))
ds <- readRDS(here::here("data/e1_md_11-06-23.rds"))  |> as.data.table()
ids <- c(1,2,4,5,6,7,8, 10,11,12,13)
ids2 <- c(1,66,36)
ids3 <- c(20,71,101,4,76,192)
idsBad <- c(76,192, 101)

source(here::here("Functions/fun_indv_fit.R"))

#list.files(here('data/abc_reject'))

# (grep("Train",list.files(here('data/abc_reject/n_iter_2000_ntry_10_2918'), 
#                                            pattern="EXAM_Test",full.names = TRUE), 
#                                 invert=TRUE, value=TRUE))
                                
ind_fits <- map(list.files(here('data/abc_reject/n_iter_100_ntry_500_3719'),full.names=TRUE), readRDS)
# ind_fits <- map(list.files(here('data/abc_reject/n_iter_2000_ntry_10_2918'),full.names=TRUE), readRDS)


ind_fits_df <- ind_fits |> map(~list(dat=.x[[1]], Model = .x[["Model"]], Fit_Method=.x[["Fit_Method"]]))
ind_fits_df2 <- ind_fits_df |> map(~rbindlist(.x$dat) |> mutate(Model = .x$Model, Fit_Method = .x$Fit_Method)) |> rbindlist()


generate_data <- function(Model, post_samples, data, num_samples = 1, return_dat="train_data, test_data")
{
  input_layer =  c(100,350,600,800,1000,1200)
  output_layer = input_layer
  data <- data |> filter(id==post_samples$id[1]) |> as.data.table()
  
  simulation_function <- case_when(Model =="ALM" ~list(full_sim_alm),
                                   Model=="EXAM" ~ list(full_sim_exam)) |>
    pluck(1)
  
  target_data <- case_when(
    return_dat == "test_data" ~ list(target_data_test <- data[data$expMode2 == "Test", ]), 
    return_dat == "train_data" ~ list( target_data_train <- data[data$expMode2 == "Train", ]),
    return_dat == "train_data, test_data" ~ list( target_data_train_test <- data[expMode2 %in% c("Test", "Train"), ])
    ) |> pluck(1)
  
   post_samples <- post_samples |> mutate(rank = dense_rank(mean_error)) |> 
     arrange(rank) |> filter(rank <= num_samples)
    
  simulated_data_list <- lapply(1:nrow(post_samples), function(i) {
    params <- post_samples[i, ]
    sim_data <- simulation_function(data, params$c, params$lr,
                                    input_layer = input_layer, output_layer = output_layer, return_dat = return_dat) |> as_tibble() |>
        mutate(id=data$id[1],condit=data$condit[1],expMode2=target_data$expMode2,Model=Model[1],y=target_data$y,x=target_data$x,c=params$c, 
               lr=params$lr,mean_error=params$mean_error, rank=i ) |> 
      rename(pred="value")
  })
  
  rbindlist(simulated_data_list) |> relocate(id,condit,expMode2,c,lr,x,y,pred)
  
  # sim_data <- simulation_function(data, post_samples$c, post_samples$lr,
  #                                     input_layer = input_layer, output_layer = output_layer, return_dat = return_dat)
}



exam_test <- ind_fits_df2 |> filter(Model == "EXAM", Fit_Method == "Test")

k <- exam_test %>% split(f =c(.$id), drop=TRUE) |> 
  map(~generate_data(.x$Model, .x, ds, num_samples = 100, return_dat="train_data, test_data"))

post_dat_l <- k |> rbindlist() |> filter(expMode2=="Test")



k = ind_fits_df2 %>% nest(.by=c(id,Model,Fit_Method))

future::plan(multisession)
# k2 <- k |> mutate(pp=future_pmap(list(id,Model,Fit_Method,data), ~{
#   generate_data(..2, ..4 |> mutate(id=..1), ds, num_samples = as.numeric(nrow(..4)), return_dat="test_data")
#   })) |> select(-data)

future::plan(multisession)
k2 <- k |> mutate(pp=furrr::future_pmap(list(id,Model,Fit_Method,data), ~{
  generate_data(..2, ..4 |> mutate(id=..1), ds, num_samples = 100), return_dat="test_data")
  })) |> select(-data)


# p <- k |>  mutate(n=future_pmap(list(id,Model,Fit_Method,data), ~{
#    as.numeric(nrow(..4))
#   }))

k3 <- k2 |> select(Fit_Method, pp) |> unnest(pp)


post_dat_l <- k3 %>%
  pivot_longer(
    cols = c(pred, y),
    names_to = "Resp",
    values_to = "val"
  ) %>%
  mutate(
    Resp = case_when(
      Resp == "y" ~ "Observed",
      Model == "ALM" ~ "ALM",
      Model == "EXAM" ~ "EXAM"
    )
  ) |> arrange(id,Resp) 




```



##  Posterior Average Table: 
```{r fig.width=12, fig.height=17}
#| eval: true
post_tabs <- abc_tables(post_dat_l)
post_tabs$et_sum |> gt::gt()

post_tabs$et_sum |> select(condit,Fit_Method,Avg_ALM_error, Avg_EXAM_error) |> filter(Fit_Method=="Test")



 abc_tables(post_dat_l |> filter(rank<=100))$et_sum |> gt::gt()
 
 post_dat_l |> group_by(condit,Model,Fit_Method,rank) |> summarise(mean_error=mean(mean_error), n=n()) |> 
   ggplot(aes(x=rank,y=mean_error,fill=Model))+geom_col()+facet_wrap(~Fit_Method)
 
```


## Posterior Predictive: 
```{r, fig.width=12, fig.height=14}
#| eval: true
group_predictive_plots(post_dat_l)
group_best_plots(post_dat_l)
```

```{r fig.width=12, fig.height=14}
plot_indv_posterior(ind_fits_df2 |> mutate(Group=condit))

```

## Individual Plots:
```{r, fig.width=12, fig.height=17}
#| eval: true
indv_best_plots(post_dat_l)
indv_predictive_plots(post_dat_l, ids2)
indv_predictive_plots(post_dat_l, idsBad)

```



### Subject 1
```{r fig.width=11, fig.height=12}
 
indv_predictive_dist((post_dat_l |> filter(rank<=200)),ind_fits_df2, sbj=list(1))
# plot_indv_posterior(ind_fits_df |> filter(id==1))
# ind_fits_df |> filter(id==1, Fit_Method=="Test Only", Model=="EXAM") |> pull(c) |> unique()

```




### Subject 36
```{r fig.width=11, fig.height=12}
 
indv_predictive_dist(post_dat_l,ind_fits_df2, sbj=list(36))
# plot_indv_posterior(ind_fits_df |> filter(id==1))
# ind_fits_df |> filter(id==1, Fit_Method=="Test Only", Model=="EXAM") |> pull(c) |> unique()
```







```{r fig.width=11, fig.height=8}


get_order_pattern <- function(df, pred_col = "pred",band_tol=50) {

  df <- df[order(df$x), ]
  # Calculate the standard deviation and determine the pattern
  pred_sd <- sd(df[[pred_col]]) / 2.8
  pattern <- ""
  # Iterate through the rows to build the pattern
  for (i in 1:(nrow(df) - 1)) {
    if (abs(df[[pred_col]][i] - df[[pred_col]][i + 1]) <= band_tol) {
      pattern <- paste0(pattern, "=")
    } else if (df[[pred_col]][i] < df[[pred_col]][i + 1]) {
      pattern <- paste0(pattern, "<")
    } else {
      pattern <- paste0(pattern, ">")
    }
  }

  return(pattern)
}


ind_ds <- ds |> 
  filter(expMode2 == "Test") |> 
  group_by(id, condit, x, expMode2) |> 
  summarise(y = mean(y), .groups = "keep") 

# Apply the function to the dataset
ind_pattern <- ind_ds |> 
  group_by(id, condit, expMode2) |>
  do(order_pattern = get_order_pattern(., pred_col = "y",band_tol=50)) 
  
ind_ds <- ind_ds |>
  left_join(ind_pattern, by=join_by(id,condit,expMode2)) |> 
  mutate(order_pattern = unlist(order_pattern))

lorder <- ind_ds |>
  group_by(order_pattern, x) |>
  summarize(y = mean(y), n_id = n_distinct(id)) %>% 
  pull(n_id) %>% 
  unique() %>% 
  sort(decreasing = TRUE)

ord_pattern <- k3  |> filter(rank<=1) |>
  filter(expMode2=="Test") |> 
  group_by(condit,rank,Model,Fit_Method) %>% 
  do(order_pattern = unlist(get_order_pattern(.))) 





combo_pred <- k3 |>  filter(rank<=1) |>
  left_join(ord_pattern, by=join_by(condit,rank,Model,Fit_Method)) |>
  mutate(order_pattern = unlist(order_pattern))

head(combo_pred)
length(unique(combo_pred$order_pattern))


pattern_freq <- combo_pred %>%
  count(order_pattern) %>%
  arrange(desc(n))

# Print the frequency table
print(pattern_freq)

# Plot the frequency distribution
ggplot(pattern_freq, aes(x = order_pattern, y = n)) +
  geom_bar(stat = "identity") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(title = "Frequency Distribution of Order Patterns",
       x = "Order Pattern",
       y = "Frequency")

combo_pred %>% group_by(condit,Model,Fit_Method) |> count(order_pattern) |> arrange(desc(n)) |> ggplot(aes(x = order_pattern, y = n)) +
  geom_bar(stat = "identity") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(title = "Frequency Distribution of Order Patterns",
       x = "Order Pattern",
       y = "Frequency") +
  ggh4x::facet_nested_wrap(condit~Model)


combo_pred %>%
  group_by(Model, Fit_Method) %>%
  mutate(n_pattern = n_distinct(order_pattern)) %>%
  group_by(Model, Fit_Method, order_pattern) %>%
  mutate(pat_count = n()) %>%
  ungroup() %>%
  group_by(Model, Fit_Method) %>%
  arrange(Model, Fit_Method, desc(pat_count), order_pattern) %>%
  mutate(pat_rank = dense_rank(desc(pat_count))) |> 
  group_by(Model, Fit_Method, order_pattern) %>%
  # distinct(Model, Fit_Method, order_pattern, .keep_all = TRUE) %>%
  # arrange(Model, Fit_Method, pat_rank)
  filter(pat_rank<=5) |>
  filter(condit=="Varied")  |> 
 ggplot(aes(x=c,y=lr,color=as.factor(order_pattern))) + geom_point() + facet_wrap(Fit_Method~Model,scales="free") 
  # use viridis color palette
 # scale_color_viridis_d(option = "magma", direction = -1) 
  
ordered_labels <- ind_ds |>
  group_by(order_pattern, x,condit) |>
  summarize(y = mean(y), n_id = n_distinct(id)) |>
  arrange(-n_id, order_pattern) |>
  mutate(factor_label = paste0(order_pattern, " (n=", n_id, ")")) %>%
  pull(factor_label) %>%
  unique()

k= ind_ds |>
  group_by(order_pattern, x,condit) |>
  summarize(y = mean(y), n_id = n_distinct(id)) |>
  mutate(n_id = factor(n_id, levels = lorder)) |>
  mutate(factor_label = paste0(order_pattern, " (n=", n_id, ")"),
         factor_label = factor(factor_label, levels = ordered_labels)) 

k |>
  ggplot(aes(x = x, y = y),fill=wes_palette("Darjeeling1")[1]) +
  stat_summary(fun = mean, geom = "bar") +
  stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.25) +
  facet_wrap(~factor_label, scales = "free_x")

k |> filter(condit=="Varied") |>
  ggplot(aes(x = x, y = y,fill=condit),fill=wes_palette("Darjeeling1")[1]) +
  stat_summary(fun = mean, geom = "bar", position = position_dodge(width = 0.8)) +
  stat_summary(fun.data = mean_se, geom = "errorbar", position = position_dodge(width = 0.8), width = 0.25) +
  facet_wrap(~factor_label, scales = "free_x")

k |> filter(condit=="Constant") |>
  ggplot(aes(x = x, y = y),fill=wes_palette("Darjeeling1")[2]) +
  stat_summary(fun = mean, geom = "bar", position = position_dodge(width = 0.8)) +
  stat_summary(fun.data = mean_se, geom = "errorbar", position = position_dodge(width = 0.8), width = 0.25) +
  facet_wrap(~factor_label, scales = "free_x")

```







```{r}

ind_fits_df2 |> ggplot(aes(x=Model,y=mean_error,fill=Model))+geom_col()+facet_wrap(~Fit_Method)
ind_fits_df2 |> ggplot(aes(x=Model,y=mean_error,fill=Model))+geom_col()+facet_wrap(condit~Fit_Method)


```





```{r}

```