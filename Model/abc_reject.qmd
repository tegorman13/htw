---
title: Individual ABC Fits
author: Thomas Gorman
date: "`r Sys.Date()`"
code-fold: true
code-tools: true
execute: 
  warning: false
  eval: true
---



```{r}
pacman::p_load(dplyr,purrr,tidyr,ggplot2, data.table, here, patchwork, conflicted, stringr)
conflict_prefer_all("dplyr", quiet = TRUE)
options(scipen = 999)
walk(c("Display_Functions","fun_alm",), ~ source(here::here(paste0("Functions/", .x, ".R"))))
ds <- readRDS(here::here("data/e1_md_11-06-23.rds"))  |> as.data.table()
ids <- c(1,2,4,5,6,7,8, 10,11,12,13)
ids2 <- c(1,66,36)
ids3 <- c(20,71,101,4,76,192)
idsBad <- c(76,192, 101)

source(here::here("Functions/fun_indv_fit.R"))
list.files(here('data/abc_reject'))

# (grep("Train",list.files(here('data/abc_reject/n_iter_2000_ntry_10_2918'), 
#                                            pattern="EXAM_Test",full.names = TRUE), 
#                                 invert=TRUE, value=TRUE))
                                
ind_fits <- map(list.files(here('data/abc_reject/n_iter_2000_ntry_10_2918'),full.names=TRUE), readRDS)

ind_fits_df <- ind_fits |> map(~list(dat=.x[[1]], Model = .x[["Model"]], Fit_Method=.x[["Fit_Method"]]))
ind_fits_df2 <- ind_fits_df |> map(~rbindlist(.x$dat) |> mutate(Model = .x$Model, Fit_Method = .x$Fit_Method)) |> rbindlist()


generate_data <- function(Model, post_samples, data, num_samples = 1, return_dat="train_data, test_data")
{
  input_layer =  c(100,350,600,800,1000,1200)
  output_layer = input_layer
  data <- data |> filter(id==post_samples$id[1]) |> as.data.table()
  
  simulation_function <- case_when(Model =="ALM" ~list(full_sim_alm),
                                   Model=="EXAM" ~ list(full_sim_exam)) |>
    pluck(1)
  
  target_data <- case_when(
    return_dat == "test_data" ~ list(target_data_test <- data[data$expMode2 == "Test", ]), 
    return_dat == "train_data" ~ list( target_data_train <- data[data$expMode2 == "Train", ]),
    return_dat == "train_data, test_data" ~ list( target_data_train_test <- data[expMode2 %in% c("Test", "Train"), ])
    ) |> pluck(1)
  
   post_samples <- post_samples |> mutate(rank = dense_rank(mean_error)) |> 
     arrange(rank) |> filter(rank <= num_samples)
    
  simulated_data_list <- lapply(1:nrow(post_samples), function(i) {
    params <- post_samples[i, ]
    sim_data <- simulation_function(data, params$c, params$lr,
                                    input_layer = input_layer, output_layer = output_layer, return_dat = return_dat) |> as_tibble() |>
        mutate(id=data$id[1],condit=data$condit[1],expMode2=target_data$expMode2,Model=Model[1],y=target_data$y,x=target_data$x,c=params$c, 
               lr=params$lr,mean_error=params$mean_error, rank=i ) |> 
      rename(pred="value")
  })
  
  rbindlist(simulated_data_list) |> relocate(id,condit,expMode2,c,lr,x,y,pred)
  
  # sim_data <- simulation_function(data, post_samples$c, post_samples$lr,
  #                                     input_layer = input_layer, output_layer = output_layer, return_dat = return_dat)
}



exam_test <- ind_fits_df2 |> filter(Model == "EXAM", Fit_Method == "Test")

k <- exam_test %>% split(f =c(.$id), drop=TRUE) |> 
  map(~generate_data(.x$Model, .x, ds, num_samples = 100, return_dat="train_data, test_data"))

post_dat_l <- k |> rbindlist() |> filter(expMode2=="Test")



k = ind_fits_df2 %>% nest(.by=c(id,Model,Fit_Method))

future::plan(multisession)
k2 <- k |> mutate(pp=future_pmap(list(id,Model,Fit_Method,data), ~{
  generate_data(..2, ..4 |> mutate(id=..1), ds, num_samples = 50, return_dat="test_data")
  }))


k3 <- k2 |> select(Fit_Method, pp) |> unnest(pp)


post_dat_l <- k3 %>%
  pivot_longer(
    cols = c(pred, y),
    names_to = "Resp",
    values_to = "val"
  ) %>%
  mutate(
    Resp = case_when(
      Resp == "y" ~ "Observed",
      Model == "ALM" ~ "ALM",
      Model == "EXAM" ~ "EXAM"
    )
  ) |> arrange(id,Resp) 




```



## Posterior Predictive: 
```{r, fig.width=12, fig.height=14}
#| eval: true
group_predictive_plots(post_dat_l)
group_best_plots(post_dat_l)
```

```{r fig.width=12, fig.height=14}
plot_indv_posterior(ind_fits_df2 |> mutate(Group=condit))

```

## Individual Plots:
```{r, fig.width=12, fig.height=17}
#| eval: true
indv_best_plots(post_dat_l)
indv_predictive_plots(post_dat_l, ids2)
indv_predictive_plots(post_dat_l, idsBad)

```




```{r}

ind_fits_df2 |> ggplot(aes(x=Model,y=mean_error,fill=Model))+geom_col()+facet_wrap(~Fit_Method)
ind_fits_df2 |> ggplot(aes(x=Model,y=mean_error,fill=Model))+geom_col()+facet_wrap(condit~Fit_Method)


```





```{r}

```