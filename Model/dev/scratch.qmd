


```{r fig.width=11, fig.height=8}

# Load required libraries
pacman::p_load(tidyverse, data.table, abc, future, furrr, here, patchwork, conflicted)



# Define function to process dataset
process_dataset <- function(name, dataset) {
  sample_size <- str_extract(name, "\\d+p?\\d*?M")
  posterior_cutoff <- str_extract(name, "p\\d+$")

  teter_combined <- map_dfr(dataset, "teter_results", .id = "run_name")
  te_combined <- map_dfr(dataset, "te_results", .id = "run_name")
  tr_combined <- map_dfr(dataset, "tr_results", .id = "run_name")

  plot_title_suffix <- sprintf("%s - %s", sample_size, posterior_cutoff)

  return(list(teter_combined = teter_combined,
              te_combined = te_combined,
              tr_combined = tr_combined,
              plot_title_suffix = plot_title_suffix))
}



create_density_plots <- function(processed_data) {
  teter_combined <- processed_data$teter_combined
  te_combined <- processed_data$te_combined
  tr_combined <- processed_data$tr_combined
  plot_title_suffix <- processed_data$plot_title_suffix

  # Base plot for density
  base_plot <- function(data, x_var, title, show_legend = FALSE) {
    ggplot(data, aes_string(x=x_var, color="Model")) +
      geom_density() +
      facet_wrap(~Group, scales = "free") +
      ggtitle(title) +
      theme(legend.position=ifelse(show_legend, "top", "none"))  # Toggle legend display
  }

  # Create plots, but only show legend on the first plot
  plot1 <- base_plot(teter_combined, "c", sprintf("c posterior - Test & Train - %s", plot_title_suffix),TRUE )
  plot2 <- base_plot(teter_combined, "lr", sprintf("lr posterior - Test & Train - %s", plot_title_suffix))
  plot3 <- base_plot(te_combined, "c", sprintf("c posterior - Test Only - %s", plot_title_suffix))
  plot4 <- base_plot(te_combined, "lr", sprintf("lr posterior - Test Only - %s", plot_title_suffix))
  plot5 <- base_plot(tr_combined, "c", sprintf("c posterior - Train Only - %s", plot_title_suffix))
  plot6 <- base_plot(tr_combined, "lr", sprintf("lr posterior - Train Only - %s", plot_title_suffix))

  # Combine plots and place the one with the legend (plot1) at the end so that the legend is not cut off
  density_combined <- plot1 + plot2 + plot3 + plot4 + plot5 + plot6 + 
    plot_layout(ncol = 2) 
  return(density_combined)
}


create_distance_plots <- function(processed_data) {
  teter_combined <- processed_data$teter_combined
  te_combined <- processed_data$te_combined
  tr_combined <- processed_data$tr_combined
  plot_title_suffix <- processed_data$plot_title_suffix

  # Base plot for distance
  base_dist_plot <- function(data, title, show_legend = FALSE) {
    ggplot(data, aes(x=Group, y=distance, fill=Model)) +
      stat_summary(fun=mean, geom="bar", position=position_dodge(width = 0.8)) +
      stat_summary(fun.data=mean_se, geom="errorbar", position=position_dodge(width = 0.8), width=0.25) +
      ggtitle(title) +
      theme(legend.position=ifelse(show_legend, "top", "none")) # Control the display of the legend
  }

  # Create distance plots
  dist_plot1 <- base_dist_plot(teter_combined, sprintf("Test & Train - %s", plot_title_suffix),TRUE)
  dist_plot2 <- base_dist_plot(te_combined, sprintf("Test Only - %s", plot_title_suffix),)
  dist_plot3 <- base_dist_plot(tr_combined, sprintf("Train Only - %s", plot_title_suffix))

  # Combine plots and place the one with the legend (dist_plot1) at the end
  distance_combined <- dist_plot1 + dist_plot2 + dist_plot3 + 
    plot_layout(ncol = 2) 
  return(distance_combined)
}

# Define function to save plots
save_plots <- function(density_plot, distance_plot, name) {
  sample_size <- str_extract(name, "\\d+p?\\d*?M")
  posterior_cutoff <- str_extract(name, "p\\d+$")

  density_filename <- paste0("assets/tmp_plots/density_plots_combo_abc_", sample_size, "rmse", posterior_cutoff, ".png")
  distance_filename <- paste0("assets/tmp_plots/distance_plots_combo_abc_", sample_size, "rmse", posterior_cutoff, ".png")

  ggsave(filename = here::here(density_filename), plot = density_plot, width = 10, height = 6)
  ggsave(filename = here::here(distance_filename), plot = distance_plot, width = 10, height = 6)
}

# Process datasets
processed_datasets <- lapply(names(datasets), function(name) process_dataset(name, datasets[[name]]))

# Create density plots
density_plots <- invisible(lapply(processed_datasets, create_density_plots))

# Create distance plots
distance_plots <- lapply(processed_datasets, create_distance_plots)

density_plots
distance_plots


# Save plots
invisible(lapply(seq_along(names(datasets)), function(i) save_plots(density_plots[[i]], distance_plots[[i]], names(datasets)[i])))

```



```{r}

pacman::p_load(tidyverse, data.table, abc, future, furrr, here, patchwork, conflicted)

# Function to process dataset
process_dataset <- function(name, dataset) {
  sample_size <- str_extract(name, "\\d+p?\\d*?M")
  posterior_cutoff <- str_extract(name, "p\\d+$")

  teter_combined <- map_dfr(dataset, "teter_results", .id = "run_name")
  te_combined <- map_dfr(dataset, "te_results", .id = "run_name")
  tr_combined <- map_dfr(dataset, "tr_results", .id = "run_name")

  list(teter_combined, te_combined, tr_combined)
}

# Function to create and save density plots
create_density_plots <- function(data_combined, name) {
  sample_size <- str_extract(name, "\\d+p?\\d*?M")
  posterior_cutoff <- str_extract(name, "p\\d+$")
  plot_title_suffix <- sprintf("%s - %s", sample_size, posterior_cutoff)

  plot_list <- lapply(data_combined, function(data) {
    ggplot(data, aes(x = c)) + 
      geom_density(aes(color = Model)) +
      facet_wrap(~Group, scales = "free") + 
      ggtitle(sprintf("c posterior - %s - %s", data$context[1], plot_title_suffix))
  })

  density_combined <- wrap_plots(plot_list, ncol = 2)
  density_filename <- sprintf("assets/tmp_plots/density_plots_combo_abc_%srmse%s.png", sample_size, posterior_cutoff)
  ggsave(filename = here::here(density_filename), plot = density_combined, width = 10, height = 6)
}

# Function to create and save distance plots
create_distance_plots <- function(data_combined, name) {
  sample_size <- str_extract(name, "\\d+p?\\d*?M")
  posterior_cutoff <- str_extract(name, "p\\d+$")
  plot_title_suffix <- sprintf("%s - %s", sample_size, posterior_cutoff)

  dist_plot_list <- lapply(data_combined, function(data) {
    ggplot(data, aes(x = Group, y = distance, fill = Model)) +
      stat_summary(fun = mean, geom = "bar", position = position_dodge()) +
      stat_summary(fun.data = mean_se, geom = "errorbar", position = position_dodge()) +
      ggtitle(sprintf("%s - %s", data$context[1], plot_title_suffix))
  })

  distance_combined <- wrap_plots(dist_plot_list, ncol = 2)
  distance_filename <- sprintf("assets/tmp_plots/distance_plots_combo_abc_%srmse%s.png", sample_size, posterior_cutoff)
  ggsave(filename = here::here(distance_filename), plot = distance_combined, width = 10, height = 6)
}

# Load datasets
datasets <- list(
  abc_1M_p001 = readRDS(here::here("data/abc_1M_rmse_p001.rds")),
  abc_1M_p0001 = readRDS(here::here("data/abc_1M_rmse_p0001.rds")),
  abc_2M_p001 = readRDS(here::here("data/abc_2M_rmse_p001.rds")),
  abc_2M_p0001 = readRDS(here::here("data/abc_2M_rmse_p0001.rds")),
  abc_1p5M_p001 = readRDS(here::here("data/abc_1p5M_rmse_p001.rds")),
  abc_1p5M_p0001 = readRDS(here::here("data/abc_1p5M_rmse_p0001.rds"))
)

# Process and plot for each dataset
invisible(lapply(names(datasets), function(name) {
  processed_data <- process_dataset(name, datasets[[name]])
  create_density_plots(processed_data, name)
  create_distance_plots(processed_data, name)
}))

```