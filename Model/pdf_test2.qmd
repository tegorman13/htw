---
title: HTW Model2
author: Thomas Gorman
pdf-engine: pdflatex
execute: 
  warning: false
  eval: true
  include: true
  echo: false
format:
  html: default
  pdf: 
    header-includes:
    - '\KOMAoption{captions}{tableheading}'
    - '\usepackage{float}'
    - '\floatplacement{table}{H}'
    - '\usepackage{tabularx}'
    - '\usepackage{etoolbox}'
---



```{r}
pacman::p_load(dplyr,purrr,tidyr,ggplot2, data.table, here, patchwork, conflicted, 
               stringr,future,furrr, knitr, reactable, flextable,ggstance, htmltools,ggdist,ggh4x,brms,tidybayes,bayestestR,gt,gtsummary,gtExtras)
#conflict_prefer_all("dplyr", quiet = TRUE)
walk(c("flextable","dplyr"), conflict_prefer_all, quiet = TRUE)
#options(brms.backend="cmdstanr",mc.cores=4)
options(digits=3, scipen=999, dplyr.summarise.inform=FALSE)
walk(c("Display_Functions","fun_alm","fun_indv_fit","fun_model", "prep_model_data","org_functions"), ~source(here::here(paste0("Functions/", .x, ".R"))))


options(kableExtra.auto_format=FALSE)
options(
  digits = 3, width = 120,
  dplyr.summarise.inform = FALSE
)


invisible(list2env(load_sbj_data(), envir = .GlobalEnv))
#invisible(list2env(load_e1(), envir = .GlobalEnv))


```





```{r}

# e2_model <- load_e2()
# post_tabs2 <- abc_tables(e2_model$post_dat,e2_model$post_dat_l)
# train_tab2 <- abc_train_tables(e2_model$pd_train,e2_model$pd_train_l)

# pdl2 <- e2_model$post_dat_l |> rename("bandInt"=x) |> filter(rank<=1,Fit_Method=="Test_Train", !(Resp=="Observed")) |> mutate(aerror = abs(error))


# e2_tab <- rbind(post_tabs2$agg_pred_full |> mutate("Task Stage"="Test"), train_tab2$agg_pred_full |> mutate("Task Stage"="Train")) |> 
#   mutate(Fit_Method=rename_fm(Fit_Method)) 


  # |>
  # flextable::tabulator(rows=c("Task Stage","Fit_Method","Model"), columns=c("condit"),
  #                      `ME` = as_paragraph(mean_error)) |> as_flextable()




# e3_model <- load_e3()
# post_tabs3 <- abc_tables(e3_model$post_dat,e3_model$post_dat_l)
# train_tab3 <- abc_train_tables(e3_model$pd_train,e3_model$pd_train_l)


# pdl3 <- e3_model$post_dat_l |> rename("bandInt"=x) |> filter(rank<=1,Fit_Method=="Test_Train", !(Resp=="Observed")) |> mutate(aerror = abs(error))


# e3_tab <- rbind(post_tabs3$agg_pred_full |> 
#   mutate("Task Stage"="Test"), train_tab3$agg_pred_full |> mutate("Task Stage"="Train")) |> 
#   mutate(Fit_Method=rename_fm(Fit_Method)) 
  # |>
  # flextable::tabulator(rows=c("Task Stage","Fit_Method","Model"), columns=c("condit"),
  #                      `ME` = as_paragraph(mean_error)) |> as_flextable()








#  e23_tab <- rbind(e2_tab |> mutate(Exp="E2"), e3_tab |> mutate(Exp="E3"))

# saveRDS(e23_tab, here("data/model_cache/e23_tab.rds"))

e23_tab <- readRDS(here("data/model_cache/e23_tab.rds"))


# rbind(e2_tab |> mutate(Exp="E2"), e3_tab |> mutate(Exp="E3")) |> 
#   flextable::tabulator(rows=c("Task Stage","Fit_Method","Model"), columns=c("Exp", "condit"),
#                        `ME` = as_paragraph(mean_error)) |> flextable::as_flextable()



#e23_tab <- e2_tab |> mutate(Exp="E2")


```



## First gt



```{r}
#| label: tbl-pdf-html
#| tbl-cap: "Mean Error by Fit Method, Task Stage, and Experiment" 

wide_data <- e23_tab %>%
  pivot_wider(
    names_from = c(Exp, Model, condit),
    values_from = mean_error,
    names_glue = "{Exp}_{Model}_{condit}"
  ) %>%
  arrange(Fit_Method, `Task Stage`)  # Sort for clarity

# Create a gt table with the wider data
gt_table <- wide_data %>%
  gt() %>%
  tab_header(
    title = "Mean Error by Fit Method, Task Stage, and Experiment",
    subtitle = "Comparison across Conditions and Models"
  ) %>%
  cols_move_to_start(columns = c(`Task Stage`)) %>% # Move Task Stage column to the start
  cols_label(
    `Task Stage` = "Task Stage"
  ) %>%
  fmt_number(
    columns = matches("E2|E3"),
    decimals = 1  # Adjust the number of decimal places as needed
  ) %>%
  tab_spanner_delim(delim = "_") %>%
  tab_style(
    style = cell_fill(color = "gray95"),
    locations = cells_body(columns = TRUE, rows = TRUE)
  ) %>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray90"),
    locations = cells_body(columns = TRUE, rows = TRUE)
  ) %>%
  tab_style(
    style = cell_borders(sides = "top", color = "black", weight = px(1)),
    locations = cells_column_labels()
  ) %>%
  tab_options(
    quarto.disable_processing = TRUE,
    column_labels.font.size = 10,
    heading.title.font.size = 14,
    heading.subtitle.font.size = 12,
    table.width = pct(100), # Set the table width to 100% of the container
    table.font.size = 10,
    table.font.names = "Arial", # Specify a font that is available in both HTML and PDF
    data_row.padding = px(3), # Adjust padding for better rendering in PDF
    source_notes.font.size = 8 # Adjust font size for source notes
  ) %>%
  tab_footnote(
    footnote = "Note: Mean errors are calculated as the absolute difference between the predicted and actual values.",
    locations = cells_title(groups = "subtitle")
  )

  gt_table


# gtsave(gt_table, "table.png", expand = 10, vwidth = 1000, vheight = 500)

```


{{< pagebreak >}}

## 2nd GT

```{r}
#| label: tbl-pdf-html2
#| tbl-cap: "Mean Error by Fit Method, Task Stage, and Experiment" 

wide_data <- e23_tab %>%
  pivot_wider(
    names_from = c(Exp, Model, condit),
    values_from = mean_error,
    names_glue = "{Exp}_{Model}_{condit}"
  ) %>%
  arrange(Fit_Method, `Task Stage`)  # Sort for clarity

# Create a gt table with the wider data
gt_table <- wide_data %>%
  gt() %>%
  tab_header(
    title = "Mean Error by Fit Method, Task Stage, and Experiment",
    subtitle = "Comparison across Conditions and Models"
  ) %>%
  cols_move_to_start(columns = c(`Task Stage`)) %>% # Move Task Stage column to the start
  cols_label(
    `Task Stage` = "Task Stage"
  ) %>%
  fmt_number(
    columns = matches("E2|E3"),
    decimals = 1  # Adjust the number of decimal places as needed
  ) %>%
  tab_spanner_delim(delim = "_") %>%
  tab_style(
    style = cell_fill(color = "white"), # Ensure readability in grayscale
    locations = cells_body(columns = TRUE, rows = TRUE)
  ) %>%
  tab_style(
    style = cell_borders(sides = "top", color = "black", weight = px(1)),
    locations = cells_column_labels()
  ) %>%
  tab_options(
    column_labels.font.size = 10,
    heading.title.font.size = 14,
    heading.subtitle.font.size = 12,
    table.font.size = 10,
    quarto.disable_processing = TRUE
  ) %>%
  tab_footnote(
    footnote = "Note: Mean errors are calculated as the absolute difference between the predicted and actual values.",
    locations = cells_title(groups = "subtitle")
  )

gt_table
```

{{< pagebreak >}}





```{r}


# Assuming e23_tab is already created and is in the environment

# Pivot the data to spread 'condit' and 'Model' levels into columns
wide_data <- e23_tab %>%
  pivot_wider(
    names_from = c(Exp, Model, condit),
    values_from = mean_error,
    names_glue = "{Exp}_{Model}_{condit}"
  ) %>%
  arrange(Fit_Method, `Task Stage`)  # Sort for clarity

# Create a gt table with the wider data
gt_table <- wide_data %>%
  gt() %>%
  tab_header(
    title = "Mean Error by Fit Method, Task Stage, and Experiment",
    subtitle = "Comparison across Conditions and Models"
  ) %>%
  cols_move_to_start(columns = c(`Task Stage`)) %>% # Move Task Stage column to the start
  cols_label(
    `Task Stage` = "Task Stage"
  ) %>%
  fmt_number(
    columns = matches("E2|E3"),
    decimals = 1  # Adjust the number of decimal places as needed
  ) %>%
  tab_spanner_delim(delim = "_") %>%
  tab_style(
    style = cell_fill(color = "gray95"),
    locations = cells_body(columns = TRUE, rows = TRUE)
  ) %>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray90"),
    locations = cells_body(columns = TRUE, rows = TRUE)
  ) %>%
  tab_style(
    style = cell_borders(sides = "top", color = "black", weight = px(1)),
    locations = cells_column_labels()
  ) %>%
  tab_options(
    column_labels.font.size = 10,
    heading.title.font.size = 14,
    heading.subtitle.font.size = 12,
    table.width = pct(100), # Set the table width to 100% of the container
    table.font.size = 10,
    table.font.names = "Arial", # Specify a font that is available in both HTML and PDF
    data_row.padding = px(3), # Adjust padding for better rendering in PDF
    source_notes.font.size = 8 # Adjust font size for source notes
  ) %>%
  tab_footnote(
    footnote = "Note: Mean errors are calculated as the absolute difference between the predicted and actual values.",
    locations = cells_title(groups = "subtitle")
  )

#gt_table
# Save the table as an image file
# gtsave(gt_table, "table.png", expand = 10, vwidth = 1000, vheight = 500)
```