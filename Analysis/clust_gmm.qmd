



https://mhahsler.github.io/Introduction_to_Data_Mining_R_Examples/book/clustering-analysis.html#gaussian-mixture-models

https://cran.r-project.org/web/packages/mclust/vignettes/mclust.html

https://joshuamrosenberg.com/posts/lpa-in-r-using-mclust/


```{r}
pacman::p_load(tidyverse,here, mclust,furrr,future,broom)
select <- dplyr::select
mutate <- dplyr::mutate
filter <- dplyr::filter
map <- purrr::map

e1 <- readRDS(here("data/e1_08-04-23.rds"))


test <- e1 |> filter(expMode2 == "Test")
testAvg <- test %>% group_by(id, condit, vb, bandInt,bandType,tOrder) %>%
  summarise(nHits=sum(dist==0),vxMean=mean(vx),vxMed=median(vx),dist=mean(dist),sdist=mean(sdist),n=n(),Percent_Hit=nHits/n)


get_mclust_param <- function(model, param) {
  if (!is.null(model$parameters[[param]])) {
    return(model$parameters[[param]])
  } else {
    return(NA_real_)
  }
}


plan(multisession, workers = 8)



mcFree <- test |> select(id,condit,bandInt,vb,vx) %>% ungroup()


mcFree2 <- get_mcFree(mcFree, "id", "condit", c("bandInt", "vb", "vx", "vy"))


mcFit <- function(df, id_var, condit_var, clustvars,G=1:9) {
  df %>%
    select({{ id_var }}, {{ condit_var }}, !!!clustvars) %>%
    ungroup() %>%
    group_by({{ id_var }}, {{ condit_var }}) %>%
    nest(data = clustvars) %>%
    mutate(mc = future_map(data, ~Mclust(.x[c(clustvars)],G=G))) %>%
    mutate(
      bic= as.numeric(map(mc,"bic")),
      Gfit = as.numeric(map(mc, "G")),
      means = map(mc, get_mclust_param, param = "mean"),
      proportions = map(mc, get_mclust_param, param = "pro")
    )
}

mcFree1 <- mcFit(test, id, condit, c("vx"))
mcFreeVxb <- mcFit(test, id, condit, c("vxb"))
mcFree2 <- mcFit(test, id, condit, c("vx","vy"))

mcFreeVb <- mcFit(test, id, condit, c("vx","bandInt"))


df <- test |> select(id,condit,bandInt,vx) |> group_by(id,bandInt) |> mutate(m=mean(vx),sd=sd(vx),n=n())





# test1 <- dfs |> filter(id==1 || id==2) |> mutate(samps = map2(m,sd, ~rnorm(n=10,mean=.x,sd=.y)))
# test1 <- test1 %>% unnest(samps)


dfs <- test |> select(id,condit,bandInt,vx,vb) |> group_by(id,vb,condit) |> summarise(m=mean(vx),sd=sd(vx),med=median(vx),n=n(),se=sd/sqrt(n))

bdf <- dfs |> mutate(samps = map2(m,se, ~rnorm(n=100,mean=.x,sd=.y))) |> unnest(samps) %>% ungroup()
mcBoot2 <- mcFit(bdf, id, condit, c("samps"))

mcBoot2 |> group_by(condit) |> mutate(n=n()) |> 
   group_by(condit,Gfit) |> mutate(cg=n(),pg=cg/n) |>
  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+
  scale_x_continuous(breaks=seq(1,9))



```

Sample Stat bootstrap
```{r}

dfs <- test |> select(id,condit,bandInt,vx,vb) |> group_by(id,vb,condit) |> summarise(m=mean(vx),sd=sd(vx),med=median(vx),n=n(),se=sd/sqrt(n))

bdf <- dfs |> mutate(samps = map2(m,se, ~rnorm(n=100,mean=.x,sd=.y))) |> unnest(samps) %>% ungroup()
mcBoot2 <- mcFit(bdf, id, condit, c("samps"))

mcBoot2 |> group_by(condit) |> mutate(n=n()) |> 
   group_by(condit,Gfit) |> mutate(cg=n(),pg=cg/n) |>
  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+
  scale_x_continuous(breaks=seq(1,9))



dfs2 <- test |> select(id,condit,bandInt,vx,vb,vxb) |> group_by(id,vb,condit) |> summarise(m=mean(vxb),sd=sd(vxb),med=median(vxb),n=n(),se=sd/sqrt(n))

bdf2 <- dfs2 |> mutate(samps = map2(m,se, ~rnorm(n=100,mean=.x,sd=.y))) |> unnest(samps) %>% ungroup()
mcBoot2b <- mcFit(bdf2, id, condit, c("samps"))

mcBoot2b |> group_by(condit) |> mutate(n=n()) |> 
   group_by(condit,Gfit) |> mutate(cg=n(),pg=cg/n) |>
  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+
  scale_x_continuous(breaks=seq(1,9))




```



Empirical Bootstrap

```{r}

# Define the bootstrap function
bootstrap <- function(x, n) {
  sample(x, size = n, replace = TRUE)
}

# Apply the bootstrap function to your data
bdf2 <- test %>%
  select(id, condit, bandInt, vx, vb, vxb) %>%
  group_by(id, vb, condit) %>%
  summarise(vxb_bootstrap = list(bootstrap(vx, 20)), .groups = "drop") %>%
  unnest(vxb_bootstrap)

eb1 <- mcFit(bdf2, id, condit, c("vxb_bootstrap"))

eb1 |> group_by(condit) |> mutate(n=n()) |> 
   group_by(condit,Gfit) |> mutate(cg=n(),pg=cg/n) |>
  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+
  scale_x_continuous(breaks=seq(1,9))


eb2<- test %>%
  select(id, condit, bandInt, vx, vb, vxb) %>%
  group_by(id, vb, condit) %>%
  summarise(vxb_bootstrap = list(bootstrap(vx, 100)), .groups = "drop") %>%
  unnest(vxb_bootstrap) %>% mcFit(.,id,condit,c("vxb_bootstrap"))

eb2 |> group_by(condit) |> mutate(n=n()) |> 
   group_by(condit,Gfit) |> mutate(cg=n(),pg=cg/n) |>
  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+
  scale_x_continuous(breaks=seq(1,9))

```


```{r}

lm1 <- lmer(vx~)


```






Population Clustering
```{r}

bic <- mclustBIC(test$vx)
plot(bic)
mod1 <- Mclust(test$vx,x=bic)
summary(mod1,parameters=TRUE)

bic <- mclustBIC(c(test$vx,test$vy))
plot(bic)

bic <- mclustBIC(c(test$sdist))
plot(bic)

bic <- mclustBIC(c(test$dist))
plot(bic)

bic <- mclustBIC(c(test$dist,test$vx))
plot(bic)



bic <- mclustBIC(c(test$vx,test$bandInt))
plot(bic)
summary(bic)
```


 
 



```{r}
mv4 <- mclustBIC(subset(test,select = c(vx,bandInt)),
                 G=1:7,
                 modelNames=c("EII", "VVI", "EEE", "VVV"))
 y <- mv4%>%
        as.data.frame.matrix() %>%
        rownames_to_column("n_mixtures") %>%
        rename(`Constrained variance, fixed covariance` = EII, 
               `Freed variance, fixed covariance` = VVI,
               `Constrained variance, constrained covariance` = EEE,
               `Freed variance, freed covariance` = VVV)
 
to_plot <- y %>%  gather(`Covariance matrix structure`, val, -n_mixtures) %>% 
    mutate(`Covariance matrix structure` = as.factor(`Covariance matrix structure`),
           val = abs(val)) # this is to make the BIC values positive (to align with more common formula / interpretation of BIC)
ggplot(to_plot, aes(x = n_mixtures, y = val, color = `Covariance matrix structure`, group = `Covariance matrix structure`)) +
    geom_line() +
    geom_point() +
    ylab("BIC (smaller value is better)") 


```


```{r}
m = Mclust(test$vx)
test$vx


summary(m)

mv <- Mclust(subset(test, condit == "Varied", select = vx))
summary(mv)
plot(mv, what = "classification")

mc <- Mclust(subset(test, condit == "Constant", select = vx))
summary(mc)
plot(mc, what = "classification")



mv2 <- densityMclust(subset(test, condit == "Varied", select = c(vxb,vy)))
summary(mv2)
plot(mv2, what = "density",type="persp")
plot(mv2, what = "BIC")


mv3 <- mclustBIC(subset(test, condit == "Varied", select = vx),
                 G=1:7)
 y <- mv3%>%
        as.data.frame.matrix() %>%
        rownames_to_column("n_mixtures") %>%
        rename(`Constrained variance, constrained covariance` = E,
               `Freed variance, freed covariance` = V)

plot(mc, what = "classification")

mc <- Mclust(subset(test, condit == "Constant", select = vx),G=6)
summary(mc)
tidy(mc)
glance(mc)
```

Vx and bandInt
```{r}

mcFreeVb <- mcFit(test, id, condit, c("vx","bandInt"),G=1:6)



mcFreeVb %>% group_by(condit) |> mutate(n=n()) |> 
   group_by(condit,Gfit) |> mutate(cg=n(),pg=cg/n) |>
  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+
  scale_x_continuous(breaks=seq(1,9))

mcFreeVb2 <- mcFit(test, id, condit, c("vxb","bandInt"),G=1:6)

mcFreeVb2 %>% group_by(condit) |> mutate(n=n()) |> 
   group_by(condit,Gfit) |> mutate(cg=n(),pg=cg/n) |>
  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+
  scale_x_continuous(breaks=seq(1,9))


mcFreeVb3 <- mcFit(test, id, condit, c("vxb","bandInt","vy"),G=1:6)

mcFreeVb3 %>% group_by(condit) |> mutate(n=n()) |> 
   group_by(condit,Gfit) |> mutate(cg=n(),pg=cg/n) |>
  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+
  scale_x_continuous(breaks=seq(1,9))


```


```{r}


mcFreeVb1 <- mcFit(test, id, condit, c("vx"),G=1:6)

mcFreeVb1 %>% group_by(condit) |> mutate(n=n()) |> 
   group_by(condit,Gfit) |> mutate(cg=n(),pg=cg/n) |>
  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+
  scale_x_continuous(breaks=seq(1,9))

mcFreeVb1b <- mcFit(test, id, condit, c("vxb"),G=1:6)

mcFreeVb1b %>% group_by(condit) |> mutate(n=n()) |> 
   group_by(condit,Gfit) |> mutate(cg=n(),pg=cg/n) |>
  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+
  scale_x_continuous(breaks=seq(1,9))


boot1 <- MclustBootstrap(mcFreeVb1b[[4]][[1]], nboot = 1000, type = "bs")
summary(boot1)



```

```{r}

mcFree <- test |> select(id,condit,bandInt,vb,vx) %>% ungroup()

mcFree <- mcFree %>%
  group_by(id,condit) %>%
  nest(data = c(bandInt, vb, vx)) %>%
  mutate(mc = future_map(data, ~MclustBootstrap(.x$vx))) 


mcFree <- mcFree %>% 
  mutate(
    Gfit = as.numeric(map(mc, "G")),
    means = map(mc, get_mclust_param, param = "mean"),
    proportions = map(mc, get_mclust_param, param = "pro")
  )

```



Fit free to each id
```{r}


mcFree <- test |> select(id,condit,bandInt,vb,vx) %>% ungroup()

mcFree <- mcFree %>%
  group_by(id,condit) %>%
  nest(data = c(bandInt, vb, vx)) %>%
  mutate(mc = future_map(data, ~Mclust(.x$vx))) 


mcFree <- mcFree %>% 
  mutate(
    Gfit = as.numeric(map(mc, "G")),
    means = map(mc, get_mclust_param, param = "mean"),
    proportions = map(mc, get_mclust_param, param = "pro")
  )

ggplot(mcFree,aes(x=condit,y=Gfit))+geom_boxplot()+geom_jitter()

ggplot(mcFree,aes(x=Gfit,fill=condit))+geom_bar(position=position_dodge())

# mcFree <- test |> select(id,condit,bandInt,vb,vx) %>% ungroup()
# mcFree <- mcFree |> group_by(id) |> nest(id) |> mutate(mc=map(vx, ~Mclust(.x$vx))) 
#   

plot(mcCondit6[[2]][[1]], what = "classification")
plot(mcCondit6[[2]][[2]], what = "classification")

k=summary(mcCondit6[[2]][[2]],parameters=TRUE)




```




Fit xy free to each id
```{r}


mcFree2 <- test |> select(id,condit,bandInt,vb,vx,vy) %>% ungroup()

mcFree2 <- mcFree2 %>%
  group_by(id,condit) %>%
  nest(data = c(bandInt, vb, vx,vy)) %>%
  mutate(mc = future_map(data, ~Mclust(c(.x$vx,.x$vy)))) 


mcFree2 <- mcFree2 %>% 
  mutate(
    Gfit = as.numeric(map(mc, "G")),
    means = map(mc, get_mclust_param, param = "mean"),
    proportions = map(mc, get_mclust_param, param = "pro")
  )

ggplot(mcFree2,aes(x=condit,y=Gfit))+geom_boxplot()+geom_jitter()

ggplot(mcFree2,aes(x=Gfit,fill=condit))+geom_bar(position=position_dodge())

# mcFree <- test |> select(id,condit,bandInt,vb,vx) %>% ungroup()
# mcFree <- mcFree |> group_by(id) |> nest(id) |> mutate(mc=map(vx, ~Mclust(.x$vx))) 
#   

plot(mcCondit6[[2]][[1]], what = "classification")
plot(mcCondit6[[2]][[2]], what = "classification")

k=summary(mcCondit6[[2]][[2]],parameters=TRUE)


```




Fit xy free to each id
```{r}


mcFree2b <- test |> select(id,condit,bandInt,vb,vx) %>% ungroup()

mcFree2b <- mcFree2b %>%
  group_by(id,condit) %>%
  nest(data = c(bandInt, vb, vx)) %>%
  mutate(mc = future_map(data, ~Mclust(c(.x$vx,.x$bandInt)))) 


mcFree2b <- mcFree2b %>% 
  mutate(
    Gfit = as.numeric(map(mc, "G")),
    means = map(mc, get_mclust_param, param = "mean"),
    proportions = map(mc, get_mclust_param, param = "pro")
  )

ggplot(mcFree2b,aes(x=condit,y=Gfit))+geom_boxplot()+geom_jitter()
ggplot(mcFree2b,aes(x=Gfit,fill=condit))+geom_bar(position=position_dodge())

mcFree2b %>% group_by(condit) |> mutate(n=n()) |> 
   group_by(condit,Gfit) |> mutate(cg=n(),pg=cg/n) |>
  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+
  scale_x_continuous(breaks=seq(1,9))

```

```{r}


mcFree2b <- test |> select(id,condit,bandInt,vb,vx,vy) %>% ungroup()

mcFree2b <- mcFree2b %>%
  group_by(id,condit) %>%
  nest(data = c(bandInt, vb, vx,vy)) %>%
  mutate(mc = future_map(data, ~Mclust(c(.x$vx,.x$bandInt,.x$vy)))) 


mcFree2b <- mcFree2b %>% 
  mutate(
    Gfit = as.numeric(map(mc, "G")),
    means = map(mc, get_mclust_param, param = "mean"),
    proportions = map(mc, get_mclust_param, param = "pro")
  )

ggplot(mcFree2b,aes(x=condit,y=Gfit))+geom_boxplot()+geom_jitter()
ggplot(mcFree2b,aes(x=Gfit,fill=condit))+geom_bar(position=position_dodge())

mcFree2b %>% group_by(condit) |> mutate(n=n()) |> 
   group_by(condit,Gfit) |> mutate(cg=n(),pg=cg/n) |>
  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+
  scale_x_continuous(breaks=seq(1,9))

```


```{r}

mcConditFree <- test |> select(condit,bandInt,vb,vx) %>% ungroup()

mcConditFree <- mcConditFree %>%
  group_by(condit) %>%
  nest(data = c(bandInt, vb, vx)) %>%
  reframe(mc = future_map(data, ~Mclust(.x$vx))) 


mcConditFree <- mcConditFree %>% 
  mutate(
    Gfit = as.numeric(map(mc, "G")),
    means = map(mc, get_mclust_param, param = "mean"),
    proportions = map(mc, get_mclust_param, param = "pro")
  )

mcCondit6 <- test |> select(condit,bandInt,vb,vx) %>% ungroup()

mcCondit6 <- mcCondit6 %>%
  group_by(condit) %>%
  nest(data = c(bandInt, vb, vx)) %>%
  reframe(mc = future_map(data, ~Mclust(.x$vx,G=6))) 


mcCondit6 <- mcCondit6 %>% 
  mutate(
    Gfit = as.numeric(map(mc, "G")),
    bic=as.numeric(map(mc,"bic")),
    means = map(mc, get_mclust_param, param = "mean"),
    proportions = map(mc, get_mclust_param, param = "pro")
  )


table(class,mcCondit6[[2]][[2]]$classification)

bic <- mclustBIC(test$vx)

```






```{r}
df <- test %>%
    select(id, condit, bandInt, vb, vx) %>%
    group_by(id) %>%
    nest(data = c(condit, bandInt, vb, vx)) 

# Define a function to apply the Mclust operation to one group
process_group <- function(group_data, group_id) {
    print(paste("Processing group", group_id))
    if(length(unique(group_data$vx))>=12) {
        Mclust(group_data$vx, G=6)
    } else {
        Mclust(rep(0, 12), G=6)  # dummy Mclust model
    }
}

# Apply the function to each group one by one
df$mc <- map2(df$data, df$id, process_group)






df <- df %>%
  mutate(
    means = map(mc, get_mclust_param, param = "mean"),
    proportions = map(mc, get_mclust_param, param = "pro")
  )


```



```{r}


centers <- tibble(
  cluster = factor(1:3),
  # number points in each cluster
  num_points = c(100, 150, 50),
  # x1 coordinate of cluster center
  x1 = c(5, 0, -3),
  # x2 coordinate of cluster center
  x2 = c(-1, 1, -2)
)

points <- centers %>%
  mutate(
    x1 = map2(num_points, x1, rnorm),
    x2 = map2(num_points, x2, rnorm)
  ) %>%
  select(-num_points, -cluster) %>%
  unnest(c(x1, x2))


m <- Mclust(points)



df <- df %>%
  mutate(
    mclust_success = map_lgl(mc, ~ !is.null(.x$parameters))
  ) %>%
  filter(mclust_success)

```

