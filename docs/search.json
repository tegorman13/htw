[
  {
    "objectID": "paper.html",
    "href": "paper.html",
    "title": "Manuscript",
    "section": "",
    "text": "HTML\n   \n  \n  \n    HTML (new window)\n  \n\n  \n    PDF\n   \n  \n  \n  \n    Manuscripty PDF",
    "crumbs": [
      "Manuscript"
    ]
  },
  {
    "objectID": "Simulations/simParameterRecovery.html",
    "href": "Simulations/simParameterRecovery.html",
    "title": "Parameter Recovery Simulations",
    "section": "",
    "text": "Parameter Recovery Simulations\nAssessing the parameter recovery of ALM and EXAM on synthetic data.\n\nCodepacman::p_load(tidyverse,data.table)\noptions(dplyr.summarise.inform=FALSE)\n\ninput.activation&lt;-function(x.target, c) { return(exp((-1*c)*(x.target-inputNodes)^2))}\n\noutput.activation&lt;-function(x.target, weights, c){\n  return(weights%*%input.activation(x.target, c))\n}\nmean.prediction&lt;-function(x.target, weights, c){\n  probability&lt;-output.activation(x.target, weights, c)/sum(output.activation(x.target, weights, c))\n  return(outputNodes%*%probability) # integer prediction\n}\n\nupdate.weights&lt;-function(x.new, y.new, weights, c, lr){t\n  yt.feedback.activation&lt;-exp(-1*c*(y.new-outputNodes)^2)\n  x.feedback.activation&lt;-output.activation(x.new, weights, c)\n  return(weights+lr*(y.feedback.activation-x.feedback.activation)%*%t(input.activation(x.new, c)))\n}\n\ntrain.alm&lt;-function(dat, c=0.05, lr=0.5, weights){\n   alm.train&lt;-rep(NA,nrow(dat))  \n  for (i in 1:nrow(dat)){\n    weights &lt;- update.weights(dat$input[i], dat$vx[i], weights, c, lr)\n    resp = mean.prediction(dat$input[i], weights, c)\n    alm.train[i]=resp\n    weights[weights&lt;0]=0\n  }\n  alm.train\n}\n\n# function to generate exam predictions\nexam.prediction&lt;-function(x.target, weights, c,trainVec){\n  #trainVec = sort(unique(x.learning))\n  nearestTrain = trainVec[which.min(abs(trainVec-x.target))]\n  aresp = mean.prediction(nearestTrain, weights, c)\n  xUnder = ifelse(min(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) - 1])\n  xOver = ifelse(max(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) + 1])\n  mUnder = mean.prediction(xUnder, weights, c)\n  mOver = mean.prediction(xOver, weights, c)\n  exam.output = round(aresp + ((mOver - mUnder) / (xOver - xUnder)) * (x.target - nearestTrain), 3)\n  exam.output\n}\n\n# Modify the sim_data function to accept the dataset as an argument\nsim_data &lt;- function(dat, c=0.5, lr=0.2, inNodes=7, outNodes=32, trainVec=c(5,6,7)) {\n  inputNodes &lt;&lt;- seq(1,7,length.out=inNodes*1)  \n  outputNodes &lt;&lt;- seq(50,1600,length.out=outNodes*1) \n  wm=matrix(.0000,nrow=length(outputNodes),ncol=length(inputNodes))\n  tt&lt;-trainTest.alm(dat, c, lr, wm, trainVec)\n}\n\ngen_train &lt;- function(trainVec=c(5,6,7),trainRep=10,noise=0){\n   bandVec=c(0,100,350,600,800,1000,1200)\n   ts &lt;- rep(seq(1,length(trainVec)),trainRep)\n   noiseVec=rnorm(length(ts),mean=0)*noise\n   if(noise==0) {noiseVec=noiseVec*0}\n   tibble(input=trainVec[ts],vx=bandVec[trainVec[ts]]+noiseVec)\n}\n\n\ntrainTest.alm&lt;-function(dat, c=0.05, lr=0.5, weights,testVec){\n   alm.train&lt;-rep(NA,nrow(dat))  \n  for (i in 1:nrow(dat)){\n    weights &lt;- update.weights(dat$input[i], dat$vx[i], weights, c, lr)\n    resp = mean.prediction(dat$input[i], weights, c)\n    alm.train[i]=resp\n    weights[weights&lt;0]=0\n  }\n  almPred &lt;- sapply(testVec,mean.prediction,weights,c)\n  examPred &lt;- sapply(testVec,exam.prediction,weights,c,trainVec=c(1,sort(unique(dat$input))))\n  list(almTrain=alm.train,almPred=almPred,examPred=examPred)\n}\n\nwrap_alm &lt;- function(par,dat, weights,lossFun){\n    c=par[1]; lr=par[2]\n   pred=train.alm(dat, c=c, lr=lr, weights=weights)\n   #sqrt(mean((dat$vx -pred)^2))\n   lossFun(dat$vx,pred)\n}\n\nwrap_optim &lt;- function(dat,lossFun=RMSE){\n  if(class(lossFun)==\"character\"){lossFun=get(lossFun)}\n  inputNodes = seq(1,7,1)  # \n  outputNodes = seq(50,1600,50)\n  wm=matrix(.00001,nrow=length(outputNodes),ncol=length(inputNodes))\n  testVec=seq(2,7)\n  \n  bounds_lower &lt;- c(.0000001, .00001)\n  bounds_upper &lt;- c(10, 10)\n  parmsLab &lt;- c(\"c\",\"lr\")\n  \n fit=optim(par=c(.1, .2),\n   fn = wrap_alm,\n   dat = dat, weights = wm,lossFun=lossFun,\n   method = \"L-BFGS-B\",\n   lower = bounds_lower,\n   upper = bounds_upper,\n   control = list(maxit = 1e5, pgtol = 0, factr = 0)\n )\n\n l=reduce(list(list(fit),fit$par,fit$value),append)\n names(l)=c(\"Fit\",parmsLab,\"Value\")\n return(l)\n}\n\n# implement wrap_optim using grid search\nwrap_grid &lt;- function(dat,lossFun=RMSE){\n  if(class(lossFun)==\"character\"){lossFun=get(lossFun)}  \n  inputNodes = seq(1,7,1)  # \n  outputNodes = seq(50,1600,50)\n  wm=matrix(.0000,nrow=length(outputNodes),ncol=length(inputNodes))\n  testVec=seq(2,7)\n  # define grid boundaries\n  cRange &lt;- seq(.000001, 5, length.out = 30)\n  lrRange &lt;- seq(.05, 5, length.out = 20)\n  # create grid\n  grid &lt;- expand.grid(c = cRange, lr = lrRange)\n  grid$Value &lt;- NA\n  # loop through grid\n  for (i in 1:nrow(grid)) {\n    grid$Value[i] &lt;- wrap_alm(par=c(grid[i,c(\"c\") ],grid[i,c(\"lr\") ]), dat=dat, weights=wm,lossFun=lossFun)\n  }\n\n  # find best fit\n  bestFit &lt;- grid[which.min(grid$Value), ]\n  bestFit$Value &lt;- min(grid$Value)\n\n  # return best fit, and best c and lr\n  return(list(Fit = bestFit, c = bestFit$c, lr = bestFit$lr, Value = bestFit$Value))\n \n}\n\n# sim_data &lt;- function(c=0.5, lr=0.2,noise=0,inNodes=7,outNodes=32,\n#                      trainVec=c(5,6,7),trainRep=10,testVec=seq(2,7)) {\n#   \n#   inputNodes &lt;&lt;- seq(1,7,length.out=inNodes*1)  \n#   outputNodes &lt;&lt;- seq(50,1600,length.out=outNodes*1) \n#   wm=matrix(.0000,nrow=length(outputNodes),ncol=length(inputNodes))\n#   dat&lt;-gen_train(trainVec,trainRep,noise)\n#   #trainDat &lt;- train.alm(dat,c,lr,wm)\n#   tt&lt;-trainTest.alm(dat,c,lr,wm,testVec)\n# }\n\n\nLoss Functions\n\nCodeRMSE &lt;- function(x,y){\n # print(\"rmseTrial\")\n  sqrt(mean((x-y)^2))\n}\n\nRMSE.blocked &lt;- function(x,y,blocks=6){\n  #print(\"rmseBlocked\")\n  data.table(x=x,y=y,t=seq(1,length(x))) %&gt;% \n    .[, `:=`(fitBins = cut(t, breaks = ..blocks, labels = c(1:..blocks)))] %&gt;%\n    .[, .(predMean = mean(x), obsMean = mean(y)), keyby = .(fitBins)] %&gt;%\n    .[, RMSE(predMean,obsMean)] %&gt;% as.numeric()\n}\n\nMAE &lt;- function(x, y) {\n  mean(abs(x - y))\n}\n\nMAPE &lt;- function(x, y) {\n  mean(abs((x - y) / y)) * 100\n}\n\nMedAE &lt;- function(x, y) {\n  median(abs(x - y))\n}\n\nHuberLoss &lt;- function(x, y, delta = 1) {\n  error &lt;- x - y\n  abs_error &lt;- abs(error)\n  loss &lt;- ifelse(abs_error &lt;= delta, 0.5 * error^2, delta * (abs_error - 0.5 * delta))\n  mean(loss)\n}\n\n\n\nCodek= parmVec %&gt;% group_by(simNum,c,lr) %&gt;% mutate(td = list(gen_train(trainRep = first(trainRep), noise = first(noise))),\n                                                 o=map(td,head,1),vx1=map(o,\"vx\"))\n\nparmVec &lt;- tibble(crossing(c = c(0.1), lr = c(0.1,0.4,1), noise = c(10), trainRep = c(20), lossFun = list(\"RMSE\", \"MAE\",\"MAPE\", \"MedAE\", \"HuberLoss\"), simNum = 1:10))\n\nsdp &lt;- parmVec %&gt;% group_by(simNum,c,lr) %&gt;% mutate(td = list(gen_train(trainRep = first(trainRep), noise = first(noise)))) %&gt;% ungroup() %&gt;%\n  mutate(d = pmap(list(td, c, lr), ~sim_data(dat = .x, c = ..2, lr = ..3)),\n         almTrainDat = map(d, \"almTrain\"),\n         almTestDat = map(d, \"almPred\"),\n         examTestDat = map(d, \"examPred\"),\n         fitO = map2(td, lossFun, ~wrap_optim(.x, .y)),\n         cFitO = map_dbl(fitO, \"c\"),\n         lrFitO = map_dbl(fitO, \"lr\"),\n         optimValO = map_dbl(fitO, \"Value\")) \n\nsdpResults &lt;- sdp %&gt;% \n  mutate(lossFun=as.character(lossFun),cDiff=cFitO-c,lrDiff=lrFitO-lr) %&gt;%\n  relocate(simNum,lossFun, c,lr,cFitO,lrFitO,optimValO,cDiff,lrDiff) %&gt;% \n  arrange(lossFun,lr,c)\n\naveraged_sdp &lt;- sdpResults %&gt;%\n  group_by(lossFun, c, lr) %&gt;%\n  summarise(\n    avg_cFitO = mean(cFitO),\n    avg_lrFitO = mean(lrFitO),\n    avg_optimValO = mean(optimValO),\n    avg_cDiff = mean(cDiff),\n    avg_lrDiff = mean(lrDiff),\n    .groups = \"drop\"\n  )\n\n\naveraged_sdp &lt;- sdpResults %&gt;%\n  group_by(lossFun, c, lr) %&gt;%\n  summarise(\n    avg_cFitO = mean(cFitO),\n    var_cFitO = var(cFitO),\n    avg_lrFitO = mean(lrFitO),\n    var_lrFitO = var(lrFitO),\n    avg_optimValO = mean(optimValO),\n    var_optimValO = var(optimValO),\n    avg_cDiff = mean(cDiff),\n    var_cDiff = var(cDiff),\n    avg_lrDiff = mean(lrDiff),\n    var_lrDiff = var(lrDiff),\n    .groups = \"drop\"\n  )\n\n# averaged_sdp &lt;- sdp %&gt;%\n#   group_by(c, lr, noise, trainRep, lossFun) %&gt;%\n#   summarise(across(starts_with(\"cFit\") | starts_with(\"lrFit\") | starts_with(\"optimVal\"), list(mean = mean), .names = \"mean_{.col}\")) %&gt;% \n#   mutate(lossFun=as.character(lossFun),\n#          diff_cFitO = abs(c - mean_cFitO),\n#          diff_lrFitO = abs(lr - mean_lrFitO)) %&gt;%\n#   relocate(noise, trainRep, lossFun, c, diff_cFitO, lr, diff_lrFitO) %&gt;%\n#   dplyr::arrange(c,lr)\n\n\n#k=parmVec %&gt;% group_by(simNum) %&gt;% mutate(td = list(gen_train(trainRep = first(trainRep), noise = first(noise))))\n#sdp &lt;- parmVec %&gt;% mutate(d = pmap(list(c, lr, noise, trainRep), ~sim_data(c = ..1, lr = ..2, noise = ..3, trainRep = ..4)),\n\n\n\nCodelibrary(plotly)\n\ng2= grid %&gt;% filter(Value&lt;160) %&gt;% arrange(Value)\n#plot_ly() %&gt;% add_trace(data=g2,x=grid$c,y=grid$lr,z=grid$Value,type=\"mesh3d\")\n \nplot_ly(data=g2,x=~c,y=~lr,z=~Value,type = 'mesh3d')\nplot_ly(g2,type = 'surface')\n\n\n\n\n\nfig &lt;- plot_ly(x = grid2$lr, y = grid2$c, z = grid2$Value) %&gt;% add_surface()\n\np &lt;- ggplot(g2, aes(c, lr, z= Value)) +\n  stat_contour(geom=\"polygon\",aes(fill=stat(level))) +\n  scale_fill_distiller(palette = \"Spectral\", direction = 1)\nggplotly(p)\n\n\np &lt;- ggplot(grid, aes(c, lr, z= Value,colour=stat(level))) +\n  geom_contour() \nggplotly(p)\n\n\nplot_ly(g2, x = ~c, y = ~lr, z = ~Value, type = 'scatter3d', mode = 'lines+markers',\n        opacity = 7, \n        line = list(width = 6, colorscale = 'Viridis', reverscale = FALSE)\n        )\n\n\n#install.packages(\"echarts4r\")\nlibrary(echarts4r)\ng2 |&gt; \n  e_charts(c) |&gt; \n  e_surface(lr, Value, wireframe = list(show = FALSE)) |&gt; \n  e_visual_map(Value)\n\n\nc lr noise trainRep lossFun mean_cFitO mean_cFitG mean_lrFitO mean_lrFitG mean_optimValO mean_optimValG  1 0.1 0.4 500 20 RMSE 4.94 5 1.00 1.09 3.30e- 5 0.115\n2 0.1 0.4 500 20 MAE 0.100 5 0.268 1.09 2.56e+ 1 0.0921 3 0.1 0.4 500 20 MAPE 0.101 5 0.268 1.09 2.31e+ 0 0.00954 4 0.1 0.4 500 20 MedAE 0.288 5 0.429 1.09 3.65e- 1 0.124\n5 0.1 0.4 500 20 HuberLoss 8.09 5 1.00 1.09 1.98e-17 0.00662",
    "crumbs": [
      "Simulations",
      "Parameter Recovery Simulations"
    ]
  },
  {
    "objectID": "Simulations/alm_learning.html",
    "href": "Simulations/alm_learning.html",
    "title": "ALM Learning",
    "section": "",
    "text": "pacman::p_load(tidyverse,data.table,patchwork,glue,knitr,kableExtra,here)\noptions(dplyr.summarise.inform=FALSE)\npurrr::walk(here(c(\"Functions/alm_functions.R\",\"Functions/Display_Functions.R\")),source)\n\n\nupdate.weights.with_noise &lt;- function(x.new, y.new, weights, c, lr, noise_sd){\n  y.feedback.activation &lt;- exp(-1 * c * (y.new - outputNodes)^2)\n  x.feedback.activation &lt;- output.activation(x.new, weights, c)\n  weight_updates &lt;- lr * (y.feedback.activation - x.feedback.activation) %*% t(input.activation(x.new, c))\n  noise &lt;- matrix(rnorm(nrow(weight_updates) * ncol(weight_updates), sd = noise_sd), \n                  nrow = nrow(weight_updates), ncol = ncol(weight_updates))\n  updated_weights &lt;- weights + weight_updates + noise\n  return(updated_weights)\n}\n\n\nupdate.weights&lt;-function(x.new, y.new, weights, c, lr, noise_sd = NULL){\n  y.feedback.activation&lt;-exp(-1*c*(y.new-outputNodes)^2)\n  x.feedback.activation&lt;-output.activation(x.new, weights, c)\n  return(weights+lr*(y.feedback.activation-x.feedback.activation)%*%t(input.activation(x.new, c)))\n}\n\nsim_data &lt;- function(dat, c=0.5, lr=0.2, inNodes=7, outNodes=32, trainVec=c(5,6,7),noise_sd=0,update_func=\"update.weights\" ) {\n  inputNodes &lt;&lt;- seq(1,7,length.out=inNodes*1)  \n  outputNodes &lt;&lt;- seq(50,1600,length.out=outNodes*1) \n  #print(length(outputNodes))\n  wm=matrix(.0000,nrow=length(outputNodes),ncol=length(inputNodes))\n  # wm=matrix(rnorm(length(outputNodes)*length(inputNodes),.1,5),nrow=length(outputNodes),ncol=length(inputNodes))\n  tt&lt;-trainTest.alm(dat, c, lr, wm, trainVec, update_func, noise_sd)\n}   \n\ntrainTest.alm &lt;- function(dat, c=0.05, lr=0.5, weights, testVec, update_func, noise_sd) {\n   alm.train &lt;- rep(NA, nrow(dat))  \n   update_func=get(update_func)\n   decay_factor = 0.79\n  for (i in 1:nrow(dat)) {\n    #lr = lr * decay_factor^i\n    resp = mean.prediction(dat$input[i], weights, c)\n    weights &lt;- update_func(dat$input[i], dat$vx[i], weights, c, lr, noise_sd)\n    alm.train[i] = resp\n    weights[weights&lt;0] = 0\n  }\n  almPred &lt;- sapply(testVec, mean.prediction, weights, c)\n  examPred &lt;- sapply(testVec, exam.prediction, weights, c, trainVec=c(1,sort(unique(dat$input))))\n  list(almTrain=alm.train, almPred=almPred, examPred=examPred,weights=weights)\n}\n\nModel learning, and resulting weights, across range of parameter values\n\ntibble(crossing(\n  c = c(.5,5),lr = c(.05,1),noise = c(0),\n  inNodes=c(7),outNodes=c(32),\n  trainVec=list(list(5,6,7)),trainRep = c(9),\n  lossFun = list(\"MAE\"),\n  simNum = 1:1,\n  update_func = list(\"update.weights\"),update_func_name = c(\"uW\"),\n  noise_sd = c(0)\n)) %&gt;%   mutate(id=seq(1,nrow(.)),td = pmap(list(trainVec,trainRep,noise),~gen_train(trainVec=.x,trainRep=..2,noise=..3) )) %&gt;% \n  ungroup() %&gt;%\n  mutate(d = pmap(list(td, c, lr, update_func,noise_sd,inNodes,outNodes), \n                  ~sim_data(dat = .x, c = ..2, lr = ..3, update_func = ..4, noise_sd = ..5,inNodes=..6,outNodes=..7)),\n         almTrainDat = map(d, \"almTrain\"),weights=map(d,\"weights\"))%&gt;%\n  unnest(c(almTrainDat, td)) %&gt;% select(-d) %&gt;% mutate(input=as.factor(input)) %T&gt;%\n  {pf(.) } %&gt;% trainTab\n\ncleaner imlementation of above\n\n# Define parameters\nparams &lt;- tibble(crossing(\n  c = c(.5,5),\n  lr = c(.05,1),\n  noise = c(0),\n  inNodes = c(7),\n  outNodes = c(32),\n  trainVec = list(list(5,6,7)),\n  trainRep = c(9),\n  lossFun = list(\"MAE\"),\n  simNum = 1:1,\n  update_func = list(\"update.weights\"),\n  update_func_name = c(\"uW\"),\n  noise_sd = c(0)\n))\n\n# Generate training data\nparams &lt;- params %&gt;% \n  mutate(\n    id = seq(1, nrow(.)),\n    td = pmap(list(trainVec, trainRep, noise), ~gen_train(trainVec = .x, trainRep = ..2, noise = ..3))\n  )\n\n# Run simulations\nparams &lt;- params %&gt;% \n  mutate(\n    d = pmap(list(td, c, lr, update_func, noise_sd, inNodes, outNodes), \n              ~sim_data(dat = .x, c = ..2, lr = ..3, update_func = ..4, noise_sd = ..5, inNodes = ..6, outNodes = ..7)),\n    almTrainDat = map(d, \"almTrain\"),\n    weights = map(d, \"weights\")\n  )\n\n# Unnest and select relevant columns\nparams &lt;- params %&gt;% \n  unnest(c(almTrainDat, td)) %&gt;% \n  select(-d) %&gt;% \n  mutate(input = as.factor(input))\n\n# Apply pf function and trainTab\nresult &lt;- params %T&gt;% \n  {pf(.) } %&gt;% \n  trainTab\n\n\n# Define a function to fit the model and return the parameters\nfit_model &lt;- function(data, initial_c, initial_lr) {\n  # Fit the model here and extract the parameters\n  # This is a placeholder and should be replaced with your actual model fitting code\n  fit_c = initial_c #+ rnorm(1, 0, 0.1)\n  fit_lr = initial_lr #+ rnorm(1, 0, 0.1)\n  \n  tibble(\n    gen_c = initial_c,\n    gen_lr = initial_lr,\n    fit_c = fit_c,\n    fit_lr = fit_lr,\n    error_c = fit_c - initial_c,\n    error_lr = fit_lr - initial_lr\n  )\n}\n\nparams &lt;- tibble(crossing(\n  c = seq(.01,2,length.out=10),\n  lr = seq(.01,2,length.out=10)\n))\n# Run the simulations\nresults &lt;- params %&gt;%\n  mutate(simulation = map2(c, lr, ~fit_model(td, .x, .y))) %&gt;%\n  unnest(simulation)\n\n\nfit_model &lt;- function(data, initial_c, initial_lr) {\n  # Simulate data from the ALM model\n  sim_data &lt;- sim_data(dat = data, c = initial_c, lr = initial_lr, \n                       update_func = \"update.weights\", noise_sd = 0, \n                       inNodes = 7, outNodes = 32)\n  \n  # Extract the fitted parameters\n  fit_c = sim_data$c\n  fit_lr = sim_data$lr\n  \n  tibble(\n    gen_c = initial_c,\n    gen_lr = initial_lr,\n    fit_c = fit_c,\n    fit_lr = fit_lr,\n    error_c = fit_c - initial_c,\n    error_lr = fit_lr - initial_lr\n  )\n}\n\n# Run the simulations\nresults &lt;- params %&gt;%\n  mutate(simulation = map2(c, lr, ~fit_model(td, .x, .y))) %&gt;%\n  unnest(simulation)\n\n# Print the results\nprint(results)\n\n# Print the results\nprint(results %&gt;% select(c,lr,gen_c,gen_lr,fit_c,fit_lr,error_c,error_lr))\n\nggplot(results, aes(x = gen_c, y = fit_c)) +\n  geom_point() +\n  geom_abline(slope = 1, intercept = 0, color = \"red\") +\n  labs(x = \"Generating c\", y = \"Fitted c\", title = \"Parameter Recovery for c\")\n\n# Plot for lr parameter\nggplot(results, aes(x = gen_lr, y = fit_lr)) +\n  geom_point() +\n  geom_abline(slope = 1, intercept = 0, color = \"red\") +\n  labs(x = \"Generating lr\", y = \"Fitted lr\", title = \"Parameter Recovery for lr\")\n\nSelf contained\n\npacman::p_load(tidyverse,data.table,knitr,kableExtra,glue)\ninput.activation&lt;-function(x.target, c){return(exp((-1*c)*(x.target-inputNodes)^2))}\noutput.activation&lt;-function(x.target, weights, c){return(weights%*%input.activation(x.target, c))}\nmean.prediction&lt;-function(x.target, weights, c){\n  probability&lt;-output.activation(x.target, weights, c)/sum(output.activation(x.target, weights, c))\n  return(outputNodes%*%probability) # integer prediction\n}\nupdate.weights&lt;-function(x.new, y.new, weights, c, lr){\n  y.feedback.activation&lt;-exp(-1*c*(y.new-outputNodes)^2)\n  x.feedback.activation&lt;-output.activation(x.new, weights, c)\n  return(weights+lr*(y.feedback.activation-x.feedback.activation)%*%t(input.activation(x.new, c)))\n}\ntrain.alm&lt;-function(dat, c=0.05, lr=0.5, weights){\n   alm.train&lt;-rep(NA,nrow(dat))  \n  for (i in 1:nrow(dat)){\n    weights &lt;- update.weights(dat$input[i], dat$vx[i], weights, c, lr)\n    resp = mean.prediction(dat$input[i], weights, c)\n    alm.train[i]=resp\n    weights[weights&lt;0]=0\n  } \n  list(almTrain = alm.train, weights = weights)\n  }\nsim_train &lt;- function(dat, c=0.5, lr=0.2, inNodes=7, outNodes=32, trainVec=c(5,6,7),noise_sd=0,update_func=\"update.weights\" ) {\n  inputNodes &lt;&lt;- seq(1,7,length.out=inNodes*1)  \n  outputNodes &lt;&lt;- seq(50,1600,length.out=outNodes*1) \n  wm=matrix(.0000,nrow=length(outputNodes),ncol=length(inputNodes))\n  tt&lt;-train.alm(dat, c, lr, wm)\n} \ngen_train &lt;- function(trainVec = c(5, 6, 7), trainRep = 3, noise = 0) {\n    bandVec &lt;- c(0, 100, 350, 600, 800, 1000, 1200)\n    if (class(trainVec) == \"list\") {trainVec &lt;- unlist(trainVec)}\n    ts &lt;- rep(seq(1, length(trainVec)), trainRep)\n    noiseVec &lt;- rnorm(length(ts), mean = 0) * noise\n    if (noise == 0) {noiseVec &lt;- noiseVec * 0}\n    tibble(trial = seq(1, length(ts)), input = trainVec[ts], vx = bandVec[trainVec[ts]] + noiseVec)\n}\n\ntibble(crossing(\n    c = c(.5, 5), lr = c(.05, 1), noise = c(0),\n    inNodes = c(7), outNodes = c(32),\n    trainVec = list(list(5, 6, 7)), trainRep = c(9),\n    lossFun = list(\"MAE\"),\n    simNum = 1:1,\n)) %&gt;%\n    mutate(id = seq(1, nrow(.)), td = pmap(list(trainVec, trainRep, noise), ~ gen_train(trainVec = .x, trainRep = ..2, noise = ..3))) %&gt;%\n    ungroup() %&gt;%\n    mutate(\n        d = pmap(\n            list(td, c, lr,inNodes, outNodes),\n            ~ sim_train(dat = .x, c = ..2, lr = ..3, inNodes = ..4, outNodes = ..5)\n        ),\n        almTrainDat = map(d, \"almTrain\"), weights = map(d, \"weights\")\n    ) %&gt;%\n    unnest(c(almTrainDat, td)) %&gt;%\n    select(-d) %&gt;%\n    mutate(input = as.factor(input)) %&gt;%\n    trainTab()\n\ntibble(crossing(\n    c = c(.5, 5), lr = c(.05, 1), noise = c(0),\n    inNodes = c(7), outNodes = c(32),\n    trainVec = list(list(5, 6, 7)), trainRep = c(9),\n    lossFun = list(\"MAE\"),\n    simNum = 1:1,\n)) %&gt;%\n    mutate(id = seq(1, nrow(.)), td = pmap(list(trainVec, trainRep, noise), ~ gen_train(trainVec = .x, trainRep = ..2, noise = ..3))) %&gt;%\n    ungroup() %&gt;%\n    mutate(\n        d = pmap(\n            list(td, c, lr,inNodes, outNodes),\n            ~ sim_train(dat = .x, c = ..2, lr = ..3, inNodes = ..4, outNodes = ..5)\n        ),\n        almTrainDat = map(d, \"almTrain\"), weights = map(d, \"weights\")\n    ) %&gt;%\n    unnest(c(almTrainDat, td)) %&gt;%\n    select(-d) %&gt;%\n    mutate(input = as.factor(input)) %&gt;%\n    trainTab()\n\nOptimize for single decay curve\ngenerate data that follows an exponetial decay function of error over trials, inspect ability of model to fit that data.\n\ngt &lt;- gen_train(trainVec=c(5,6,7),trainRep=18) %&gt;% mutate(cor=vx,err=(400-0)*exp(-.1*seq(1,n()))+0,vx=cor-err)\n\nbias &lt;- 1000; \ngt &lt;- gen_train(trainVec=c(5,6,7),trainRep=228,noise=0) %&gt;% mutate(\n  cor = vx,\n  err = (bias - 0) * exp(-.005 * seq(1, n())) + 0,\n  en = map2_dbl(err,cor, ~rnorm(n = 1, mean = .y, sd = .x/2)),\n  enAvg = map2_dbl(err,cor, ~mean(rnorm(n = 1, mean = .y, sd = .x))),\n  weight = (seq(1, n()) - 1) / (n() - 1),\n  vx = (weight*en)+bias*(1-weight),\n  vx=en\n)\ngt %&gt;% ggplot(aes(x = trial, y = vx, color = as.factor(input))) +\n  geom_line() + ylim(c(-10,1600))\n\n\nk=wrap_optim(gt,lossFun = \"MAE\")\ns=sim_data(dat=mutate(gt,vx=cor),c=k %&gt;% pluck(\"c\"),lr= k %&gt;% pluck(\"lr\"))\nggp &lt;- gt %&gt;% mutate(pred=s %&gt;% pluck(\"almTrain\"),c=k %&gt;% pluck(\"c\"),lr= k %&gt;% pluck(\"lr\"),input=as.factor(input)) %&gt;%  \n  ggplot(aes(x = trial, y = pred, color = input)) +\n  geom_line() + ylim(c(0,1600))\nggo &lt;-  gt %&gt;% ggplot(aes(x = trial, y = vx, color = as.factor(input))) +\n  geom_line() + ylim(c(-400,1600))\n\nggo+ggp\n\n\n#k = t[1,]\n#image(matrix(unlist(k$weights),nrow=7))\n# mutate(md=map(weights,~matrix(unlist(.),nrow=7)))\n\nwms &lt;- t %&gt;% filter(trial==1) %&gt;% \n  mutate(k=map(weights,~ as.data.frame(matrix(unlist(.),nrow=7)) %&gt;% \n                 rownames_to_column(\"Input\") %&gt;%\n                 pivot_longer(-c(Input), names_to = \"Output\",\n                              names_prefix = \"V\", values_to = \"weight\") %&gt;%  mutate(Output= fct_relevel(Output,unique(.$Output)))))\n\nwms %&gt;% unnest(k) %&gt;% ggplot(.,aes(x=Input, y=Output, fill=weight)) + \n  geom_raster() + \n  scale_fill_viridis_c()+facet_wrap(~id+c)\n\n\n\nmd=matrix(unlist(k$weights),nrow=7)\nkd=as.data.frame(matrix(unlist(k$weights),nrow=7))%&gt;%\n  rownames_to_column(\"Input\") %&gt;%\n  pivot_longer(-c(Input), names_to = \"Output\",names_prefix = \"V\", values_to = \"weight\")\n\nkd %&gt;% \n  mutate(Output= fct_relevel(Output,unique(kd$Output))) %&gt;%\n  ggplot(aes(x=Input, y=Output, fill=weight)) + \n  geom_raster() + \n  scale_fill_viridis_c()\n\n\npv &lt;- t &lt;- parmVec &lt;- tibble(crossing(\n  c = c(0.00003),\n  lr = c(0.051),\n  noise = c(0),\n  inNodes=c(7),\n  outNodes=c(32),\n  trainVec=list(list(1,5,6,7),list(5,6,7)),\n  trainRep = c(4),\n  lossFun = list(\"MAE\"),\n  simNum = 1:1,\n  update_func = list(\"update.weights\"),\n  update_func_name = c(\"update.weights\"),\n  noise_sd = c(0)\n)) %&gt;% mutate(id=seq(1,nrow(.)))\n\ninspect learning\n\nparmVec &lt;- tibble(crossing(\n  c = c(0.1),\n  lr = c(0.1, 0.4, 1),\n  noise = c(10),\n  trainRep = c(20),\n  lossFun = list(\"MAE\"),\n  simNum = 1:10,\n  update_func = list(\"update.weights\", \"update.weights.with_noise\"),\n  update_func_name = c(\"update.weights\", \"update.weights.with_noise\"),\n  noise_sd = c(0.1, 0.5)\n))\n\n\n\nt &lt;- parmVec %&gt;%\n  group_by(simNum, c, lr, update_func,noise_sd) %&gt;%\n  mutate(td = list(gen_train(trainRep = first(trainRep), noise = first(noise)))) %&gt;%\n  ungroup() %&gt;%\n  mutate(d = pmap(list(td, c, lr, update_func,noise_sd), \n                  ~sim_data(dat = .x, c = ..2, lr = ..3, update_func = ..4, noise_sd = ..5)),\n         almTrainDat = map(d, \"almTrain\"))%&gt;%\n  unnest(almTrainDat, td) %&gt;%\n  select(-d) %&gt;% \n  mutate(trial = rep(seq(1, nrow(.)/10), 10),input=as.factor(input))\n\nt %&gt;% group_by(lr, update_func_name, simNum, trial, input) %&gt;%\n  summarize(almTrainDat = mean(almTrainDat), .groups = \"drop\") %&gt;%\n  ggplot(aes(x = trial, y = almTrainDat, color = input)) +\n  geom_line() + ylim(c(0,1300))+\n  facet_grid(lr ~ update_func_name)\n\n\nparmVec &lt;- tibble(crossing(c = c(0.1), lr = c(0.1,0.4,1), \n                           noise = c(10), trainRep = c(20), lossFun = list(\"MAE\"), simNum = 1))\n\nt &lt;- parmVec %&gt;% group_by(simNum,c,lr) %&gt;% mutate(td = list(gen_train(trainRep = first(trainRep), noise = first(noise)))) %&gt;% ungroup() %&gt;%\n  mutate(d = pmap(list(td, c, lr), ~sim_data(dat = .x, c = ..2, lr = ..3)),\n         almTrainDat = map(d, \"almTrain\"))\n\n# extract and plot each almTrainDat \nalmTrainDat &lt;- parmVec %&gt;% group_by(simNum,c,lr) %&gt;% mutate(td = list(gen_train(trainRep = first(trainRep), noise = first(noise)))) %&gt;% ungroup() %&gt;%\n  mutate(d = pmap(list(td, c, lr), ~sim_data(dat = .x, c = ..2, lr = ..3)),\n         almTrainDat = map(d, \"almTrain\")) %&gt;% unnest(almTrainDat) %&gt;% select(-d)\n\n# For each unique value of lr, plot the learning curve, showing almTrainDat as a function of trial number, color by input, and facet by lr. Convert input to factor first. \n\nalmTrainDat %&gt;% group_by(lr) %&gt;% mutate(trial = seq(1,n()),input= as.factor(input)) %&gt;% ggplot(aes(x=trial,y=almTrainDat,color=input)) + geom_line() + facet_wrap(~lr)\n\n\n\nparmVec &lt;- tibble(crossing(c = c(0.1), lr = c(.01,.05,0.1), noise = c(5), trainRep = c(20), lossFun = list(\"MAE\"), simNum = 1:30))\n\n# The rest of the code remains the same\nalmTrainDat &lt;- parmVec %&gt;% group_by(simNum,c,lr) %&gt;% mutate(td = list(gen_train(trainRep = first(trainRep), noise = first(noise)))) %&gt;% ungroup() %&gt;%\n  mutate(d = pmap(list(td, c, lr), ~sim_data(dat = .x, c = ..2, lr = ..3)),\n         almTrainDat = map(d, \"almTrain\")) %&gt;% unnest(almTrainDat,td) %&gt;% select(-d) %&gt;%\n  mutate(trial = rep(seq(1, nrow(.)/30), 30),input=as.factor(input))\n\n\nmean_sd_almTrainDat &lt;- almTrainDat %&gt;%\n  group_by(lr,input, trial) %&gt;%\n  summarise(avg_almTrainDat = mean(almTrainDat), sd_almTrainDat = sd(almTrainDat), .groups = 'drop')\n\n# Check the results\nhead(mean_sd_almTrainDat)\n\n\nggplot(mean_sd_almTrainDat, aes(x = trial, y = avg_almTrainDat,color=input)) +\n   geom_line() +\n  geom_errorbar(aes(ymin = avg_almTrainDat - sd_almTrainDat, ymax = avg_almTrainDat + sd_almTrainDat), width = 0.2) +\n  facet_wrap(~lr) +\n  labs(title = \"ALM Train Data: Mean and Variance Over Trials\",\n       x = \"Trial\",\n       y = \"Average ALM Train Data\") + ylim(c(0,1300))+\n  theme_minimal()\n\n\n#plot(seq(1,90), (200-.50)*exp(-.1*seq(1,90))+.50)\ngt &lt;- gen_train(trainVec=c(5,6,7),trainRep=18) %&gt;% mutate(cor=vx,err=(400-0)*exp(-.1*seq(1,n()))+0,vx=cor-err)\ngt &lt;- gen_train(trainVec=c(5,6,7),trainRep=28,noise=10) %&gt;% mutate(cor=vx,err=(100-0)*exp(-.03*seq(1,n()))+0,en=map_dbl(err,~rnorm(n=1,mean=0,sd=.x)),vx1=cor-err,vx2=cor-en)\n\ngt &lt;- gen_train(trainVec=c(5,6,7),trainRep=28,noise=0) %&gt;% group_by(input) %&gt;% mutate(cor=vx,err=(200--10)*exp(-.01*seq(1,n()))+(-10),en=map(err,~rnorm(n=1,mean=0,sd=.x)),vx=cor-err)\n\ngt &lt;- gen_train(trainVec=c(5,6,7),trainRep=28,noise=10) %&gt;% mutate(cor=vx,\n            err=ifelse(seq(1, n()) &lt;= n()/2, (700-0)*exp(-.01*seq(1,n()))+0, (700-0)*exp(-.06*(seq(1,n())-n()/2))+0),\n            en=map(err,~rnorm(n=1,mean=0,sd=.x)),\n            vx=cor-err)\n\ngt &lt;- gen_train(trainVec=c(5,6,7),trainRep=28,noise=10) %&gt;%\n  mutate(\n    cor = vx,\n    err = (700 - 0) * exp(-0.03 * seq(1, n()) * (input / max(input))) + 0,\n    en = map(err, ~rnorm(n = 1, mean = 0, sd = .x)),\n    vx = cor - err\n  )\ngt &lt;- gen_train(trainVec=c(5,6,7),trainRep=28,noise=10) %&gt;% mutate(\n  cor = vx,\n  err = (700 - 1) * exp(-.03 * seq(1, n())) + 1,\n  en = map(err, ~rnorm(n = 1, mean = 0, sd = .x)),\n  weight = (seq(1, n()) - 1) / (n() - 1),\n  vx = cor * weight - err + abs(min(cor * weight - err)) + 1\n)",
    "crumbs": [
      "Simulations",
      "ALM Learning"
    ]
  },
  {
    "objectID": "Simulations/DeLosh97_Sim.html",
    "href": "Simulations/DeLosh97_Sim.html",
    "title": "Simulating DeLosh 1997",
    "section": "",
    "text": "Code#lapply(c('tidyverse','data.table','igraph','ggraph','kableExtra'),library,character.only=TRUE))\npacman::p_load(tidyverse,data.table,igraph,ggraph,kableExtra, patchwork) \npurrr::walk(here::here(c(\"Functions/Display_Functions.R\")),source)\nsource(here::here(\"Functions\",\"deLosh_data.R\"))\nCode#https://nrennie.rbind.io/blog/2022-06-06-creating-flowcharts-with-ggplot2/\ninNodes &lt;- seq(1,6,1) %&gt;% as.integer()\noutNodes &lt;- seq(300,1000,50)%&gt;% as.integer()\n\nstim &lt;- \"Stim\"\nresp &lt;- \"Response\"\ninFlow &lt;- tibble(expand.grid(from=stim,to=inNodes)) %&gt;% mutate_all(as.character)\noutFlow &lt;- tibble(expand.grid(from=outNodes,to=resp)) %&gt;% mutate_all(as.character)\n\ngd &lt;- tibble(expand.grid(from=inNodes,to=outNodes)) %&gt;% mutate_all(as.character) %&gt;%\n  rbind(inFlow,.) %&gt;% rbind(.,outFlow)\n\ng = graph_from_data_frame(gd,directed=TRUE)\ncoords2=layout_as_tree(g)\ncolnames(coords2)=c(\"y\",\"x\")\nodf &lt;- as_tibble(coords2) %&gt;% \n  mutate(label=vertex_attr(g,\"name\"),\n         type=c(\"stim\",rep(\"Input\",length(inNodes)),rep(\"Output\",length(outNodes)),\"Resp\"),\n         x=x*-1) %&gt;%\n  mutate(y=ifelse(type==\"Resp\",0,y),xmin=x-.05,xmax=x+.05,ymin=y-.35,ymax=y+.35)\n\nplot_edges = gd %&gt;% mutate(id=row_number()) %&gt;%\n  pivot_longer(cols=c(\"from\",\"to\"),names_to=\"s_e\",values_to=(\"label\")) %&gt;%\n                 mutate(label=as.character(label)) %&gt;% \n  group_by(id) %&gt;%\n  mutate(weight=sqrt(rnorm(1,mean=0,sd=10)^2)/10) %&gt;%\n  left_join(odf,by=\"label\") %&gt;%\n  mutate(xmin=xmin+.02,xmax=xmax-.02)\n\nggplot() + geom_rect(data = odf,\n            mapping = aes(xmin = xmin, ymin = ymin, \n                          xmax = xmax, ymax = ymax, \n                          fill = type, colour = type),alpha = 0.5) +\n  geom_text(data=odf,aes(x=x,y=y,label=label,size=3)) +\n  geom_path(data=plot_edges,mapping=aes(x=x,y=y,group=id,alpha=weight)) +\n  theme_void() + theme(legend.position = \"none\")\nCodelinear_function &lt;- function(x) 2.2 * x + 30\nexponential_function &lt;- function(x) 200 * (1 - exp(-x/25))\nquadratic_function &lt;- function(x) 210 - (x - 50)^2 / 12\n\nextrapLines &lt;- list(geom_vline(xintercept=30,color=\"black\",alpha=.4,linetype=\"dashed\"),\n                    geom_vline(xintercept=70,color=\"black\",alpha=.4,linetype=\"dashed\"))\n \nlinear_plot &lt;- ggplot(deLosh_data$human_data_linear, aes(x, y)) +\n    geom_point(shape=1) + stat_function(fun = linear_function, color = \"black\") +\n  labs(y=\"Response Magnitude\", title=\"Linear Function\",x=\"\") + extrapLines\n\nexponential_plot &lt;- ggplot(deLosh_data$human_data_exp, aes(x, y)) +\n  geom_point(aes(shape = \"Observed\", color = \"Observed\"),shape=1) + \n  stat_function(aes(color = \"True Function\"),fun = exponential_function, geom=\"line\")+\n  labs(x=\"Stimulus Magnitude\", title=\"Exponential Function\",y=\"\")  +\n  extrapLines +\n  scale_shape_manual(values = c(1)) +\n  scale_color_manual(values = c(\"Observed\" = \"black\", \"True Function\" = \"black\")) +\n  theme(legend.title = element_blank(), legend.position=\"top\") +\n  guides(color = guide_legend(override.aes = list(shape = c(1, NA), \n                                                  linetype = c(0, 1))))\n\nquadratic_plot &lt;- ggplot(deLosh_data$human_data_quad, aes(x = x, y = y)) +\n  geom_point( shape = 1) +\n  stat_function( fun = quadratic_function, geom = \"line\") +\n  labs(title=\"Quadratic Function\",x=\"\",y=\"\") + extrapLines\n\nlinear_plot + exponential_plot + quadratic_plot",
    "crumbs": [
      "Simulations",
      "Simulating DeLosh 1997"
    ]
  },
  {
    "objectID": "Simulations/DeLosh97_Sim.html#alm-definition",
    "href": "Simulations/DeLosh97_Sim.html#alm-definition",
    "title": "Simulating DeLosh 1997",
    "section": "ALM Definition",
    "text": "ALM Definition\n\n\nInput Activation\n\\[\na_i(X)=\\exp \\left|-\\gamma \\cdot\\left[X-X_i\\right]^2\\right|\n\\]\nOutput activation\n\\[\no_j(X)=\\Sigma_{i=1, M} w_{j i} \\cdot a_i(X)\n\\]\nOutput Probability\n\\[\nP\\left[Y_j \\mid X\\right]=o_j(X) / \\Sigma_{k=1, L} o_k(X)\n\\]\nMean Response\n\\[\nm(X)=\\Sigma_{j=1, L} Y_j \\cdot P\\left[Y_j \\mid X\\right]\n\\]\n\n\nFeedback Signal\n\\[\nf_j(Z)=e^{-c\\cdot(Z-Y_j)^2}\n\\]\nWeight Updates\n\\[\nw_{ji}(t+1)=w_{ji}(t)+\\alpha \\cdot {f_i(Z(t))-O_j(X(t))} \\cdot a_i(X(t))\n\\]\n\n\nInput node actvation\n\\[\nP[X_i|X] = \\frac{a_i(X)}{\\\\sum_{k=1}^Ma_k(X)}\n\\]\nSlope Computation\n\\[\nE[Y|X_i]=m(X_i) + \\bigg[\\frac{m(X_{i+1})-m(X_{i-1})}{X_{i+1} - X_{i-1}} \\bigg]\\cdot[X-X_i]\n\\]\n\n\n\nGenerate Response\n\nToggle Codealm.response &lt;- function(input = 1, c, input.layer, output.layer,weight.mat) {\n  input.activation &lt;- exp(-c * (input.layer - input)^2) / sum(exp(-c * (input.layer - input)^2))\n  output.activation &lt;- weight.mat %*% input.activation\n  output.probability &lt;- output.activation / sum(output.activation)\n  mean.response &lt;- sum(output.layer * output.probability)\n  list(mean.response = mean.response, input.activation = input.activation, output.activation = output.activation)\n}\n\n\nUpdate Weights Based on Feedback\n\nToggle Codealm.update &lt;- function(corResp, c, lr, output.layer, input.activation, output.activation, weight.mat) {\n  fz &lt;- exp(-c * (output.layer - corResp)^2)\n  teacherSignal &lt;- (fz - output.activation) * lr\n  wChange &lt;- teacherSignal %*% t(input.activation)\n  weight.mat &lt;- weight.mat + wChange\n  weight.mat[weight.mat &lt; 0] = 0\n  return(weight.mat)\n}\n\nalm.trial &lt;- function(input, corResp, c, lr, input.layer, output.layer, weight.mat) {\n  alm_resp &lt;- alm.response(input, c, input.layer,output.layer, weight.mat)\n  updated_weight.mat &lt;- alm.update(corResp, c, lr, output.layer, alm_resp$input.activation, alm_resp$output.activation, weight.mat)\n  return(list(mean.response = alm_resp$mean.response, weight.mat = updated_weight.mat))\n}\n\n\nExam Generalization\n\nToggle Codeexam.response &lt;- function(input, c, trainVec, input.layer = INPUT_LAYER_DEFAULT,output.layer = OUTPUT_LAYER_DEFAULT, weight.mat) {\n  nearestTrain &lt;- trainVec[which.min(abs(input - trainVec))]\n  aresp &lt;- alm.response(nearestTrain, c, input.layer = input.layer,output.layer = OUTPUT_LAYER_DEFAULT,weight.mat)$mean.response\n  \n  xUnder &lt;- ifelse(min(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) - 1])\n  xOver &lt;- ifelse(max(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) + 1])\n  \n  mUnder &lt;- alm.response(xUnder, c, input.layer = input.layer, output.layer, weight.mat)$mean.response\n  mOver &lt;- alm.response(xOver, c, input.layer = input.layer,output.layer, weight.mat)$mean.response\n  \n  exam.output &lt;- round(aresp + ((mOver - mUnder) / (xOver - xUnder)) * (input - nearestTrain), 3)\n  exam.output\n}\n\n\nSimulation Functions\n\nCode# simulation function\nalm.sim &lt;- function(dat, c, lr, input.layer = INPUT_LAYER_DEFAULT, output.layer = OUTPUT_LAYER_DEFAULT) {\n  weight.mat &lt;- matrix(0.00, nrow = length(output.layer), ncol = length(input.layer))\n  xt &lt;- dat$x\n  n &lt;- nrow(dat)\n  st &lt;- numeric(n) # Initialize the vector to store mean responses\n  for(i in 1:n) {\n    trial &lt;- alm.trial(dat$x[i], dat$y[i], c, lr, input.layer, output.layer, weight.mat)\n    weight.mat &lt;- trial$weight.mat\n    st[i] &lt;- trial$mean.response\n  }\n  dat &lt;- dat %&gt;% mutate(almResp = st)\n  return(list(d = dat, wm = weight.mat, c = c, lr = lr))\n}\n\n\nsimOrganize &lt;- function(simOut) {\n  dat &lt;- simOut$d\n  weight.mat &lt;- simOut$wm\n  c &lt;- simOut$c\n  lr &lt;- simOut$lr\n  trainX &lt;- unique(dat$x)\n  \n  almResp &lt;- generate.data(seq(0,100,.5), type = first(dat$type)) %&gt;% rowwise() %&gt;% \n    mutate(model = \"ALM\", resp = alm.response(x, c, input.layer = INPUT_LAYER_DEFAULT,output.layer = OUTPUT_LAYER_DEFAULT, weight.mat = weight.mat)$mean.response)\n  \n  examResp &lt;- generate.data(seq(0,100,.5), type = first(dat$type)) %&gt;% rowwise() %&gt;% \n    mutate(model = \"EXAM\", resp = exam.response(x, c, trainVec = trainX, input.layer = INPUT_LAYER_DEFAULT,output.layer = OUTPUT_LAYER_DEFAULT, weight.mat))\n  \n  organized_data &lt;- bind_rows(almResp, examResp) %&gt;% \n    mutate(type = first(dat$type),\n           error = abs(resp - y),\n           c = c,\n           lr = lr,\n           type = factor(type, levels = c(\"linear\", \"exponential\", \"quadratic\")),\n           test_region = ifelse(x %in% trainX, \"train\", \n                                ifelse(x &gt; min(trainX) & x &lt; max(trainX), \"interpolate\", \"extrapolate\")))\n  organized_data\n}\n\n\ngenerateSimData &lt;- function(density, envTypes, noise) {\n  reps &lt;- 200 / length(trainingBlocks[[density]])\n  map_dfr(envTypes, ~ \n            generate.data(rep(trainingBlocks[[density]], reps), type = .x, noise)) |&gt;\n    group_by(type) |&gt;\n    mutate(block = rep(1:reps, each = length(trainingBlocks[[density]])),\n           trial=seq(1,200))\n}\n\nsimulateAll &lt;- function(density,envTypes, noise, c = .2, lr = .2) {\n  trainMat &lt;- generateSimData(density, envTypes, noise)\n  trainData &lt;- map(envTypes, ~ alm.sim(trainMat %&gt;% filter(type == .x), c = c, lr = lr))\n  assign(paste(density),list(train=trainData, test=map_dfr(trainData, simOrganize) %&gt;% mutate(density = density)))\n}\n\n\nSimulate Training and Testing\n\nCodeenvTypes &lt;- c(\"linear\", \"exponential\", \"quadratic\")\ndensities &lt;- c(\"low\", \"med\", \"high\")\nnoise=0\nINPUT_LAYER_DEFAULT &lt;- seq(0, 100, 0.5)\nOUTPUT_LAYER_DEFAULT &lt;- seq(0, 250, 1)\n\nc = 1.4\nlr=.8\n\nresults &lt;- map(densities, ~ simulateAll(.x, envTypes, noise, c, lr)) |&gt;\n  set_names(densities) \n\ntrainAll &lt;- results %&gt;%\n  map_df(~ map_df(.x$train, pluck, \"d\"), .id = \"density\") |&gt;\n  mutate(stage=as.numeric(cut(trial,breaks=20,labels=seq(1,20))),\n         dev=sqrt((y-almResp)^2),\n         density=factor(density,levels=c(\"low\",\"med\",\"high\")),\n         type=factor(type,levels=c(\"linear\",\"exponential\",\"quadratic\"))) |&gt;\n  dplyr::relocate(density,type,stage)\n\nsimTestAll &lt;- results |&gt; map(\"test\") |&gt; bind_rows() |&gt;\n  group_by(type,density,model) %&gt;%\n  mutate(type=factor(type,levels=c(\"linear\",\"exponential\",\"quadratic\")),\n         density=factor(density,levels=c(\"low\",\"med\",\"high\"))) %&gt;%\n  dplyr::relocate(density,type,test_region)\n\n\nTraining Data\n\nCodetrainAll %&gt;% ggplot(aes(x=block,y=dev,color=type)) + stat_summary(geom=\"line\",fun=mean,alpha=.4)+\n  stat_summary(geom=\"point\",fun=mean,alpha=.4)+\n  stat_summary(geom=\"errorbar\",fun.data=mean_cl_normal,alpha=.4)+facet_wrap(~density, scales=\"free_x\")\n\n\n\n\n\n\n\nPredictions for Generalization\n\nCodesimTestAll %&gt;% ggplot(aes(x=x,y=y)) + \n  geom_point(aes(x=x,y=resp,shape=model,color=model),alpha=.7,size=1) + \n  geom_line(aes(x=x,y=y),alpha=.4)+ \n  geom_point(data=simTestAll %&gt;% filter(test_region==\"train\"),aes(x=x,y=y),color=\"black\",size=1,alpha=1) +\n  facet_grid(density~type) + \n  theme_bw() + theme(legend.position=\"bottom\")\n\n\n\n\n\n\n\nCollpasing Across Density Levels gives us:\n\nCodesimTestAll %&gt;% group_by(type,model,x,y) %&gt;% summarise(resp=mean(resp))  %&gt;% ggplot(aes(x=x,y=y)) + \n  geom_point(aes(x=x,y=resp,shape=model,color=model),alpha=.7,size=1) + \n  geom_line(aes(x=x,y=y),alpha=.4)+ \n  facet_grid(~type) + \n  theme_bw() + theme(legend.position=\"bottom\")\n\n\nTable\n\n\n\n\n\n\nModel & Definition\nR Code\n\n\n\n\\(a_i(X)=\\exp \\left|-\\gamma \\cdot\\left[X-X_i\\right]^2\\right|\\)\nexp(-c * (input.layer - input)^2)\n\n\n\\(o_j(X)=\\Sigma_{i=1, M} w_{j i} \\cdot a_i(X)\\)\nweight.mat %*% input.activation\n\n\n\\(P\\left[Y_j \\mid X\\right]=o_j(X) / \\Sigma_{k=1, L} o_k(X)\\)\noutput.activation / sum(output.activation)\n\n\n\\(m(X)=\\Sigma_{j=1, L} Y_j \\cdot P\\left[Y_j \\mid X\\right]\\)\nsum(output.layer * output.probability)\n\n\n\\(f_j(Z)=e^{-c\\cdot(Z-Y_j)^2}\\)\nexp(-c * (output.layer - corResp)^2)\n\n\n\\(w_{ji}(t+1)=w_{ji}(t)+\\alpha \\cdot {f_i(Z(t))-O_j(X(t))} \\cdot a_i(X(t)\\)\nlr *(fz - output.activation) %*% t(input.activation)\n\n\n\n\n\n\n\\(E[Y|X_i]=m(X_i) + \\bigg[\\frac{m(X_{i+1})-m(X_{i-1})}{X_{i+1} - X_{i-1}} \\bigg]\\cdot[X-X_i]\\)\ntrainVec[which.min(abs(input - trainVec))]; xUnder &lt;- ...; xOver &lt;- ...; mUnder &lt;- ...; mOver &lt;- ...; exam.output &lt;- round(aresp + ((mOver - mUnder) / (xOver - xUnder)) * (input - nearestTrain), 3)\n\n\nMaster Function for full simulation\nSimulations with noise\nPrimary Functions",
    "crumbs": [
      "Simulations",
      "Simulating DeLosh 1997"
    ]
  },
  {
    "objectID": "Sections/Task.html",
    "href": "Sections/Task.html",
    "title": "HTW Task",
    "section": "",
    "text": "need to create a demo version without consent form. And maybe separate windows for the different versions.\n\nExperimental Task for the HTW Project. Programmed in Javascript, and making use of phaser.js."
  },
  {
    "objectID": "Sections/Task.html#htw-task",
    "href": "Sections/Task.html#htw-task",
    "title": "HTW Task",
    "section": "",
    "text": "need to create a demo version without consent form. And maybe separate windows for the different versions.\n\nExperimental Task for the HTW Project. Programmed in Javascript, and making use of phaser.js."
  },
  {
    "objectID": "Sections/Task.html#live-task-demo",
    "href": "Sections/Task.html#live-task-demo",
    "title": "HTW Task",
    "section": "Live Task Demo",
    "text": "Live Task Demo\nCheck the box at the bottom of the consent form, and then click Start Experiment.\n\n\nHTW_Task\n\n   –&gt;"
  },
  {
    "objectID": "Sections/Intro.html",
    "href": "Sections/Intro.html",
    "title": "Introduction",
    "section": "",
    "text": "A longstanding issue across both science and instruction has been to understand how various aspects of an educational curriculum or training program influence learning acquisition and generalization. One such aspect, which has received a great deal of research attention, is the variability of examples experienced during training (Raviv et al., 2022). The influence of training variation has been studied in numerous domains, including category learning (Cohen et al., 2001; Posner & Keele, 1968), visuomotor learning (Berniker et al., 2014 ; Schmidt, 1975), language learning (Perry et al., 2010), and education (Braithwaite & Goldstone, 2015; Guo et al., 2014). The pattern of results is complex, with numerous studies finding both beneficial (Braun et al., 2009; Catalano & Kleiner, 1984; Roller et al., 2001), as well as null or negative effects (Brekelmans et al., 2022 ; Hu & Nosofsky, 2024; Van Rossum, 1990). The present study seeks to contribute to the large body of existing research by examining the influence of variability in visuomotor function learning - a domain in which it has been relatively under-studied.\n\nThe study of human function learning investigates how people learn relationships between continuous input and output values. Function learning is studied both in tasks where individuals are exposed to a sequence of input/output pairs (DeLosh et al., 1997; McDaniel et al., 2013), or situations where observers are presented with a an incomplete scatterplot or line graph and make predictions about regions of the plot that don’t contain data (Ciccione & Dehaene, 2021; Courrieu, 2012; Said & Fischer, 2021; Schulz et al., 2020).\nCarroll (1963) conducted the earliest work on function learning. Input stimuli and output responses were both lines of varying length. The correct output response was related to the length of the input line by a linear, quadratic, or random function. Participants in the linear and quadratic performed above chance levels during extrapolation testing, with those in the linear condition performing the best overall. Carroll argued that these results were best explained by a ruled based model wherein learners form an abstract representation of the underlying function. Subsequent work by Brehmer (1974),testing a wider array of functional forms, provided further evidence for superior extrapolation in tasks with linear functions. Brehmer argued that individuals start out with an assumption of a linear function, but given sufficient error will progressively test alternative hypothesis with polynomials of greater degree. Koh & Meyer (1991) employed a visuomotor function learning task, wherein participants were trained on examples from an unknown function relating the length of an input line to the duration of a response (time between keystrokes). In this domain, participants performed best when the relation between line length and response duration was determined by a power, as opposed to linear function. Koh & Meyer developed the log-polynomial adaptive-regression model to account for their results.\nThe first significant challenge to the rule-based accounts of function learning was put forth by DeLosh et al. (1997) . In their task, participants learned to associate stimulus magnitudes with response magnitudes that were related via either linear, exponential, or quadratic function. Participants approached ceiling performance by the end of training in each function condition, and were able to correctly respond in interpolation testing trials. All three conditions demonstrated some capacity for extrapolation, however participants in the linear condition tended to underestimate the true function, while exponential and quadratic participants reliably overestimated the true function on extrapolation trials. Extrapolation and interpolation performance are depicted in Figure 1.\nThe authors evaluated both of the rule-based models introduced in earlier research (with some modifications enabling trial-by-trial learning). The polynomial hypothesis testing model (Brehmer, 1974; Carroll, 1963) tended to mimic the true function closely in extrapolation, and thus offered a poor account of the human data. The log-polynomial adaptive regression model (Koh & Meyer, 1991) was able to mimic some of the systematic deviations produced by human subjects, but also predicted overestimation in cases where underestimation occurred.\nThe authors also introduced two new function-learning models. The Associative Learning Model (ALM) and the extrapolation-association model (EXAM). ALM is a two layer connectionist model adapted from the ALCOVE model in the category learning literature (Kruschke, 1992). ALM belongs to the general class of radial-basis function neural networks, and can be considered a similarity-based model in the sense that the nodes in the input layer of the network are activated as a function of distance. The EXAM model retains the same similarity based activation and associative learning mechanisms as ALM, while being augmented with a linear rule response mechanism. When presented with novel stimuli, EXAM will retrieve the most similar input-output examples encountered during training, and from those examples compute a local slope. ALM was able to provide a good account of participant training and interpolation data in all three function conditions, however it was unable to extrapolate. EXAM, on the other hand, was able to reproduce both the extrapolation underestimation, as well as the quadratic and exponential overestimation patterns exhibited by the human participants. Subsequent research identified some limitations in EXAM’s ability to account for cases where human participants learn and extrapolate sinusoidal function Bott & Heit (2004) or to scenarios where different functions apply to different regions of the input space Kalish et al. (2004), though EXAM has been shown to provide a good account of human learning and extrapolation in tasks with bi-linear, V shaped input spaces Mcdaniel et al. (2009).\n\nThe influence of variability on function learning tasks has received relatively little attention. The study by DeLosh et al. (1997) (described in detail above) did include a variability manipulation (referred to as density in their paper), wherein participants were trained with either either 8, 20, or 50 unique input-output pairs, with the total number of training trials held constant. They found a minimal influence of variability on training performance, and no difference between groups in interpolation or extrapolation, with all three variability conditions displaying accurate interpolation, and linearly biased extrapolation that was well accounted for by the EXAM model.\nIn the domain of visuomotor learning, van Dam & Ernst (2015) employed a task which required participants to learn a linear function between the spikiness of shape stimuli and the correct horizontal position to make a rapid pointing response. The shapes ranged from very spiky to completely circular at the extreme ends of the space. Participants trained with intermediate shapes from a lower variation (2 shapes) or higher variation (5 shapes) condition, with the 2 items of the lower varied condition matching the items used on the extreme ends of the higher variation training space. Learning was significantly slower in the higher variation group. However, the two conditions did not differ when tested with novel shapes, with both groups producing extrapolation responses of comparable magnitudes to the most similar training item, rather than in accordance with the true linear function. The authors accounted for both learning and extrapolation performance with a Bayesian learning model. Similar to ALM, the bayesian model assumes that generalization occurs as a Gaussian function of the distance between stimuli. However unlike ALM, the bayesian learning model utilizes more elaborate probabilistic stimulus representations, with a separate Kalman Filter for each shape stimulus.\n\n\n\n\n\n\n\nFigure 1: Generalization reproduced patterns from DeLosh et al. (1997) Figure 3. Stimulii that fall within the dashed lines are interpolations of the training examples.\n\n\n\n\n\nThe present study investigates the influence of training variability on learning, generalization, and extrapolation in a uni-dimensional visuomotor function learning task. To the best of our knowledge, this research is the first to employ the classic constant vs. varied training manipulation, commonly used in the literature on the benefits of variability, in the context of a uni-dimensional function learning task. Across three experiments, we compare constant and varied training conditions in terms of learning performance, extrapolation accuracy, and the ability to reliably discriminate between stimuli.\nTo account for the empirical results, we will apply a series of computational models, including the Associative Learning Model (ALM) and the Extrapolation-Association Model (EXAM). Notably, this study is the first to employ approximate Bayesian computation (ABC) to fit these models to individual subject data, enabling us to thoroughly investigate the full range of posterior predictions of each model, and to examine the the ability of these influential models of function learning to account for both the group level and individual level data.",
    "crumbs": [
      "Sections",
      "Introduction"
    ]
  },
  {
    "objectID": "Sections/Intro.html#function-learning-and-extrapolation",
    "href": "Sections/Intro.html#function-learning-and-extrapolation",
    "title": "Introduction",
    "section": "",
    "text": "The study of human function learning investigates how people learn relationships between continuous input and output values. Function learning is studied both in tasks where individuals are exposed to a sequence of input/output pairs (DeLosh et al., 1997; McDaniel et al., 2013), or situations where observers are presented with a an incomplete scatterplot or line graph and make predictions about regions of the plot that don’t contain data (Ciccione & Dehaene, 2021; Courrieu, 2012; Said & Fischer, 2021; Schulz et al., 2020).\nCarroll (1963) conducted the earliest work on function learning. Input stimuli and output responses were both lines of varying length. The correct output response was related to the length of the input line by a linear, quadratic, or random function. Participants in the linear and quadratic performed above chance levels during extrapolation testing, with those in the linear condition performing the best overall. Carroll argued that these results were best explained by a ruled based model wherein learners form an abstract representation of the underlying function. Subsequent work by Brehmer (1974),testing a wider array of functional forms, provided further evidence for superior extrapolation in tasks with linear functions. Brehmer argued that individuals start out with an assumption of a linear function, but given sufficient error will progressively test alternative hypothesis with polynomials of greater degree. Koh & Meyer (1991) employed a visuomotor function learning task, wherein participants were trained on examples from an unknown function relating the length of an input line to the duration of a response (time between keystrokes). In this domain, participants performed best when the relation between line length and response duration was determined by a power, as opposed to linear function. Koh & Meyer developed the log-polynomial adaptive-regression model to account for their results.\nThe first significant challenge to the rule-based accounts of function learning was put forth by DeLosh et al. (1997) . In their task, participants learned to associate stimulus magnitudes with response magnitudes that were related via either linear, exponential, or quadratic function. Participants approached ceiling performance by the end of training in each function condition, and were able to correctly respond in interpolation testing trials. All three conditions demonstrated some capacity for extrapolation, however participants in the linear condition tended to underestimate the true function, while exponential and quadratic participants reliably overestimated the true function on extrapolation trials. Extrapolation and interpolation performance are depicted in Figure 1.\nThe authors evaluated both of the rule-based models introduced in earlier research (with some modifications enabling trial-by-trial learning). The polynomial hypothesis testing model (Brehmer, 1974; Carroll, 1963) tended to mimic the true function closely in extrapolation, and thus offered a poor account of the human data. The log-polynomial adaptive regression model (Koh & Meyer, 1991) was able to mimic some of the systematic deviations produced by human subjects, but also predicted overestimation in cases where underestimation occurred.\nThe authors also introduced two new function-learning models. The Associative Learning Model (ALM) and the extrapolation-association model (EXAM). ALM is a two layer connectionist model adapted from the ALCOVE model in the category learning literature (Kruschke, 1992). ALM belongs to the general class of radial-basis function neural networks, and can be considered a similarity-based model in the sense that the nodes in the input layer of the network are activated as a function of distance. The EXAM model retains the same similarity based activation and associative learning mechanisms as ALM, while being augmented with a linear rule response mechanism. When presented with novel stimuli, EXAM will retrieve the most similar input-output examples encountered during training, and from those examples compute a local slope. ALM was able to provide a good account of participant training and interpolation data in all three function conditions, however it was unable to extrapolate. EXAM, on the other hand, was able to reproduce both the extrapolation underestimation, as well as the quadratic and exponential overestimation patterns exhibited by the human participants. Subsequent research identified some limitations in EXAM’s ability to account for cases where human participants learn and extrapolate sinusoidal function Bott & Heit (2004) or to scenarios where different functions apply to different regions of the input space Kalish et al. (2004), though EXAM has been shown to provide a good account of human learning and extrapolation in tasks with bi-linear, V shaped input spaces Mcdaniel et al. (2009).\n\nThe influence of variability on function learning tasks has received relatively little attention. The study by DeLosh et al. (1997) (described in detail above) did include a variability manipulation (referred to as density in their paper), wherein participants were trained with either either 8, 20, or 50 unique input-output pairs, with the total number of training trials held constant. They found a minimal influence of variability on training performance, and no difference between groups in interpolation or extrapolation, with all three variability conditions displaying accurate interpolation, and linearly biased extrapolation that was well accounted for by the EXAM model.\nIn the domain of visuomotor learning, van Dam & Ernst (2015) employed a task which required participants to learn a linear function between the spikiness of shape stimuli and the correct horizontal position to make a rapid pointing response. The shapes ranged from very spiky to completely circular at the extreme ends of the space. Participants trained with intermediate shapes from a lower variation (2 shapes) or higher variation (5 shapes) condition, with the 2 items of the lower varied condition matching the items used on the extreme ends of the higher variation training space. Learning was significantly slower in the higher variation group. However, the two conditions did not differ when tested with novel shapes, with both groups producing extrapolation responses of comparable magnitudes to the most similar training item, rather than in accordance with the true linear function. The authors accounted for both learning and extrapolation performance with a Bayesian learning model. Similar to ALM, the bayesian model assumes that generalization occurs as a Gaussian function of the distance between stimuli. However unlike ALM, the bayesian learning model utilizes more elaborate probabilistic stimulus representations, with a separate Kalman Filter for each shape stimulus.\n\n\n\n\n\n\n\nFigure 1: Generalization reproduced patterns from DeLosh et al. (1997) Figure 3. Stimulii that fall within the dashed lines are interpolations of the training examples.",
    "crumbs": [
      "Sections",
      "Introduction"
    ]
  },
  {
    "objectID": "Model/indv_model_fits.html",
    "href": "Model/indv_model_fits.html",
    "title": "indv fits",
    "section": "",
    "text": "Codepacman::p_load(tidyverse,patchwork,here, pander, latex2exp, flextable)\npurrr::walk(here::here(c(\"Functions/Display_Functions.R\", \"Functions/alm_core.R\",\"Functions/misc_model_funs.R\")),source)\nselect &lt;- dplyr::select; mutate &lt;- dplyr::mutate \n\n\n\n\nind_ex_te[[1]]$test\nind_ex_te[[1]]$Fit\nind_ex_te[[1]]$id\n\n\n\nind_ex_te=as.list(readRDS((here::here(paste0(\"data/model_cache/indv_nll_de2_ex_te15_26_16.rds\")))))\n\n\n\n# full combination of files, Model_Names, and Fit_Method - lined by by index. \nfile_list &lt;- list(\"indv_nll_de2_ex_te15_26_16\", \"indv_nll_de2_ex_tetr15_31_48\", \"indv_exam_de2_ex_tr15_37_27\", \"indv_nll_de2_alm_te15_42_48\",\"indv_nll_de2_alm_tetr15_48_08\", \"indv_nll_de2_alm_tr15_53_32\")\nModel_Names &lt;- list(\"EXAM\", \"EXAM\", \"EXAM\",\"ALM\",\"ALM\",\"ALM\")\nFit_Method &lt;- list(\"Test Only\", \"Test & Train\", \"Train Only\", \"Test Only\", \"Test & Train\", \"Train Only\")\n\n\n\ncompile_fit_info &lt;- function(file_name, model_name, fit_method) {\n  file_path &lt;- here::here(paste0(\"data/model_cache/\", file_name, \".rds\"))\n  data_list &lt;- as.list(readRDS(file_path))\n\n  map_dfr(data_list, ~ {\n    test_df &lt;- .x$test |&gt; slice(1)\n    fit_info &lt;- .x$Fit |&gt; slice(1)\n\n    tibble(\n      id = test_df$sbj,  \n      condit = test_df$condit,  \n      Model = model_name,\n      Fit_Method = fit_method,\n      fit_info,  \n      train_error = .x$train_error,\n      test_error = .x$test_error\n    )\n  })\n}\n\nindv_fit_info &lt;- map2_dfr(file_list, Model_Names, ~ compile_fit_info(.x, .y, Fit_Method[[which(file_list == .x)]])) |&gt; arrange(id,Fit_Method,Model)\n\nindv_fit_info &lt;- indv_fit_info %&gt;% \n  group_by(id, Fit_Method) %&gt;% \n  mutate(best_model = Model[which.min(value)]) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\nmap_dfr(ind_ex_te,~tibble( pluck(.x$\"test\"))) |&gt; select(id=sbj,condit)\nmap_dfr(ind_ex_te,~tibble( pluck(.x$\"test\"))) |&gt; pull(sbj)\n\n\n# example creating one\n# ind_ex_te &lt;- map_dfr(as.list(readRDS((here::here(paste0(\"data/model_cache/indv_nll_de2_ex_te15_26_16.rds\"))))), ~ tibble(id = .x$id,condist=.x$condit, pluck(.x$\"Fit\"), train_error=.x$train_error, test_error=.x$test_error))\n\n\n# params &lt;- map_dfr(ind_ex_te,~pluck(.x$\"Fit\"))\n# ids &lt;- map_dfr(ind_ex_te, ~ tibble(id = .x$id))\n\ni47 &lt;- ind_ex_te[[47]]\ni47$\n\n\n\nCodeindv_fit_info |&gt; ggplot(aes(x=Model,y=value,group=condit,fill=condit)) +geom_bar(position=\"dodge\",stat=\"identity\") + facet_wrap(~Fit_Method, scales=\"free_y\")\n\n\nsummary_data &lt;- indv_fit_info %&gt;%\n  group_by(Fit_Method, condit, best_model) %&gt;%\n  summarize(Count = n(), .groups = 'drop')\n\n# Create the plot\nggplot(summary_data, aes(x = Fit_Method, y = Count, fill = best_model)) +\n  geom_bar(stat = \"identity\", position = position_dodge()) +\n  facet_wrap(~condit) +\n  labs(title = \"Best Model Fit by Condition and Fit Method\",\n       x = \"Fit Method\",\n       y = \"Number of Subjects\",\n       fill = \"Best Model\") +\n  theme_minimal()\n\n\n\nCodecompile_test_info &lt;- function(file_name, model_name, fit_method) {\n  file_path &lt;- here::here(paste0(\"data/model_cache/\", file_name, \".rds\"))\n  data_list &lt;- as.list(readRDS(file_path))\n   test &lt;- map_dfr(data_list,~tibble( pluck(.x$\"test\"), Model = model_name,Fit_Method = fit_method))\n\n}\n\n\n\n\nindv_test &lt;- map2_dfr(file_list, Model_Names, ~ compile_test_info(.x, .y, Fit_Method[[which(file_list == .x)]])) |&gt; rename(id=sbj)\n\nhead(indv_test)\n\nindv_test |&gt; pivot_longer(c(y,pred), names_to=\"Resp\", values_to = \"vx\") |&gt;\nggplot(aes(x=x, y=vx,fill=condit)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(), fun.data = mean_se, alpha = .7) +  \n    facet_wrap(Model~Resp~Fit_Method, scales=\"free_y\")\n\n\n indv_test |&gt; pivot_longer(c(y,pred), names_to=\"Resp\", values_to = \"vx\")   |&gt; filter(Fit_Method==\"Test & Train\") |&gt;\n ggplot(aes(x=x, y=vx,fill=condit)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(), fun.data = mean_se, alpha = .7) +  \n    facet_wrap(Model~Resp, scales=\"free_y\")\n\n indv_test |&gt; pivot_longer(c(y,pred), names_to=\"Resp\", values_to = \"vx\")   |&gt; filter(Fit_Method==\"Test & Train\") |&gt;\n ggplot(aes(x=x, y=vx,fill=Resp)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(), fun.data = mean_se, alpha = .7) +  \n    facet_wrap(Model~condit, scales=\"free_y\")\n\n\n indv_test |&gt; pivot_longer(c(y,pred), names_to=\"Resp\", values_to = \"vx\")   |&gt; filter(Fit_Method==\"Train Only\") |&gt;\n ggplot(aes(x=x, y=vx,fill=Resp)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(), fun.data = mean_se, alpha = .7) +  \n    facet_wrap(Model~condit, scales=\"free_y\")\n\n indv_test |&gt; pivot_longer(c(y,pred), names_to=\"Resp\", values_to = \"vx\")   |&gt; filter(Fit_Method==\"Test Only\") |&gt;\n ggplot(aes(x=x, y=vx,fill=Resp)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(), fun.data = mean_se, alpha = .7) +  \n    facet_wrap(Model~condit, scales=\"free_y\")\n\n\n\n#test &lt;- map_dfr(ind_ex_te, ~pluck(.x$\"test\"))\n#ind_ex_te[[1]]$test\n\n\n\nCodeindv_fit_info |&gt; filter(condit==\"Constant\",Fit_Method==\"Test & Train\") |&gt; arrange(value)\n\nidC &lt;- indv_fit_info |&gt; filter(condit==\"Constant\",Fit_Method==\"Test & Train\", Model==\"EXAM\") |&gt; \n  arrange(test_error) |&gt; slice(1:3)\n\n indv_test |&gt; pivot_longer(c(y,pred), names_to=\"Resp\", values_to = \"vx\") |&gt; \n   filter(id %in% idC$id, Model==\"EXAM\",Fit_Method==\"Test & Train\") |&gt;  \n    ggplot(aes(x=x, y=vx,fill=Resp)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(), fun.data = mean_se, alpha = .7) +  \n    facet_wrap(Fit_Method~id, scales=\"free_y\")\n\nidV &lt;- indv_fit_info |&gt; filter(condit==\"Varied\",Fit_Method==\"Test Only\", Model==\"EXAM\") |&gt; \n  arrange(value) |&gt; slice(1:3)\n\n indv_test |&gt; pivot_longer(c(y,pred), names_to=\"Resp\", values_to = \"vx\") |&gt; \n   filter(id %in% idV$id, Model==\"EXAM\",Fit_Method==\"Test Only\") |&gt;  \n    ggplot(aes(x=x, y=vx,fill=Resp)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(), fun.data = mean_se, alpha = .7) +  \n    facet_wrap(Fit_Method~id, scales=\"free_y\")\n\n\n\nCode# find all files in model_cache dir that contain strings \"_nm_\" AND \"_nll_\", save paths in \"model_files\" list \n\ncompile_fit_info &lt;- function(file_name) {\n  file_path &lt;- here::here(\"data/model_cache\", file_name)\n  map_dfr(readRDS(file_path), ~ tibble(\n    id = .x$test$sbj[1],  \n    condit = .x$test$condit[1],  \n    Fit_Method = .x$loss_dat,\n    Model = .x$pred_fun,\n     .x$Fit,  \n    train_error = .x$train_error,\n    test_error = .x$test_error\n  )) %&gt;% \n  mutate(\n    Fit_Method = case_when(\n      Fit_Method == \"train_error\"            ~ \"Train Only\",\n      Fit_Method == \"test_error\"             ~ \"Test Only\",\n      Fit_Method == \"test_error+train_error\" ~ \"Test & Train\"\n    ),\n    Model = case_when(\n      Model == \"exam.response\"    ~ \"EXAM\",\n      Model == \"alm.responseOnly\" ~ \"ALM\"\n    )\n  )\n}\n\nmodel_files &lt;- list.files(here::here(\"data/model_cache\"), pattern = \"_nm_\")\nindv_fit_info_nm &lt;- map_dfr(model_files, compile_fit_info) |&gt; arrange(id)\n\nmodel_files &lt;- list.files(here::here(\"data/model_cache\"), pattern = \"_bfgs_\")\nindv_fit_info_bfgs &lt;- map_dfr(model_files, compile_fit_info) |&gt; arrange(id)\n\nmodel_files &lt;- list.files(here::here(\"data/model_cache\"), pattern = \"_sann_\")\nindv_fit_info_sann &lt;- map_dfr(model_files, compile_fit_info) |&gt; arrange(id)\n\nmodel_files &lt;- list.files(here::here(\"data/model_cache\"), pattern = \"_de2_\", full.names = TRUE) %&gt;%\n    file.info() %&gt;%\n    arrange(desc(mtime)) %&gt;%\n    rownames() %&gt;%\n    head(6) |&gt; basename()\n\nindv_fit_info_de2 &lt;- map_dfr(model_files, compile_fit_info) |&gt; rename(Value=value) |&gt; arrange(id)\n\n\n\n\ncombined_data &lt;- bind_rows(\n  indv_fit_info_nm %&gt;% mutate(Optimization = \"Nelder-Mead\"),\n  indv_fit_info_bfgs %&gt;% mutate(Optimization = \"BFGS\"),\n  indv_fit_info_sann %&gt;% mutate(Optimization = \"SANN\"),\n  indv_fit_info_de2 %&gt;% mutate(Optimization = \"DEoptim\")\n)\n\n\n\nhead(indv_fit_info_bfgs)\nhead(indv_fit_info_sann)\nhead(indv_fit_info_de2)\n\n\n\nCode# Grouped Bar Chart for Train and Test Errors\nggplot(combined_data, aes(x = Optimization, y = train_error, fill = Optimization)) +\n  geom_bar(stat = \"summary\", fun = \"mean\", position = position_dodge()) +\n  geom_bar(aes(y = test_error), stat = \"summary\", fun = \"mean\", position = position_dodge(), color = \"blue\") +\n  labs(title = \"Comparison of Train and Test Errors Across Optimization Methods\", \n       y = \"Error\", \n       x = \"Optimization Method\") +\n  theme_minimal()\n\n\nlong_data &lt;- combined_data %&gt;%\n  pivot_longer(cols = c(Value, test_error, train_error), names_to = \"Metric\", values_to = \"Value\")\n\nlong_data |&gt; pandoc.table()\n\n\n# Create the plot\nggplot(long_data, aes(x = Optimization, y = Value, fill = Optimization)) +\n  geom_bar(stat = \"summary\", fun = \"median\", position = position_dodge()) +\n  facet_wrap(Fit_Method~Metric, scales = \"free_y\") +\n  labs(title = \"Comparison of Optimization Methods Across Different Metrics\",\n       y = \"Value\",\n       x = \"Optimization Method\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\nlong_data &lt;- combined_data %&gt;%\n  pivot_longer(cols = c(Value, test_error, train_error), names_to = \"Metric\", values_to = \"Value\") %&gt;%\n  group_by(Optimization, Metric) %&gt;%\n  summarize(\n    Mean = mean(Value, na.rm = TRUE),\n    Median = median(Value, na.rm = TRUE)\n  ) %&gt;%\n  pivot_longer(cols = c(Mean, Median), names_to = \"Statistic\", values_to = \"Value\") %&gt;%\n  ungroup()\n\n# Create the plot\nggplot(long_data, aes(x = Optimization, y = Value, fill = Optimization)) +\n  geom_bar(stat = \"identity\", position = position_dodge()) +\n  facet_grid(Statistic ~ Metric, scales = \"free_y\") +\n  labs(title = \"Comparison of Optimization Methods Across Different Metrics\",\n       y = \"Value\",\n       x = \"Optimization Method\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\n\n\n\nreshaped_df &lt;- combined_data %&gt;%\n  select(Optimization, Fit_Method, Model, train_error, test_error) %&gt;%\n  pivot_longer(cols = c(train_error, test_error), names_to = \"Parameter\") %&gt;%\n  unite(\"Group\", Optimization, Parameter, sep = \"_\", na.rm = TRUE) %&gt;%  # Ensure no NAs in combined names\n  pivot_wider(\n    names_from = Group, \n    values_from = value, \n    values_fn = list(value = ~ mean(.x, na.rm = TRUE))  # Handle NAs in mean calculation\n  ) %&gt;%\n  filter(complete.cases(.))  # Optional: Remove rows with any NA values\n\nft &lt;- flextable(reshaped_df)\n\nreshaped_df &lt;- combined_data %&gt;%\n  select(Optimization, Fit_Method, Model, train_error, test_error) %&gt;%\n  pivot_longer(cols = c(train_error, test_error), names_to = \"Parameter\") %&gt;%\n  group_by(Optimization, Fit_Method, Model, Parameter) %&gt;%\n  summarize(Value = mean(value, na.rm = TRUE), .groups = 'drop') %&gt;%\n  arrange(Fit_Method, Model, Parameter, Optimization)\n\n# Check the structure of reshaped_df\nstr(reshaped_df)\n\n# Create a flextable from the reshaped data\nft &lt;- flextable(reshaped_df)\nft"
  },
  {
    "objectID": "Model/htw_model.html",
    "href": "Model/htw_model.html",
    "title": "HTW Modeling",
    "section": "",
    "text": "Codepacman::p_load(dplyr,purrr,tidyr,ggplot2, data.table, here, patchwork, conflicted, \n               stringr,future,furrr, knitr, reactable, flextable,ggstance, htmltools,ggdist,ggh4x)\n#conflict_prefer_all(\"dplyr\", quiet = TRUE)\nwalk(c(\"flextable\",\"dplyr\"), conflict_prefer_all, quiet = TRUE)\n#options(brms.backend=\"cmdstanr\",mc.cores=4)\noptions(digits=2, scipen=999, dplyr.summarise.inform=FALSE)\nwalk(c(\"Display_Functions\",\"fun_alm\",\"fun_indv_fit\",\"fun_model\", \"prep_model_data\"), ~source(here::here(paste0(\"Functions/\", .x, \".R\"))))\nCodeinvisible(list2env(load_sbj_data(), envir = .GlobalEnv))\ninvisible(list2env(load_e1(), envir = .GlobalEnv))\ne1Sbjs &lt;- e1 |&gt; group_by(id,condit) |&gt; summarise(n=n())",
    "crumbs": [
      "Model",
      "HTW Modeling"
    ]
  },
  {
    "objectID": "Model/htw_model.html#alm-exam-description",
    "href": "Model/htw_model.html#alm-exam-description",
    "title": "HTW Modeling",
    "section": "ALM & Exam Description",
    "text": "ALM & Exam Description\nALM is a localist neural network model (Page, 2000), with each input node corresponding to a particular stimulus, and each output node corresponding to a particular response value. The units in the input layer activate as a function of their Gaussian similarity to the input stimulus. So, for example, an input stimulus of value 55 would induce maximal activation of the input unit tuned to 55. Depending on the value of the generalization parameter, the nearby units (e.g. 54 and 56; 53 and 57) may also activate to some degree. ALM is structured with input and output nodes that correspond to regions of the stimulus space, and response space, respectively. The units in the input layer activate as a function of their similarity to a presented stimulus. As was the case with the exemplar-based models, similarity in ALM is exponentially decaying function of distance. The input layer is fully connected to the output layer, and the activation for any particular output node is simply the weighted sum of the connection weights between that node and the input activations. The network then produces a response by taking the weighted average of the output units (recall that each output unit has a value corresponding to a particular response). During training, the network receives feedback which activates each output unit as a function of its distance from the ideal level of activation necessary to produce the correct response. The connection weights between input and output units are then updated via the standard delta learning rule, where the magnitude of weight changes are controlled by a learning rate parameter. The EXAM model is an extension of ALM, with the same learning rule and representational scheme for input and output units. The primary difference is that EXAM includes a linear extrapolation mechanism for generating novel responses during testing, a modification necessary to account for human extrapolation patterns in past research Brown & Lacroix (2017). Although this extrapolation rule departs from a strictly similarity-based generalization mechanism, EXAM is distinct from pure rule-based models in that it remains constrained by the weights learned during training.\nSee Table 1 for a full specification of the equations that define ALM and EXAM.\n\n\n\nTable 1: ALM & EXAM Equations\n\n\n\n\n\n\n\n\n\nALM Response Generation\n\n\n\n\nInput Activation\n\\(a_i(X) = \\frac{e^{-c(X-X_i)^2}}{\\sum_{k=1}^M e^{-c(X-X_k)^2}}\\)\nInput nodes activate as a function of Gaussian similarity to stimulus\n\n\nOutput Activation\n\\(O_j(X) = \\sum_{k=1}^M w_{ji} \\cdot a_i(X)\\)\nOutput unit \\(O_j\\) activation is the weighted sum of input activations and association weights\n\n\nOutput Probability\n\\(P[Y_j|X] = \\frac{O_j(X)}{\\sum_{k=1}^M O_k(X)}\\)\nThe response, \\(Y_j\\) probabilites computed via Luce’s choice rule\n\n\nMean Output\n\\(m(X) = \\sum_{j=1}^L Y_j \\cdot \\frac{O_j(x)}{\\sum_{k=1}^M O_k(X)}\\)\nWeighted average of probabilities determines response to X\n\n\n\nALM Learning\n\n\n\nFeedback\n\\(f_j(Z) = e^{-c(Z-Y_j)^2}\\)\nfeedback signal Z computed as similarity between ideal response and observed response\n\n\nmagnitude of error\n\\(\\Delta_{ji}=(f_{j}(Z)-o_{j}(X))a_{i}(X)\\)\nDelta rule to update weights.\n\n\nUpdate Weights\n\\(w_{ji}^{new}=w_{ji}+\\eta\\Delta_{ji}\\)\nUpdates scaled by learning rate parameter \\(\\eta\\).\n\n\n\nEXAM Extrapolation\n\n\n\nInstance Retrieval\n\\(P[X_i|X] = \\frac{a_i(X)}{\\sum_{k=1}^M a_k(X)}\\)\nNovel test stimulus \\(X\\) activates input nodes \\(X_i\\)\n\n\n\nSlope Computation\n\n\\(S =\\) \\(\\frac{m(X_{1})-m(X_{2})}{X_{1}-X_{2}}\\)\n\nSlope value, \\(S\\) computed from nearest training instances\n\n\nResponse\n\\(E[Y|X_i] = m(X_i) + S \\cdot [X - X_i]\\)\nALM response \\(m(X_i)\\) adjusted by slope.",
    "crumbs": [
      "Model",
      "HTW Modeling"
    ]
  },
  {
    "objectID": "Model/htw_model.html#model-fitting-strategy",
    "href": "Model/htw_model.html#model-fitting-strategy",
    "title": "HTW Modeling",
    "section": "Model Fitting Strategy",
    "text": "Model Fitting Strategy\nTo fit ALM and EXAM to our participant data, we employ a similar method to Mcdaniel et al. (2009), wherein we examine the performance of each model after being fit to various subsets of the data. Each model was fit to the data in with separate procedures: 1) fit to maximize predictions of the testing data, 2) fit to maximize predictions of both the training and testing data, 3) fit to maximize predictions of the just the training data. We refer to this fitting manipulations as “Fit Method” in the tables and figures below. It should be emphasized that for all three fit methods, the ALM and EXAM models behave identically - with weights updating only during the training phase.Models to were fit separately to the data of each individual participant. The free parameters for both models are the generalization (\\(c\\)) and learning rate (\\(lr\\)) parameters. Parameter estimation was performed using approximate bayesian computation (ABC), which we describe in detail below.\n\n\n\n\n\n\n Approximate Bayesian Computation\nTo estimate parameters, we used approximate bayesian computation (ABC), enabling us to obtain an estimate of the posterior distribution of the generalization and learning rate parameters for each individual. ABC belongs to the class of simulation-based inference methods (Cranmer et al., 2020), which have begun being used for parameter estimation in cognitive modeling relatively recently (Kangasrääsiö et al., 2019; Turner et al., 2016; Turner & Van Zandt, 2012). Although they can be applied to any model from which data can be simulated, ABC methods are most useful for complex models that lack an explicit likelihood function (e.g. many neural network and evidence accumulation models).\nThe general ABC procedure is to 1) define a prior distribution over model parameters. 2) sample candidate parameter values, \\(\\theta^*\\), from the prior. 3) Use \\(\\theta^*\\) to generate a simulated dataset, \\(Data_{sim}\\). 4) Compute a measure of discrepancy between the simulated and observed datasets, \\(discrep\\)(\\(Data_{sim}\\), \\(Data_{obs}\\)). 5) Accept \\(\\theta^*\\) if the discrepancy is less than the tolerance threshold, \\(\\epsilon\\), otherwise reject \\(\\theta^*\\). 6) Repeat until desired number of posterior samples are obtained.\nAlthough simple in the abstract, implementations of ABC require researchers to make a number of non-trivial decisions as to i) the discrepancy function between observed and simulated data, ii) whether to compute the discrepancy between trial level data, or a summary statistic of the datasets, iii) the value of the minimum tolerance \\(\\epsilon\\) between simulated and observed data. For the present work, we follow the guidelines from previously published ABC tutorials (Farrell & Lewandowsky, 2018; Turner & Van Zandt, 2012). For the test stage, we summarized datasets with mean velocity of each band in the observed dataset as \\(V_{obs}^{(k)}\\) and in the simulated dataset as \\(V_{sim}^{(k)}\\), where \\(k\\) represents each of the six velocity bands. For computing the discrepancy between datasets in the training stage, we aggregated training trials into three equally sized blocks (separately for each velocity band in the case of the varied group). After obtaining the summary statistics of the simulated and observed datasets, the discrepancy was computed as the mean of the absolute difference between simulated and observed datasets (Equation 1 and Equation 2). For the models fit to both training and testing data, discrepancies were computed for both stages, and then averaged together.\n\n\\[\ndiscrep_{Test}(Data_{sim}, Data_{obs}) = \\frac{1}{6} \\sum_{k=1}^{6} |V_{obs}^{(k)} - V_{sim}^{(k)}|\n\\tag{1}\\]\n\\[\n\\begin{aligned} \\\\\ndiscrep_{Train,constant}(Data_{sim}, Data_{obs}) = \\frac{1}{N_{blocks}} \\sum_{j=1}^{N_{blocks}} |V_{obs,constant}^{(j)} - V_{sim,constant}^{(j)}| \\\\ \\\\\ndiscrep_{Train,varied}(Data_{sim}, Data_{obs}) = \\frac{1}{N_{blocks} \\times 3} \\sum_{j=1}^{N_{blocks}} \\sum_{k=1}^{3} |V_{obs,varied}^{(j,k)} - V_{sim,varied}^{(j,k)}|\n\\end{aligned}\n\\tag{2}\\]\n\nThe final component of our ABC implementation is the determination of an appropriate value of \\(\\epsilon\\). The setting of \\(\\epsilon\\) exerts strong influence on the approximated posterior distribution. Smaller values of \\(\\epsilon\\) increase the rejection rate, and improve the fidelity of the approximated posterior, while larger values result in an ABC sampler that simply reproduces the prior distribution. Because the individual participants in our dataset differed substantially in terms of the noisiness of their data, we employed an adaptive tolerance setting strategy to tailor \\(\\epsilon\\) to each individual. The initial value of \\(\\epsilon\\) was set to the overall standard deviation of each individuals velocity values. Thus, sampled parameter values that generated simulated data within a standard deviation of the observed data were accepted, while worse performing parameters were rejected. After every 300 samples the tolerance was allowed to increase only if the current acceptance rate of the algorithm was less than 1%. In such cases, the tolerance was shifted towards the average discrepancy of the 5 best samples obtained thus far. To ensure the acceptance rate did not become overly permissive, \\(\\epsilon\\) was also allowed to decrease every time a sample was accepted into the posterior.\n\n\n\nFor each of the 156 participants from Experiment 1, the ABC algorithm was run until 200 samples of parameters were accepted into the posterior distribution. Obtaining this number of posterior samples required an average of 205,000 simulation runs per participant. Fitting each combination of participant, Model (EXAM & ALM), and fitting method (Test only, Train only, Test & Train) required a total of 192 million simulation runs. To facilitate these intensive computational demands, we used the Future Package in R (Bengtsson, 2021), allowing us to parallelize computations across a cluster of ten M1 iMacs, each with 8 cores.\nModelling Results\nGroup level Patterns\n\nCodepost_tabs &lt;- abc_tables(post_dat,post_dat_l)\ntrain_tab &lt;- abc_train_tables(pd_train,pd_train_l)\n\n\n\nrbind(post_tabs$agg_pred_full |&gt; mutate(stage=\"Test\"), train_tab$agg_pred_full |&gt; mutate(stage=\"Train\")) |&gt; \n  mutate(Fit_Method=rename_fm(Fit_Method)) |&gt;\n  flextable::tabulator(rows=c(\"stage\",\"Fit_Method\",\"Model\"), columns=c(\"condit\"),\n                       `ME` = as_paragraph(mean_error)) |&gt; as_flextable()\n # post_dat  |&gt; group_by(condit,Model,Fit_Method,x) |&gt; \n #    mutate(e2=abs(dist-pred_dist)) |&gt; \n #    summarise(dist=mean(dist), pred=mean(pred_dist), mean_error=mean(e2)) |&gt;\n #    group_by(condit,Model,Fit_Method) |&gt; \n #    summarise(mean_error=mean(mean_error)) |&gt; \n #    round_tibble(1) |&gt; \n #  mutate(Fit_Method=rename_fm(Fit_Method)) |&gt;\n #  flextable::tabulator(rows=c(\"Fit_Method\",\"Model\"), columns=c(\"condit\"),\n #                       `ME` = as_paragraph(mean_error)) |&gt; as_flextable()\n\n\nTable 2: Mean model errors predicting empirical data from the testing and training stage, aggregated over all participants and velocity bands. Note that Fit Method refers to the subset of the data that the model was trained on\n\n\n\n\n\n\nstage\nFit_Method\nModel\n\nConstant\n\nVaried\n\n\n\nTest\nFit to Test Data\nALM\n\n199.9\n\n103.4\n\n\nEXAM\n\n104.0\n\n85.7\n\n\nFit to Test & Training Data\nALM\n\n217.0\n\n170.3\n\n\nEXAM\n\n127.9\n\n144.9\n\n\nFit to Training Data\nALM\n\n467.7\n\n291.4\n\n\nEXAM\n\n273.3\n\n297.9\n\n\nTrain\nFit to Test Data\nALM\n\n297.8\n\n2,016.0\n\n\nEXAM\n\n53.9\n\n184.0\n\n\nFit to Test & Training Data\nALM\n\n57.4\n\n132.3\n\n\nEXAM\n\n42.9\n\n127.9\n\n\nFit to Training Data\nALM\n\n51.8\n\n103.5\n\n\nEXAM\n\n51.4\n\n107.0\n\n\n\n\n\n\n\n\n\n\nCodec_post &lt;- post_dat_avg %&gt;%\n    group_by(id, condit, Model, Fit_Method, rank) %&gt;%\n    slice_head(n = 1) |&gt;\n    ggplot(aes(y=log(c), x = Fit_Method,col=condit)) + stat_pointinterval(position=position_dodge(.2)) +\n    ggh4x::facet_nested_wrap(~Model) + labs(title=\"c parameter\") +\n  theme(legend.title = element_blank(), legend.position=\"right\",plot.title=element_text(hjust=.4))\n\nlr_post &lt;- post_dat_avg %&gt;%\n    group_by(id, condit, Model, Fit_Method, rank) %&gt;%\n    slice_head(n = 1) |&gt;\n    ggplot(aes(y=lr, x = Fit_Method,col=condit)) + stat_pointinterval(position=position_dodge(.4)) +\n    ggh4x::facet_nested_wrap(~Model) + labs(title=\"learning rate parameter\") +\n  theme(legend.title = element_blank(), legend.position = \"none\",plot.title=element_text(hjust=.5))\nc_post + lr_post\n\n\n\n\n\n\nFigure 1: Posterior Distributions of \\(c\\) and \\(lr\\) parameters. Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median. Note that the y axes of the plots for the c parameter are scaled logarithmically.\n\n\n\n\n\nCode##| layout: [[45,-5, 45], [100]]\n##| fig-subcap: [\"Model Residuals - training data\", \"Model Residuals - testing data\",\"Full posterior predictive distributions vs. observed data from participants.\"]\ntrain_resid &lt;- pd_train |&gt; group_by(id,condit,Model,Fit_Method, Block,x) |&gt; \n  summarise(y=mean(y), pred=mean(pred), mean_error=abs(y-pred)) |&gt;\n  group_by(id,condit,Model,Fit_Method,Block) |&gt;\n  summarise(mean_error=mean(mean_error)) |&gt;\n  ggplot(aes(x=interaction(Block,Model), y = mean_error, fill=factor(Block))) + \n  stat_bar + \n  ggh4x::facet_nested_wrap(rename_fm(Fit_Method)~condit, scales=\"free\",ncol=2) +\n   scale_x_discrete(guide = \"axis_nested\") +\n  scale_fill_manual(values=c(\"gray10\",\"gray50\",\"gray92\"))+\n  labs(title=\"Model Residual Errors - Training Stage\", y=\"RMSE\", x= \"Model\",fill=\"Training Block\") +\n  theme(legend.position=\"top\")\n\ntest_resid &lt;-  post_dat |&gt; \n   group_by(id,condit,x,Model,Fit_Method) |&gt;\n    summarise(y=mean(y), pred=mean(pred), error=abs(y-pred)) |&gt; \n  mutate(vbLab = factor(paste0(x,\"-\",x+200))) |&gt;\n  ggplot(aes(x = Model, y = abs(error), fill=vbLab)) + \n  stat_bar + \n  #scale_fill_manual(values=wes_palette(\"AsteroidCity2\"))+\n  ggh4x::facet_nested_wrap(rename_fm(Fit_Method)~condit, axes = \"all\",ncol=2,scale=\"free\") +\n  labs(title=\"Model Residual Errors - Testing Stage\",y=\"RMSE\", x=\"Velocity Band\") \n\n\n(train_resid / test_resid) +\n  #plot_layout(heights=c(1,1.5)) & \n  plot_annotation(tag_levels = list(c('A','B')),tag_suffix = ') ') \n\n\n\n\n\n\nFigure 2: Model residuals for each combination of training condition, fit method, and model. Residuals reflect the difference between observed and predicted values. Lower values indicate better model fit. Note that y axes are scaled differently between facets.\n\n\n\n\nThe posterior distributions of the \\(c\\) and \\(lr\\) parameters are shown Figure 1, and model predictions are shown alongside the empirical data in Figure 3 and Figure 4 (i.e. these plots combine all the posterior samples from all of the subjects). There were substantial individual differences in the posteriors of both parameters, with the within-group individual differences generally swamped any between-group or between-model differences. The magnitude of these individual differences remains even if we consider only the single best parameter set for each subject.\nWe used the posterior distribution of \\(c\\) and \\(lr\\) parameters to generate a posterior predictive distribution of the observed data for each participant, which then allows us to compare the empirical data to the full range of predictions from each model. Aggregated residuals are displayed in Table 2. The pattern of training stage residual errors are unsurprising across the combinations of models and fitting method . Differences in training performance between ALM and EXAM are generally minor (the two models have identical learning mechanisms). The differences in the magnitude of residuals across the three fitting methods are also straightforward, with massive errors for the ‘fit to Test Only’ model, and the smallest errors for the ‘fit to train only’ models. It is also noteworthy that the residual errors are generally larger for the first block of training, which is likely due to the initial values of the ALM weights being unconstrained by whatever initial biases participants tend to bring to the task. Future work may explore the ability of the models to capture more fine grained aspects of the learning trajectories. However for the present purposes, our primary interest is in the ability of ALM and EXAM to account for the testing patterns while being constrained, or not constrained, by the training data. All subsequent analyses and discussion will thus focus on the testing stage.\nThe residuals of the model predictions for the testing stage (Figure 2) also show an unsurprising pattern across fitting methods - with models fit only to the test data showing the best performance, followed by models fit to both training and test data, and with models fit only to the training data showing the worst performance (note that y axes are scaled different between plots). Unsurprisingly, the advantage of EXAM is strongest for extrapolation positions (the three smallest bands for both groups - as well as the two highest bands for the Constant group). Although EXAM tends to perform better for both Constant and Varied participants (see also Table 2), the relative advantage of EXAM is generally larger for the Constant group - a pattern consistent across all three fitting methods.\nPanel B of Figure 2 directly compares the aggregated observed data to the posterior predictive distributions for the testing stage. Of interest are a) the extent to which the median estimates of the ALM and EXAM posteriors deviate from the observed medians for each velocity band; b) the ability of ALM and EXAM to discriminate between velocity bands; c) the relative performance of models that are constrained by the training data (i.e. the ‘fit to train only’ and ‘fit to both’ models) compared to the ‘fit to test only’ models;\nConsidering first the models fit to only the testing data, which reflect the best possible performance of ALM and EXAM at capturing the group-aggregated testing patterns. For the varied group, both ALM and EXAM are able to capture the median values of the observed data within the 66% credible intervals, and the spread of model predictions generally matches that of the observed data. For the constant group, only EXAM is able to capture the median range of values across the velocity bands, with ALM generally underestimating human velocoties in the upper bands, and overestimating in the lower bands. In the case of band 100, the median ALM prediction appears to match that of our participants - however this is due to a large subset of participants have ALM predictions near 0 for band 100, a pattern we will explore further in our considertation of individual patterns below. Models fit to both training and testing data show a similar pattern to only the testing data display the same basic pattern as those fit to only the testing data, albeit with slightly larger residuals. However models fit to only the training data display markedly worse performance at accounting for the key testing patterns.\n\n** explain how the constant group ALM predictions for band 100 look deceptively good due to aggregation of a large subset of subjects having ALM predictions of 0 for vb100, and a large subset with ALM predictions close to their position 800 value. This is relected by much greater variance of the ALM esimates in the posterior predictive plot\n** comment on how much constrained by the training data has a worse impact on the EXAM predictions for varied than for constant - perhaps due to the varied training data being much noisier than the constant training data.\n** comment on EXAM doing a better job mimicing the within-condition variance of the observed data\n** comment on the % of Constant subjects being best accounted for by EXAM being higher.\n** does EXAM do better for the Constant group because the constant group performs better? Or does training with a single example encourage an exam sort of strategy?\n\n\nCode#post_dat_l |&gt; group_by(id,condit,x) |&gt; filter(Resp==\"Observed\") |&gt; slice_head(n=1)\n\npemp1 &lt;- e1 |&gt; filter(expMode2==\"Test\") |&gt; mutate(Resp=\"Observed\") |&gt; \n  ggplot(aes(x=condit,y=vx, fill=vb, col=ifelse(bandType==\"Trained\",\"black\",NA),size=ifelse(bandType==\"Trained\",\"black\",NA))) + \n  stat_bar+ \n  scale_color_manual(values = c(\"black\" = \"black\"), guide = FALSE) +\n  scale_size_manual(values = c(\"black\" = .5), guide = FALSE) + \n  theme(legend.position=\"right\", axis.title.x = element_blank(), plot.title = element_text(hjust=.50)) +\n  labs(title=\"Empirical Data - Experiment 1\",y=\"vx\", x=\"Condition\",fill=\"Band\") \n\nlayout &lt;- \"\n#A#\nCCC\n\"\n\n# pmod1 &lt;- post_dat_l |&gt; filter(!(Resp==\"Observed\")) |&gt; \n#   group_by(id,condit, Fit_Method,Resp,x) |&gt; \n#  summarize(vx=mean(val)) |&gt; \n#  left_join(testAvgE1, by=join_by(id,condit,x==bandInt)) |&gt;\n#   ggplot(aes(x=condit,y=vx, fill=vb, col=ifelse(bandType==\"Trained\",\"black\",NA),size=ifelse(bandType==\"Trained\",\"black\",NA))) + \n#   stat_bar + \n#     scale_color_manual(values = c(\"black\" = \"black\"), guide = FALSE) +\n#   scale_size_manual(values = c(\"black\" = .5), guide = FALSE) +\n#     ggh4x::facet_nested_wrap(~Resp+rename_fm(Fit_Method), axes = \"all\",ncol=3,scale=\"free\") + \n#   theme(legend.position = \"none\",plot.title = element_text(hjust=.55) ) + labs(title=\"Model Predictions\", y=\"vx\", x=\"Condition\")\n\npmod1 &lt;- post_dat_l |&gt; filter(!(Resp==\"Observed\")) |&gt; \n  group_by(id,condit, Fit_Method,Resp,x) |&gt; \n summarize(vx=median(val)) |&gt; \n left_join(testAvgE1, by=join_by(id,condit,x==bandInt)) |&gt;\n ggplot( aes(x=condit,y=vx, fill=vb,col=ifelse(bandType==\"Trained\",\"black\",NA),size=ifelse(bandType==\"Trained\",\"black\",NA))) + \n  stat_bar + \n    facet_wrap(~Resp+rename_fm(Fit_Method), strip.position = \"top\", scales = \"free_x\") +\n        scale_color_manual(values = c(\"black\" = \"black\"), guide = FALSE) +\n  scale_size_manual(values = c(\"black\" = .5), guide = FALSE) +\n    theme(panel.spacing = unit(0, \"lines\"), \n         strip.background = element_blank(),\n         strip.placement = \"outside\",\n         legend.position = \"none\",plot.title = element_text(hjust=.50),\n         axis.title.x = element_blank(),\n         plot.margin = unit(c(20,0,0,0), \"pt\")) + \n         labs(title=\"Model Predictions - Experiment 1 Data\", y=\"vx\")\n\n(pemp1)  / pmod1 + \n  plot_layout(design = layout) #heights = unit(c(5,-5, 8), c('cm','null'))\n\n\n\n\n\n\nFigure 3\n\n\n\n\n\nCodepemp1 &lt;- e1 |&gt; filter(expMode2==\"Test\") |&gt; \n  group_by(id,condit,vb,bandType) |&gt; \n  ggplot(aes(x=condit,y=dist, fill=vb, col=ifelse(bandType==\"Trained\",\"black\",NA),size=ifelse(bandType==\"Trained\",\"black\",NA))) + \n  stat_summary(fun=mean, geom=\"bar\", position=position_dodge()) + \n  stat_summary(fun.data=mean_se, geom=\"errorbar\", color=\"black\", position=position_dodge(), size=.5) + \n  scale_color_manual(values = c(\"black\" = \"black\"), guide = FALSE) +\n  scale_size_manual(values = c(\"black\" = .5), guide = FALSE) + \n  scale_y_continuous( breaks=seq(0,600,by=200),labels=as.character(seq(0,600,by=200))) +\n  expand_limits(y=600) +\n  theme(legend.position=\"right\", axis.title.x = element_blank(),plot.title = element_text(hjust=.40)) +\n  labs(title=\"Empirical Data\", y=\"Deviation from target band\", fill=\"Band\") \n\n# layout &lt;- \"#A#\n# #B#\n# CCC\"\n\nlayout &lt;- \"#A#\nCCC\"\n\n# pmod1 &lt;- post_dat_l |&gt; filter(!(Resp==\"Observed\")) |&gt; \n#   left_join(testAvgE1, by=join_by(id,condit,x==bandInt)) |&gt;\n#   group_by(id,condit, Fit_Method,Resp,x,bandType) |&gt; \n#   mutate(x=as.factor(x)) |&gt;\n#  summarize(dist=median(dist)) |&gt; \n#   mutate(oc = ifelse(bandType == \"Trained\", \"black\", NA)) |&gt; \n#   ggplot(aes(x=condit,y=dist, fill=x,col=oc,size=oc)) + \n#   stat_bar +\n#   ggh4x::facet_nested_wrap(~Resp+rename_fm(Fit_Method), axes = \"all\",ncol=3) + \n#    scale_color_manual(values = c(\"black\" = \"black\"), guide = FALSE) +\n#    scale_size_manual(values = c(\"black\" = .3), guide = FALSE) + \n#   theme(legend.position = \"none\",plot.title = element_text(hjust=.55) ) + \n#   labs(title=\"Model Predictions\", y=\"Deviation from target band\", x=\"Condition\")\n\npmod1 &lt;- post_dat_l |&gt; filter(!(Resp==\"Observed\")) |&gt; \n  left_join(testAvgE1, by=join_by(id,condit,x==bandInt)) |&gt;\n  group_by(id,condit, Fit_Method,Resp,vb,bandType) |&gt; \n summarize(dist=median(dist)) |&gt; \n ggplot( aes(x=condit,y=dist, fill=vb,col=ifelse(bandType==\"Trained\",\"black\",NA),size=ifelse(bandType==\"Trained\",\"black\",NA))) + \n  stat_bar + \n    facet_wrap(~Resp+rename_fm(Fit_Method), strip.position = \"top\", scales = \"free_x\") +\n        scale_color_manual(values = c(\"black\" = \"black\"), guide = FALSE) +\n  scale_size_manual(values = c(\"black\" = .5), guide = FALSE) +\n    theme(panel.spacing = unit(0, \"lines\"), \n         strip.background = element_blank(),\n         strip.placement = \"outside\",\n         legend.position = \"none\",\n         plot.title = element_text(hjust=.50),\n         plot.margin = unit(c(20,0,0,0), \"pt\"),\n         axis.title.x = element_blank()) + \n         labs(title=\"Model Predictions - Experiment 1 Data\", y=\"Deviation from target band\")\n\n\n\n(pemp1) / pmod1 + plot_layout(design = layout) #heights = unit(c(5,-5, 8), c('cm','null'))\n\n\n\n\n\n\nFigure 4: Empirical data and Model predictions for absolute deviation from target (accuracy). Observed data is shown on top, and predictions from each combination of model and fitting method are shown below.\n\n\n\n\n\nCodetestAvgE1 |&gt; ggplot( aes(x=(interaction(vb,bandType,sep=\"!\")),y=vxAvg, fill=vb)) + \n    stat_summary(fun=mean, geom=\"bar\", position=\"dodge\", alpha=.75)+\n    facet_wrap(~condit, scales = \"free_x\") +\n    theme( ggh4x.axis.nestline  = element_line(colour = \"black\"),\n           strip.background = element_blank(),\n           strip.placement = \"outside\",\n            axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5),) +   \n    scale_x_discrete(guide = guide_axis_nested(delim = \"!\"), name = \"Condit\")\n\n\n\n\n\n\nCode# stat_bar &lt;- list(stat_summary(fun=mean, geom=\"bar\", position=position_dodge(), alpha=.75),\n#   stat_summary(fun.data=mean_se, geom=\"errorbar\", position=position_dodge()))\n# \n#   scale_x_discrete(limits = c(levels(df_plot$Top_contributor)[1:4],\n#                               \"ABC\",\n#                               levels(df_plot$Top_contributor)[5:8],\n#                               \"DEF\",\n#                               levels(df_plot$Top_contributor)[9:12]),\n#                    labels = c(\"ABC\" = \"\",\n#                               \"DEF\" = \"\"))\n\n\nAccounting for individual patterns\nTo more accurately assess the relative abilities of ALM and EXAM to capture important empirical patterns - we will now examine the predictions of both models for the subset of individual participants shown in Figure 5. Panel A presents three varied and constant participants who demonstrated a reasonable degree of discrimination between the 6 velocity bands during testing.\n\n** comment on the different ways ALM can completely fail to mimic discrimination patterns (sbj. 35; sbj. 137),and on how it can sometimes partially succeed (sbj. 11; 14,74)\n** comment on how EXAM can somtimes mimic non-monotonic spacing between bands due to associative stregth from training (i.e. subject 47)\n** compare c values to slope parameters from the statistical models earlier in paper\n\n\nCode# 175, 185, 134, 155, 68, 93, 74\n\n\n\nCodecId_tr &lt;- c(137, 181, 11)\nvId_tr &lt;- c(14, 193, 47)\ncId_tt &lt;- c(11, 93, 35)\nvId_tt &lt;- c(1,14,74)\ncId_new &lt;- c(175, 185, 134, 155, 68, 93, 74)\n# filter(id %in% (filter(bestTestEXAM,group_rank&lt;=9, Fit_Method==\"Test\")\n\ntestIndv &lt;- post_dat_l |&gt; filter(id %in% c(cId_tt,vId_tt,cId_new), Fit_Method==\"Test_Train\") |&gt; \n   mutate(x=as.factor(x), Resp=as.factor(Resp)) |&gt;\n  group_by(id,condit,Fit_Method,Model,Resp) |&gt;\n   mutate(flab=paste0(\"Subject: \",id)) |&gt;\n  ggplot(aes(x = Resp, y = val, fill=x)) + \n  stat_bar_sd + ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",ncol=3) +\n  labs(title=\"Individual Participant fits from Test & Train Fitting Method\",\n       y=\"X Velocity\",fill=\"Target Velocity\") +\n   guides(fill = guide_legend(nrow = 1)) + \n  theme(legend.position = \"bottom\",axis.title.x = element_blank())\n\ntestIndv \n\n\n\n\n\n\nFigure 5: Model predictions alongside observed data for a subset of individual participants. A) 3 constant and 3 varied participants fit to both the test and training data. B) 3 constant and 3 varied subjects fit to only the trainign data.\n\n\n\n\n\nCodee2_model &lt;- load_e2()\n\n\n\ne3_model &lt;- load_e3()\n\n\n\n\n\n\n\nFigure 1: Posterior Distributions of \\(c\\) and \\(lr\\) parameters. Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median. Note that the y axes of the plots for the c parameter are scaled logarithmically.\nFigure 2: Model residuals for each combination of training condition, fit method, and model. Residuals reflect the difference between observed and predicted values. Lower values indicate better model fit. Note that y axes are scaled differently between facets.\nFigure 3: \nFigure 4: Empirical data and Model predictions for absolute deviation from target (accuracy). Observed data is shown on top, and predictions from each combination of model and fitting method are shown below.\nFigure 5: Model predictions alongside observed data for a subset of individual participants. A) 3 constant and 3 varied participants fit to both the test and training data. B) 3 constant and 3 varied subjects fit to only the trainign data.",
    "crumbs": [
      "Model",
      "HTW Modeling"
    ]
  },
  {
    "objectID": "Model/htw_model.html#comparison-to-project-1",
    "href": "Model/htw_model.html#comparison-to-project-1",
    "title": "HTW Model e1",
    "section": "Comparison to Project 1",
    "text": "Comparison to Project 1\nDifferences between the tasks\nThere are a number of differences between Project 1’s Hit The Target (HTT), and Project 2’s Hit The Wall (HTW) tasks.\n\nTask Space Complexity: In HTW, the task space is also almost perfectly smooth, at least for the continuous feedback subjects, if they throw 100 units too hard, they’ll be told that they were 100 units too hard. Whereas in HTT,  it was possible to produce xy velocity combinations that were technically closer to the empirical solution space than other throws, but which resulted in worse feedback due to striking the barrier.\nPerceptual Distinctiveness: HTT offers perceptually distinct varied conditions that directly relate to the task’s demands, which may increase the sallience between training positions encounted by the varied group. In contrast, HTW’s varied conditions differ only in the numerical values displayed, lacking the same level of perceptual differentiation. Conversely in HTW, the only difference between conditions for the varied group are the numbers displayed at the top of the screen which indicate the current target band(e.g. 800-1000, or 1000-1200)\nIn HTW, our primary testing stage of interest has no feedback, whereas in HTT testing always included feedback (the intermittent testing in HTT expt 1 being the only exception). Of course, we do collect testing with feedback data at the end of HTW, but we haven’t focused on that data at all in our modelling work thus far. It’s also interesting to recall that the gap between varied and constant in HTW does seem to close substantially in the testing-with-feedback stage. The difference between no-feedback and feedback testing might be relevant if the benefits of variation have anything to do with improving subsequent learning (as opposed to subsequent immediate performance), OR if the benefits of constant training rely on having the most useful anchor, having the most useful anchor might be a lot less helpful if you’re getting feedback from novel positions and can thus immediately begin to form position-specific anchors for the novelties, rather than relying on a training anchor. \nHTW and HTT both have a similar amount of training trials (~200), and thus the constant groups acquire a similar amount of experience with their single position/velocity in both experiments. However, the varied conditions in both HTT experiments train on 2 positions, whereas the varied group in HTW trains on 3 velocity bands. This means that in HTT the varied group gets half as much experience on any one position as the constant group, and in HTW they only get 1/3 as much experience in any one position. There are likely myriad ways in which this might impact the success of the varied group regardless of how you think the benefits of variation might be occurring, e.g. maybe they also need to develop a coherent anchor, maybe they need more experience in order to extract a function, or more experience in order to properly learn to tune their c parameter. \n\n\n\n\n\n\nFigure 1: The basic structure of the ALM model.\nFigure 2: A) Model residuals for each combination of training condition, fit method, and model. Residuals reflect the difference between observed and predicted values. Lower values indicate better model fit. Note that y axes are scaled differently between facets. B) Full posterior predictive distributions vs. observed data from participants.Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median.\nFigure 3: Posterior Distributions of \\(c\\) and \\(lr\\) parameters. Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median. Note that the y axes of the plots for the c parameter are scaled logarithmically.\nFigure 4: Model predictions alongside observed data for a subset of individual participants. A) 3 constant and 3 varied participants fit to both the test and training data. B) 3 constant and 3 varied subjects fit to only the trainign data.\nFigure 5: Difference in model errors for each participant, with models fit to both train and test data. Positive values favor EXAM, while negative values favor ALM.",
    "crumbs": [
      "Model",
      "HTW Model e1"
    ]
  },
  {
    "objectID": "Model/abc_ojs_react.html",
    "href": "Model/abc_ojs_react.html",
    "title": "abc_ojs_react",
    "section": "",
    "text": "viewof rank = Inputs.range(\n  [1, 50], \n  { value: 50, step: 1, label: \"Rank:\" }\n)\n\nviewof Fit_Method = Inputs.checkbox(\n  [\"Test\", \"Test_Train\", \"Train\"], \n  { value: [\"Test\", \"Test_Train\"], label: \"Fit_Method:\" }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReactable.setFilter('tbl', 'rank', rank)\n\n\n\n\n\n\n\nReactable.setFilter('tbl', 'Fit_Method', Fit_Method)\n\n\n\n\n\n\n\n\n\n// Create an Observable value that automatically tracks the table's filtered data\nfilteredData = Generators.observe(change =&gt; {\n  return Reactable.onStateChange('tbl', state =&gt; {\n    change(state.sortedData)\n  })\n})"
  },
  {
    "objectID": "Misc/indv_diff.html",
    "href": "Misc/indv_diff.html",
    "title": "Individual Differenes",
    "section": "",
    "text": "new_data_grid=map_dfr(1, ~data.frame(unique(test[,c(\"id\",\"condit\",\"bandInt\")]))) |&gt; \n  dplyr::arrange(id,bandInt) |&gt; \n  mutate(condit_dummy = ifelse(condit == \"Varied\", 1, 0)) \n\nindv_coefs &lt;- coef(e1_vxBMM)$id |&gt; \n  as_tibble(rownames=\"id\") |&gt; \n  select(id, starts_with(\"Esti\")) |&gt;\n  left_join(e1Sbjs, by=join_by(id))\n\nindv_coefs_preds &lt;- new_data_grid |&gt; left_join(indv_coefs,by=join_by(id,condit,condit_dummy)) |&gt;\n  mutate(\n    estimate = (Estimate.Intercept) + \n      (bandInt*(Estimate.bandInt)) + \n      (condit_dummy*Estimate.conditVaried) +\n      (bandInt * condit_dummy) * `Estimate.conditVaried:bandInt`)\n  \n# indv_linpred &lt;- e1_vxBMM |&gt; linpred_draws(new_data_grid) |&gt; \n#   summarize(across(.linpred, lst(mean, sd, median), .names = \"{.fn}\"))\n# \n# indv_epred &lt;- e1_vxBMM |&gt; epred_draws(new_data_grid) |&gt;\n#   summarize(across(.epred, lst(mean, sd, median), .names = \"{.fn}\"))\n# \n# indv_pred &lt;- e1_vxBMM |&gt; predicted_draws(new_data_grid) |&gt;\n#    summarize(across(.prediction, lst(mean, sd, median), .names = \"{.fn}\"))\n\n# fitted(e1_vxBMM,re_formula=NA)\n# fitted(e1_vxBMM,re_formula=NULL) # matches epred \n\n\n# |&gt; \n#   group_by(condit) |&gt; \n#   mutate(rank = rank(desc(Estimate.bandInt)),\n#          intErrorRank=rank((Est.Error.Intercept)),\n#          bandErrorRank=rank((Est.Error.bandInt)),\n#          nCond = n()) |&gt; arrange(id) |&gt; ungroup()\n\n\n\n\nfixed_effects &lt;- e1_vxBMM |&gt; \n  spread_draws(`^b_.*`,regex=TRUE) |&gt; arrange(.chain,.draw,.iteration)\n\n\nrandom_effects &lt;- e1_vxBMM |&gt; \n  gather_draws(`^r_id.*$`, regex = TRUE, ndraws = 1000) |&gt; \n  separate(.variable, into = c(\"effect\", \"id\", \"term\"), sep = \"\\\\[|,|\\\\]\") |&gt; \n  mutate(id = factor(id,levels=levels(test$id))) |&gt; \n  pivot_wider(names_from = term, values_from = .value) |&gt; arrange(id,.chain,.draw,.iteration)\n\n\n indvDraws &lt;- left_join(random_effects, fixed_effects, by = join_by(\".chain\", \".iteration\", \".draw\")) |&gt; \n  rename(bandInt_RF = bandInt,RF_Intercept=Intercept) |&gt;\n  right_join(new_data_grid, by = join_by(\"id\")) |&gt; \n  mutate(\n    Slope = bandInt_RF+b_bandInt,\n    Intercept= RF_Intercept + b_Intercept,\n    estimate = (b_Intercept + RF_Intercept) + \n      (bandInt*(b_bandInt+bandInt_RF)) + \n      (condit_dummy*b_conditVaried)+\n      (bandInt * condit_dummy) * `b_conditVaried:bandInt`,\n    SlopeInt=bandInt_RF+b_bandInt + ((`b_conditVaried:bandInt` + bandInt_RF)*condit_dummy),\n    SlopeInt2=bandInt_RF+b_bandInt + ((`b_conditVaried:bandInt`)*condit_dummy)\n  ) \n\n  indvSlopes &lt;- indvDraws |&gt; group_by(id) |&gt; median_qi(Slope,SlopeInt,SlopeInt2, Intercept,b_Intercept,b_bandInt) |&gt;\n  left_join(e1Sbjs, by=join_by(id)) |&gt; group_by(condit) |&gt;\n    select(id,condit,condit_dummy,Intercept,b_Intercept,Slope,SlopeInt,SlopeInt2,b_bandInt, n) |&gt;\n  mutate(rankSlope=rank(Slope)) |&gt; ungroup()  #|&gt; arrange(rankSlope)   |&gt; ungroup()\n\n\nfull_tab &lt;- testAvg |&gt; select(id,condit,vx,vb,bandInt) |&gt; \n  left_join(indvDraws |&gt; group_by(id,bandInt) |&gt; median_qi(estimate,Intercept,Slope), by=join_by(id,bandInt)) |&gt;\n  mutate(resid=vx-estimate) |&gt; relocate(vx,resid,.before=estimate) |&gt;\n  mutate(across(where(is.numeric), \\(x) round(x,2))) \n\n\nindvResid &lt;- full_tab |&gt; group_by(id,condit,bandInt) |&gt; summarize(across(where(is.numeric), \\(x) mean(x))) |&gt;\n  group_by(id,condit) |&gt; mutate(meanResid=mean(resid)) |&gt;\n  arrange(meanResid)\n\nfull_tab |&gt; group_by(condit) |&gt; summarise(mean(resid),sd(resid))\n\n# A tibble: 2 × 3\n  condit   `mean(resid)` `sd(resid)`\n  &lt;fct&gt;            &lt;dbl&gt;       &lt;dbl&gt;\n1 Constant         12.6         126.\n2 Varied            7.28        110.\n\nfull_tab |&gt; group_by(condit,id) |&gt; summarise(m=mean(resid),s=sd(resid)) |&gt; summarise(m=mean(m),s=sd(s)) \n\n# A tibble: 2 × 3\n  condit       m     s\n  &lt;fct&gt;    &lt;dbl&gt; &lt;dbl&gt;\n1 Constant 12.6   64.3\n2 Varied    7.28  49.5\n\nfull_tab |&gt; DT::datatable(options = list(pageLength=10))\n\n\n\n\n\n\n  indvSlopes |&gt; group_by(condit) |&gt; reframe(enframe(quantile(Slope, c(0.0,0.25, 0.5, 0.75,1)), \"quantile\", \"Slope\")) |&gt; \n  pivot_wider(names_from=quantile,values_from=Slope,names_prefix=\"Q_\") |&gt;\n  group_by(condit) |&gt;\n  summarise(across(starts_with(\"Q\"), list(mean = mean))) |&gt; kbl()\n\n\n\n\ncondit\nQ_0%_mean\nQ_25%_mean\nQ_50%_mean\nQ_75%_mean\nQ_100%_mean\n\n\n\nConstant\n-0.1034525\n0.4745830\n0.6895313\n0.933177\n1.397654\n\n\nVaried\n-0.0606000\n0.4078445\n0.7244277\n1.041584\n1.434908\n\n\n\n\n\n  indvSlopes |&gt; group_by(condit)  |&gt; reframe(enframe(quantile(SlopeInt, c(0.0,0.25, 0.5, 0.75,1)), \"quantile\", \"SlopeInt\")) |&gt; \n  pivot_wider(names_from=quantile,values_from=SlopeInt,names_prefix=\"Q_\") |&gt;\n  group_by(condit) |&gt;\n  summarise(across(starts_with(\"Q\"), list(mean = mean))) |&gt; kbl()\n\n\n\n\ncondit\nQ_0%_mean\nQ_25%_mean\nQ_50%_mean\nQ_75%_mean\nQ_100%_mean\n\n\n\nConstant\n-0.1034525\n0.4745830\n0.6895313\n0.933177\n1.397654\n\n\nVaried\n-0.9698544\n-0.0388319\n0.5973872\n1.235211\n2.022140\n\n\n\n\n\n  indvSlopes |&gt; group_by(condit)  |&gt; reframe(enframe(quantile(SlopeInt2, c(0.0,0.25, 0.5, 0.75,1)), \"quantile\", \"SlopeInt2\")) |&gt; \n  pivot_wider(names_from=quantile,values_from=SlopeInt2,names_prefix=\"Q_\") |&gt;\n  group_by(condit) |&gt;\n  summarise(across(starts_with(\"Q\"), list(mean = mean))) |&gt; kbl()\n\n\n\n\ncondit\nQ_0%_mean\nQ_25%_mean\nQ_50%_mean\nQ_75%_mean\nQ_100%_mean\n\n\n\nConstant\n-0.1034525\n0.4745830\n0.6895313\n0.9331770\n1.397654\n\n\nVaried\n-0.1984330\n0.2661345\n0.5845202\n0.9019325\n1.295316\n\n\n\n\n\n  ggplot(indvSlopes, aes(x = Slope, color = condit)) + \n  geom_density() \n\n\n\n\n\n\n    ggplot(indvSlopes, aes(x = SlopeInt2, color = condit)) + \n  geom_density() \n\n\n\n\n\n\n\n\ne1_vxBMM %&gt;% as_draws_df(variable = c('^b_', 'sigma'), regex = TRUE) |&gt;\n  select(starts_with(\"b_\"),sigma) |&gt; \n  pivot_longer(\n    everything(),\n    names_to = 'key',\n    values_to = 'value') %&gt;% \n  ggplot(aes(x = value, fill = key)) +\n  stat_halfeye(\n    # plot the mode\n    point_interval = mode_hdi,\n    # plot HDIs be at both the 95% levels\n    .width = c(.95),\n    outline_bars = TRUE,\n    normalize = 'panels',\n    show.legend = FALSE\n  ) +\n  facet_wrap(~key, scales = 'free', ncol = 4) +\n  ggtitle('Posterior distributions')\n\n\n\n\n\n\n indvDraws |&gt; filter(id %in% 1:10) |&gt; group_by(id,condit,.draw) |&gt; summarise(Slope=mean(Slope)) |&gt; \n   ggplot(aes(x=Slope,col=condit))+geom_density() + facet_wrap(~id)\n\n\n\n\n\n\n  indvDraws  |&gt; group_by(id,condit,.draw) |&gt; summarise(Slope=mean(Slope)) |&gt; \n   ggplot(aes(x=Slope,col=condit,fill=condit))+stat_halfeye()\n\n\n\n\n\n\nindvDraws |&gt; group_by(condit,.draw) |&gt; summarise(Slope=mean(Slope)) |&gt; \n   ggplot(aes(x=Slope,col=condit,fill=condit))+stat_halfeye()\n\n\n\n\n\n\n indvDraws |&gt; group_by(id,condit) |&gt; summarise(Slope=mean(Slope)) |&gt; \n   ggplot(aes(x=Slope,col=condit,fill=condit))+geom_density()\n\n\n\n\n\n\n  indvDraws |&gt; group_by(id,condit,.draw) |&gt; summarise(SlopeInt2=mean(SlopeInt2)) |&gt; \n   ggplot(aes(x=SlopeInt2,col=condit,fill=condit))+geom_density()\n\n\n\n\n\n\n  # pp_check(e1_vxBMM,\n  #        type = 'stat_grouped',\n  #        ndraws = 200,\n  #        group = 'id',\n  #        stat = 'mean')\n\n\n  n_sbj = 3\n  \n  \n{indvDraws |&gt; filter(condit==\"Varied\")  |&gt; \n   indv_model_plot(indvSlopes |&gt; filter(condit==\"Varied\"), \n                   testAvg |&gt; filter(condit==\"Varied\"),slopeVar=Slope, rank_variable=Slope,n_sbj=n_sbj,\"max\") + \n     ggtitle(\"Slope = bandInt_RF+b_bandInt\") } /\n \n{indvDraws |&gt; filter(condit==\"Varied\")  |&gt; \n  indv_model_plot(indvSlopes |&gt; filter(condit==\"Varied\"), \n                  testAvg |&gt; filter(condit==\"Varied\"),slopeVar=SlopeInt, rank_variable=Slope,n_sbj=n_sbj,\"max\")  + \n     ggtitle(\"SlopeInt=bandInt_RF+b_bandInt + ((`b_conditVaried:bandInt` + bandInt_RF)*condit_dummy)\") } /\n\nindvDraws |&gt; filter(condit==\"Varied\")  |&gt; \n  indv_model_plot(indvSlopes |&gt; filter(condit==\"Varied\"), \n                  testAvg |&gt; filter(condit==\"Varied\"),slopeVar=SlopeInt2, rank_variable=Slope,n_sbj=n_sbj,\"max\") + \n     ggtitle(\"SlopeInt2=bandInt_RF+b_bandInt + ((`b_conditVaried:bandInt` + b_bandInt)*condit_dummy)\") \n\n\n\n\n\n\n{indvDraws |&gt; filter(condit==\"Varied\")  |&gt; \n   indv_model_plot(indvSlopes |&gt; filter(condit==\"Varied\"), \n                   test |&gt; filter(condit==\"Varied\"),slopeVar=Slope, rank_variable=Slope,n_sbj=n_sbj,\"max\") + \n     ggtitle(\"Slope = bandInt_RF+b_bandInt\") } /\n \n{indvDraws |&gt; filter(condit==\"Varied\")  |&gt; \n  indv_model_plot(indvSlopes |&gt; filter(condit==\"Varied\"), \n                  test |&gt; filter(condit==\"Varied\"),slopeVar=SlopeInt, rank_variable=Slope,n_sbj=n_sbj,\"max\")  + \n     ggtitle(\"SlopeInt=bandInt_RF+b_bandInt + ((`b_conditVaried:bandInt` + bandInt_RF)*condit_dummy)\") } /\n\nindvDraws |&gt; filter(condit==\"Varied\")  |&gt; \n  indv_model_plot(indvSlopes |&gt; filter(condit==\"Varied\"), \n                  test |&gt; filter(condit==\"Varied\"),slopeVar=SlopeInt2, rank_variable=Slope,n_sbj=n_sbj,\"max\") + \n     ggtitle(\"SlopeInt2=bandInt_RF+b_bandInt + ((`b_conditVaried:bandInt` + b_bandInt)*condit_dummy)\") \n\n\n\n\n\n\n\n\n{indvDraws  |&gt; indv_model_plot(indvSlopes, test,slopeVar=Slope, rank_variable=Slope,n_sbj=n_sbj,\"max\") + \n     ggtitle(\"Slope = bandInt_RF+b_bandInt\") } /\n {ggplot(indvSlopes, aes(x = Slope, color = condit)) + geom_density() } /\n gridExtra::tableGrob( indvSlopes |&gt; group_by(condit) |&gt; summarise(Mean=mean(Slope),Sd=sd(Slope)) ) + \n  #gt_temp(indvSlopes |&gt; group_by(condit) |&gt; summarise(Mean=mean(Slope),Sd=sd(Slope)) ) +\n  plot_layout(heights=unit(c(16,6,3),c('cm'))) + plot_annotation(\"vx ~ condit * bandInt + (1 + bandInt | id) \")\n\n\n\n\n\n\n\nBand Only Model\n\ne1_testVx_grRF8 &lt;- readRDS(here::here(\"data/model_cache/e1_testVx_grRF8.rds\"))\n# e1_testVx_grRF8$formula\n# vx ~ bandInt + (1 + bandInt || gr(id, by = condit)) \n\n\nnew_data_grid=map_dfr(1, ~data.frame(unique(test[,c(\"id\",\"bandInt\")]))) |&gt; \n  dplyr::arrange(id,bandInt) \n\n\nfixed_effects &lt;- e1_testVx_grRF8 |&gt; \n  spread_draws(`^b_.*`,regex=TRUE) |&gt; arrange(.chain,.draw,.iteration)\n\n\nrandom_effects &lt;- e1_testVx_grRF8 |&gt; \n  gather_draws(`^r_id.*$`, regex = TRUE, ndraws = 1000) |&gt; \n  separate(.variable, into = c(\"effect\", \"id\", \"term\"), sep = \"\\\\[|,|\\\\]\") |&gt; \n  mutate(id = factor(id,levels=levels(test$id))) |&gt; \n  pivot_wider(names_from = term, values_from = .value) |&gt; arrange(id,.chain,.draw,.iteration)\n\n\nindvDraws &lt;- left_join(random_effects, fixed_effects, by = join_by(\".chain\", \".iteration\", \".draw\")) |&gt; \n  rename(bandInt_RF = bandInt,RF_Intercept=Intercept) %&gt;%\n  right_join(e1Sbjs,., by=join_by(id)) |&gt;\n  right_join(new_data_grid, by = join_by(\"id\")) |&gt; \n  mutate(\n    Slope = bandInt_RF+b_bandInt,\n    Intercept= RF_Intercept + b_Intercept,\n    estimate = (b_Intercept + RF_Intercept) + (bandInt*(b_bandInt+bandInt_RF)),\n  ) \n\nindvSlopes &lt;- indvDraws |&gt; group_by(id) |&gt; median_qi(RF_Intercept,b_Intercept,Intercept,bandInt_RF,b_bandInt,Slope) |&gt;\n  left_join(e1Sbjs, by=join_by(id)) |&gt; group_by(condit) |&gt;\n    select(id,condit,RF_Intercept,b_Intercept,Intercept,bandInt_RF,b_bandInt,Slope, n) |&gt;\n  ungroup() |&gt;\n  mutate(rankSlope=rank(Slope), \n         Slope2 = ((coef(e1_testVx_grRF8)$id |&gt; as_tibble(rownames=\"id\") ) |&gt; pull(Estimate.bandInt)) )\n \n\n{ indvDraws |&gt; indv_model_plot(indvSlopes ,test, slopeVar=Slope, rank_variable=Slope,n_sbj=n_sbj,\"max\") + \n     ggtitle(\"Slope = bandInt_RF+b_bandInt\") } /\n {ggplot(indvSlopes, aes(x = Slope, color = condit)) + geom_density() } /\n gridExtra::tableGrob( indvSlopes |&gt; group_by(condit) |&gt; summarise(Mean=mean(Slope),Sd=sd(Slope)) ) + \n # gt_temp(indvSlopes |&gt; group_by(condit) |&gt; summarise(Mean=mean(Slope),Sd=sd(Slope)) ) +\n  plot_layout(heights=unit(c(16,6,2),c('cm'))) + plot_annotation(\"vx ~ bandInt + (1 + bandInt || gr(id, by = condit))  \")\n\n\n\n\n\n\n\n\nnoInt_tab &lt;- testAvg |&gt; select(id,condit,vx,vb,bandInt) |&gt; \n  left_join(indvDraws |&gt; group_by(id,bandInt) |&gt; median_qi(estimate,Intercept,Slope), by=join_by(id,bandInt)) |&gt;\n  mutate(resid=vx-estimate) |&gt; relocate(vx,resid,.before=estimate) |&gt;\n  mutate(across(where(is.numeric), \\(x) round(x,0))) \n\nnoInt_tab |&gt; group_by(condit) |&gt; summarise(mean(resid),sd(resid))\n\n# A tibble: 2 × 3\n  condit   `mean(resid)` `sd(resid)`\n  &lt;fct&gt;            &lt;dbl&gt;       &lt;dbl&gt;\n1 Constant         12.6         127.\n2 Varied            6.58        111.\n\nnoInt_tab |&gt; group_by(condit,id) |&gt; summarise(m=mean(resid),s=sd(resid)) |&gt; summarise(m=mean(m),s=sd(s)) \n\n# A tibble: 2 × 3\n  condit       m     s\n  &lt;fct&gt;    &lt;dbl&gt; &lt;dbl&gt;\n1 Constant 12.6   64.7\n2 Varied    6.58  49.5\n\nnoInt_tab |&gt; DT::datatable(options = list(pageLength=15))\n\n\n\n\n\n\nrandom_effects |&gt; group_by(id) |&gt; median_hdi()\n\nindv_coefs |&gt; select(id,condit,Estimate.bandInt)\nindv_coefs |&gt; select(id,condit,Estimate.bandInt) |&gt; group_by(condit) |&gt; summarise(mean(Estimate.bandInt))\n\n\nfixef(e1_vxBMM)\nranef(e1_vxBMM)$id[, ,\"bandInt\"] |&gt; as_tibble(rownames=\"id\") |&gt; \n  left_join(e1Sbjs,by=join_by(id)) |&gt;\n  group_by(condit) |&gt; summarise(mean(Estimate))\n\nranef(e1_vxBMM)$id[, ,\"bandInt\"] |&gt; as_tibble(rownames=\"id\") |&gt; \n  left_join(e1Sbjs,by=join_by(id)) |&gt; ggplot(aes(Estimate,color=condit)) + geom_density()\n\n\npopSlope &lt;- tidy(e1_vxBMM, effects = \"fixed\") |&gt; filter(term==\"bandInt\") |&gt; pull(estimate)\npopInteraction &lt;- tidy(e1_vxBMM, effects = \"fixed\") |&gt; filter(term==\"conditVaried:bandInt\") |&gt; pull(estimate)\n\n\ne1Vx &lt;- ranef(e1_vxBMM)$id[, ,\"bandInt\"] |&gt; as_tibble(rownames=\"id\") %&gt;%\n  left_join(e1Sbjs,., by=join_by(id)) |&gt; select(id,condit,condit_dummy,Estimate) |&gt; \n  mutate(pop=popSlope,Slope1=Estimate + pop) |&gt; \n  left_join(indv_coefs |&gt; select(id,Slope2=Estimate.bandInt), join_by(id)) |&gt;\n  mutate(Slope3=Estimate + pop + ((popInteraction + Estimate)*condit_dummy))\n  \ne1Vx |&gt; group_by(condit) |&gt; summarise(Slope_with_int=mean(Slope3), sd_Slope=sd(Slope3))\n\ne1Vx |&gt; group_by(condit) |&gt; reframe(enframe(quantile(Slope3, c(0.0,0.25, 0.5, 0.75,1)), \"quantile\", \"Slope3\")) |&gt; \n  pivot_wider(names_from=quantile,values_from=Slope3,names_prefix=\"Q_\") |&gt;\n  group_by(condit) |&gt;\n  summarise(across(starts_with(\"Q\"), list(mean = mean))) |&gt; kbl()\n\n{ e1Vx |&gt; ggplot(aes(Slope1,color=condit)) + geom_density() +ggtitle(\"RF_Estimate + Population_Est\") } /\ne1Vx |&gt; ggplot(aes(Slope3,color=condit)) + geom_density() + \n  ggtitle(\"Slope3=Estimate + pop + ((popInteraction + Estimate)*condit_dummy)\")\n\nExamine slopes from different models\n\n# vx ~ bandInt + (1 + bandInt || gr(id, by = condit)) \nbandOnly &lt;- ranef(e1_testVx_grRF8)$id[, ,\"bandInt\"] |&gt; as_tibble(rownames=\"id\") |&gt; \n  left_join(e1Sbjs,by=join_by(id)) |&gt; select(id,condit,condit_dummy,starts_with(\"Estimate\")) |&gt;\n # group_by(condit) |&gt; \n  #summarise(Estimate=mean(Estimate)) |&gt;\n  mutate(pop = tidy(e1_testVx_grRF8, effects = \"fixed\") |&gt; filter(term==\"bandInt\") |&gt; pull(estimate),\n         Slope1=pop+Estimate,\n         Slope2 = (coef(e1_testVx_grRF8)$id |&gt; as_tibble(rownames=\"id\") |&gt; pull(Estimate.bandInt))) \n\n# vx ~ condit + bandInt + (1 + bandInt | id) \nnoInt &lt;- ranef(e1_conditPlusBand_RF)$id[, ,\"bandInt\"] |&gt; as_tibble(rownames=\"id\") |&gt; \n  left_join(e1Sbjs,by=join_by(id)) |&gt; select(id,condit,condit_dummy,starts_with(\"Estimate\")) |&gt;\n # group_by(condit) |&gt; \n  #summarise(Estimate=mean(Estimate)) |&gt;\n  mutate(pop = tidy(e1_conditPlusBand_RF, effects = \"fixed\") |&gt; filter(term==\"bandInt\") |&gt; pull(estimate),\n         Slope1=pop+Estimate,\n         Slope2 = (coef(e1_conditPlusBand_RF)$id |&gt; as_tibble(rownames=\"id\") |&gt; pull(Estimate.bandInt))) \n\n\n# vx ~ condit * bandInt + (1 + bandInt | gr(id, by = condit)) \npopSlope &lt;- tidy(e1_testVxBand_grRF, effects = \"fixed\") |&gt; filter(term==\"bandInt\") |&gt; pull(estimate)\npopInteraction &lt;- tidy(e1_testVxBand_grRF, effects = \"fixed\") |&gt; filter(term==\"conditVaried:bandInt\") |&gt; pull(estimate)\nvx_grRF &lt;- ranef(e1_testVxBand_grRF)$id[, ,\"bandInt\"] |&gt; as_tibble(rownames=\"id\") |&gt; \n  left_join(e1Sbjs,by=join_by(id)) |&gt; select(id,condit,condit_dummy,starts_with(\"Estimate\")) |&gt;\n # group_by(condit) |&gt; \n  #summarise(Estimate=mean(Estimate)) |&gt;\n  mutate(pop = tidy(e1_testVxBand_grRF, effects = \"fixed\") |&gt; filter(term==\"bandInt\") |&gt; pull(estimate),\n         Slope1=pop+Estimate,\n         Slope2 = (coef(e1_testVxBand_grRF)$id |&gt; as_tibble(rownames=\"id\") |&gt; pull(Estimate.bandInt)), \n         Slope3=Estimate + pop + ((popInteraction + Estimate)*condit_dummy)) \n\n\nbandOnly |&gt; group_by(condit) |&gt; summarise(Estimate=mean(Slope1))\nnoInt |&gt; group_by(condit) |&gt; summarise(Estimate=mean(Slope1))\nvx_grRF |&gt; group_by(condit) |&gt; summarise(Estimate=mean(Slope3))\n\n\nmodelsummary(list(\"Band Only\" = e1_testVx_grRF8,\n                  \"No Interaction\" = e1_conditPlusBand_RF,\n                  \"Full Model - Gr\" = e1_testVxBand_grRF,\n                  \"Full Model\" = e1_vxBMM),\n             coef_map = c(\"b_Intercept\"=\"Intercept\",\"b_bandInt\"=\"Band Slope\", \"b_conditVaried\"=\"Condition\",\n                          'b_conditVaried:bandInt'=\"Interaction\",\"sigma\"=\"Sigma\"),\n             output=\"markdown\",gof_map=NA,fmt=2)\n\n{ bandOnly |&gt; ggplot(aes(Slope1,color=condit)) + geom_density() + \n  ggtitle(\"vx ~ bandInt + (1 + bandInt || gr(id, by = condit))\") } /\n  { noInt |&gt; ggplot(aes(Slope1,color=condit)) + geom_density() + \n  ggtitle(\"vx ~ condit + bandInt + (1 + bandInt | id)  \") } / \n{ vx_grRF |&gt; ggplot(aes(Slope3,color=condit)) + geom_density() + \n  ggtitle(\"vx ~ condit * bandInt + (1 + bandInt | gr(id, by = condit)) \") } /\n{ e1Vx |&gt; ggplot(aes(Slope3,color=condit)) + geom_density() + \n  ggtitle(\"vx ~ condit * bandInt + (1 + bandInt | id) \") }\n\n\nbandOnly |&gt; group_by(condit) |&gt; reframe(enframe(quantile(Slope1, c(0.0,0.25, 0.5, 0.75,1)), \"quantile\", \"Slope1\")) |&gt; \n  pivot_wider(names_from=quantile,values_from=Slope1,names_prefix=\"Q_\") |&gt;\n  group_by(condit) |&gt;\n  summarise(across(starts_with(\"Q\"), list(mean = mean))) |&gt; \n  pandoc.table(caption=\"vx ~ bandInt + (1 + bandInt || gr(id, by = condit))\")\n\nnoInt |&gt; group_by(condit) |&gt; reframe(enframe(quantile(Slope1, c(0.0,0.25, 0.5, 0.75,1)), \"quantile\", \"Slope1\")) |&gt; \n  pivot_wider(names_from=quantile,values_from=Slope1,names_prefix=\"Q_\") |&gt;\n  group_by(condit) |&gt;\n  summarise(across(starts_with(\"Q\"), list(mean = mean))) |&gt; \n  pandoc.table(caption=\"vx ~ condit + bandInt + (1 + bandInt | id)  \")\n\nvx_grRF |&gt; group_by(condit) |&gt; reframe(enframe(quantile(Slope3, c(0.0,0.25, 0.5, 0.75,1)), \"quantile\", \"Slope1\")) |&gt; \n  pivot_wider(names_from=quantile,values_from=Slope1,names_prefix=\"Q_\") |&gt;\n  group_by(condit) |&gt;\n  summarise(across(starts_with(\"Q\"), list(mean = mean))) |&gt; \n  pandoc.table(caption=\"vx ~ condit * bandInt + (1 + bandInt | gr(id, by = condit))  \")\n\ne1Vx |&gt; group_by(condit) |&gt; reframe(enframe(quantile(Slope3, c(0.0,0.25, 0.5, 0.75,1)), \"quantile\", \"Slope3\")) |&gt; \n  pivot_wider(names_from=quantile,values_from=Slope3,names_prefix=\"Q_\") |&gt;\n  group_by(condit) |&gt;\n  summarise(across(starts_with(\"Q\"), list(mean = mean))) |&gt;\n  pandoc.table(caption=\"vx ~ condit * bandInt + (1 + bandInt | id)  \")\n\n\n# \n# indv_model_plot &lt;- function(combined_df, indv_coefs, testAvg, rank_variable = \"Estimate.Intercept\", n_sbj = 5, order = \"min\") {\n#   slice_fn &lt;- if (order == \"min\") slice_min else slice_max\n#     rank_variable_name &lt;- deparse(substitute(rank_variable))\n#   selected_ids &lt;- indv_coefs %&gt;%\n#     slice_fn({{ rank_variable }}, n = n_sbj, by = condit) %&gt;%\n#     select(id, rank_var = {{ rank_variable }})\n#   print(head(selected_ids))\n#    cdf &lt;- combined_df %&gt;%\n#     inner_join(selected_ids, by = join_by(id)) %&gt;%\n#     mutate(label = paste0(\"Subject \", id, \"; \", rank_variable_name, \"=\", round(rank_var, 2)))\n#     #print(head(cdf))\n# \n#     cdf |&gt;\n#     group_by(id, bandInt)  |&gt;\n#     sample_n(50) %&gt;%\n#     ggplot(aes(x = bandInt, y = estimate)) +\n#     geom_abline(aes(intercept = Intercept + b_Intercept, slope = bandInt_RF + b_bandInt), color = \"grey50\") +\n#     geom_abline(data = indv_coefs %&gt;%\n#                   slice_fn({{ rank_variable }}, n = n_sbj, by = condit),\n#                 aes(intercept = {{ rank_variable }}, slope = {{ rank_variable }}), color = \"red\") +\n#     stat_halfeye() +\n#     stat_halfeye(data = testAvg %&gt;%\n#                    filter(id %in% selected_ids$id),\n#                  aes(x = bandInt, y = vx), color = \"blue\") +\n#     ggh4x::facet_nested_wrap(vars(condit, label)) +\n#        ggtitle(glue(\"Order {n_sbj} Individuals for {rank_variable_name}\"))\n# \n# }\n\n\ncombined_df |&gt; indv_model_plot(indv_coefs, testAvg, rank_variable=Estimate.Intercept,n_sbj=6,\"min\")\ncombined_df |&gt; indv_model_plot(indv_coefs, testAvg, rank_variable=Estimate.Intercept,n_sbj=6,\"max\")\ncombined_df |&gt; indv_model_plot(indv_coefs, testAvg, rank_variable=Estimate.bandInt,n_sbj=6,\"min\")\ncombined_df |&gt; indv_model_plot(indv_coefs, testAvg, rank_variable=Estimate.bandInt,n_sbj=6,\"max\")\n\ncombined_df |&gt; indv_model_plot(indv_coefs, testAvg, rank_variable=Est.Error.Intercept,n_sbj=6,\"min\")\ncombined_df |&gt; indv_model_plot(indv_coefs, testAvg, rank_variable=Est.Error.Intercept,n_sbj=6,\"max\")\n\n\n\n\n## Sort by intercept \ncombined_df |&gt; \n  filter(id %in% (indv_coefs |&gt; slice_min(Estimate.Intercept,n=5,by=condit) |&gt; pull(id))) |&gt; \n  group_by(id, bandInt) |&gt;\n  sample_n(50) |&gt;\n  ggplot(aes(x=bandInt,y=estimate)) + \n  geom_abline(aes(intercept=Intercept+b_Intercept, slope=bandInt_RF+b_bandInt), color=\"grey50\") +\n  geom_abline(data=indv_coefs |&gt; slice_min(Estimate.Intercept,n=5,by=condit),aes(intercept=Estimate.Intercept,slope=Estimate.bandInt,color=\"red\")) +\n  stat_halfeye() +\n  stat_halfeye(data=testAvg |&gt; filter(id %in% (indv_coefs |&gt; slice_min(Estimate.Intercept,n=5,by=condit) |&gt; pull(id))), aes(x=bandInt,y=vx),color=\"blue\") +\n  ggh4x::facet_nested_wrap(vars(condit,id))\n\n\n\nindv_coefs |&gt; ggplot(aes(y=id, x=Estimate.bandInt)) + geom_pointrange()\n\n\n\n\n\ncd &lt;- left_join(random_effects, fixed_effects, by = join_by(\".chain\", \".iteration\", \".draw\")) |&gt; \n  rename(bandInt_RF = bandInt) |&gt;\n  mutate(Slope=bandInt_RF+b_bandInt) |&gt; group_by(id) \n\ncdMed &lt;- cd |&gt; group_by(id) |&gt; median_qi(Slope) |&gt; mutate(rankSlope=rank(Slope)) |&gt; arrange(rankSlope) |&gt; left_join(e1Sbjs, by=join_by(id))\n\ncdMed %&gt;% ggplot(aes(y=rankSlope, x=Slope,fill=condit,color=condit)) + \n  geom_pointrange(aes(xmin=.lower , xmax=.upper)) + \n  labs(x=\"Estimated Slope\", y=\"Participant\") # + facet_wrap(~condit) + \n\ncd |&gt;  ggplot(aes(y=id, x=Slope)) + geom_pointrange()\n\n\ntestAvg |&gt; select(id,condit,bandInt,vx) |&gt;\n  group_by(bandInt) |&gt;\n  mutate(across(c(vx), list(c = ~ . - mean(.)))) %&gt;% \n  group_by(id,bandInt) %&gt;% \n  mutate(\n    across(\n      c(vx_c), \n      list(\n        # Between-person center (= person's mean)\n        b = ~ mean(.), \n        # Within-person center (= deviation from person's mean)\n        w = ~ . - mean(.)\n      ),\n      .names = \"{.col}{.fn}\"\n    )\n  ) %&gt;% \n  ungroup()\n\n# A tibble: 936 × 7\n   id    condit bandInt    vx  vx_c vx_cb vx_cw\n   &lt;fct&gt; &lt;fct&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 1     Varied     100  565. -27.5 -27.5     0\n 2 1     Varied     350  791.  76.1  76.1     0\n 3 1     Varied     600  985. 160.  160.      0\n 4 1     Varied     800 1061.  22.1  22.1     0\n 5 1     Varied    1000 1187.  10.3  10.3     0\n 6 1     Varied    1200 1379.  90.1  90.1     0\n 7 2     Varied     100 1278. 686.  686.      0\n 8 2     Varied     350 1321. 606.  606.      0\n 9 2     Varied     600 1346. 522.  522.      0\n10 2     Varied     800 1614. 575.  575.      0\n# ℹ 926 more rows\n\ntestAvg |&gt; select(id,condit,bandInt,vx) |&gt; group_by(condit,bandInt) |&gt; summarise(mean(vx))\n\n# A tibble: 12 × 3\n# Groups:   condit [2]\n   condit   bandInt `mean(vx)`\n   &lt;fct&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1 Constant     100       523.\n 2 Constant     350       661.\n 3 Constant     600       772.\n 4 Constant     800      1009.\n 5 Constant    1000      1173.\n 6 Constant    1200      1307.\n 7 Varied       100       665.\n 8 Varied       350       772.\n 9 Varied       600       880.\n10 Varied       800      1070.\n11 Varied      1000      1181.\n12 Varied      1200      1269.\n\n\n\ncoef(e1_vxBMM)$id %&gt;% as_tibble(rownames=\"id\") %&gt;% select(id, starts_with(\"Est\")) |&gt; print(n=15)\n\nn_lines &lt;- 20\nf &lt;- fitted(e1_vxBMM, newdata = new_data_grid, re_formula = NA, summary=F, ndraws=n_lines) |&gt; \n  as_tibble() %&gt;% \n  mutate(draw = 1:n()) %&gt;% \n  pivot_longer(-draw)\n\n\n\n\n\n\ncombined_df |&gt; \n  filter(id %in% top_indv_coefs$id) |&gt; \n  group_by(id, bandInt) |&gt;\n  sample_n(50) |&gt;\n  ggplot(aes(x=bandInt,y=estimate)) + \n  geom_abline(aes(intercept=Intercept+b_Intercept, slope=bandInt_RF+b_bandInt), color=\"grey50\") +\n  geom_abline(data=indv_coefs |&gt; filter(id %in% top_indv_coefs$id),aes(intercept=Estimate.Intercept,slope=Estimate.bandInt,color=\"red\")) +\n  stat_halfeye() +\n  stat_halfeye(data=testAvg |&gt; filter(id %in% top_indv_coefs$id), aes(x=bandInt,y=vx),color=\"blue\") +\n  facet_wrap(~id)\n\n\n\n\n\n## Sort by intercept \ncombined_df |&gt; \n  filter(id %in% (indv_coefs |&gt; slice_min(Estimate.Intercept,n=5,by=condit) |&gt; pull(id))) |&gt; \n  group_by(id, bandInt) |&gt;\n  sample_n(50) |&gt;\n  ggplot(aes(x=bandInt,y=estimate)) + \n  geom_abline(aes(intercept=Intercept+b_Intercept, slope=bandInt_RF+b_bandInt), color=\"grey50\") +\n  geom_abline(data=indv_coefs |&gt; slice_min(Estimate.Intercept,n=5,by=condit),aes(intercept=Estimate.Intercept,slope=Estimate.bandInt,color=\"red\")) +\n  stat_halfeye() +\n  stat_halfeye(data=testAvg |&gt; filter(id %in% (indv_coefs |&gt; slice_min(Estimate.Intercept,n=5,by=condit) |&gt; pull(id))), aes(x=bandInt,y=vx),color=\"blue\") +\n  ggh4x::facet_nested_wrap(vars(condit,id))\n\n\n## Sort by intercept fit error\ncombined_df |&gt; \n  filter(id %in% (indv_coefs |&gt; slice_min(Est.Error.Intercept,n=5,by=condit) |&gt; pull(id))) |&gt; \n  group_by(id, bandInt) |&gt;\n  sample_n(50) |&gt;\n  ggplot(aes(x=bandInt,y=estimate)) + \n  geom_abline(aes(intercept=Intercept+b_Intercept, slope=bandInt_RF+b_bandInt), color=\"grey50\") +\n  geom_abline(data=indv_coefs |&gt; slice_min(Est.Error.Intercept,n=5,by=condit),aes(intercept=Estimate.Intercept,slope=Estimate.bandInt,color=\"red\")) +\n  stat_halfeye() +\n  stat_halfeye(data=testAvg |&gt; filter(id %in% well_fit$id), aes(x=bandInt,y=vx),color=\"blue\") +\n  ggh4x::facet_nested_wrap(vars(condit,id))\n\n\n\ncombined_df |&gt; \n  filter(id %in% (indv_coefs |&gt; filter(rank&lt;=2) |&gt; pull(id)) )  |&gt; \n  group_by(id, bandInt) |&gt;\n  sample_n(50) |&gt;\n  ggplot(aes(x=bandInt,y=estimate)) + \n  geom_abline(aes(intercept=Intercept+b_Intercept, slope=bandInt_RF+b_bandInt), color=\"grey50\") +\n  geom_abline(data=indv_coefs |&gt; filter(id %in% (indv_coefs |&gt; filter(rank&lt;=2) |&gt; pull(id))),aes(intercept=Estimate.Intercept,slope=Estimate.bandInt,color=\"red\")) +\n  stat_halfeye() +\n  stat_halfeye(data=testAvg |&gt; filter(id %in% (indv_coefs |&gt; filter(rank&lt;=2) |&gt; pull(id))), aes(x=bandInt,y=vx),color=\"blue\") +\n  ggh4x::facet_nested_wrap(vars(condit,id))\n\n\nindv_coefs |&gt; \n  filter(id %in% top_indv_coefs$id) |&gt; ggplot(aes(x=bandInt,y=estimate)) + \n  geom_abline(aes(intercept=Intercept+b_Intercept, slope=bandInt_RF+b_bandInt), color=\"grey50\") +\n  stat_halfeye()\n\n\n\nall_effects &lt;- e1_vxBMM |&gt; \n  gather_draws(b_Intercept, b_conditVaried, b_bandInt, `b_conditVaried:bandInt`, `^r_id.*$`, regex = TRUE, ndraws = 1)\n\nhead(all_effects)\n\n\n nd &lt;- e1_vxBMM |&gt;  \n   spread_draws(b_Intercept, b_bandInt, `b_conditVaried`,`b_conditVaried:bandInt`,  r_id[id,term], ndraws=10)  \n\n\ndf_pred &lt;- \n  posterior_predict(e1_distBMM, ndraws = 500) |&gt;\n  array_branch(margin=1) |&gt; \n   map_dfr( \n    function(yrep_iter) {\n      test %&gt;%\n        mutate(dist_pred = yrep_iter)\n    },\n    .id = 'iter'\n  ) |&gt;\n  mutate(iter = as.numeric(iter))\n\ndf_pred %&gt;% filter(id %in% 1:162 ) |&gt;\n  filter(iter &lt; 100) %&gt;%\n  ggplot(aes(dist_pred, group = iter)) +\n  geom_line(alpha = .05, stat = 'density', color = 'blue') +\n  geom_density(data = test |&gt; filter(id %in% 1:162),\n               aes(dist,col=vb),\n               inherit.aes = FALSE,\n               size = 0.8) + # 1\n  facet_grid(condit ~ vb) +\n  xlab('vx')\n\ndf_pred %&gt;% filter(id %in% 1:10 ) |&gt;\n  filter(iter &lt; 100) %&gt;%\n  ggplot(aes(dist_pred, group = iter)) +\n  geom_line(alpha = .05, stat = 'density', color = 'blue') +\n  geom_density(data = test |&gt; filter(id %in% 1:10),\n               aes(dist),\n               inherit.aes = FALSE,\n               size = 0.5) + # 1\n  facet_wrap(id ~ .) +\n  xlab('vx')\n\n\nvx_pred &lt;- \n  posterior_predict(e1_vxBMM, ndraws = 500) |&gt; \n  array_branch(margin=1) |&gt; \n   map_dfr( \n    function(yrep_iter) {\n      test %&gt;%\n        mutate(vx_pred = yrep_iter)\n    },\n    .id = 'iter'\n  ) %&gt;%\n  mutate(iter = as.numeric(iter))\n\nvx_pred %&gt;% filter(id %in% 1:2 ) |&gt;\n  filter(iter &lt; 100) %&gt;%\n  ggplot(aes(vx_pred, group = iter)) +\n  geom_line(alpha = .05, stat = 'density', color = 'blue') +\n  geom_density(data = test |&gt; filter(id %in% 1:2),\n               aes(vx,col=vb),\n               inherit.aes = FALSE,\n               size = 0.5) + # 1\n  facet_grid(id ~ vb) +\n  xlab('vx')\n\nvx_pred  |&gt;\n  filter(iter &lt; 100) %&gt;%\n  ggplot(aes(vx_pred, group = iter)) +\n  geom_line(alpha = .05, stat = 'density', color = 'blue') +\n  geom_density(data = test,\n               aes(vx,col=vb),\n               inherit.aes = FALSE,\n               size = 0.5) + # 1\n  facet_grid(condit ~ vb) +\n  xlab('vx')\n\nvx_pred %&gt;% filter(id %in% 1:9 ) |&gt;\n  filter(iter &lt; 100) %&gt;%\n  ggplot(aes(vx_pred, group = iter)) +\n  geom_line(alpha = .05, stat = 'density', color = 'blue') +\n  geom_density(data = test |&gt; filter(id %in% 1:9),\n               aes(vx),\n               inherit.aes = FALSE,\n               size = 0.5) + # 1\n  facet_wrap(id ~ .,ncol=3) +\n  xlab('vx')\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindv_coefs |&gt; \n  filter(id %in% top_indv_coefs$id) |&gt; ggplot(aes(x=bandInt,y=estimate)) + \n  geom_abline(aes(intercept=Intercept+b_Intercept, slope=bandInt_RF+b_bandInt), color=\"grey50\") +\n  stat_halfeye()\n\n\n\nall_effects &lt;- e1_vxBMM |&gt; \n  gather_draws(b_Intercept, b_conditVaried, b_bandInt, `b_conditVaried:bandInt`, `^r_id.*$`, regex = TRUE, ndraws = 1)\n\nhead(all_effects)\n\n\n nd &lt;- e1_vxBMM |&gt;  \n   spread_draws(b_Intercept, b_bandInt, `b_conditVaried`,`b_conditVaried:bandInt`,  r_id[id,term], ndraws=10)  \n:::\n\ndf_posterior &lt;- e1_vxBMM |&gt; as_tibble()\n\nggplot(df_posterior) + \n  aes(x = b_Intercept, y = b_bandInt) + \n  stat_density_2d( geom = \"polygon\")\n\n\ndf_posterior |&gt; sample_n(100) |&gt; ggplot() + \n  aes(x = b_Intercept, y = b_bandInt) + \n  geom_raster(interpolate = T)\n\ndf_posterior |&gt; sample_n(100) |&gt; ggplot(aes(x = b_Intercept, y = b_bandInt)) + \n  stat_ellipse(geom = \"polygon\", level = 0.1, alpha = 1/2)\n\ndf_posterior |&gt; \n  sample_n(1000) |&gt;\n  ggplot() + \n  aes(x = b_Intercept, y = b_bandInt) + \n  stat_dist_dotsinterval()\n\n\ntest |&gt; ggplot(aes(x=vx,y=bandInt)) + geom_jitter(width=0,height=0.3)"
  },
  {
    "objectID": "Misc/gam_discrim.html",
    "href": "Misc/gam_discrim.html",
    "title": "GAM",
    "section": "",
    "text": "Codepacman::p_load(tidyverse,lme4,emmeans,here,knitr,kableExtra,gt,mgcv,data.table)\nsource(here::here(\"Functions\", \"packages.R\"))\n\n\ntest &lt;- readRDS(here(\"data/e1_08-21-23.rds\")) |&gt; filter(expMode2 == \"Test\")  |&gt;\n  select(id,condit,expMode, trial, bandInt,vb,vx,dist,vy) |&gt;   mutate(condit_dummy = ifelse(condit == \"Varied\", 1, 0))  |&gt; data.table()\n\ntrain &lt;-readRDS(here(\"data/e1_08-21-23.rds\")) |&gt; filter(expMode2 == \"Train\" | expMode==\"train-Nf\")  |&gt;\n  select(id,condit,expMode,trial,bandInt,vb,vx,dist,vy) |&gt; mutate(condit_dummy = ifelse(condit == \"Varied\", 1, 0))  |&gt; data.table()\n\n\ntestAvg &lt;- test %&gt;% group_by(id, condit, vb, bandInt) %&gt;%\n  summarise(vx=mean(vx)) %&gt;% data.table()\n\ntrainAvg &lt;- train %&gt;% group_by(id, condit, vb, bandInt) %&gt;%\n  summarise(vx=mean(vx)) %&gt;% data.table()\n\n\n\n\n\nest_gam &lt;- function(k, train_data, test_data) \n{\n\n  # define train and test data\n  train_data &lt;- copy(train_data)\n  test_data &lt;- copy(test_data)\n\n  #--- train a model ---#  \n  #trained_model &lt;- gam(vx ~ condit + s(bandInt, k = k)+ s(id, bandInt,bs='re'), data = train_data)\n  trained_model &lt;- gam(dist~  s(bandInt,k=2) + s(vy,k=k) + s(id,bs=\"re\"), data = train_data)\n\n  #--- predict y for the train and test datasets ---#\n  train_data[, y_hat := predict(trained_model, newdata = train_data)] \n  train_data[, type := \"Train\"]\n  test_data[, y_hat := predict(trained_model, newdata = test_data)] \n  test_data[, type := \"Test\"]\n\n  #--- combine before returning ---#\n  return_data &lt;- \n    rbind(train_data, test_data) %&gt;%\n    .[, num_knots := k]\n\n  return(return_data)\n}\n\n\n\n\nsim_results &lt;- \n  lapply(1:6, function(x) est_gam(x, train, test)) %&gt;%\n  rbindlist()\n\nsim_results &lt;- \n  lapply(c(1,2,3,5,10,20,50), function(x) est_gam(x, train, test)) %&gt;%\n  rbindlist()\n\n# sim_results &lt;- \n#   lapply(1:6, function(x) est_gam(x, trainAvg, testAvg)) %&gt;%\n#   rbindlist()\n\nggplot(sim_results) +\n  geom_point(data = train, aes(y = dist, x = bandInt), color = \"grey\") +\n  geom_line(aes(y = y_hat, x = vy, color = factor(num_knots))) +\n  theme_bw()\n\nggplot(sim_results[num_knots  %in% 1:6, ],aes(fill=vb)) + \n   stat_summary(data=train,geom = \"bar\", position=position_dodge(), fun = mean) +\n   geom_line(aes(y = y_hat, x = bandInt, color = factor(num_knots))) \n\n\nsummary &lt;- \n  sim_results[, .(mse = mean((y_hat - dist)^2)), by = .(num_knots, type)]\n\nggplot(summary) +\n  geom_line(aes(y = mse, x = num_knots, color = type)) +\n  geom_point(aes(y = mse, x = num_knots, color = type)) +\n  xlab(\"Number of knots\") +\n  ylab(\"MSE\") +\n  scale_color_discrete(name = \"\") +\n  theme_bw()\n\n\n\nCode#https://fromthebottomoftheheap.net/2021/02/02/random-effects-in-gams/\nmod_gam1 = gam(vx ~ 1 + (bandInt, bs = \"cr\",k=4) + s(id, bandInt,bs='re'), data = test)\n\n\ngy = gam(vx ~ s(vy,k=2), data = test)\nsummary(gy)\ncoef(gy)\ngam.check(gy)\n\ngy = gam(vx ~ s(vy,k=6), data = test)\nsummary(gy)\ncoef(gy)\ngam.check(gy)\n\ngy = gam(vx ~ s(bandInt,k=5) + s(vy), data = test)\nsummary(gy)\ncoef(gy)\ngam.check(gy)\n\n\ngy = gam(vx ~ s(bandInt,k=2) + s(vy) + s(id,bs=\"re\"), data = test)\nsummary(gy)\ncoef(gy)\ngam.check(gy)\n\n\n\n\ng1=gam(vx ~ s(bandInt,k=1),data=train)\nsummary(g1)\ng1$coefficients\n\n\ng2=gam(vx ~ s(bandInt,k=2),data=trainAvg)\nsummary(g2)\ng2$coefficients\n\ng3=gam(vx ~ s(bandInt,k=4),data=train)\nsummary(g3)\ng3$coefficients\n\n\nk1=bam(condit_dummy ~ s(vx,k=12),data=train,family=binomial())\nsummary(k1)\n\nk2=bam(bandInt ~ s(vx,k=5),data=train)\nsummary(k2)\n\ng2=gam(vx ~ s(bandInt,k=6),data=trainAvg)\n\n\n\nid1 &lt;- test |&gt; filter(id==1)\n\ng2=gam(vx ~ 0 + s(bandInt,k=6),data=id1)\nsummary(g2)\ng2$coefficients\nkmeans(id1$vx,6)\n\nkn=knnreg(vx ~ bandInt,data=test)\nsummary(kn)\n\ng4 &lt;- gam(vx ~ bandInt + s(id,bs=\"re\"),data=test)\nsummary(g4)\ng4$coefficients\n\ng5 &lt;- gam(vx ~ condit+bandInt + s(id,bs=\"re\",k=4),data=test)\nsummary(g5)\ng5$coefficients\ncoef(g5)\n\ng6 &lt;- gam(vx ~ condit+bandInt + s(id,bs=\"re\")+ s(id,bandInt,bs=\"re\",k=6),data=test,method = 'REML')\nsummary(g6)\ng6$coefficients\n\n\n\n\nhits = test |&gt; filter(dist==0)\n\nhits |&gt; ggplot(aes(x=bandInt,y=vx)) + geom_point()\n\nhg1 &lt;- gam(vx ~ 0 + s(bandInt,k=2),data=hits)\nsummary(hg1)\nhg1$coefficients\nplot(hg1)\n\n\n\nCodetestAvg %&gt;% ggplot(aes(x=bandInt,y=vx))+geom_point(color=\"grey\")+geom_line()+theme_bw()\n\ntm &lt;- gam(vx ~s(bandInt,k=3),sp=0,data=testAvg)\nsummary(tm)\n\n\nresults &lt;- tibble(k = integer(), r_sq = numeric(), edf = numeric(), p_value = numeric(), scale = numeric(), deviance = numeric(), null_deviance = numeric())\n\n# Iterate through different k values\nfor (k in 1:6) {\n  temp_result &lt;- tryCatch({\n    # Fit the GAM model\n    tm &lt;- gam(vx ~ s(bandInt, k = k), sp = 0, data = testAvg)\n    model_sum &lt;- summary(tm)\n    \n    # Extract additional metrics from the model summary and the model itself\n    edf &lt;- model_sum$s.table[1]\n    p_value &lt;- model_sum$s.pv[1]\n    scale &lt;- tm$scale\n    deviance &lt;- tm$deviance\n    null_deviance &lt;- tm$null.deviance\n    \n    # Return data frame with results\n    tibble(k = k, r_sq = model_sum$r.sq, edf = edf, p_value = p_value, scale = scale, deviance = deviance, null_deviance = null_deviance)\n  }, error = function(e) {\n    # Print error message\n    cat(paste(\"Skipping k =\", k, \"due to error:\", conditionMessage(e)), \"\\n\")\n    \n    # Return data frame with NA values\n    tibble(k = k, r_sq = NA_real_, edf = NA_real_, p_value = NA_real_, scale = NA_real_, deviance = NA_real_, null_deviance = NA_real_)\n  })\n  \n  # Add results to data frame\n  results &lt;- bind_rows(results, temp_result)\n}\n\nprint(results)\n\n# Plot R-squared\nresults %&gt;%\n  ggplot(aes(x = k, y = r_sq)) +\n  geom_line(color = \"blue\") +\n  labs(x = \"k\", y = \"R-squared\") +\n  theme_minimal()\n\n# Plot deviance\nresults %&gt;%\n  ggplot(aes(x = k, y = deviance)) +\n  geom_line(color = \"red\") +\n  labs(x = \"k\", y = \"Deviance\") +\n  theme_minimal()\n\n\n\nCode# Iterate through different k values\nfor (k in 1:6) {\n  for (group in unique(testAvg$condit)) {\n    \n    temp_result &lt;- tryCatch({\n      # Filter data by group\n      group_data &lt;- testAvg %&gt;% filter(condit == group)\n      \n      # Fit the GAM model with interaction and more flexible splines\n      tm &lt;- gam(vx ~ s(bandInt, k = k, bs = \"cr\"), data = group_data)\n      model_sum &lt;- summary(tm)\n      \n      # Extract additional metrics from the model summary and the model itself\n      edf &lt;- model_sum$s.table[1]\n      p_value &lt;- model_sum$s.pv[1]\n      scale &lt;- tm$scale\n      deviance &lt;- tm$deviance\n      null_deviance &lt;- tm$null.deviance\n      threshold &lt;- NA_real_\n      \n      # Attempt to calculate discrimination threshold\n      tryCatch({\n        # Value of bandInt where the derivative of the fitted spline is highest\n        bandInt_values &lt;- seq(min(group_data$bandInt), max(group_data$bandInt), length.out = 1000)\n        fitted_spline &lt;- predict(tm, newdata = data.frame(bandInt = bandInt_values, condit_num = ifelse(group == \"Varied\", 1, 0)), type = \"terms\")\n        fitted_derivative &lt;- diff(fitted_spline[,1]) / diff(bandInt_values)\n        threshold &lt;- bandInt_values[which.max(fitted_derivative)]\n      }, error = function(e) {\n        cat(paste(\"Failed to calculate threshold for k =\", k, \"in group\", group, \"due to error:\", conditionMessage(e)), \"\\n\")\n      })\n      \n      # Return data frame with results\n      tibble(group = group, k = k, r_sq = model_sum$r.sq, edf = edf, p_value = p_value, scale = scale, deviance = deviance, null_deviance = null_deviance, threshold = threshold)\n    }, error = function(e) {\n      # Print error message\n      cat(paste(\"Skipping k =\", k, \"for group\", group, \"due to error:\", conditionMessage(e)), \"\\n\")\n      \n      # Return data frame with NA values\n      tibble(group = group, k = k, r_sq = NA_real_, edf = NA_real_, p_value = NA_real_, scale = NA_real_, deviance = NA_real_, null_deviance = NA_real_, threshold = NA_real_)\n    })\n    \n    # Add results to data frame\n    results &lt;- bind_rows(results, temp_result)\n  }\n}\nprint(results)\n\n\n\nCodeest_gam &lt;- function(k, train_data, test_data, group) \n{\n  # Filter by group\n  train_data_group &lt;- train_data %&gt;% filter(condit == group)\n  test_data_group &lt;- test_data %&gt;% filter(condit == group)\n \n  # Train a model  \n  trained_model &lt;- gam(vx ~ s(bandInt, k = k, bs = \"tp\"), data = train_data_group)\n \n  # Print out the number of rows in train_data_group\n  print(paste(\"Number of rows in train_data_group: \", nrow(train_data_group)))\n  \n  # Predict y for the train datasets\n  predicted_values_train &lt;- predict(trained_model, newdata = train_data_group)\n  print(paste(\"Number of predicted values for train data: \", length(predicted_values_train)))\n\n  # Add the predicted values as a new column\n  train_data_group &lt;- train_data_group %&gt;% mutate(vx_hat = predicted_values_train, type = \"Train\")\n \n  # Repeat the same for the test datasets\n  predicted_values_test &lt;- predict(trained_model, newdata = test_data_group)\n  print(paste(\"Number of predicted values for test data: \", length(predicted_values_test)))\n\n  test_data_group &lt;- test_data_group %&gt;% mutate(vx_hat = predicted_values_test, type = \"Test\")\n \n  # Combine before returning\n  return_data &lt;- bind_rows(train_data_group, test_data_group) %&gt;% \n                 mutate(num_knots = k, group = group)\n \n  return(return_data)\n}\n\n# define k-values\nk_values &lt;- 1:5\n\n# Split the data into training and testing datasets\nset.seed(123)\ndata_split &lt;- testAvg %&gt;% \n  resample_partition(c(Train = 0.75, Test = 0.25))\n\n# Extract the data frames from the resample objects\ntrain_data &lt;- as.data.frame(data_split$Train)\ntest_data &lt;- as.data.frame(data_split$Test)\n\n# Use a nested loop to apply the est_gam function over all combinations of groups and k_values\nresults &lt;- map_df(unique(testAvg$condit), ~{\n  group &lt;- .\n  map_df(k_values, ~{\n    est_gam(.x, train_data %&gt;% filter(condit == group), \n            test_data %&gt;% filter(condit == group), group)\n  })\n})\n\n\n\nCode# Create an empty data frame to store results\nresults &lt;- tibble(group = character(), k = integer(), r_sq = numeric(), edf = numeric(), p_value = numeric(), scale = numeric(), deviance = numeric(), null_deviance = numeric())\n\n# Iterate through different k values\nfor (k in 1:6) {\n  # Iterate through different conditions\n  for (condit in unique(testAvg$condit)) {\n    temp_result &lt;- tryCatch({\n      # Subset the data for the current condition\n      data_subset &lt;- testAvg[testAvg$condit == condit, ]\n      \n      # Fit the GAM model\n      tm &lt;- gam(vx ~ s(bandInt, k = k), sp = 0, data = data_subset)\n      model_sum &lt;- summary(tm)\n      \n      # Extract additional metrics from the model summary and the model itself\n      edf &lt;- model_sum$s.table[1]\n      p_value &lt;- model_sum$s.pv[1]\n      scale &lt;- tm$scale\n      deviance &lt;- tm$deviance\n      null_deviance &lt;- tm$null.deviance\n      \n      # Return data frame with results\n      tibble(group = condit, k = k, r_sq = model_sum$r.sq, edf = edf, p_value = p_value, scale = scale, deviance = deviance, null_deviance = null_deviance)\n    }, error = function(e) {\n      # Print error message\n      cat(paste(\"Skipping k =\", k, \"in group\", condit, \"due to error:\", conditionMessage(e)), \"\\n\")\n      \n      # Return data frame with NA values\n      tibble(group = condit, k = k, r_sq = NA_real_, edf = NA_real_, p_value = NA_real_, scale = NA_real_, deviance = NA_real_, null_deviance = NA_real_)\n    })\n    \n    # Add results to data frame\n    results &lt;- bind_rows(results, temp_result)\n  }\n}\n\nprint(results)\n\n# Plot R-squared\nresults %&gt;%\n  ggplot(aes(x = k, y = r_sq, color = group)) +\n  geom_line() +\n  labs(x = \"k\", y = \"R-squared\") +\n  theme_minimal()\n\n# Plot deviance\nresults %&gt;%\n  ggplot(aes(x = k, y = deviance, color = group)) +\n  geom_line() +\n  labs(x = \"k\", y = \"Deviance\") +\n  theme_minimal()\n\n# Add additional plots as necessary\n\n\n\nCode# Create an empty data frame to store results\nresults &lt;- data.frame(k = numeric(), r_sq = numeric(), deviance_explained = numeric())\n\n# Iterate through different k values\nfor (k in 1:6) {\n  temp_result &lt;- tryCatch({\n    # Fit the GAM model\n    tm &lt;- gam(vx ~ s(bandInt, k = k), sp = 0, data = testAvg)\n    model_sum &lt;- summary(tm)\n    \n    # Return data frame with results\n    data.frame(k = k, r_sq = model_sum$r.sq.adj, deviance_explained = model_sum$dev.expl)\n  }, error = function(e) {\n    # Print error message\n    cat(paste(\"Skipping k =\", k, \"due to error:\", conditionMessage(e)), \"\\n\")\n\n    # Return data frame with NA values\n    data.frame(k = k, r_sq = NA, deviance_explained = NA)\n  })\n\n  # Add results to data frame\n  results &lt;- rbind(results, temp_result)\n}\n\n# Check if we have successfully fitted models and results have more than zero rows \nif(nrow(results) &gt; 0){\n  # No need to set column names here, you've already set them when creating the data frames inside the loop\n\n  # Plotting\n  plot(results$k, results$r_sq, type = \"l\", xlab = \"k\", ylab = \"R-squared\", col = \"blue\")\n  lines(results$k, results$deviance_explained, type = \"l\", col = \"red\") \n  legend(\"topright\", legend = c(\"R-squared\", \"Deviance Explained\"), col = c(\"blue\", \"red\"), lty = 1)\n}\n\n\n\nCodegam_fit &lt;- gam(vx ~ s(bandInt, k = 6, bs = \"cr\"), data = testAvg)\ngam_fit$coefficient\n\nbasis_data &lt;- gam_fit %&gt;%  predict(., type = \"lpmatrix\") %&gt;%\n  data.table() %&gt;% \n  .[, bandInt := testAvg[, bandInt]] %&gt;% \n  melt(id.var = \"bandInt\")\n\n\n\n\ndata.table(\n  variable = unique(basis_data$variable)[-1],\n  coef = gam_fit$coefficient[-1]\n) %&gt;% \n.[basis_data, on = \"variable\"] %&gt;% \n.[, .(y_no_int = sum(coef * value)), by = bandInt] %&gt;% \n.[, y_hat := gam_fit$coefficient[1] + vx] %&gt;% \nggplot(data = .) +\n  geom_line(aes(y = vx, x = bandInt, color = \"gam-fitted\")) +\n  geom_line(data = data, aes(y = vx, x = bandInt, color = \"True\")) +\n  scale_color_manual(\n    name = \"\",\n    values = c(\"gam-fitted\" = \"red\", \"True\" = \"blue\")\n  ) +\n  ylab(\"y\") +\n  xlab(\"x\") +\n  theme_bw()"
  },
  {
    "objectID": "Misc/data_organize.html",
    "href": "Misc/data_organize.html",
    "title": "Organization",
    "section": "",
    "text": "pacman::p_load(tidyverse,here,knitr,kableExtra,reactable)\nselect &lt;- dplyr::select; mutate &lt;- dplyr::mutate \noptions(dplyr.summarise.inform=FALSE)\nd &lt;- readRDS(here(\"data/dPrune-07-27-23.rds\")) %&gt;% ungroup()\n\n\nd &lt;- d |&gt; mutate(bandType=case_when(\n  vb %in% c(\"1000-1200\",\"1200-1400\") & condit==\"Constant\" & bandOrder==\"Original\" ~ \"Extrapolation\",\n  vb %in% c(\"100-300\",\"350-550\") & condit==\"Constant\" & bandOrder==\"Reverse\" ~ \"Extrapolation\",\n  (vb %in% c(\"100-300\",\"350-550\",\"600-800\") & bandOrder==\"Original\") |\n  (vb %in% c(\"1200-1400\",\"1000-1200\",\"800-1000\") & bandOrder==\"Reverse\") ~ \"Extrapolation\",\n  \n  (vb %in% c(\"800-1000\",\"1000-1200\",\"1200-1400\") & bandOrder==\"Original\") |\n  (vb %in% c(\"100-300\",\"350-550\",\"600-800\") & bandOrder==\"Reverse\") ~ \"Trained\",\n  TRUE ~ NA_character_\n))\n\nd$bandType &lt;- factor(d$bandType,levels=c(\"Trained\",\"Extrapolation\"))\nd&lt;- d %&gt;% relocate(bandOrder,bandType,.after=bandInt)\n\n\nd &lt;- d |&gt; mutate(Exp=case_when(\n  fb==\"Continuous\" & bandOrder==\"Original\" ~ \"E1\",\n  fb==\"Continuous\" & bandOrder==\"Reverse\" ~ \"E2\",\n  fb==\"Ordinal\" ~ \"E3\",\n  TRUE ~ NA_character_\n))\n\nalt &lt;- d |&gt; filter(expMode2==\"Test\") |&gt; group_by(id,condit,Exp) |&gt; summarise(n=n_distinct(bandInt)) |&gt; \n  filter(n&lt;=4) |&gt; pull(id) |&gt; droplevels()\nd &lt;- d |&gt; filter(!(id %in% alt))\n\nd &lt;- d |&gt; mutate(vxC = ifelse(vx&gt;1800,1800,vx))\nd &lt;- d %&gt;% relocate(vxC,.after=vx)\nd &lt;- d |&gt; select(-goodThrow, -trainVec, -fullCond)\n\n# test &lt;- d |&gt; filter(expMode %in% c(\"test-Nf\",\"test-train-nf\"))\n# rtest &lt;- test |&gt; filter(bandOrder==\"Reverse\")\n# rtest |&gt; group_by(vb,bandType,condit,tOrder) |&gt; summarise(n=n())\ne1 &lt;- d |&gt; filter(fb==\"Continuous\" & bandOrder==\"Original\") |&gt; mutate(id=factor(id,levels=unique(id)))\ne2 &lt;- d |&gt; filter(fb==\"Continuous\" & bandOrder==\"Reverse\") |&gt; mutate(id=factor(id,levels=unique(id)))\ne3 &lt;- d |&gt; filter(fb==\"Ordinal\") |&gt; mutate(id=factor(id,levels=unique(id)))\n\ndate.append=\"08-21-23\"\n\n# saveRDS(d,here(paste0(\"data/dAll_\",date.append,\".rds\")))\n# saveRDS(e1,here(paste0(\"data/e1_\",date.append,\".rds\")))\n# saveRDS(e2,here(paste0(\"data/e2_\",date.append,\".rds\")))\n# saveRDS(e3,here(paste0(\"data/e3_\",date.append,\".rds\")))\n\n# save csv versions\n# d %&gt;% write_csv(here(paste0(\"data/dAll_\",date.append,\".csv\")))\n# e1 %&gt;% write_csv(here(paste0(\"data/e1_\",date.append,\".csv\")))\n# e2 %&gt;% write_csv(here(paste0(\"data/e2_\",date.append,\".csv\")))\n# e3 %&gt;% write_csv(here(paste0(\"data/e3_\",date.append,\".csv\")))\nhead(d) colnames(d) d %&gt;% select_if(is.factor) %&gt;% colnames()"
  },
  {
    "objectID": "Misc/data_organize.html#prep-simpler-data-frames-for-model-fitting",
    "href": "Misc/data_organize.html#prep-simpler-data-frames-for-model-fitting",
    "title": "Organization",
    "section": "Prep simpler data frames for model fitting",
    "text": "Prep simpler data frames for model fitting\n\nd &lt;- readRDS(here::here(\"data/e1_08-21-23.rds\"))\nlevels(d$condit)\n\n[1] \"Constant\" \"Varied\"  \n\ndtest &lt;- d %&gt;% filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) %&gt;% group_by(id,lowBound) %&gt;% \n  mutate(nBand=n(),band=bandInt,id=factor(id)) %&gt;% group_by(id) %&gt;% mutate(nd=n_distinct(lowBound))\ndtest &lt;- dtest %&gt;% group_by(id,lowBound) %&gt;% filter(nBand&gt;=5 & nd==6)\ndtest &lt;- dtest %&gt;% group_by(id) %&gt;% filter(!id %in% unique(dtest$id[dtest$nBand&lt;5]))\n\nds &lt;- d %&gt;% filter(expMode2 %in% c(\"Train\",\"Test\")) |&gt; \n  filter(!id %in% unique(dtest$id[dtest$nBand&lt;5])) |&gt;   \n  group_by(id,condit,expMode2) |&gt; \n  mutate(input=bandInt,x=bandInt, y=vx, tr= row_number()) |&gt;\n  select(id,condit,expMode2,tr,x,y) \n\n#saveRDS(ds,here::here(\"data/e1_md_11-06-23.rds\"))\n\n\n\nd &lt;- readRDS(here::here(\"data/e2_08-21-23.rds\"))\nlevels(d$condit)\n\n[1] \"Constant\" \"Varied\"  \n\ndtest &lt;- d %&gt;% filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) %&gt;% group_by(id,lowBound) %&gt;% \n  mutate(nBand=n(),band=bandInt,id=factor(id)) %&gt;% group_by(id) %&gt;% mutate(nd=n_distinct(lowBound))\ndtest &lt;- dtest %&gt;% group_by(id,lowBound) %&gt;% filter(nBand&gt;=5 & nd==6)\ndtest &lt;- dtest %&gt;% group_by(id) %&gt;% filter(!id %in% unique(dtest$id[dtest$nBand&lt;5]))\n\nds &lt;- d %&gt;% filter(expMode2 %in% c(\"Train\",\"Test\")) |&gt; \n  filter(!id %in% unique(dtest$id[dtest$nBand&lt;5])) |&gt;   \n  group_by(id,condit,expMode2) |&gt; \n  mutate(input=bandInt,x=bandInt, y=vx, tr= row_number()) |&gt;\n  select(id,condit,expMode2,tr,x,y) \n\n#saveRDS(ds,here::here(\"data/e2_md_02-23-24.rds\"))\n\n\nd &lt;- readRDS(here::here(\"data/e3_08-21-23.rds\"))\nlevels(d$condit)\n\n[1] \"Constant\" \"Varied\"  \n\ndtest &lt;- d %&gt;% filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) %&gt;% group_by(id,lowBound) %&gt;% \n  mutate(nBand=n(),band=bandInt,id=factor(id)) %&gt;% group_by(id) %&gt;% mutate(nd=n_distinct(lowBound))\ndtest &lt;- dtest %&gt;% group_by(id,lowBound) %&gt;% filter(nBand&gt;=5 & nd==6)\ndtest &lt;- dtest %&gt;% group_by(id) %&gt;% filter(!id %in% unique(dtest$id[dtest$nBand&lt;5]))\n\nds &lt;- d %&gt;% filter(expMode2 %in% c(\"Train\",\"Test\")) |&gt; \n  filter(!id %in% unique(dtest$id[dtest$nBand&lt;5])) |&gt;   \n  group_by(id,condit,expMode2) |&gt; \n  mutate(input=bandInt,x=bandInt, y=vx, tr= row_number()) |&gt;\n  select(id,condit,expMode2,tr,x,y) \n\n\n#saveRDS(ds,here::here(\"data/e3_md_02-23-24.rds\"))\n\n\nd %&gt;% select_if(is.factor) %&gt;% select(-sbjCode,-id) %&gt;% map(levels)\n\n$condit\n[1] \"Constant\" \"Varied\"  \n\n$fb\n[1] \"Continuous\" \"Ordinal\"   \n\n$tOrder\n[1] \"testFirst\"  \"trainFirst\"\n\n$expMode2\n[1] \"Train\"    \"Train-Nf\" \"Test\"     \"Test-Fb\" \n\n$band\n[1] \"1\" \"2\" \"3\" \"4\" \"5\" \"6\"\n\n$vb\n[1] \"100-300\"   \"350-550\"   \"600-800\"   \"800-1000\"  \"1000-1200\" \"1200-1400\"\n\n$bandOrder\n[1] \"Original\" \"Reverse\" \n\n$bandType\n[1] \"Trained\"       \"Extrapolation\"\n\n$vxCat\n [1] \"0\"      \"100\"    \"btw1\"   \"350\"    \"btw2\"   \"600\"    \"800\"    \"1000\"  \n [9] \"1200\"   \"&gt;=1401\"\n\n$prev\n[1] \"100\"  \"350\"  \"600\"  \"800\"  \"1000\" \"1200\"\n\n$bandSeq\n [1] \"100-&gt;100\"   \"350-&gt;100\"   \"600-&gt;100\"   \"100-&gt;350\"   \"350-&gt;350\"  \n [6] \"600-&gt;350\"   \"100-&gt;600\"   \"350-&gt;600\"   \"600-&gt;600\"   \"800-&gt;800\"  \n[11] \"1000-&gt;800\"  \"1200-&gt;800\"  \"800-&gt;1000\"  \"1000-&gt;1000\" \"1200-&gt;1000\"\n[16] \"800-&gt;1200\"  \"1000-&gt;1200\" \"1200-&gt;1200\"\n\n$lowBound\n[1] \"100\"  \"350\"  \"600\"  \"800\"  \"1000\" \"1200\"\n\n$stage\n [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\" \"15\"\n[16] \"16\" \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\"\n\n$expMode\n[1] \"train\"         \"train-Nf\"      \"test-Nf\"       \"test-train-nf\"\n[5] \"test-feedback\"\n\n$trainStage\n[1] \"Beginning\" \"Middle\"    \"End\"       \"Test\"     \n\n$feedback\n[1] \"0\" \"1\"\n\nd %&gt;% select_if(is.factor) %&gt;% select(-sbjCode,-id) %&gt;% droplevels %&gt;% map(levels)\n\n$condit\n[1] \"Constant\" \"Varied\"  \n\n$fb\n[1] \"Ordinal\"\n\n$tOrder\n[1] \"testFirst\"  \"trainFirst\"\n\n$expMode2\n[1] \"Train\"    \"Train-Nf\" \"Test\"     \"Test-Fb\" \n\n$band\n[1] \"1\" \"2\" \"3\" \"4\" \"5\" \"6\"\n\n$vb\n[1] \"100-300\"   \"350-550\"   \"600-800\"   \"800-1000\"  \"1000-1200\" \"1200-1400\"\n\n$bandOrder\n[1] \"Original\" \"Reverse\" \n\n$bandType\n[1] \"Trained\"       \"Extrapolation\"\n\n$vxCat\n [1] \"0\"      \"100\"    \"btw1\"   \"350\"    \"btw2\"   \"600\"    \"800\"    \"1000\"  \n [9] \"1200\"   \"&gt;=1401\"\n\n$prev\n[1] \"100\"  \"350\"  \"600\"  \"800\"  \"1000\" \"1200\"\n\n$bandSeq\n [1] \"100-&gt;100\"   \"350-&gt;100\"   \"600-&gt;100\"   \"100-&gt;350\"   \"350-&gt;350\"  \n [6] \"600-&gt;350\"   \"100-&gt;600\"   \"350-&gt;600\"   \"600-&gt;600\"   \"800-&gt;800\"  \n[11] \"1000-&gt;800\"  \"1200-&gt;800\"  \"800-&gt;1000\"  \"1000-&gt;1000\" \"1200-&gt;1000\"\n[16] \"800-&gt;1200\"  \"1000-&gt;1200\" \"1200-&gt;1200\"\n\n$lowBound\n[1] \"100\"  \"350\"  \"600\"  \"800\"  \"1000\" \"1200\"\n\n$stage\n [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\" \"15\"\n[16] \"16\" \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\"\n\n$expMode\n[1] \"train\"         \"train-Nf\"      \"test-Nf\"       \"test-train-nf\"\n[5] \"test-feedback\"\n\n$trainStage\n[1] \"Beginning\" \"Middle\"    \"End\"       \"Test\"     \n\n$feedback\n[1] \"0\" \"1\"\n\n\n\nd %&gt;% select_if(is.numeric) |&gt; colnames()\n\n [1] \"trial\"        \"bandInt\"      \"vx\"           \"vxC\"          \"dist\"        \n [6] \"sdist\"        \"vxb\"          \"vxi\"          \"vy\"           \"launchX\"     \n[11] \"launchY\"      \"highBound\"    \"nGoodTrial\"   \"nTrain\"       \"nTestNf\"     \n[16] \"nInt\"         \"nTestF\"       \"nTotal\"       \"gt.train\"     \"gt.bandStage\"\n[21] \"gt.stage\"     \"lastTrain\"    \"lastTrial\"   \n\n\n\nd %&gt;%\n  distinct(id, condit, fb, bandOrder, tOrder) %&gt;%\n  group_by(condit, fb, bandOrder, tOrder) %&gt;%\n  summarise(n = n()) %&gt;%\n  kable()\n\n\n\n\ncondit\nfb\nbandOrder\ntOrder\nn\n\n\n\nConstant\nOrdinal\nOriginal\ntestFirst\n51\n\n\nConstant\nOrdinal\nReverse\ntestFirst\n31\n\n\nConstant\nOrdinal\nReverse\ntrainFirst\n28\n\n\nVaried\nOrdinal\nOriginal\ntestFirst\n39\n\n\nVaried\nOrdinal\nReverse\ntestFirst\n28\n\n\nVaried\nOrdinal\nReverse\ntrainFirst\n18\n\n\n\n\n\n\n\n# Average trials per subject by condition  \nd %&gt;%\n  group_by(condit, fb, bandOrder, tOrder, id) %&gt;%\n  summarise(n = n()) %&gt;%\n  group_by(condit, fb, bandOrder, tOrder) %&gt;%\n  summarise(mean_trials = mean(n)) %&gt;%\n  kable()\n\n\n\n\ncondit\nfb\nbandOrder\ntOrder\nmean_trials\n\n\n\nConstant\nOrdinal\nOriginal\ntestFirst\n198.5294\n\n\nConstant\nOrdinal\nReverse\ntestFirst\n198.6452\n\n\nConstant\nOrdinal\nReverse\ntrainFirst\n198.1429\n\n\nVaried\nOrdinal\nOriginal\ntestFirst\n199.9744\n\n\nVaried\nOrdinal\nReverse\ntestFirst\n197.5714\n\n\nVaried\nOrdinal\nReverse\ntrainFirst\n196.2222\n\n\n\n\n\nd %&gt;%\n  group_by(condit, fb, bandOrder, tOrder, id, expMode) %&gt;% \n  summarise(n = n()) %&gt;%\n  pivot_wider(names_from = expMode, values_from = n, names_prefix = \"n_\") %&gt;%\n  group_by(condit, fb, bandOrder, tOrder) %&gt;%\n  summarise(across(starts_with(\"n_\"), ~mean(., na.rm = TRUE))) %&gt;%\n  kable()\n\n\n\n\ncondit\nfb\nbandOrder\ntOrder\nn_train\nn_train-Nf\nn_test-Nf\nn_test-train-nf\nn_test-feedback\n\n\n\nConstant\nOrdinal\nOriginal\ntestFirst\n85.45098\n25.86275\n44.23529\n16.52941\n26.45098\n\n\nConstant\nOrdinal\nReverse\ntestFirst\n85.93548\n25.25806\n43.58065\n17.64516\n26.22581\n\n\nConstant\nOrdinal\nReverse\ntrainFirst\n85.67857\n25.25000\n43.60714\n17.67857\n25.92857\n\n\nVaried\nOrdinal\nOriginal\ntestFirst\n85.28205\n26.43590\n44.10256\n17.56410\n26.58974\n\n\nVaried\nOrdinal\nReverse\ntestFirst\n86.25000\n24.53571\n43.28571\n17.39286\n26.10714\n\n\nVaried\nOrdinal\nReverse\ntrainFirst\n84.88889\n24.77778\n43.05556\n17.55556\n25.94444\n\n\n\n\n\n\n\n# Define column defs function \ncol_defs &lt;- function(data) {\n  \n  cols &lt;- colnames(data)\n  \n  defs &lt;- lapply(cols, function(x) {\n    \n    if(is.factor(data[[x]])) {\n      colDef(sortable = TRUE, filterable = TRUE,minWidth=108) \n    } else {\n      colDef(sortable = TRUE, filterable = FALSE,minWidth=90)\n    }\n    \n  })\n  \n  setNames(defs, cols)\n}\n\nd %&gt;%\n  group_by(id,condit, fb, bandOrder, tOrder, expMode) %&gt;%\n  summarise(n = n()) %&gt;%\n  pivot_wider(names_from = expMode, values_from = n, names_prefix = \"n_\") %&gt;%\n  \n  # Pass original data too \n  reactable(columns = col_defs(.), \n            highlight = TRUE,\n            defaultPageSize = 25)\n\n\n\n\n\n\nd %&gt;% filter(nGoodTrial==1,nTotal&gt;100) %&gt;% ggplot(aes(nTotal)) + geom_histogram() + facet_wrap(~condit)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\nd %&gt;% filter(nGoodTrial==1,nTotal&gt;100) %&gt;% ggplot(aes(nTestNf)) + geom_histogram() + facet_wrap(~condit)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\nd %&gt;% filter(nGoodTrial==1,nTotal&gt;100) %&gt;% ggplot(aes(nTrain)) + geom_histogram() + facet_wrap(~condit)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "Misc/clust_gmm.html",
    "href": "Misc/clust_gmm.html",
    "title": "E1 Discrimination via Clustering",
    "section": "",
    "text": "https://mhahsler.github.io/Introduction_to_Data_Mining_R_Examples/book/clustering-analysis.html#gaussian-mixture-models\nhttps://cran.r-project.org/web/packages/mclust/vignettes/mclust.html\nhttps://joshuamrosenberg.com/posts/lpa-in-r-using-mclust/\n\nCodepacman::p_load(tidyverse,here, mclust,furrr,future,broom)\nselect &lt;- dplyr::select\nmutate &lt;- dplyr::mutate\nfilter &lt;- dplyr::filter\nmap &lt;- purrr::map\n\ne1 &lt;- readRDS(here(\"data/e1_08-04-23.rds\"))\n\n\ntest &lt;- e1 |&gt; filter(expMode2 == \"Test\")\ntestAvg &lt;- test %&gt;% group_by(id, condit, vb, bandInt,bandType,tOrder) %&gt;%\n  summarise(nHits=sum(dist==0),vxMean=mean(vx),vxMed=median(vx),dist=mean(dist),sdist=mean(sdist),n=n(),Percent_Hit=nHits/n)\n\n\nget_mclust_param &lt;- function(model, param) {\n  if (!is.null(model$parameters[[param]])) {\n    return(model$parameters[[param]])\n  } else {\n    return(NA_real_)\n  }\n}\n\n\nplan(multisession, workers = 8)\n\n\n\nmcFree &lt;- test |&gt; select(id,condit,bandInt,vb,vx) %&gt;% ungroup()\n\n\nmcFree2 &lt;- get_mcFree(mcFree, \"id\", \"condit\", c(\"bandInt\", \"vb\", \"vx\", \"vy\"))\n\n\nmcFit &lt;- function(df, id_var, condit_var, clustvars,G=1:9) {\n  df %&gt;%\n    select({{ id_var }}, {{ condit_var }}, !!!clustvars) %&gt;%\n    ungroup() %&gt;%\n    group_by({{ id_var }}, {{ condit_var }}) %&gt;%\n    nest(data = clustvars) %&gt;%\n    mutate(mc = future_map(data, ~Mclust(.x[c(clustvars)],G=G))) %&gt;%\n    mutate(\n      bic= as.numeric(map(mc,\"bic\")),\n      Gfit = as.numeric(map(mc, \"G\")),\n      means = map(mc, get_mclust_param, param = \"mean\"),\n      proportions = map(mc, get_mclust_param, param = \"pro\")\n    )\n}\n\nmcFree1 &lt;- mcFit(test, id, condit, c(\"vx\"))\nmcFreeVxb &lt;- mcFit(test, id, condit, c(\"vxb\"))\nmcFree2 &lt;- mcFit(test, id, condit, c(\"vx\",\"vy\"))\n\nmcFreeVb &lt;- mcFit(test, id, condit, c(\"vx\",\"bandInt\"))\n\n\ndf &lt;- test |&gt; select(id,condit,bandInt,vx) |&gt; group_by(id,bandInt) |&gt; mutate(m=mean(vx),sd=sd(vx),n=n())\n\n\n\n\n\n# test1 &lt;- dfs |&gt; filter(id==1 || id==2) |&gt; mutate(samps = map2(m,sd, ~rnorm(n=10,mean=.x,sd=.y)))\n# test1 &lt;- test1 %&gt;% unnest(samps)\n\n\ndfs &lt;- test |&gt; select(id,condit,bandInt,vx,vb) |&gt; group_by(id,vb,condit) |&gt; summarise(m=mean(vx),sd=sd(vx),med=median(vx),n=n(),se=sd/sqrt(n))\n\nbdf &lt;- dfs |&gt; mutate(samps = map2(m,se, ~rnorm(n=100,mean=.x,sd=.y))) |&gt; unnest(samps) %&gt;% ungroup()\nmcBoot2 &lt;- mcFit(bdf, id, condit, c(\"samps\"))\n\nmcBoot2 |&gt; group_by(condit) |&gt; mutate(n=n()) |&gt; \n   group_by(condit,Gfit) |&gt; mutate(cg=n(),pg=cg/n) |&gt;\n  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+\n  scale_x_continuous(breaks=seq(1,9))\n\n\nSample Stat bootstrap\n\nCodedfs &lt;- test |&gt; select(id,condit,bandInt,vx,vb) |&gt; group_by(id,vb,condit) |&gt; summarise(m=mean(vx),sd=sd(vx),med=median(vx),n=n(),se=sd/sqrt(n))\n\nbdf &lt;- dfs |&gt; mutate(samps = map2(m,se, ~rnorm(n=100,mean=.x,sd=.y))) |&gt; unnest(samps) %&gt;% ungroup()\nmcBoot2 &lt;- mcFit(bdf, id, condit, c(\"samps\"))\n\nmcBoot2 |&gt; group_by(condit) |&gt; mutate(n=n()) |&gt; \n   group_by(condit,Gfit) |&gt; mutate(cg=n(),pg=cg/n) |&gt;\n  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+\n  scale_x_continuous(breaks=seq(1,9))\n\n\n\ndfs2 &lt;- test |&gt; select(id,condit,bandInt,vx,vb,vxb) |&gt; group_by(id,vb,condit) |&gt; summarise(m=mean(vxb),sd=sd(vxb),med=median(vxb),n=n(),se=sd/sqrt(n))\n\nbdf2 &lt;- dfs2 |&gt; mutate(samps = map2(m,se, ~rnorm(n=100,mean=.x,sd=.y))) |&gt; unnest(samps) %&gt;% ungroup()\nmcBoot2b &lt;- mcFit(bdf2, id, condit, c(\"samps\"))\n\nmcBoot2b |&gt; group_by(condit) |&gt; mutate(n=n()) |&gt; \n   group_by(condit,Gfit) |&gt; mutate(cg=n(),pg=cg/n) |&gt;\n  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+\n  scale_x_continuous(breaks=seq(1,9))\n\n\nEmpirical Bootstrap\n\nCode# Define the bootstrap function\nbootstrap &lt;- function(x, n) {\n  sample(x, size = n, replace = TRUE)\n}\n\n# Apply the bootstrap function to your data\nbdf2 &lt;- test %&gt;%\n  select(id, condit, bandInt, vx, vb, vxb) %&gt;%\n  group_by(id, vb, condit) %&gt;%\n  summarise(vxb_bootstrap = list(bootstrap(vx, 20)), .groups = \"drop\") %&gt;%\n  unnest(vxb_bootstrap)\n\neb1 &lt;- mcFit(bdf2, id, condit, c(\"vxb_bootstrap\"))\n\neb1 |&gt; group_by(condit) |&gt; mutate(n=n()) |&gt; \n   group_by(condit,Gfit) |&gt; mutate(cg=n(),pg=cg/n) |&gt;\n  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+\n  scale_x_continuous(breaks=seq(1,9))\n\n\neb2&lt;- test %&gt;%\n  select(id, condit, bandInt, vx, vb, vxb) %&gt;%\n  group_by(id, vb, condit) %&gt;%\n  summarise(vxb_bootstrap = list(bootstrap(vx, 100)), .groups = \"drop\") %&gt;%\n  unnest(vxb_bootstrap) %&gt;% mcFit(.,id,condit,c(\"vxb_bootstrap\"))\n\neb2 |&gt; group_by(condit) |&gt; mutate(n=n()) |&gt; \n   group_by(condit,Gfit) |&gt; mutate(cg=n(),pg=cg/n) |&gt;\n  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+\n  scale_x_continuous(breaks=seq(1,9))\n\n\nPopulation Clustering\n\nCodebic &lt;- mclustBIC(test$vx)\nplot(bic)\nmod1 &lt;- Mclust(test$vx,x=bic)\nsummary(mod1,parameters=TRUE)\n\nbic &lt;- mclustBIC(c(test$vx,test$vy))\nplot(bic)\n\nbic &lt;- mclustBIC(c(test$sdist))\nplot(bic)\n\nbic &lt;- mclustBIC(c(test$dist))\nplot(bic)\n\nbic &lt;- mclustBIC(c(test$dist,test$vx))\nplot(bic)\n\n\n\nbic &lt;- mclustBIC(c(test$vx,test$bandInt))\nplot(bic)\nsummary(bic)\n\n\n\nCodemv4 &lt;- mclustBIC(subset(test,select = c(vx,bandInt)),\n                 G=1:7,\n                 modelNames=c(\"EII\", \"VVI\", \"EEE\", \"VVV\"))\n y &lt;- mv4%&gt;%\n        as.data.frame.matrix() %&gt;%\n        rownames_to_column(\"n_mixtures\") %&gt;%\n        rename(`Constrained variance, fixed covariance` = EII, \n               `Freed variance, fixed covariance` = VVI,\n               `Constrained variance, constrained covariance` = EEE,\n               `Freed variance, freed covariance` = VVV)\n \nto_plot &lt;- y %&gt;%  gather(`Covariance matrix structure`, val, -n_mixtures) %&gt;% \n    mutate(`Covariance matrix structure` = as.factor(`Covariance matrix structure`),\n           val = abs(val)) # this is to make the BIC values positive (to align with more common formula / interpretation of BIC)\nggplot(to_plot, aes(x = n_mixtures, y = val, color = `Covariance matrix structure`, group = `Covariance matrix structure`)) +\n    geom_line() +\n    geom_point() +\n    ylab(\"BIC (smaller value is better)\") \n\n\n\nCodem = Mclust(test$vx)\ntest$vx\n\n\nsummary(m)\n\nmv &lt;- Mclust(subset(test, condit == \"Varied\", select = vx))\nsummary(mv)\nplot(mv, what = \"classification\")\n\nmc &lt;- Mclust(subset(test, condit == \"Constant\", select = vx))\nsummary(mc)\nplot(mc, what = \"classification\")\n\n\n\nmv2 &lt;- densityMclust(subset(test, condit == \"Varied\", select = c(vxb,vy)))\nsummary(mv2)\nplot(mv2, what = \"density\",type=\"persp\")\nplot(mv2, what = \"BIC\")\n\n\nmv3 &lt;- mclustBIC(subset(test, condit == \"Varied\", select = vx),\n                 G=1:7)\n y &lt;- mv3%&gt;%\n        as.data.frame.matrix() %&gt;%\n        rownames_to_column(\"n_mixtures\") %&gt;%\n        rename(`Constrained variance, constrained covariance` = E,\n               `Freed variance, freed covariance` = V)\n\nplot(mc, what = \"classification\")\n\nmc &lt;- Mclust(subset(test, condit == \"Constant\", select = vx),G=6)\nsummary(mc)\ntidy(mc)\nglance(mc)\n\n\nVx and bandInt\n\nCodemcFreeVb &lt;- mcFit(test, id, condit, c(\"vx\",\"bandInt\"),G=1:6)\n\n\n\nmcFreeVb %&gt;% group_by(condit) |&gt; mutate(n=n()) |&gt; \n   group_by(condit,Gfit) |&gt; mutate(cg=n(),pg=cg/n) |&gt;\n  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+\n  scale_x_continuous(breaks=seq(1,9))\n\nmcFreeVb2 &lt;- mcFit(test, id, condit, c(\"vxb\",\"bandInt\"),G=1:6)\n\nmcFreeVb2 %&gt;% group_by(condit) |&gt; mutate(n=n()) |&gt; \n   group_by(condit,Gfit) |&gt; mutate(cg=n(),pg=cg/n) |&gt;\n  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+\n  scale_x_continuous(breaks=seq(1,9))\n\n\nmcFreeVb3 &lt;- mcFit(test, id, condit, c(\"vxb\",\"bandInt\",\"vy\"),G=1:6)\n\nmcFreeVb3 %&gt;% group_by(condit) |&gt; mutate(n=n()) |&gt; \n   group_by(condit,Gfit) |&gt; mutate(cg=n(),pg=cg/n) |&gt;\n  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+\n  scale_x_continuous(breaks=seq(1,9))\n\n\n\nCodemcFreeVb1 &lt;- mcFit(test, id, condit, c(\"vx\"),G=1:6)\n\nmcFreeVb1 %&gt;% group_by(condit) |&gt; mutate(n=n()) |&gt; \n   group_by(condit,Gfit) |&gt; mutate(cg=n(),pg=cg/n) |&gt;\n  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+\n  scale_x_continuous(breaks=seq(1,9))\n\nmcFreeVb1b &lt;- mcFit(test, id, condit, c(\"vxb\"),G=1:6)\n\nmcFreeVb1b %&gt;% group_by(condit) |&gt; mutate(n=n()) |&gt; \n   group_by(condit,Gfit) |&gt; mutate(cg=n(),pg=cg/n) |&gt;\n  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+\n  scale_x_continuous(breaks=seq(1,9))\n\n\nboot1 &lt;- MclustBootstrap(mcFreeVb1b[[4]][[1]], nboot = 1000, type = \"bs\")\nsummary(boot1)\n\n\n\nCodemcFree &lt;- test |&gt; select(id,condit,bandInt,vb,vx) %&gt;% ungroup()\n\nmcFree &lt;- mcFree %&gt;%\n  group_by(id,condit) %&gt;%\n  nest(data = c(bandInt, vb, vx)) %&gt;%\n  mutate(mc = future_map(data, ~MclustBootstrap(.x$vx))) \n\n\nmcFree &lt;- mcFree %&gt;% \n  mutate(\n    Gfit = as.numeric(map(mc, \"G\")),\n    means = map(mc, get_mclust_param, param = \"mean\"),\n    proportions = map(mc, get_mclust_param, param = \"pro\")\n  )\n\n\nFit free to each id\n\nCodemcFree &lt;- test |&gt; select(id,condit,bandInt,vb,vx) %&gt;% ungroup()\n\nmcFree &lt;- mcFree %&gt;%\n  group_by(id,condit) %&gt;%\n  nest(data = c(bandInt, vb, vx)) %&gt;%\n  mutate(mc = future_map(data, ~Mclust(.x$vx))) \n\n\nmcFree &lt;- mcFree %&gt;% \n  mutate(\n    Gfit = as.numeric(map(mc, \"G\")),\n    means = map(mc, get_mclust_param, param = \"mean\"),\n    proportions = map(mc, get_mclust_param, param = \"pro\")\n  )\n\nggplot(mcFree,aes(x=condit,y=Gfit))+geom_boxplot()+geom_jitter()\n\nggplot(mcFree,aes(x=Gfit,fill=condit))+geom_bar(position=position_dodge())\n\n# mcFree &lt;- test |&gt; select(id,condit,bandInt,vb,vx) %&gt;% ungroup()\n# mcFree &lt;- mcFree |&gt; group_by(id) |&gt; nest(id) |&gt; mutate(mc=map(vx, ~Mclust(.x$vx))) \n#   \n\nplot(mcCondit6[[2]][[1]], what = \"classification\")\nplot(mcCondit6[[2]][[2]], what = \"classification\")\n\nk=summary(mcCondit6[[2]][[2]],parameters=TRUE)\n\n\nFit xy free to each id\n\nCodemcFree2 &lt;- test |&gt; select(id,condit,bandInt,vb,vx,vy) %&gt;% ungroup()\n\nmcFree2 &lt;- mcFree2 %&gt;%\n  group_by(id,condit) %&gt;%\n  nest(data = c(bandInt, vb, vx,vy)) %&gt;%\n  mutate(mc = future_map(data, ~Mclust(c(.x$vx,.x$vy)))) \n\n\nmcFree2 &lt;- mcFree2 %&gt;% \n  mutate(\n    Gfit = as.numeric(map(mc, \"G\")),\n    means = map(mc, get_mclust_param, param = \"mean\"),\n    proportions = map(mc, get_mclust_param, param = \"pro\")\n  )\n\nggplot(mcFree2,aes(x=condit,y=Gfit))+geom_boxplot()+geom_jitter()\n\nggplot(mcFree2,aes(x=Gfit,fill=condit))+geom_bar(position=position_dodge())\n\n# mcFree &lt;- test |&gt; select(id,condit,bandInt,vb,vx) %&gt;% ungroup()\n# mcFree &lt;- mcFree |&gt; group_by(id) |&gt; nest(id) |&gt; mutate(mc=map(vx, ~Mclust(.x$vx))) \n#   \n\nplot(mcCondit6[[2]][[1]], what = \"classification\")\nplot(mcCondit6[[2]][[2]], what = \"classification\")\n\nk=summary(mcCondit6[[2]][[2]],parameters=TRUE)\n\n\nFit xy free to each id\n\nCodemcFree2b &lt;- test |&gt; select(id,condit,bandInt,vb,vx) %&gt;% ungroup()\n\nmcFree2b &lt;- mcFree2b %&gt;%\n  group_by(id,condit) %&gt;%\n  nest(data = c(bandInt, vb, vx)) %&gt;%\n  mutate(mc = future_map(data, ~Mclust(c(.x$vx,.x$bandInt)))) \n\n\nmcFree2b &lt;- mcFree2b %&gt;% \n  mutate(\n    Gfit = as.numeric(map(mc, \"G\")),\n    means = map(mc, get_mclust_param, param = \"mean\"),\n    proportions = map(mc, get_mclust_param, param = \"pro\")\n  )\n\nggplot(mcFree2b,aes(x=condit,y=Gfit))+geom_boxplot()+geom_jitter()\nggplot(mcFree2b,aes(x=Gfit,fill=condit))+geom_bar(position=position_dodge())\n\nmcFree2b %&gt;% group_by(condit) |&gt; mutate(n=n()) |&gt; \n   group_by(condit,Gfit) |&gt; mutate(cg=n(),pg=cg/n) |&gt;\n  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+\n  scale_x_continuous(breaks=seq(1,9))\n\n\n\nCodemcFree2b &lt;- test |&gt; select(id,condit,bandInt,vb,vx,vy) %&gt;% ungroup()\n\nmcFree2b &lt;- mcFree2b %&gt;%\n  group_by(id,condit) %&gt;%\n  nest(data = c(bandInt, vb, vx,vy)) %&gt;%\n  mutate(mc = future_map(data, ~Mclust(c(.x$vx,.x$bandInt,.x$vy)))) \n\n\nmcFree2b &lt;- mcFree2b %&gt;% \n  mutate(\n    Gfit = as.numeric(map(mc, \"G\")),\n    means = map(mc, get_mclust_param, param = \"mean\"),\n    proportions = map(mc, get_mclust_param, param = \"pro\")\n  )\n\nggplot(mcFree2b,aes(x=condit,y=Gfit))+geom_boxplot()+geom_jitter()\nggplot(mcFree2b,aes(x=Gfit,fill=condit))+geom_bar(position=position_dodge())\n\nmcFree2b %&gt;% group_by(condit) |&gt; mutate(n=n()) |&gt; \n   group_by(condit,Gfit) |&gt; mutate(cg=n(),pg=cg/n) |&gt;\n  ggplot(aes(x=Gfit,fill=condit))+geom_col(aes(y=pg),position=position_dodge())+\n  scale_x_continuous(breaks=seq(1,9))\n\n\n\nCodemcConditFree &lt;- test |&gt; select(condit,bandInt,vb,vx) %&gt;% ungroup()\n\nmcConditFree &lt;- mcConditFree %&gt;%\n  group_by(condit) %&gt;%\n  nest(data = c(bandInt, vb, vx)) %&gt;%\n  reframe(mc = future_map(data, ~Mclust(.x$vx))) \n\n\nmcConditFree &lt;- mcConditFree %&gt;% \n  mutate(\n    Gfit = as.numeric(map(mc, \"G\")),\n    means = map(mc, get_mclust_param, param = \"mean\"),\n    proportions = map(mc, get_mclust_param, param = \"pro\")\n  )\n\nmcCondit6 &lt;- test |&gt; select(condit,bandInt,vb,vx) %&gt;% ungroup()\n\nmcCondit6 &lt;- mcCondit6 %&gt;%\n  group_by(condit) %&gt;%\n  nest(data = c(bandInt, vb, vx)) %&gt;%\n  reframe(mc = future_map(data, ~Mclust(.x$vx,G=6))) \n\n\nmcCondit6 &lt;- mcCondit6 %&gt;% \n  mutate(\n    Gfit = as.numeric(map(mc, \"G\")),\n    bic=as.numeric(map(mc,\"bic\")),\n    means = map(mc, get_mclust_param, param = \"mean\"),\n    proportions = map(mc, get_mclust_param, param = \"pro\")\n  )\n\n\ntable(class,mcCondit6[[2]][[2]]$classification)\n\nbic &lt;- mclustBIC(test$vx)\n\n\n\nCodedf &lt;- test %&gt;%\n    select(id, condit, bandInt, vb, vx) %&gt;%\n    group_by(id) %&gt;%\n    nest(data = c(condit, bandInt, vb, vx)) \n\n# Define a function to apply the Mclust operation to one group\nprocess_group &lt;- function(group_data, group_id) {\n    print(paste(\"Processing group\", group_id))\n    if(length(unique(group_data$vx))&gt;=12) {\n        Mclust(group_data$vx, G=6)\n    } else {\n        Mclust(rep(0, 12), G=6)  # dummy Mclust model\n    }\n}\n\n# Apply the function to each group one by one\ndf$mc &lt;- map2(df$data, df$id, process_group)\n\n\n\n\n\n\ndf &lt;- df %&gt;%\n  mutate(\n    means = map(mc, get_mclust_param, param = \"mean\"),\n    proportions = map(mc, get_mclust_param, param = \"pro\")\n  )\n\n\n\nCodecenters &lt;- tibble(\n  cluster = factor(1:3),\n  # number points in each cluster\n  num_points = c(100, 150, 50),\n  # x1 coordinate of cluster center\n  x1 = c(5, 0, -3),\n  # x2 coordinate of cluster center\n  x2 = c(-1, 1, -2)\n)\n\npoints &lt;- centers %&gt;%\n  mutate(\n    x1 = map2(num_points, x1, rnorm),\n    x2 = map2(num_points, x2, rnorm)\n  ) %&gt;%\n  select(-num_points, -cluster) %&gt;%\n  unnest(c(x1, x2))\n\n\nm &lt;- Mclust(points)\n\n\n\ndf &lt;- df %&gt;%\n  mutate(\n    mclust_success = map_lgl(mc, ~ !is.null(.x$parameters))\n  ) %&gt;%\n  filter(mclust_success)\n\n\n\nCodelibrary(mixR)\n\nmr1 &lt;- mixfit(test$vx,ncomp=3)\nplot(mr1)\nmr1\n\nmr2 &lt;- mixfit(test$vx,ncomp=6,family=\"gamma\")\nplot(mr2)\nmr2\n\n\n\nCodelibrary(flexmix)\n#https://rdrr.io/cran/flexmix/man/flexmix.html\n\nfm1=flexmix(vx~1|id,data=test,k=6)\nsummary(fm1)\nplot(fm1)\nparameters(fm1)\n\ntest %&gt;% group_by(vb) %&gt;% summarise(mean(vx))\n\n\n\nCode#http://www.sthda.com/english/articles/29-cluster-validation-essentials/96-determining-the-optimal-number-of-clusters-3-must-known-methods/\n\ne1 &lt;- readRDS(here(\"data/e1_08-04-23.rds\"))\ntest &lt;- e1 |&gt; filter(expMode2 == \"Test\") |&gt; ungroup()\nlibrary(factoextra)\nlibrary(NbClust)\n\n\n\nfviz_nbclust(test |&gt; select(vx), kmeans,method = \"gap_stat\")\n\nNbClust(test |&gt; select(vx),distance=\"euclidean\",min.nc=2,max.nc=15,method=\"average\")\n\n\n\nCodelibrary(brms)\n\ntestS &lt;- test |&gt; filter(id %in% 1:20)\n\noptions(mc.cores = 2, brms.backend = \"cmdstanr\")\n\nmix &lt;- mixture(gaussian, gaussian, gaussian,gaussian,gaussian,gaussian)\nprior &lt;- c(\n  prior(normal(200, 100), Intercept, dpar = mu1),\n  prior(normal(450, 100), Intercept, dpar = mu2),\n  prior(normal(700, 100), Intercept, dpar = mu3),\n  prior(normal(900, 100), Intercept, dpar = mu4),\n  prior(normal(1100, 100), Intercept, dpar = mu5),\n  prior(normal(1300, 100), Intercept, dpar = mu6)\n)\nfit1 &lt;- brm(bf(vxC ~ 1), testS, family = mix,\n            prior = prior, chains = 2) \n\nsummary(fit1)\npp_check(fit1,type=\"stat_grouped\",ndraws=500,group=\"bandInt\",stat=\"mean\")\n\n# saveRDS(object = fit1,\n#         file = here(\"data/model_cache/mix6_vxC_test6.rda\"), \n#         compress = \"xz\")\n\n\n7x speedup for scaled vx\n\nCodelibrary(brms)\n\ntest$scaleVx &lt;- scale(test$vx)\ntest %&gt;% group_by(vb) %&gt;% summarise(mean(scaleVx))\n# vb        `mean(scaleVx)`\n#   &lt;fct&gt;               &lt;dbl&gt;\n# 1 100-300           -0.544 \n# 2 350-550           -0.273 \n# 3 600-800           -0.0194\n# 4 800-1000           0.449 \n# 5 1000-1200          0.774 \n# 6 1200-1400          1.00  \n\ntestS &lt;- test |&gt; filter(id %in% 1:20)\n\noptions(mc.cores = 2, brms.backend = \"cmdstanr\")\n\nmix &lt;- mixture(gaussian, gaussian, gaussian,gaussian,gaussian,gaussian)\nprior &lt;- c(\n  prior(normal(-.5, 10), Intercept, dpar = mu1),\n  prior(normal(-.25, 10), Intercept, dpar = mu2),\n  prior(normal(-.02, 10), Intercept, dpar = mu3),\n  prior(normal(.4, 10), Intercept, dpar = mu4),\n  prior(normal(.7, 10), Intercept, dpar = mu5),\n  prior(normal(1, 10), Intercept, dpar = mu6)\n)\nfitScale &lt;- brm(bf(scaleVx ~ 1), testS, family = mix,\n            prior = prior, chains = 2) \n\nsummary(fitScale)\npp_check(fit1,type=\"stat_grouped\",ndraws=500,group=\"bandInt\",stat=\"mean\")\n\n# saveRDS(object = fit1,\n#         file = here(\"data/model_cache/mix6_vxC_test6.rda\"), \n#         compress = \"xz\")\n\n\n\nCodeoptions(mc.cores = 4, brms.backend = \"cmdstanr\")\n\nmix &lt;- mixture(gaussian, gaussian, gaussian,gaussian,gaussian,gaussian)\nprior &lt;- c(\n  prior(normal(-.5, 10), Intercept, dpar = mu1),\n  prior(normal(-.25, 10), Intercept, dpar = mu2),\n  prior(normal(-.02, 10), Intercept, dpar = mu3),\n  prior(normal(.4, 10), Intercept, dpar = mu4),\n  prior(normal(.7, 10), Intercept, dpar = mu5),\n  prior(normal(1, 10), Intercept, dpar = mu6)\n)\n\nfitScaleInt &lt;- brm(bf(scaleVx ~ 1 + (1|id)), test, family = mix,\n            prior = prior, chains = 2,iter=1000) \n\nsummary(fitScaleInt)\npp_check(fitScaleInt,type=\"stat_grouped\",ndraws=500,stat=\"mean\")\n\n# saveRDS(object = fit1,\n#         file = here(\"data/model_cache/mix6_vxC_test6.rda\"), \n#         compress = \"xz\")"
  },
  {
    "objectID": "Misc/benchmarks.html",
    "href": "Misc/benchmarks.html",
    "title": "Benchmarking",
    "section": "",
    "text": "Codesource(here::here(\"Functions\", \"packages.R\"))\ntest &lt;- readRDS(here(\"data/e1_08-21-23.rds\")) |&gt;  filter(expMode2 == \"Test\") |&gt;\n  select(id,condit,bandInt,vb,vx,dist,sdist,bandType)\n\ne1_vxBMM &lt;- brm(vx ~ condit * bandInt + (1 + bandInt|id),\n                        data=test,file=paste0(here::here(\"data/model_cache\", \"e1_testVxBand_RF_5k\")))\nnew_data_grid=map_dfr(1, ~data.frame(unique(test[,c(\"id\",\"condit\",\"bandInt\")])))\n\n\nt1 &lt;- system.time({\ntidy_pred &lt;- test |&gt; add_predicted_draws(e1_vxBMM) |&gt; mutate(.residual = vx - .prediction); \npredict_per_row &lt;- tidy_pred |&gt; group_by(.row) |&gt; mean_hdi(.prediction,.residual)\n\n})\n\nm1 &lt;- system.time({\n  predict_vx &lt;- test |&gt; cbind(predict(e1_vxBMM, test)) |&gt; mutate(resid=vx-Estimate)\n}\n)\n\ncat(paste0(\"tidybayes preds = \",round(t1[\"elapsed\"],2),\" \\n \",\n           \"predict.brmsfit = \",round(m1[\"elapsed\"],2)))\n\n\npredict_vx |&gt; group_by(id,condit,bandInt) |&gt; summarise(mean(vx),mean(Estimate),mean(resid))\n\n\ntidybayes preds = 169.94 predict.brmsfit = 10.27\nhttps://cran.r-project.org/web/packages/brms/vignettes/brms_threading.html\nhttps://discourse.mc-stan.org/t/using-the-apple-m1-gpus-question-from-a-noob/23089/39?page=2\n\nCodepacman::p_load(tidyverse,tidybayes,brms,broom,broom.mixed,lme4,here,knitr,gt,gghalves,patchwork,ggdist,microbenchmark)\ne1 &lt;- readRDS(here(\"data/e1_08-21-23.rds\"))\ntest &lt;- e1 |&gt; filter(expMode2 == \"Test\")  \n\noptions(mc.cores = 4, brms.backend = \"cmdstanr\")\n\nn_cores=4\nbayes_seed &lt;- 1234\nn_iter=20000\nn_threads=2\n\n\ngprior&lt;- c( prior(normal(800, 100), class = Intercept),\n    prior(normal(400, 10), class = sigma)\n  )\n\n\n##############\n\ntf3 &lt;- system.time(\nfit_int_norm &lt;- brm(vx ~ 1 + condit, \n  data = test,\n  family = gaussian(),\n  iter=n_iter,\n  prior = gprior,\n  silent=2,\n  cores=n_cores,\n  threads = threading(n_threads),\n  seed=bayes_seed\n)\n)\ntf3\n\ntf4 &lt;- system.time(\nfit_int_norm &lt;- brm(vx ~ 1 + condit +(1|bandInt) + (1 + bandInt|id),\n  data = test |&gt; filter(id %in% 1:15),\n  family = gaussian(),\n  iter=n_iter,\n  prior = gprior,\n  silent=2,\n  cores=n_cores,\n  threads = threading(n_threads),\n  seed=bayes_seed\n) )\ntf4\n\n\n#########\n\n\ntf &lt;- system.time(\nfit_int_norm &lt;- brm(vx ~ 1 + condit, \n  data = test,\n  family = gaussian(),\n  iter=n_iter,\n  prior = gprior,\n  silent=2,\n  cores=n_cores,\n  seed=bayes_seed\n)\n)\ntf\n\ntf2 &lt;- system.time(\nfit_int_norm &lt;- brm(vx ~ 1 + condit +(1|bandInt) + (1 + bandInt|id),\n  data = test |&gt; filter(id %in% 1:15),\n  family = gaussian(),\n  iter=n_iter,\n  prior = gprior,\n  silent=2,\n  cores=n_cores,\n  seed=bayes_seed\n)\n)\ntf2\n\n\n##########\n\n\ncat(paste0(\"int only gaussian = \",round(tf[\"elapsed\"],2),\" \\n \",\n          # \"foreach parallel time=\",round(tfP[\"elapsed\"],2),\" \\n \",\n           \"irt version = \",round(tf2[\"elapsed\"],2), \" \\n \",\n           \"int only threading = \",round(tf3[\"elapsed\"],2),\" \\n \",\n          \"irt  threading = \",round(tf4[\"elapsed\"],2),\" \\n \"\n            \n          ))\n\n\ndefault brms settings (2K iterations)\nint only gaussian = 6.85 irt version = 12.15\nint only gaussian = 7.51 irt version = 12\nint only gaussian = 6.67 irt version = 11.82 int only threading = 7.49 irt threading = 11.33\ndefault brms settings (4K iterations) - 2 threads\nint only gaussian = 8.1 irt version = 14.69 int only threading = 6.99 irt threading = 15.24\ndefault brms settings (4K iterations) - 4 threads\nbrms int only gaussian = 8.11 irt version = 15.05 int only threading = 7.28 irt threading = 16.95\ndefault brms settings (4K iterations) - 4 threads - 2 cores\nint only gaussian = 11.27 irt version = 21.72 int only threading = 8.39 irt threading = 22.67\ndefault brms settings (4K iterations) - 2 threads - 2 cores\nint only gaussian = 11.27 irt version = 21.81 int only threading = 9.38 irt threading = 20.63\ndefault brms settings (4K iterations) - 8 threads - 4 cores\nint only gaussian = 8.27 irt version = 15.4 int only threading = 7.69 irt threading = 21.28\nint only gaussian = 8.37 irt version = 15.18 int only threading = 8.02 irt threading = 21.47\ndefault brms settings (4K iterations) - 8 threads - 8 cores\nint only gaussian = 8.11 irt version = 14.88 int only threading = 7.92 irt threading = 20.72\ndefault brms settings (10K iterations) - 8 threads - 8 cores\nint only gaussian = 11.38 irt version = 23.64 int only threading = 11.58 irt threading = 37.1\nint only gaussian = 11.53 irt version = 23.76 int only threading = 12 irt threading = 37.45\ndefault brms settings (10K iterations) - 8 threads - 4 cores\nint only gaussian = 11.48 irt version = 23.29 int only threading = 10.91 irt threading = 36.54\ndefault brms settings (10K iterations) - 4 threads - 4 cores\nint only gaussian = 11.99 irt version = 24.25 int only threading = 10.13 irt threading = 29.13\ndefault brms settings (10K iterations) - 4 threads - 1 cores\nint only gaussian = 29.35 irt version = 66.61 int only threading = 18.97 irt threading = 71.21\ndefault brms settings (10K iterations) - 2 threads - 2 cores\nint only gaussian = 17.98 irt version = 38.31 int only threading = 13.87 irt threading = 37.78\ndefault brms settings (10K iterations) - 1 threads - 4 cores\nint only gaussian = 11.14 irt version = 22.89 int only threading = 12.25 irt threading = 27.03\nint only gaussian = 11.35 irt version = 22.99 int only threading = 12.28 irt threading = 27.38\ndefault brms settings (10K iterations) - 2 threads - 4 cores\nint only gaussian = 11.22 irt version = 23.07 int only threading = 9 irt threading = 22.34\nint only gaussian = 11.31 irt version = 23.14 int only threading = 9.49 irt threading = 22.21\ndefault brms settings (10K iterations) - 3 threads - 4 cores\nint only gaussian = 11.15 irt version = 22.88 int only threading = 9.4 irt threading = 26.75\nint only gaussian = 11 irt version = 22.88 int only threading = 9.5 irt threading = 25.7\n(20K iterations) - 1 threads - 4 cores\nint only gaussian = 18.24 irt version = 40.37 int only threading = 20.32 irt threading = 48.94\nint only gaussian = 17.8 irt version = 39.26 int only threading = 20.54 irt threading = 48.14\nint only gaussian = 18.12 irt version = 40.31\nint only threading = 20.6 irt threading = 40.02 - when I commented out the threading specification\n(20K iterations) - 2 threads - 4 cores\nint only gaussian = 17.82 irt version = 39.34 int only threading = 14.22 irt threading = 37.73\n(20K iterations) - adding condit factor - 2 threads - 4 cores\nint only gaussian = 7.78 irt version = 45.66 int only threading = 8.57 irt threading = 45.97\n(20K iterations) - adding condit factor - 3 threads - 4 cores\nint only gaussian = 8.58 irt version = 47.07 int only threading = 10.71 irt threading = 57.87\n(20K iterations) - condit factor and bandInt RF slope - 2 threads - 4 cores\nint only gaussian = 7.85 irt version = 80.71 int only threading = 8.69 irt threading = 88.3\n\nCodepacman::p_load(tidyverse,foreach,doParallel,future,furrr,here)\npurrr::walk(c(here(\"Functions/alm_functions.R\",\"Functions/Display_Functions.R\")),source)\n\nn_cores &lt;- parallel::detectCores()\n\nparam_grid &lt;- tibble(crossing(\n  c = seq(.5,5,.25),\n  lr = seq(0.01, 1,.1),\n  noise_sd = c(0,.0001,0.001, 0.01),\n  inNodes = c(5, 7,14,28),\n  outNodes = c(16, 32,64)\n))\nnrow(param_grid)\n\ngen_train &lt;- function(trainVec=c(5,6,7),trainRep=3,noise=0){\n  bandVec=c(0,100,350,600,800,1000,1200)\n  if(class(trainVec)==\"list\"){trainVec=unlist(trainVec)}\n  ts &lt;- rep(seq(1,length(trainVec)),trainRep)\n  noiseVec=rnorm(length(ts),mean=0)*noise\n  if(noise==0) {noiseVec=noiseVec*0}\n  tibble(trial=seq(1,length(ts)),input=trainVec[ts],vx=bandVec[trainVec[ts]]+noiseVec)\n}\nfit_alm &lt;- function(data, c, lr, noise_sd, inNodes, outNodes) {\n  mse_list &lt;- replicate(5, {\n    train_data &lt;- data[, c(\"trial\", \"input\", \"cor\")] %&gt;% rename(\"vx\" = cor)\n    sim_result &lt;- sim_train(\n      dat = train_data,\n      c = c,\n      lr = lr,\n      inNodes = inNodes,\n      outNodes = outNodes,\n      noise_sd = noise_sd\n    )\n    train_data$almTrain &lt;- sim_result$almTrain\n    mse &lt;- mean((data$vx - train_data$almTrain)^2)\n    mse\n  })\n  avg_mse &lt;- mean(mse_list)\n  return(avg_mse)\n}\n\ngt &lt;- gen_train(trainVec=c(5,6,7),trainRep=8) %&gt;% mutate(cor=vx,err=(800-0)*exp(-.1*seq(1,n()))+0,vx=cor-err)\n\n\nfurrr::furrr_options(seed = TRUE)\nplan(multisession, workers = n_cores-1)\ntff &lt;- system.time({\n\nparam_grid &lt;- param_grid %&gt;% mutate(performance = future_map_dbl(seq_len(nrow(.)), function(idx) {\n    fit_alm(gt, c = c[idx], lr = lr[idx], noise_sd = noise_sd[idx], inNodes = inNodes[idx], outNodes = outNodes[idx])\n  },.options = furrr_options(seed = T)))\n  best_paramsF &lt;- param_grid %&gt;%\n    arrange((performance)) \n  bestF &lt;- head(best_paramsF,1)\n})\n\n\n# cluster &lt;- parallel::makeCluster(n_cores-1)                 \n# doParallel::registerDoParallel(cluster)\n# tfP &lt;- system.time({\n#   param_grid &lt;- param_grid %&gt;%\n#     mutate(performance = foreach(idx = seq_len(nrow(.)), .combine = c) %dopar% {\n#       fit_alm(gt, c = c[idx], lr = lr[idx], noise_sd = noise_sd[idx], inNodes = inNodes[idx], outNodes = outNodes[idx])\n#     })\n#   best_paramsP &lt;- param_grid %&gt;%\n#     arrange((performance)) \n#   bestP &lt;- head(best_paramsP,1)\n#   })\n# stopImplicitCluster()\n#   tfP\n\n\ntI &lt;- system.time({\ngt &lt;- gen_train(trainVec=c(5,6,7),trainRep=8) %&gt;% mutate(cor=vx,err=(600-0)*exp(-.1*seq(1,n()))+0,vx=cor-err)\n\nparam_grid &lt;- param_grid %&gt;%\n  mutate(performance = map_dbl(seq_len(nrow(.)), ~ {\n    fit_alm(gt, c = c[.x], lr = lr[.x], noise_sd = noise_sd[.x], inNodes = inNodes[.x], outNodes = outNodes[.x])\n  }))\nbest_paramsI &lt;- param_grid %&gt;%\n  arrange((performance)) \nbestI &lt;- head(best_paramsI,1)\n})\n\ntI\n\n\n\n\ncat(paste0(\"furr time=\",round(tff[\"elapsed\"],2),\" \\n \",\n          # \"foreach parallel time=\",round(tfP[\"elapsed\"],2),\" \\n \",\n           \" Standard Time=\",round(tI[\"elapsed\"],2)))\n\n\n4.2 -6.2 times faster with furr on m1\n\n\nRuns\nMachine\nCores\nMethod\nTime (seconds)\n\n\n\n9120\nM1\n9/10\nFurr\n9.56\n\n\n9120\nM1\n9/10\nStandard\n58.8\n\n\n912\nM1\n8/10\nStandard\n5.7\n\n\n912\nM1\n8/10\nParallel\n1.2\n\n\n912\nM1\n9/10\nFurr\n1.3\n\n\n912\n2015 iMac\n2/4\nStandard\n26.2\n\n\n912\n2015 iMac\n2/4\nParallel\n18.5\n\n\n912\n2015 iMac\n3/4\nFurr\n12.88\n\n\n912\nGTX\n3/4\nStandard\n25.32\n\n\n912\nGTX\n3/4\nFurr\n13.1\n\n\n\n\nFurrr and standard version both work equally fast, tested with up to 120 simulation repetitions\n\nCodelibrary(furrr)\nfurrr::furrr_options(seed = TRUE)\nplan(multisession, workers = parallel::detectCores())\n\nparmVec &lt;- tibble(crossing(c = c(0.1,.5), lr = c(0.4), noise = c(500), trainRep = c(20), lossFun = list(\"RMSE\", \"RMSE.blocked\"), simNum = 1:30))\ntf &lt;- system.time(\nsdpf &lt;- parmVec %&gt;% \n  mutate(d = future_pmap(list(c, lr, noise, trainRep), ~sim_data(c = ..1, lr = ..2, noise = ..3, trainRep = ..4),\n                         .options = furrr_options(seed = T)),\n                           almTrainDat = map(d, \"almTrain\"),\n                          almTestDat = map(d, \"almPred\"),\n                          examTestDat = map(d, \"examPred\"),\n                          td = map(trainRep, ~gen_train(trainRep = .)),\n                          fitO = map2(td, lossFun, ~wrap_optim(.x, .y)),\n                          fitG = map2(td, lossFun, ~wrap_grid(.x, .y)),\n                          cFitO = map_dbl(fitO, \"c\"),\n                          lrFitO = map_dbl(fitO, \"lr\"),\n                          optimValO = map_dbl(fitO, \"Value\"),\n                          cFitG = map_dbl(fitG, \"c\"),\n                          lrFitG = map_dbl(fitG, \"lr\"),\n                          optimValG = map_dbl(fitG, \"Value\"))\n)\ntf\n\nts &lt;- system.time(\nsdp &lt;- parmVec %&gt;% mutate(d = pmap(list(c, lr, noise, trainRep), ~sim_data(c = ..1, lr = ..2, noise = ..3, trainRep = ..4)),\n                          almTrainDat = map(d, \"almTrain\"),\n                          almTestDat = map(d, \"almPred\"),\n                          examTestDat = map(d, \"examPred\"),\n                          td = map(trainRep, ~gen_train(trainRep = .)),\n                          fitO = map2(td, lossFun, ~wrap_optim(.x, .y)),\n                          fitG = map2(td, lossFun, ~wrap_grid(.x, .y)),\n                          cFitO = map_dbl(fitO, \"c\"),\n                          lrFitO = map_dbl(fitO, \"lr\"),\n                          optimValO = map_dbl(fitO, \"Value\"),\n                          cFitG = map_dbl(fitG, \"c\"),\n                          lrFitG = map_dbl(fitG, \"lr\"),\n                          optimValG = map_dbl(fitG, \"Value\"))\n)\nts\n\n\nM1 Max times: tf user system elapsed 221.326 4.517 226.233\nts user system elapsed 221.140 4.288 225.330\nMac Pro times: tf user system elapsed 1125.102 76.859 1474.612\nts user system elapsed 1132.716 76.260 1493.154\nBenchmarking ALM Model Fit Functions\n\nCodepacman::p_load(tidyverse,data.table,microbenchmark())\n\n\nd &lt;- readRDS(here('dPrune-01-19-23.rds'))\n\ndtest &lt;- d %&gt;% filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) %&gt;% group_by(id,lowBound) %&gt;% \n  mutate(nBand=n(),band=bandInt,id=factor(id)) %&gt;% group_by(id) %&gt;% mutate(nd=n_distinct(lowBound))\n# unique(dtest[dtest$nd==4,]$sbjCode) # 7 in wrong condition\ndtest &lt;- dtest %&gt;% group_by(id,lowBound) %&gt;% filter(nBand&gt;=5 & nd==6)\n# for any id that has at least 1 nBand &gt;=5, remove all rows with that id. \ndtest &lt;- dtest %&gt;% group_by(id) %&gt;% filter(!id %in% unique(dtest$id[dtest$nBand&lt;5]))\n\ndtestAgg &lt;- dtest %&gt;% group_by(id,condit,catOrder,feedbackType,vb,band,lowBound,highBound,input) %&gt;% mutate(vxCapped=ifelse(vx&gt;1600,1600,vx)) %&gt;%\n  summarise(vxMean=mean(vx),devMean=mean(dist),vxMed=median(vx),devMed=median(dist),\n            vxMeanCap=mean(vxCapped),.groups = \"keep\")\n\n# select first row for each id in d, then create histogram for nTrain\n#  d  %&gt;% group_by(id) %&gt;% slice(1) %&gt;% ggplot(aes(nTrain)) + geom_histogram() + facet_wrap(~condit)\n  \nds &lt;- d %&gt;% filter(expMode %in% c(\"train\",\"train-Nf\",\"test-Nf\",\"test-train-nf\")) %&gt;% \nfilter(!id %in% unique(dtest$id[dtest$nBand&lt;5])) %&gt;% \nselect(id,condit,catOrder,feedbackType,expMode,trial,gt.train,vb,band,bandInt,lowBound,highBound,input,vx,dist,vxb) \n\ndst &lt;- ds %&gt;% filter(expMode==\"train\",catOrder==\"orig\")\n\nvTrainTrial &lt;- dst %&gt;% filter(condit==\"Varied\",gt.train&lt;=84) %&gt;% group_by(gt.train,vb) %&gt;% summarise(sdVx=sd(vx),vx=mean(vx),sdDist=sd(dist),dist=mean(dist)) %&gt;% \n  group_by(vb) %&gt;% mutate(gt.trainBin=cut(gt.train,breaks=5,labels=c(1:5)))\n\nbinTrainTrial &lt;- dst %&gt;% filter(gt.train&lt;=83) %&gt;% group_by(gt.train,vb,condit) %&gt;% summarise(sdVx=sd(vx),vx=mean(vx),sdDist=sd(dist),dist=mean(dist)) %&gt;% \n  group_by(vb) %&gt;% mutate(gt.trainBin=cut(gt.train,breaks=6,labels=c(1:6)))\n\n\ntMax=84\nbandVec &lt;- rep(c(800,1000,1200),each=tMax/3)\nbandVec &lt;- bandVec[sample(1:length(bandVec),tMax,replace=FALSE)]\n\ntrainTrials &lt;- dst %&gt;% filter(gt.train&lt;=tMax) %&gt;% group_by(condit,gt.train,vb,bandInt,input) %&gt;% summarise(vx=mean(vx)) \n\ninput.activation&lt;-function(x.target, c){\n  return(exp(-1*c*(x.target-inputNodes)^2))\n}\n\noutput.activation&lt;-function(x.target, weights, c){\n  return(weights%*%input.activation(x.target, c))\n}\n\nmean.prediction&lt;-function(x.target, weights, association.parameter){\n  probability&lt;-output.activation(x.target, weights, c)/sum(output.activation(x.target, weights, c))\n  return(outputNodes%*%probability) # integer prediction\n}\n# function to generate exam predictions\nexam.prediction&lt;-function(x.target, weights, c,trainVec){\n  #trainVec = sort(unique(x.learning))\n  nearestTrain = trainVec[which.min(abs(trainVec-x.target))]\n  aresp = mean.prediction(nearestTrain, weights, c)\n  xUnder = ifelse(min(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) - 1])\n  xOver = ifelse(max(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) + 1])\n  mUnder = mean.prediction(xUnder, weights, c)\n  mOver = mean.prediction(xOver, weights, c)\n  exam.output = round(aresp + ((mOver - mUnder) / (xOver - xUnder)) * (x.target - nearestTrain), 3)\n  exam.output\n}\n  \nupdate.weights&lt;-function(x.new, y.new, weights, c, lr){\n  y.feedback.activation&lt;-exp(-1*c*(y.new-outputNodes)^2)\n  x.feedback.activation&lt;-output.activation(x.new, weights, c)\n  return(weights+lr*(y.feedback.activation-x.feedback.activation)%*%t(input.activation(x.new, c)))\n}\n\ntrain.alm&lt;-function(dat, c=0.05, lr=0.5, weights){\n   alm.train&lt;-rep(NA,nrow(dat))  \n  for (i in 1:nrow(dat)){\n    weights &lt;- update.weights(dat$input[i], dat$vx[i], weights, c, lr)\n    resp = mean.prediction(dat$input[i], weights, c)\n    alm.train[i]=resp\n    weights[weights&lt;0]=0\n  }\n  alm.train\n}\n\nwrap_alm &lt;- function(parms,dat, weights,lossFun){\n    c=parms[1]; lr=parms[2]\n   pred=train.alm(dat, c=c, lr=lr, weights=weights)\n   #sqrt(mean((dat$vx -pred)^2))\n   lossFun(dat$vx,pred)\n}\n\nwrap_optim &lt;- function(dat,wm,lossFun){\n  bounds_lower &lt;- c(.0000001, .00001)\n  bounds_upper &lt;- c(5, 5)\n\n optim(c(.1, .2),\n   fn = wrap_alm,\n   dat = dat, weights = wm,lossFun=lossFun,\n   method = \"L-BFGS-B\",\n   lower = bounds_lower,\n   upper = bounds_upper,\n   control = list(maxit = 1e4, pgtol = 0, factr = 0)\n )\n}\n\nRMSE &lt;- function(x,y){\n  sqrt(mean((x-y)^2))\n}\n\n## First average observed and predicted data into blocks, then compute RMSE\nRMSE.tb &lt;- function(x,y,blocks=6){\n  data.frame(x,y) %&gt;% mutate(t=row_number(),fitBins=cut(t,breaks=blocks,labels=c(1:blocks))) %&gt;%\n    group_by(fitBins) %&gt;% \n    summarise(predMean=mean(x),obsMean=mean(y)) %&gt;% \n    summarise(RMSE(predMean,obsMean)) %&gt;% as.numeric()\n}\n\n## Recode RMSE.tb using data.table functions rather than dplyr\nRMSE.tb2 &lt;- function(x,y,blocks=6){\n  data.table(x=x,y=y,t=seq(1,length(x))) %&gt;% \n    .[, `:=`(fitBins = cut(t, breaks = ..blocks, labels = c(1:..blocks)))] %&gt;%\n    .[, .(predMean = mean(x), obsMean = mean(y)), keyby = .(fitBins)] %&gt;%\n    .[, RMSE(predMean,obsMean)] %&gt;% as.numeric()\n}\n\n\ndplyr RMSE vs data.table RMSE\n\nCodedpVsDt=microbenchmark(\n  dplyrMethod={\n  fitVaried &lt;- tv %&gt;% filter(condit==\"Varied\") %&gt;% wrap_optim(.,wm,lossFun=RMSE.tb);\n  fitConstant &lt;- tv %&gt;% filter(condit==\"Constant\") %&gt;% wrap_optim(.,wm,lossFun=RMSE.tb)},\n  dtMethod={\n  fitVaried2 &lt;- tv %&gt;% filter(condit==\"Varied\") %&gt;% wrap_optim(.,wm,lossFun=RMSE.tb2);\n  fitConstant2 &lt;- tv %&gt;% filter(condit==\"Constant\") %&gt;% wrap_optim(.,wm,lossFun=RMSE.tb2)},\n  times=5\n)\nknitr::kable(summary(dpVsDt),format=\"markdown\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexpr\nmin\nlq\nmean\nmedian\nuq\nmax\nneval\ncld\n\n\n\ndplyrMethod\n11.282291\n12.996857\n13.558623\n13.970367\n14.658515\n14.885086\n5\na\n\n\ndtMethod\n4.933999\n5.306232\n5.681235\n5.515397\n6.131193\n6.519355\n5\nb\n\n\n\nThe data.table version seems to be consistently more than 2x faster\nSeparate fits, vs. nesting method vs. split method\n\nCodenestSplit&lt;-microbenchmark(\nseparate={fitVaried &lt;- tv %&gt;% filter(condit==\"Varied\") %&gt;% wrap_optim(.,wm,lossFun=RMSE.tb2);\nfitConstant &lt;- tv %&gt;% filter(condit==\"Constant\") %&gt;% wrap_optim(.,wm,lossFun=RMSE.tb2) },\nnestGroups = tv %&gt;% group_by(condit) %&gt;% nest() %&gt;% mutate(fit=map(data,~wrap_optim(.,wm,RMSE.tb2))),\nsplitGroups = tv %&gt;% split(.$condit) %&gt;% map(~wrap_optim(.,wm,RMSE.tb2)),\ntimes=5\n)\nknitr::kable(summary(nestSplit),format=\"markdown\") # 03/02/23 - Mac Pro\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexpr\nmin\nlq\nmean\nmedian\nuq\nmax\nneval\ncld\n\n\n\nseparate\n6.394459\n6.483235\n6.709882\n6.508353\n7.059420\n7.103941\n5\na\n\n\nnestGroups\n6.253850\n6.457956\n6.789962\n6.756942\n7.044965\n7.436094\n5\na\n\n\nsplitGroups\n6.117184\n6.455866\n6.605814\n6.461572\n6.640798\n7.353648\n5\na\n\n\n\nNot much of an effect for nesting method.\nComputing RMSE over Raw trials vs. RMSE of blocked training performance\n\nCodetrialBlock&lt;-microbenchmark(\n  trialFit = tv %&gt;% split(.$condit) %&gt;% map(~wrap_optim(.,wm,RMSE)),\n  blockFit = tv %&gt;% split(.$condit) %&gt;% map(~wrap_optim(.,wm,RMSE.tb2)),\n  times=5\n)\nknitr::kable(summary(trialBlock),format=\"markdown\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexpr\nmin\nlq\nmean\nmedian\nuq\nmax\nneval\ncld\n\n\n\ntrialFit\n2.665184\n2.674186\n2.806476\n2.803491\n2.843806\n3.045712\n5\na\n\n\nblockFit\n5.169167\n5.264218\n5.350769\n5.285151\n5.491828\n5.543483\n5\nb\n\n\n\nThe models are fit about 2x faster when computing RMSE over trials. This shouldn’t be surprising, since fitting to blocked data requires several additional computations (e.g. grouping, computing means)",
    "crumbs": [
      "Misc",
      "Benchmarking"
    ]
  },
  {
    "objectID": "Misc/Visuals_Interactives/tikz_net.html",
    "href": "Misc/Visuals_Interactives/tikz_net.html",
    "title": "tikz",
    "section": "",
    "text": "https://www.andrewheiss.com/blog/2021/08/27/tikz-knitr-html-svg-fun/ https://gist.github.com/andrewheiss/4ece621813a27dfdcaef7f1c2d773237\nCode```{r}\n#lapply(c('tidyverse','data.table','igraph','ggraph','kableExtra'),library,character.only=TRUE))\npacman::p_load(tikzDevice, knitr) \n```"
  },
  {
    "objectID": "Misc/Visuals_Interactives/tikz_net.html#alcove",
    "href": "Misc/Visuals_Interactives/tikz_net.html#alcove",
    "title": "tikz",
    "section": "Alcove",
    "text": "Alcove\n\nCode```{r, engine = 'tikz'}\n\\usetikzlibrary{positioning}\n\n\n\\begin{tikzpicture}[node distance=1cm]\n    \\tikzset{\n        neuron/.style={\n            circle,\n            draw,\n            minimum size=1cm,\n        },\n        input neuron/.style={\n            neuron,\n            fill=green!20,\n        },\n        output neuron/.style={\n            neuron,\n            fill=red!20,\n        },\n        hidden neuron/.style={\n            neuron,\n            fill=blue!20,\n        },\n    }\n\n    \\node[input neuron] (input-1) at (0, 0) {Stimulus dimension node 1};\n    \\node[input neuron] (input-2) [below=of input-1] {Stimulus dimension node 2};\n    \\node[hidden neuron] (hidden-1) [right=of input-1] {Exemplar node 1};\n    \\node[hidden neuron] (hidden-2) [below=of hidden-1] {Exemplar node 2};\n    \\node[hidden neuron] (hidden-3) [below=of hidden-2] {Exemplar node 3};\n    \\node[output neuron] (output-1) [right=of hidden-2] {Category node 1};\n    \\node[output neuron] (output-2) [right=of hidden-3] {Category node 2};\n\n    \\draw[-&gt;] (input-1) -- (hidden-1);\n    \\draw[-&gt;] (input-1) -- (hidden-2);\n    \\draw[-&gt;] (input-1) -- (hidden-3);\n    \\draw[-&gt;] (input-2) -- (hidden-1);\n    \\draw[-&gt;] (input-2) -- (hidden-2);\n    \\draw[-&gt;] (input-2) -- (hidden-3);\n    \\draw[-&gt;] (hidden-1) -- node[midway, above, sloped]{Learned association weights} (output-1);\n    \\draw[-&gt;] (hidden-2) -- node[midway, above, sloped]{Learned association weights} (output-1);\n    \\draw[-&gt;] (hidden-3) -- node[midway, above, sloped]{Learned association weights} (output-2);\n\\end{tikzpicture}\n\n```\n\n\n\n\n\n\n\nAlcove 2\n\nCode```{r, engine = 'tikz'}\n#| eval: true\n#| cache: true\n\n\\usetikzlibrary{positioning}\n\n\\tikzset{\n    neuron/.style={\n        circle,\n        draw,\n        minimum size=1cm,\n    },\n    input neuron/.style={\n        neuron,\n        fill=green!20,\n    },\n    output neuron/.style={\n        neuron,\n        fill=red!20,\n    },\n    hidden neuron/.style={\n        neuron,\n        fill=blue!20,\n    },\n}\n\n\\begin{tikzpicture}[node distance=1cm]\n    \\node[input neuron] (input-1) at (0, 0) {Stimulus dimension node 1};\n    \\node[input neuron] (input-2) [below=of input-1] {Stimulus dimension node 2};\n    \\node[hidden neuron] (hidden-1) [right=of input-1] {Exemplar node 1};\n    \\node[hidden neuron] (hidden-2) [below=of hidden-1] {Exemplar node 2};\n    \\node[hidden neuron] (hidden-3) [below=of hidden-2] {Exemplar node 3};\n    \\node[output neuron] (output-1) [right=of hidden-2] {Category node 1};\n    \\node[output neuron] (output-2) [right=of hidden-3] {Category node 2};\n\n    \\draw[-&gt;] (input-1) -- (hidden-1);\n    \\draw[-&gt;] (input-1) -- (hidden-2);\n    \\draw[-&gt;] (input-1) -- (hidden-3);\n    \\draw[-&gt;] (input-2) -- (hidden-1);\n    \\draw[-&gt;] (input-2) -- (hidden-2);\n    \\draw[-&gt;] (input-2) -- (hidden-3);\n    \\draw[-&gt;] (hidden-1) -- node[midway, above, sloped]{Learned association weights} (output-1);\n    \\draw[-&gt;] (hidden-2) -- node[midway, above, sloped]{Learned association weights} (output-1);\n    \\draw[-&gt;] (hidden-3) -- node[midway, above, sloped]{Learned association weights} (output-2);\n\\end{tikzpicture}\n```"
  },
  {
    "objectID": "Misc/Visuals_Interactives/tikz_net.html#intro",
    "href": "Misc/Visuals_Interactives/tikz_net.html#intro",
    "title": "tikz",
    "section": "Intro",
    "text": "Intro\nHere is a TikZ picture\n\nCode```{r, engine = 'tikz'}\n#| eval: true\n\\tikzset{\n    declare function={\n        sig = 0.1;\n        mu = 0;\n        g(\\x) = 1/(sig*sqrt(2*pi)) * exp(-1/2 * ((\\x-mu)/sig)^2);\n    }\n}\n\n\n\n\\begin{tikzpicture}[\n    shorten &gt;=1pt,\n    -&gt;,\n    draw=black!50,\n    node distance=2.5cm,\n    scale=1.5,\n    every pin edge/.style={&lt;-,shorten &lt;=1pt},\n    neuron/.style={\n        circle,fill=black!25,minimum size=17pt,inner sep=0pt,\n        path picture={\n            \\draw[red,thick,-] plot[domain=-0.3:0.3,samples=11,smooth] ({\\x},{0.05*g(\\x)});\n        },\n    },\n    input neuron/.style={neuron, fill=green!50},\n    output neuron/.style={neuron, fill=red!50},\n    hidden neuron/.style={neuron, fill=blue!50},\n    annot/.style={text width=4em, text centered},\n]\n\n    % Draw the input layer nodes\n    \\foreach \\name / \\y in {1,...,4}\n    % This is the same as writing \\foreach \\name / \\y in {1/1,2/2,3/3,4/4}\n        \\node[input neuron, pin=left:Input \\y] (I-\\name) at (0,-\\y) {};\n    \n    % Draw the hidden layer nodes\n    \\foreach \\name / \\y in {1,...,5}\n        \\path[yshift=0.5cm]\n            node[hidden neuron] (H-\\name) at (2.5cm,-\\y cm) {};\n    \n    % Draw the output layer node\n    \\node[output neuron,pin={[pin edge={-&gt;}]right:Output}, right of=H-3] (O) {};\n    \n    % Connect every node in the input layer with every node in the\n    % hidden layer.\n    \\foreach \\source in {1,...,4}\n        \\foreach \\dest in {1,...,5}\n            \\path (I-\\source) edge (H-\\dest);\n    \n    % Connect every node in the hidden layer with the output layer\n    \\foreach \\source in {1,...,5}\n        \\path (H-\\source) edge (O);\n    \n    % Annotate the layers\n    \\node[annot,above of=H-1, node distance=1cm] (hl) {Hidden layer};\n    \\node[annot,above of=I-1, node distance=1cm] {Input layer};\n    \\node[annot,above of=O] {Output layer};\n\n\n\\end{tikzpicture}\n\n```\n\n\n\n\n\n\n\n\nCode```{r, engine = 'tikz'}\n#| eval: true\n#| cache: true\n\n\n\\usetikzlibrary{matrix,chains,positioning,decorations.pathreplacing,arrows}\n\n\\begin{tikzpicture}[\n    init/.style={\n      draw,\n      circle,\n      inner sep=2pt,\n      font=\\Huge,\n      join = by -latex\n    },\n    squa/.style={\n      draw,\n      inner sep=2pt,\n      font=\\Large,\n      join = by -latex\n    },\n    start chain=2,node distance=13mm\n    ]\n    \\node[on chain=2] \n      (x2) {$x_2$};\n    \\node[on chain=2,join=by o-latex] \n      {$w_2$};\n    \\node[on chain=2,init] (sigma) \n      {$\\displaystyle\\Sigma$};\n    \\node[on chain=2,squa,label=above:{\\parbox{2cm}{\\centering Activate \\\\ function}}]   \n      {$f$};\n    \\node[on chain=2,label=above:Output,join=by -latex] \n      {$y$};\n    \\begin{scope}[start chain=1]\n    \\node[on chain=1] at (0,1.5cm) \n      (x1) {$x_1$};\n    \\node[on chain=1,join=by o-latex] \n      (w1) {$w_1$};\n    \\end{scope}\n    \\begin{scope}[start chain=3]\n    \\node[on chain=3] at (0,-1.5cm) \n      (x3) {$x_3$};\n    \\node[on chain=3,label=below:Weights,join=by o-latex] \n      (w3) {$w_3$};\n    \\end{scope}\n    \\node[label=above:\\parbox{2cm}{\\centering Bias \\\\ $b$}] at (sigma|-w1) (b) {};\n    \n    \\draw[-latex] (w1) -- (sigma);\n    \\draw[-latex] (w3) -- (sigma);\n    \\draw[o-latex] (b) -- (sigma);\n    \n    \\draw[decorate,decoration={brace,mirror}] (x1.north west) -- node[left=10pt] {Inputs} (x3.south west);\n\\end{tikzpicture}\n\n```\n\n\n\n\n\n\n\n\nCode```{r, engine = 'tikz'}\n#| eval: true\n#| cache: true\n\n\\usetikzlibrary{positioning}\n\n\\tikzset{basic/.style={draw,fill=blue!20,text width=1em,text badly centered}}\n\\tikzset{input/.style={basic,circle}}\n\\tikzset{weights/.style={basic,rectangle}}\n\\tikzset{functions/.style={basic,circle,fill=blue!10}}\n\n\n\\begin{tikzpicture}\n    \\node[functions] (center) {};\n    \\node[below of=center,font=\\scriptsize,text width=4em] {Activation function};\n    \\draw[thick] (0.5em,0.5em) -- (0,0.5em) -- (0,-0.5em) -- (-0.5em,-0.5em);\n    \\draw (0em,0.75em) -- (0em,-0.75em);\n    \\draw (0.75em,0em) -- (-0.75em,0em);\n    \\node[right of=center] (right) {};\n        \\path[draw,-&gt;] (center) -- (right);\n    \\node[functions,left=3em of center] (left) {$\\sum$};\n        \\path[draw,-&gt;] (left) -- (center);\n    \\node[weights,left=3em of left] (2) {$w_2$} -- (2) node[input,left of=2] (l2) {$x_2$};\n        \\path[draw,-&gt;] (l2) -- (2);\n        \\path[draw,-&gt;] (2) -- (left);\n    \\node[below of=2] (dots) {$\\vdots$} -- (dots) node[left of=dots] (ldots) {$\\vdots$};\n    \\node[weights,below of=dots] (n) {$w_n$} -- (n) node[input,left of=n] (ln) {$x_n$};\n        \\path[draw,-&gt;] (ln) -- (n);\n        \\path[draw,-&gt;] (n) -- (left);\n    \\node[weights,above of=2] (1) {$w_1$} -- (1) node[input,left of=1] (l1) {$x_1$};\n        \\path[draw,-&gt;] (l1) -- (1);\n        \\path[draw,-&gt;] (1) -- (left);\n    \\node[weights,above of=1] (0) {$w_0$} -- (0) node[input,left of=0] (l0) {$1$};\n        \\path[draw,-&gt;] (l0) -- (0);\n        \\path[draw,-&gt;] (0) -- (left);\n    \\node[below of=ln,font=\\scriptsize] {inputs};\n    \\node[below of=n,font=\\scriptsize] {weights};\n\\end{tikzpicture}\n\n```\n\n\n\n\n\n\n\n\nCode```{r, engine = 'tikz'}\n#| eval: true\n#| cache: true\n\n\\usetikzlibrary{%\n  calc,\n  fit,\n  shapes,\n  backgrounds\n}\n% the next macro is useful to create a table\n\\newcommand\\tabins[3]{%\n \\tikz[baseline=(Tab.base)] \n           \\node  [rectangle split, \n                   rectangle split parts=3, \n                   draw, \n                   align=right,\n                   inner sep=.5em,\n                   rectangle split horizontal] (Tab)\n                           {\\hbox to 4ex{#1}\n           \\nodepart{two}  {\\hbox to 8ex{\\hfill #2\\$}}  \n           \\nodepart{three}{\\hbox to 3ex{#3}}}; \n}\n\n\n\\parindent=0pt\n\n\\begin{tikzpicture}[%\n    %every node/.style={transform shape},% now is not necessary but good for a poster\n    x=1.25cm,y=2cm,  \n    font=\\footnotesize,\n    % every group of nodes have a style except for main, the style is named by a letter\n    main/.style={draw,fill=yellow,inner sep=.5em},\n    R/.style={draw,fill=purple!40!blue!30,inner sep=.5em},\n    M/.style={draw,fill=green!80!yellow,inner sep=.5em},\n    S/.style={anchor=east},\n    V/.style={anchor=west},\n    P/.style={anchor=center},\n    F/.style={anchor=west}\n    ]\n\n  % main node the reference Shuffle \n  \\node[main] (shuffle) {Group};\n  %group R reducer\n  \\node[R] at ($(shuffle)+(8,1)$)    (R1+) {Reduce};\n  \\node[R] at ($(shuffle)+(8, 0)$)   (R0)  {Reduce};\n  \\node[R] at ($(shuffle)+(8,-1)$)   (R1-) {Reduce};\n  % group M Mapper\n  \\node[M] at ($(shuffle)+(-6,+2.5)$)   (M3+)  {Map};\n  \\node[M] at ($(shuffle)+(-6,+ 1.5)$)  (M2+)  {Map};\n  \\node[M] at ($(shuffle)+(-6,+ .5)$)   (M1+)  {Map};\n  \\node[M] at ($(shuffle)+(-6,- .5)$)   (M1-)  {Map};\n  \\node[M] at ($(shuffle)+(-6,- 1.5)$)  (M2-)  {Map};\n  \\node[M] at ($(shuffle)+(-6,-2.5)$)   (M3-)  {Map};\n  % group S Start the first nodes\n  \\node[S] at ($(M3+)+(-1.5,0)$)  (S3+) {\\Big($k_1$,\\tabins{4711}{59.90}{NY}\\Big)};\n  \\node[S] at ($(M2+)+(-1.5,0)$)  (S2+) {\\Big($k_2$,\\tabins{4713}{142.99}{CA}\\Big)};\n  \\node[S] at ($(M1+)+(-1.5,0)$)  (S1+) {\\Big($k_3$,\\tabins{4714}{72.00}{NY}\\Big)}; \n  \\node[S] at ($(M1-)+(-1.5,0)$)  (S1-) {\\Big($k_4$,\\tabins{4715}{108.75}{NY}\\Big)}; \n  \\node[S] at ($(M2-)+(-1.5,0)$)  (S2-) {\\Big($k_5$,\\tabins{4718}{19.89}{WA}\\Big)};  \n  \\node[S] at ($(M3-)+(-1.5,0)$)  (S3-) {\\Big($k_6$,\\tabins{4719}{36.60}{CA}\\Big)};  \n  % group V  why not\n  \\node[V] at ($(M3+)+(1.5,0)$)  (V3+) {\\Big(NY,59.90\\$\\Big)};\n  \\node[V] at ($(M2+)+(1.5,0)$)  (V2+) {\\Big(CA,142.99\\$\\Big)};\n  \\node[V] at ($(M1+)+(1.5,0)$)  (V1+) {\\Big(NY,72.00\\$\\Big)}; \n  \\node[V] at ($(M1-)+(1.5,0)$)  (V1-) {\\Big(NY,108.75\\$\\Big)}; \n  \\node[V] at ($(M2-)+(1.5,0)$)  (V2-) {\\Big(WA,19.89\\$\\Big)};  \n  \\node[V] at ($(M3-)+(1.5,0)$)  (V3-) {\\Big(CA,36.60\\$\\Big)};   \n\n  \\node[P] at ($(R1+)+(-4,0)$) (P1+) {\\Big(CA,\\big[142.99\\$,36.60\\$\\big]\\Big)};\n  \\node[P] at ($(R0) +(-4,0)$) (P0)  {\\Big(NY,\\big[59.90\\$,72.00\\$,108.75\\big]\\Big)};\n  \\node[P] at ($(R1-)+(-4,0)$) (P1-) {\\Big(WA,\\big[19.89\\$\\big]\\Big)}; \n\n  \\node[F] (F1+) at ($(R1+)+(1.5,0)$) {(CA,89.80\\$)};\n  \\node[F] (F0)  at ($(R0) +(1.5,0)$) {(NY,80.22\\$)}; \n  \\node[F] (F1-) at ($(R1-)+(1.5,0)$) {(WA,72.00\\$)}; \n\n  % wrappers\n  \\begin{scope}[on background layer]\n      \\node[fill=lightgray!50,inner sep = 4mm,fit=(shuffle),label=above:Shuffle] {}; \n  \\end{scope} \n  \\begin{scope}[on background layer]\n      \\node[fill=lightgray!50,inner sep = 4mm,fit=(R1+)(R1-),label=above:Reducer] {}; \n  \\end{scope}  \n  \\begin{scope}[on background layer]\n      \\node[fill=lightgray!50,inner sep = 4mm,fit=(M3+)(M3-),label=above:Mapper] {}; \n  \\end{scope}\n\n  %edges\n\n  \\foreach \\indice in {3+,2+,1+,1-,2-,3-} \\draw[-&gt;] (S\\indice.east) -- (M\\indice.west); \n  \\foreach \\indice in {3+,2+,1+,1-,2-,3-} \\draw[-&gt;] (M\\indice.east) -- (V\\indice.west);\n  \\foreach \\indice in {3+,2+,1+,1-,2-,3-} \\draw[-&gt;] (V\\indice.east) to [out=0,in=180] (shuffle.west); \n  \\foreach \\indice in {1+,0,1-} \\draw[-&gt;] (shuffle.east) to [out=0,in=180] (P\\indice.west);  \n  \\foreach \\indice in {1+,0,1-} \\draw[-&gt;] (P\\indice.east) -- (R\\indice.west);\n  \\foreach \\indice in {1+,0,1-} \\draw[-&gt;] (R\\indice.east) -- (F\\indice.west);   \n\\end{tikzpicture} \n\n```\n\n\n\n\n\n\n\n\nCode```{r, engine = 'tikz'}\n#| eval: true\n#| cache: true\n#|\n\\def\\layersep{3cm}\n\\def\\nodeinlayersep{1.5cm}\n\n\\begin{tikzpicture}\n  [\n    shorten &gt;=1pt,-&gt;,\n    draw=black!50,\n    node distance=\\layersep,\n    every pin edge/.style={&lt;-,shorten &lt;=1pt},\n    neuron/.style={circle,fill=black!25,minimum size=17pt,inner sep=0pt},\n    input neuron/.style={neuron, fill=green!50,},\n    output neuron/.style={neuron, fill=red!50},\n    hidden neuron/.style={neuron, fill=blue!50},\n    annot/.style={text width=4em, text centered},\n    bias/.style={neuron, fill=yellow!50,minimum size=4em},%&lt;-- added %%%\n  ]\n\n  % Draw the input layer nodes\n  \\foreach \\name / \\y in {1,...,3}\n    \\node[input neuron, pin=left:Input \\#\\y] (I-\\name) at (0,-\\y-2.5) {};  \n\n  % set number of hidden layers\n  \\newcommand\\Nhidden{2}\n\n  % Draw the hidden layer nodes\n  \\foreach \\N in {0,...,\\Nhidden} {\n      \\foreach \\y in {0,...,5} { % &lt;-- added 0 instead of 1 %%%%%\n      \\ifnum \\y=4\n      \\ifnum \\N&gt;0 %&lt;-- added %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n        \\node at (\\N*\\layersep,-\\y*\\nodeinlayersep) {$\\vdots$};  % add dots\n        \\else\\fi %&lt;-- added %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n      \\else\n          \\ifnum \\y=0 %&lt;-- added %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n          \\ifnum \\N&lt;3 %&lt;-- added %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n            \\node[bias] (H\\N-\\y) at (\\N*\\layersep,-\\y*\\nodeinlayersep ) {Bias}; %&lt;-- added\n            \\else\\fi %&lt;-- added %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n          \\else %&lt;-- added %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n            \\ifnum \\N&gt;0 %&lt;-- added %%%%%%%%%%%%%%%%%%%%%%%%%\n            % print function\n            \\node[hidden neuron] (H\\N-\\y) at (\\N*\\layersep,-\\y*\\nodeinlayersep ) {$\\frac{1}{1+e^{-x}}$}; %&lt;-- added %%%%%%%%%%%\n                \\else\\fi %&lt;-- added %%%%%%%%%%%%\n          \\fi %&lt;-- added %%%%%%%\n      \\fi\n    }\n      \\ifnum \\N&gt;0 %&lt;-- added %%%%%%\n      % print hidden layer labels at the top\n    \\node[annot,above of=H\\N-1, node distance=1cm,yshift=2cm] (hl\\N) {Hidden layer \\N}; % &lt;- added yshift=2cm %%%%%%%%%%%%\n    \\else\\fi %&lt;-- added %%%%%\n  }\n\n  % Draw the output layer node and label\n  \\node[output neuron,pin={[pin edge={-&gt;}]right:Output}, right of=H\\Nhidden-3] (O) {}; \n  \n  % Connect bias every node in the input layer with every node in the\n  % hidden layer.\n  \\foreach \\source in {1,...,3}\n      \\foreach \\dest in {1,...,3,5} {\n        % \\path[yellow] (H-0) edge (H1-\\dest);\n        \\path[dashed,orange] (H0-0) edge (H1-\\dest); %&lt;-- added %%%%%\n          \\path[green!50] (I-\\source) edge (H1-\\dest);  % change to green, yellow gets blended\n    };\n\n  % connect all hidden stuff\n  \\foreach [remember=\\N as \\lastN (initially 1)] \\N in {2,...,\\Nhidden}\n      \\foreach \\source in {0,...,3,5} \n          \\foreach \\dest in {1,...,3,5}{\n              \\ifnum \\source=0 %&lt;-- added %%%%%%%%%%%%%%%%%%%%%%%\n          \\path[dashed,red](H\\lastN-\\source) edge (H\\N-\\dest);%&lt;-- added \n            \\else %&lt;-- added %%%\n            \\path[blue!50] (H\\lastN-\\source) edge (H\\N-\\dest);%&lt;-- added \n            \\fi %&lt;-- added %%%\n            }; %&lt;-- added %%%%\n\n\n  % Connect every node in the hidden layer with the output layer\n  \\foreach \\source in {1,...,3,5}\n    \\path[green!50] (H\\Nhidden-\\source) edge (O);\n    \\path[dashed,red] (H2-0) edge (O); %&lt;-- added %%%%\n\n% Annotate the input and output layers\n  \\node[annot,left of=hl1] {Input layer};\n  \\node[annot,right of=hl\\Nhidden] {Output layer};  \n\\end{tikzpicture}\n\n```\n\n\n\n\n\n\n\n\nCode```{r, engine = 'tikz'}\n#| eval: true\n#| cache: true\n\n\\usetikzlibrary{positioning}\n\n\\tikzstyle{inputNode}=[draw,circle,minimum size=10pt,inner sep=0pt]\n\\tikzstyle{stateTransition}=[-stealth, thick]\n\n\\begin{tikzpicture}\n    \\node[draw,circle,minimum size=25pt,inner sep=0pt] (x) at (0,0) {$\\Sigma$ $\\sigma$};\n\n    \\node[inputNode] (x0) at (-2, 1.5) {$\\tiny +1$};\n    \\node[inputNode] (x1) at (-2, 0.75) {$\\tiny x_1$};\n    \\node[inputNode] (x2) at (-2, 0) {$\\tiny x_2$};\n    \\node[inputNode] (x3) at (-2, -0.75) {$\\tiny x_3$};\n    \\node[inputNode] (xn) at (-2, -1.75) {$\\tiny x_n$};\n\n    \\draw[stateTransition] (x0) to[out=0,in=120] node [midway, sloped, above] {$w_0$} (x);\n    \\draw[stateTransition] (x1) to[out=0,in=150] node [midway, sloped, above] {$w_1$} (x);\n    \\draw[stateTransition] (x2) to[out=0,in=180] node [midway, sloped, above] {$w_2$} (x);\n    \\draw[stateTransition] (x3) to[out=0,in=210] node [midway, sloped, above] {$w_3$} (x);\n    \\draw[stateTransition] (xn) to[out=0,in=240] node [midway, sloped, above] {$w_n$} (x);\n    \\draw[stateTransition] (x) -- (4,0) node [midway,above] {$\\sigma\\left(w_0 + \\sum\\limits_{i=1}^{n}{w_ix_i}\\right)$};\n    \\draw[dashed] (0,-0.43) -- (0,0.43);\n    \\node (dots) at (-2, -1.15) {$\\vdots$};\n    \\node[inputNode, thick] (i1) at (6, 0.75) {};\n    \\node[inputNode, thick] (i2) at (6, 0) {};\n    \\node[inputNode, thick] (i3) at (6, -0.75) {};\n    \n    \\node[inputNode, thick] (h1) at (8, 1.5) {};\n    \\node[inputNode, thick] (h2) at (8, 0.75) {};\n    \\node[inputNode, thick] (h3) at (8, 0) {};\n    \\node[inputNode, thick] (h4) at (8, -0.75) {};\n    \\node[inputNode, thick] (h5) at (8, -1.5) {};\n    \n    \\node[inputNode, thick] (o1) at (10, 0.75) {};\n    \\node[inputNode, thick] (o2) at (10, -0.75) {};\n    \n    \\draw[stateTransition] (5, 0.75) -- node[above] {$I_1$} (i1);\n    \\draw[stateTransition] (5, 0) -- node[above] {$I_2$} (i2);\n    \\draw[stateTransition] (5, -0.75) -- node[above] {$I_3$} (i3);\n    \n    \\draw[stateTransition] (i1) -- (h1);\n    \\draw[stateTransition] (i1) -- (h2);\n    \\draw[stateTransition] (i1) -- (h3);\n    \\draw[stateTransition] (i1) -- (h4);\n    \\draw[stateTransition] (i1) -- (h5);\n    \\draw[stateTransition] (i2) -- (h1);\n    \\draw[stateTransition] (i2) -- (h2);\n    \\draw[stateTransition] (i2) -- (h3);\n    \\draw[stateTransition] (i2) -- (h4);\n    \\draw[stateTransition] (i2) -- (h5);\n    \\draw[stateTransition] (i3) -- (h1);\n    \\draw[stateTransition] (i3) -- (h2);\n    \\draw[stateTransition] (i3) -- (h3);\n    \\draw[stateTransition] (i3) -- (h4);\n    \\draw[stateTransition] (i3) -- (h5);\n    \n    \\draw[stateTransition] (h1) -- (o1);\n    \\draw[stateTransition] (h1) -- (o2);\n    \\draw[stateTransition] (h2) -- (o1);\n    \\draw[stateTransition] (h2) -- (o2);\n    \\draw[stateTransition] (h3) -- (o1);\n    \\draw[stateTransition] (h3) -- (o2);\n    \\draw[stateTransition] (h4) -- (o1);\n    \\draw[stateTransition] (h4) -- (o2);\n    \\draw[stateTransition] (h5) -- (o1);\n    \\draw[stateTransition] (h5) -- (o2);\n    \n    \\node[above=of i1, align=center] (l1) {Input \\\\ layer};\n    \\node[right=2.3em of l1, align=center] (l2) {Hidden \\\\ layer};\n    \\node[right=2.3em of l2, align=center] (l3) {Output \\\\ layer};\n    \n    \\draw[stateTransition] (o1) -- node[above] {$O_1$} (11, 0.75);\n    \\draw[stateTransition] (o2) -- node[above] {$O_2$} (11, -0.75);\n    \n    \\path[dashed, double, ultra thick, gray] (x.north) edge[bend left=0] (h5.north);\n    \\path[dashed, double, ultra thick, gray] (x.south) edge[bend right=0] (h5.south);\n\\end{tikzpicture}\n\n```\n\n\n\n\n\n\n\n\nCode```{r, engine = 'tikz'}\n#| eval: false\n\n\\usetikzlibrary{positioning,decorations.pathreplacing,shapes}\n\n\n\\newcommand*{\\cancer}{\\text{cancer}}\n\\newcommand*{\\testp}{\\text{test}+}\n\n\n\\begin{tikzpicture}[%\n   % common options for blocks:\n   block/.style = {draw, fill=blue!30, align=center, anchor=west,\n               minimum height=0.65cm, inner sep=0},\n   % common options for the circles:\n   ball/.style = {circle, draw, align=center, anchor=north, inner sep=0}]\n\n   % circle illustrating all women\n   \\node[ball,text width=3cm,fill=purple!20] (all) at (6,0) {All women};\n\n   % two circles showing split of p{cancer} and p{~cancer}\n   \\node[ball,fill=red!70,text width=0.1cm,anchor=base] (pcan) at (3.5,-5.5) {};\n   \\node[ball,fill=blue!40,text width=2.9cm,anchor=base] (pncan) at (8.5,-6)\n      {Women without cancer\\\\\n      $\\p({\\sim}\\cancer) = 99\\%$};\n\n   % arrows showing split from all women to cancer and ~cancer\n   \\draw[-&gt;,thick,draw=red!50] (all.south) to [out=270,in=90] (pcan.north);\n   \\draw[-&gt;,thick,draw=blue!80] (all.south) to [out=270,in=110] (pncan.100);\n\n   % transition from all women to actual cancer rates\n   \\node[anchor=north,text width=10cm,inner sep=.05cm,align=center,fill=white]\n   (why1) at (6,-3.7) {In measuring, we find:};\n\n   % note illustration the p{cancer} circle (text wont fit inside)\n   \\node[inner sep=0,anchor=east,text width=3.3cm] (note1) at (3.2,-5.5) {\n      Women with cancer $\\p(\\cancer) = 1\\%$};\n\n   % draw the sieves\n   \\node[block,anchor=north,text width=4.4cm,fill=green!50] (tray1) at\n      (3.5,-8.8) {\\small{$\\p(\\testp\\mid\\cancer)=0.8$}};\n\n   \\node[block,anchor=north,text width=4.4cm,fill=green!50] (tray2) at\n      (8.5,-8.8) {$\\p(\\testp\\mid{\\sim}\\cancer)=0.096$};\n\n   % text explaining how p{cancer} and p{~cancer} behave as they\n   % pass through the sieves\n   \\node[anchor=west,text width=6cm] (note1) at (-6,-9.1) {\n      Now we pass both groups through the sieve; note that both\n      sieves are \\emph{the same}; they just behave differently\n      depending on which group is passing through. \\\\ \n      Let $\\testp=$ a positve mammography.};\n\n   % arrows showing the circles passing through the seives\n   \\draw[-&gt;,thick,draw=red!80] (3.5,-5.9) -- (3.5,-8.6);\n   \\draw[-&gt;,thick,draw=blue!50] (8.5,-8.1) -- (8.5,-8.6);\n\n   % numerator\n   \\node[ball,text width=0.05cm,fill=red!70] (can) at (6,-10.5) {};\n\n   % dividing line\n   \\draw[thick] (5,-11) -- (7,-11);\n\n   % demoniator\n   \\node[ball,text width=0.39cm,fill=blue!40,anchor=base] (ncan) at (6.5,-11.5) {};\n   \\node[ball,text width=0.05cm,fill=red!70,anchor=base] (can2) at (5.5,-11.5) {};\n\n   % plus sign in denominator\n   \\draw[thick] (5.9,-11.4) -- (5.9,-11.6);\n   \\draw[thick] (5.8,-11.5) -- (6,-11.5);\n\n   % arrows showing the output of the sieves formed the fraction\n   \\draw[-&gt;,thick,draw=red!80] (tray1.south) to [out=280,in=180] (can);\n   \\draw[-&gt;,thick,draw=red!80] (tray1.south) to [out=280,in=180] (can2);\n   \\node[anchor=north,inner sep=.1cm,align=center,fill=white] (why2) at\n      (3.8,-9.8) {$1\\% * 80\\%$};\n\n   \\draw[-&gt;,thick,draw=blue!50] (tray2.south) to [out=265,in=0] (ncan);\n   \\node[anchor=north,inner sep=.1cm,align=center,fill=white] (why2) at\n      (8.4,-9.8) {$99\\% * 9.6\\%$};\n\n   % explanation of final formula\n   \\node[anchor=north west,text width=6.5cm] (note2) at (-6,-12.5)\n      {Finally, to find the probability that a positive test\n         \\emph{actually means cancer}, we look at those who passed\n         through the sieve \\emph{with cancer}, and divide by all who\n         received a positive test, cancer or not.}; \n\n   % illustrated fraction turned into math\n   \\node[anchor=north,text width=10cm] (solution) at (6,-12.5) {\n   \\begin{align*}\n         \\frac{\\p(\\testp\\mid\\cancer)}{\\p(\\testp\\mid\\cancer)\n         + \\p(\\testp\\mid{\\sim}\\cancer)} &= \\\\\n         \\frac{1\\% * 80\\%}{(1\\% * 80\\%) + (99\\% * 9.6\\%)} &= 7.8\\%\n         = \\p(\\cancer\\mid\\testp)\n      \\end{align*}};\n\\end{tikzpicture}\n\n```\n\n\n\nCode```{r, engine = 'tikz'}\n#| eval: false\n\n\n# \\usetikzlibrary{arrows}\n# \\usetikzlibrary{positioning}\n# \\usetikzlibrary{calc}\n# \\usetikzlibrary{arrows.meta}\n# \\usetikzlibrary{decorations.pathreplacing}\n\n# \\begin{tikzpicture}\n# \\draw (0,0)node(a){} -- (10,0) node (b) {} ;\n# \\foreach \\x in  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10} % edit here for the vertical lines\n# \\draw[shift={(\\x,0)},color=black] (0pt,3pt) -- (0pt,-3pt);\n# \\foreach \\x in {0, 0.2, 0.4, 0.6, 0.8, 1} % edit here for the numbers\n# \\draw[shift={(\\x*10,0)},color=black] (0pt,0pt) -- (0pt,-3pt) node[below]\n# {$\\x$};\n# \\node at (8, 0.5) (eq1) {$\\textcolor{red}{\\boldsymbol{SQ}}$};\n# \\node at (4, 0.5) (eq2) {$\\textcolor{purple}{\\boldsymbol{G_i(0)}}$}; \n# \\node at (7, 0.5) (eq2) {$\\textcolor{purple}{\\boldsymbol{G_i(1)}}$}; \n# \\node at (3, 0.5) (eq3) {$\\textcolor{blue}{\\boldsymbol{P}}$};\n# \\node at (0, 0.5) (eq4) {$\\textcolor{black}{\\boldsymbol{x_i}}$};\n# \\draw[decorate, decoration={brace, amplitude=6pt, mirror},] ([yshift=0.5cm]4,0.5)-- node[above=0.25cm]\n# {\\shortstack{Text}}([yshift=0.5cm]3,0.5);\n# \\draw[decorate, decoration={brace, amplitude=6pt},] ([yshift=-1cm]7,0)-- node[below=0.25cm]\n# {\\shortstack{Text}}([yshift=-1cm]3,0);\n# \\end{tikzpicture}\n```\n\n\nTikz Neural Networks\nhttps://tikz.net/neural_networks/\n\nCode```{r, engine = 'tikz', engine.opts=font_opts2, cache=TRUE}\n#| cache: true\n\n\\usetikzlibrary{arrows.meta} % for arrow size\n\n\\tikzset{&gt;=latex} % for LaTeX arrow head\n\\colorlet{myred}{red!80!black}\n\\colorlet{myblue}{blue!80!black}\n\\colorlet{mygreen}{green!60!black}\n\\colorlet{myorange}{orange!70!red!60!black}\n\\colorlet{mydarkred}{red!30!black}\n\\colorlet{mydarkblue}{blue!40!black}\n\\colorlet{mydarkgreen}{green!30!black}\n\\tikzstyle{node}=[thick,circle,draw=myblue,minimum size=22,inner sep=0.5,outer sep=0.6]\n\\tikzstyle{node in}=[node,green!20!black,draw=mygreen!30!black,fill=mygreen!25]\n\\tikzstyle{node hidden}=[node,blue!20!black,draw=myblue!30!black,fill=myblue!20]\n\\tikzstyle{node convol}=[node,orange!20!black,draw=myorange!30!black,fill=myorange!20]\n\\tikzstyle{node out}=[node,red!20!black,draw=myred!30!black,fill=myred!20]\n\\tikzstyle{connect}=[thick,mydarkblue] %,line cap=round\n\\tikzstyle{connect arrow}=[-{Latex[length=4,width=3.5]},thick,mydarkblue,shorten &lt;=0.5,shorten &gt;=1]\n\\tikzset{ % node styles, numbered for easy mapping with \\nstyle\n  node 1/.style={node in},\n  node 2/.style={node hidden},\n  node 3/.style={node out},\n}\n\\def\\nstyle{int(\\lay&lt;\\Nnodlen?min(2,\\lay):3)} % map layer number onto 1, 2, or 3\n\n\n\\begin{tikzpicture}[x=2.7cm,y=1.6cm]\n  \\message{^^JNeural network activation}\n  \\def\\NI{5} % number of nodes in input layers\n  \\def\\NO{4} % number of nodes in output layers\n  \\def\\yshift{0.4} % shift last node for dots\n  \n  % INPUT LAYER\n  \\foreach \\i [evaluate={\\c=int(\\i==\\NI); \\y=\\NI/2-\\i-\\c*\\yshift; \\index=(\\i&lt;\\NI?int(\\i):\"n\");}]\n              in {1,...,\\NI}{ % loop over nodes\n    \\node[node in,outer sep=0.6] (NI-\\i) at (0,\\y) {$a_{\\index}^{(0)}$};\n  }\n  \n  % OUTPUT LAYER\n  \\foreach \\i [evaluate={\\c=int(\\i==\\NO); \\y=\\NO/2-\\i-\\c*\\yshift; \\index=(\\i&lt;\\NO?int(\\i):\"m\");}]\n    in {\\NO,...,1}{ % loop over nodes\n    \\ifnum\\i=1 % high-lighted node\n      \\node[node hidden]\n        (NO-\\i) at (1,\\y) {$a_{\\index}^{(1)}$};\n      \\foreach \\j [evaluate={\\index=(\\j&lt;\\NI?int(\\j):\"n\");}] in {1,...,\\NI}{ % loop over nodes in previous layer\n        \\draw[connect,white,line width=1.2] (NI-\\j) -- (NO-\\i);\n        \\draw[connect] (NI-\\j) -- (NO-\\i)\n          node[pos=0.50] {\\contour{white}{$w_{1,\\index}$}};\n      }\n    \\else % other light-colored nodes\n      \\node[node,blue!20!black!80,draw=myblue!20,fill=myblue!5]\n        (NO-\\i) at (1,\\y) {$a_{\\index}^{(1)}$};\n      \\foreach \\j in {1,...,\\NI}{ % loop over nodes in previous layer\n        %\\draw[connect,white,line width=1.2] (NI-\\j) -- (NO-\\i);\n        \\draw[connect,myblue!20] (NI-\\j) -- (NO-\\i);\n      }\n    \\fi\n  }\n  \n  % DOTS\n  \\path (NI-\\NI) --++ (0,1+\\yshift) node[midway,scale=1.2] {$\\vdots$};\n  \\path (NO-\\NO) --++ (0,1+\\yshift) node[midway,scale=1.2] {$\\vdots$};\n  \n  % EQUATIONS\n  \\def\\agr#1{{\\color{mydarkgreen}a_{#1}^{(0)}}}\n  \\node[below=17,right=11,mydarkblue,scale=0.95] at (NO-1)\n    {$\\begin{aligned} %\\underset{\\text{bias}}{b_1}\n       &= \\color{mydarkred}\\sigma\\left( \\color{black}\n            w_{1,0}\\agr{0} + w_{1,1}\\agr{1} + \\ldots + w_{1,n}\\agr{n} + b_1^{(0)}\n          \\color{mydarkred}\\right)\\\\\n       &= \\color{mydarkred}\\sigma\\left( \\color{black}\n            \\sum_{i=1}^{n} w_{1,i}\\agr{i} + b_1^{(0)}\n           \\color{mydarkred}\\right)\n     \\end{aligned}$};\n  \\node[right,scale=0.9] at (1.3,-1.3)\n    {$\\begin{aligned}\n      {\\color{mydarkblue}\n      \\begin{pmatrix}\n        a_{1}^{(1)} \\\\[0.3em]\n        a_{2}^{(1)} \\\\\n        \\vdots \\\\\n        a_{m}^{(1)}\n      \\end{pmatrix}}\n      &=\n      \\color{mydarkred}\\sigma\\left[ \\color{black}\n      \\begin{pmatrix}\n        w_{1,0} & w_{1,1} & \\ldots & w_{1,n} \\\\\n        w_{2,0} & w_{2,1} & \\ldots & w_{2,n} \\\\\n        \\vdots  & \\vdots  & \\ddots & \\vdots  \\\\\n        w_{m,0} & w_{m,1} & \\ldots & w_{m,n}\n      \\end{pmatrix}\n      {\\color{mydarkgreen}\n      \\begin{pmatrix}\n        a_{1}^{(0)} \\\\[0.3em]\n        a_{2}^{(0)} \\\\\n        \\vdots \\\\\n        a_{n}^{(0)}\n      \\end{pmatrix}}\n      +\n      \\begin{pmatrix}\n        b_{1}^{(0)} \\\\[0.3em]\n        b_{2}^{(0)} \\\\\n        \\vdots \\\\\n        b_{m}^{(0)}\n      \\end{pmatrix}\n      \\color{mydarkred}\\right]\\\\[0.5em]\n      {\\color{mydarkblue}a^{(1)}}\n      &= \\color{mydarkred}\\sigma\\left( \\color{black}\n           \\mathbf{W}^{(0)} {\\color{mydarkgreen}a^{(0)}}+\\mathbf{b}^{(0)}\n         \\color{mydarkred}\\right)\n         %\\color{black},\\quad \\mathbf{W}^{(0)} \\in \\mathbb{R}^{m\\times n}\n    \\end{aligned}$};\n  \n\\end{tikzpicture}\n\n```\n\n\n\n\n\n\n\nAutoencoder\nhttps://tikz.net/autoencoder/\n\nCode```{r, engine = 'tikz', engine.opts=font_opts}\n#| eval: true\n#| cache: true\n\n\\newcommand{\\xin}[2]{$x_#2$}\n\\newcommand{\\xout}[2]{$\\hat x_#2$}\n\n\\begin{neuralnetwork}[height=8]\n  \\tikzstyle{input neuron}=[neuron, fill=orange!70];\n  \\tikzstyle{output neuron}=[neuron, fill=blue!60!black, text=white];\n\n  \\inputlayer[count=8, bias=false, title=Input Layer, text=\\xin]\n\n  \\hiddenlayer[count=5, bias=false]\n  \\linklayers\n\n  \\hiddenlayer[count=3, bias=false, title=Latent\\\\Representation]\n  \\linklayers\n\n  \\hiddenlayer[count=5, bias=false]\n  \\linklayers\n\n  \\outputlayer[count=8, title=Output Layer, text=\\xout]\n  \\linklayers\n\n\\end{neuralnetwork}\n\n```\n\n\n\n\n\n\n\nVAE\nhttps://tikz.net/vae/\n\nCode```{r, engine = 'tikz', engine.opts=font_opts, cache=TRUE}\n#| eval: true\n\n\\usetikzlibrary{fit,positioning}\n\n\\newcommand\\drawNodes[2]{\n  % #1 (str): namespace\n  % #2 (list[list[str]]): list of labels to print in the node of each neuron\n  \\foreach \\neurons [count=\\lyrIdx] in #2 {\n    \\StrCount{\\neurons}{,}[\\lyrLength] % use xstring package to save each layer size into \\lyrLength macro\n    \\foreach \\n [count=\\nIdx] in \\neurons\n      \\node[neuron] (#1-\\lyrIdx-\\nIdx) at (2*\\lyrIdx, \\lyrLength/2-1.4*\\nIdx) {\\n};\n  }\n}\n\n\\newcommand\\denselyConnectNodes[2]{\n  % #1 (str): namespace\n  % #2 (list[int]): number of nodes in each layer\n  \\foreach \\n [count=\\lyrIdx, remember=\\lyrIdx as \\previdx, remember=\\n as \\prevn] in #2 {\n    \\foreach \\y in {1,...,\\n} {\n      \\ifnum \\lyrIdx &gt; 1\n        \\foreach \\x in {1,...,\\prevn}\n          \\draw[-&gt;] (#1-\\previdx-\\x) -- (#1-\\lyrIdx-\\y);\n      \\fi\n    }\n  }\n}\n\n\\begin{tikzpicture}[\n    shorten &gt;=1pt, shorten &lt;=1pt,\n    neuron/.style={circle, draw, minimum size=4ex, thick},\n    legend/.style={font=\\large\\bfseries},\n  ]\n\n  % encoder\n  \\drawNodes{encoder}{{{,,,,}, {,,,}, {,,}}}\n  \\denselyConnectNodes{encoder}{{5, 4, 3}}\n\n  % decoder\n  \\begin{scope}[xshift=11cm]\n    \\drawNodes{decoder}{{{,,}, {,,,}, {,,,,}}}\n    \\denselyConnectNodes{decoder}{{3, 4, 5}}\n  \\end{scope}\n\n  % mu, sigma, sample nodes\n  \\foreach \\idx in {1,...,3} {\n      \\coordinate[neuron, right=2 of encoder-3-2, yshift=\\idx cm,, fill=yellow, fill opacity=0.2] (mu-\\idx);\n      \\coordinate[neuron, right=2 of encoder-3-2, yshift=-\\idx cm, fill=blue, fill opacity=0.1] (sigma-\\idx);\n      \\coordinate[neuron, right=4 of encoder-3-2, yshift=\\idx cm-2cm, fill=green, fill opacity=0.1] (sample-\\idx);\n    }\n\n  % mu, sigma, sample boxes\n  \\node [label=$\\mu$, fit=(mu-1) (mu-3), draw, fill=yellow, opacity=0.45] (mu) {};\n  \\node [label=$\\sigma$, fit=(sigma-1) (sigma-3), draw, fill=blue, opacity=0.3] (sigma) {};\n  \\node [label=sample, fit=(sample-1) (sample-3), draw, fill=green, opacity=0.3] (sample) {};\n\n  % mu, sigma, sample connections\n  \\draw[-&gt;] (mu.east) edge (sample.west) (sigma.east) -- (sample.west);\n  \\foreach \\a in {1,2,3}\n  \\foreach \\b in {1,2,3} {\n      \\draw[-&gt;] (encoder-3-\\a) -- (mu-\\b);\n      \\draw[-&gt;] (encoder-3-\\a) -- (sigma-\\b);\n      \\draw[-&gt;] (sample-\\a) -- (decoder-1-\\b);\n    }\n\n  % input + output labels\n  \\foreach \\idx in {1,...,5} {\n      \\node[left=0 of encoder-1-\\idx] {$x_\\idx$};\n      \\node[right=0 of decoder-3-\\idx] {$\\hat x_\\idx$};\n    }\n  \\node[above=0.1 of encoder-1-1] {input};\n  \\node[above=0.1 of decoder-3-1] {output};\n\n\\end{tikzpicture}\n\n```"
  },
  {
    "objectID": "Misc/Visuals_Interactives/tikz_net.html#bayes-vs-regular-nn",
    "href": "Misc/Visuals_Interactives/tikz_net.html#bayes-vs-regular-nn",
    "title": "tikz",
    "section": "bayes vs regular nn",
    "text": "bayes vs regular nn\nhttps://tikz.net/regular-vs-bayes-nn/\n\nCode```{r, engine = 'tikz', engine.opts=font_opts}\n#| cache: true\n#| fig-align: \"center\"\n\n\n\\usetikzlibrary{calc}\n\\def\\layersep{3cm}\n\n\\newcommand\\nn[1]{\n    % Input layer\n    \\foreach \\y in {1,...,2}\n        \\node[neuron, fill=green!40] (i\\y-#1) at (0,\\y+1) {$i\\y$};\n\n    % Hidden layer\n    \\foreach \\y in {1,...,4}\n        \\path node[neuron, fill=blue!40] (h\\y-#1) at (\\layersep,\\y) {$h\\y$};\n\n    % Output node\n    \\node[neuron, fill=red!40] (o-#1) at (2*\\layersep,2.5) {$o$};\n\n    % Connect every node in the input layer with every node in the hidden layer.\n    \\foreach \\source in {1,...,2}\n        \\foreach \\dest in {1,...,4}\n            \\path (i\\source-#1) edge (h\\dest-#1);\n\n    % Connect every node in the hidden layer with the output layer\n    \\foreach \\source in {1,...,4}\n        \\path (h\\source-#1) edge (o-#1);\n}\n\n\n\\begin{tikzpicture}[\n    scale=1.2,\n    shorten &gt;=1pt,-&gt;,draw=black!70, node distance=\\layersep,\n    neuron/.style={circle,fill=black!25,minimum size=20,inner sep=0},\n    edge/.style 2 args={pos={(mod(#1+#2,2)+1)*0.33}, font=\\tiny},\n    distro/.style 2 args={\n        edge={#1}{#2}, node contents={}, minimum size=0.6cm, path picture={\\draw[double=orange,white,thick,double distance=1pt,shorten &gt;=0pt] plot[variable=\\t,domain=-1:1,samples=51] ({\\t},{0.2*exp(-100*(\\t-0.05*(#1-1))^2 - 3*\\t*#2))});}\n      },\n    weight/.style 2 args={\n        edge={#1}{#2}, node contents={\\pgfmathparse{0.35*#1-#2*0.15}\\pgfmathprintnumber[fixed]{\\pgfmathresult}}, fill=white, inner sep=2pt\n      }\n  ]\n  \\nn{regular}\n\n  \\begin{scope}[xshift=8cm]\n    \\nn{bayes}\n  \\end{scope}\n\n  % Draw weights for all regular edges.\n  \\foreach \\i in {1,...,2}\n  \\foreach \\j in {1,...,4}\n  \\path (i\\i-regular) -- (h\\j-regular) node[weight={\\i}{\\j}];\n  \\foreach \\i in {1,...,4}\n  \\path (h\\i-regular) -- (o-regular) node[weight={\\i}{1}];\n\n  % Draw distros for all Bayesian edges.\n  \\foreach \\i in {1,...,2}\n  \\foreach \\j in {1,...,4}\n  \\path (i\\i-bayes) -- (h\\j-bayes) node[distro={\\i}{\\j}];\n  \\foreach \\i in {1,...,4}\n  \\path (h\\i-bayes) -- (o-bayes) node[distro={\\i}{1}];\n\\end{tikzpicture}\n\n```"
  },
  {
    "objectID": "Misc/Visuals_Interactives/tikz_net.html#nndiagram",
    "href": "Misc/Visuals_Interactives/tikz_net.html#nndiagram",
    "title": "tikz",
    "section": "nndiagram",
    "text": "nndiagram\nhttps://github.com/ccfang2/nndiagram\nCode```{r}\n#| results: 'asis'\n#| eval: false\n\nlibrary(nndiagram)\nnnd &lt;- nndiagram(input=3, hidden=c(4,4,4))\ncat(paste(nnd,\"\\n\"))\n```\n\nCode```{r, engine = 'tikz'}\n#| eval: true\n#| cache: true\n\n\\def\\layersep{2.5cm} \n\\newcommand*\\circled[1]{\\tikz[baseline=(char.base)]{ \n  \\node[shape=rectangle,inner sep=3pt, draw=black!100, fill= black!25] (char) {#1};}} \n \n\n\\centering \n\\begin{tikzpicture}[shorten &gt;=1pt,-&gt;,draw=black!100, node distance=\\layersep, scale=1] \n  \\tikzstyle{every pin edge}=[&lt;-,shorten &lt;=1pt]; \n  \\tikzstyle{neuron}=[circle, draw=black!100, minimum size=17pt,inner sep=0pt]; \n  \\tikzstyle{input neuron}=[neuron]; \n  \\tikzstyle{output neuron}=[neuron]; \n  \\tikzstyle{hidden neuron}=[neuron]; \n  \\tikzstyle{annot} = [text width=4em, text centered, text=black!100] \n \n  % drawing neurons \n  \\foreach \\name / \\y in {1,...,3} \n      \\node [input neuron, pin=left:\\textcolor{black!100}{Input \\y}] (I-\\name) at (0,-0.5-\\y) {};\n  \\foreach \\name / \\y in {1/1,2/2,3/3,4/4} \n      \\path[yshift=0cm] \n          node[hidden neuron] (H-\\name) at (1* \\layersep,-\\y cm) {};\n  \\foreach \\name / \\y in {5/1,6/2,7/3,8/4} \n      \\path[yshift=0cm] \n          node[hidden neuron] (H-\\name) at (2* \\layersep,-\\y cm) {};\n  \\foreach \\name / \\y in {9/1,10/2,11/3,12/4} \n      \\path[yshift=0cm] \n          node[hidden neuron] (H-\\name) at (3* \\layersep,-\\y cm) {};\n  \\node[output neuron,pin={[pin edge={-&gt;}]right:\\textcolor{black!100}{Output}}, right of=H-10, yshift=-0.5cm] (O) {}; \n\n   % drawing arrows \n  \\foreach \\source in {1,...,3} \n      \\foreach \\dest in {1,...,4}\n           \\path (I-\\source) edge (H-\\dest); \n  \\foreach \\source in {1,...,4} \n      \\foreach \\dest in {5,...,8}\n           \\path (H-\\source) edge (H-\\dest); \n  \\foreach \\source in {5,...,8} \n      \\foreach \\dest in {9,...,12}\n           \\path (H-\\source) edge (H-\\dest); \n  \\foreach \\source in {9,...,12}\n           \\path (H-\\source) edge (O);\n \n   % annotations \n  \\node[annot,above of=I-1, node distance=2.5cm] {Input layer}; \n  \\node[annot,above of=I-1, node distance=1.5cm] {$\\circled{3}$}; \n  \\node[annot,above of=H-1, node distance=2cm] (hl1) {Hidden layer 1}; \n  \\node[annot,above of=H-1, node distance=1cm] (hl1) {$\\circled{4}$}; \n  \\node[annot,above of=H-5, node distance=2cm] (hl2) {Hidden layer 2}; \n  \\node[annot,above of=H-5, node distance=1cm] (hl2) {$\\circled{4}$}; \n  \\node[annot,above of=H-9, node distance=2cm] (hl3) {Hidden layer 3}; \n  \\node[annot,above of=H-9, node distance=1cm] (hl3) {$\\circled{4}$}; \n  \\node[annot,above of =O, node distance=3.5cm] {Output layer}; \n  \\node[annot,above of =O, node distance=2.5cm] {$\\circled{1}$}; \n\n\\end{tikzpicture} \n\n```\n\n\n\n\n\n\n\nLatent Space Projection\nhttps://tikz.net/manifold/\n\nCode```{{r, engine = 'tikz',engine.opts=list(extra.preamble = c(\"\\\\usepackage{cmbright}\"))}}\n#| eval: true\n#| cache: true\n\n\\usetikzlibrary{arrows.meta}\n\\definecolor{green}{rgb}{0.0,0.50,0.0}\n\\tikzset{&gt;={Straight Barb[angle'=80, scale=1.1]}}\n\\begin{tikzpicture}\n\n\\draw[-&gt;] (0, 0) -- ++(0, 2);\n\\draw[-&gt;] (0, 0) -- ++(2.5, 0.6);\n\\draw[-&gt;] (0, 0) -- ++(3, 0) node[midway, below, yshift=-0.5em]\n    {Original space ${\\cal X}$};\n\n\\draw[fill=green!50, draw=none, shift={(0.2, 0.7)},scale=0.5]\n  (0, 0) to[out=20, in=140] (1.5, -0.2) to [out=60, in=160]\n  (5, 0.5) to[out=130, in=60]\n  cycle;\n\n\\shade[thin, left color=green!10, right color=green!50, draw=none,\n  shift={(0.2, 0.7)},scale=0.5]\n  (0, 0) to[out=10, in=140] (3.3, -0.8) to [out=60, in=190] (5, 0.5)\n    to[out=130, in=60] cycle;\n\n  \\draw[-&gt;] (4.8, 0.8) -- ++(0, 2);\n  \\draw[-&gt;] (4.8, 0.8) -- ++(2, 0) node[midway, below, yshift=-0.5em]\n      {Latent space ${\\cal F}$};\n\n  \\draw[thin, fill=green!30, draw=none, shift={(5.4, 1.1)}, rotate=20]\n    (0, 0) -- (1, 0) -- (1, 1) -- (0, 1) -- cycle;\n\n  \\draw[thick,-&gt;,red]\n    (1.5, 1.3) to [out=55, in=150] node[midway, above, xshift=6pt, yshift=2pt]\n    {$f$} (5.7, 2);\n\n  \\draw[thick,-&gt;,blue] (1.5, 1.3) ++(4.03, 0.3) to [out=150, in=55]\n    node[midway, below, xshift=2pt, yshift=-2pt] {$g$} ++(-3.6, -0.5);\n\n\\end{tikzpicture}\n\n```\n\n\n\n\n\n\n\nFlow\nhttps://tikz.net/maf/\n\nCode```{r, engine = 'tikz'}\n#| cache: true\n\n\\usetikzlibrary{calc,positioning}\n\n\n\\begin{tikzpicture}[\n    thick, text centered,\n    box/.style={draw, thin, minimum width=1cm},\n    func/.style={circle, text=white},\n    input/.style={draw=red, very thick},\n  ]\n\n  % x nodes\n  \\node[box, input, fill=blue!20] (x1) {$x_1$};\n  \\node[box, input, fill=blue!20, right of=x1] (x2) {$x_2$};\n  \\node[right of=x2] (xdots1) {\\dots};\n  \\node[box, input, fill=blue!20, right of=xdots1] (xd) {$x_d$};\n  \\node[box, fill=green!60!black, text opacity=1, opacity=0.4, right=2 of xd] (xdp1) {$x_{d+1}$};\n  \\node[right of=xdp1] (xdots2) {\\dots};\n  \\node[box, fill=green!60!black, text opacity=1, opacity=0.4, right of=xdots2] (xD) {$x_D$};\n\n  % z nodes\n  \\node[box, fill=blue!20, below=3 of x1] (z1) {$z_1$};\n  \\node[box, fill=blue!20, right of=z1] (z2) {$z_2$};\n  \\node[right of=z2] (zdots1) {\\dots};\n  \\node[box, fill=blue!20, right of=zdots1] (zd) {$z_d$};\n  \\node[box, input, fill=orange!40, right=2 of zd] (zdp1) {$z_{d+1}$};\n  \\node[right of=zdp1] (zdots2) {\\dots};\n  \\node[box, fill=orange!40, right of=zdots2] (zD) {$z_D$};\n\n  % z to x lines\n  \\draw[-&gt;] (zdp1) -- (xdp1);\n\n  % scale and translate functions\n  \\node[func, font=\\large, fill=teal, above right=0.1] (t) at ($(zd)!0.5!(xdp1)$) {$t$};\n  \\fill[teal, opacity=0.5] (x1.south west) -- (t.center) -- (xd.south east) -- (x1.south west);\n\n  \\node[func, font=\\large, fill=orange, below left=0.1] (s) at ($(zd)!0.5!(xdp1)$) {$s$};\n  \\fill[orange, opacity=0.5] (x1.south west) -- (s.center) -- (xd.south east) -- (x1.south west);\n\n  % feeding in s and t\n  \\node[func, inner sep=0, fill=orange] (odot1) at ($(zdp1)!0.4!(xdp1)$) {$\\odot$};\n  \\node[func, inner sep=0, fill=teal] (oplus1) at ($(zdp1)!0.7!(xdp1)$) {$\\oplus$};\n  \\draw[orange, -&gt;] (s) to[bend right=5] (odot1);\n  \\draw[teal, -&gt;] (t) to[bend right=5] (oplus1);\n\n\\end{tikzpicture}\n\n```"
  },
  {
    "objectID": "Misc/Visuals_Interactives/tikz_net.html#alm",
    "href": "Misc/Visuals_Interactives/tikz_net.html#alm",
    "title": "tikz",
    "section": "ALM",
    "text": "ALM\n\nCode```{r, engine = 'tikz'}\n#| eval: false\n\\usetikzlibrary{positioning}\n\n\\def\\layersep{3.5cm}\n\n\\begin{tikzpicture}[shorten &gt;=1pt,-&gt;,draw=black!50, node distance=\\layersep]\n    \\tikzstyle{every pin edge}=[&lt;-,shorten &lt;=1pt]\n    \\tikzstyle{neuron}=[circle,fill=black!25,minimum size=17pt,inner sep=0pt]\n    \\tikzstyle{input neuron}=[neuron, fill=green!50];\n    \\tikzstyle{output neuron}=[neuron, fill=red!50];\n    \\tikzstyle{annot} = [text width=4em, text centered]\n\n    % Draw the input layer nodes\n    \\foreach \\name / \\y in {1,2}\n        \\node[input neuron, pin=left:Input \\#\\y] (I-\\name) at (0,-\\y) {};\n\n    % Draw the output layer nodes\n    \\foreach \\name / \\y in {1,2,3}\n        \\path[yshift=1.0cm]\n            node[output neuron] (O-\\name) at (\\layersep,-\\y cm) {};\n\n    % Connect every node in the input layer with every node in the\n    % output layer.\n    \\foreach \\source in {1,2}\n        \\foreach \\dest in {1,2,3}\n            \\path (I-\\source) edge (O-\\dest);\n\n    % Annotate the layers with equations\n    \\node[above of=I-1, node distance=1.5cm] (il) {$a_i(X)=e^{-\\gamma \\cdot (X-X_i)^2}$ \\\\ $\\frac{a_i(X)}{\\sum a_i(X)}$};\n    \\node[above of=O-1, node distance=1.5cm] (ol) {$O_j(X)=\\sum_{i=1}^M w_{j i} \\cdot a_i(X)$ \\\\ $P[Y_j|X]=\\frac{O_j(X)}{\\sum_{k=1}^L O_k(X)}$};\n\\end{tikzpicture}\n\n```\n\n\n\nCode```{r, engine = 'tikz'}\n#| eval: false\n#|\n\\usetikzlibrary{positioning}\n\n\\def\\layersep{3.5cm}\n\n\\begin{tikzpicture}[shorten &gt;=1pt,-&gt;,draw=black!50, node distance=\\layersep]\n    \\tikzstyle{every pin edge}=[&lt;-,shorten &lt;=1pt]\n    \\tikzstyle{neuron}=[circle,fill=black!25,minimum size=17pt,inner sep=0pt]\n    \\tikzstyle{input neuron}=[neuron, fill=green!50];\n    \\tikzstyle{output neuron}=[neuron, fill=red!50];\n    \\tikzstyle{annot} = [text width=4em, text centered]\n\n    % Draw the input layer nodes\n    \\foreach \\name / \\y in {1,2}\n        \\node[input neuron, pin=left:Input \\#\\y] (I-\\name) at (0,-\\y) {$X_{\\y}$};\n\n    % Draw the output layer nodes\n    \\foreach \\name / \\y in {1,2,3}\n        \\path[yshift=1.0cm]\n            node[output neuron] (O-\\name) at (\\layersep,-\\y cm) {$Y_{\\y}$};\n\n    % Connect every node in the input layer with every node in the\n    % output layer.\n    \\foreach \\source in {1,2}\n        \\foreach \\dest in {1,2,3}\n            \\path (I-\\source) edge (O-\\dest);\n\n    % Annotate the layers with equations\n    \\node[above of=I-1, node distance=1.5cm] (il) {$a_i(X)=e^{-\\gamma \\cdot (X-X_i)^2}$ \\\\ $\\frac{a_i(X)}{\\sum a_i(X)}$};\n    \\node[above of=O-1, node distance=1.5cm] (ol) {$O_j(X)=\\sum_{i=1}^M w_{j i} \\cdot a_i(X)$ \\\\ $P[Y_j|X]=\\frac{O_j(X)}{\\sum_{k=1}^L O_k(X)}$};\n\\end{tikzpicture}\n\n```\n\n\n\nCode```{r, engine = 'tikz'}\n#| eval: false\n#|\n\\usetikzlibrary{positioning, fit}\n\n\\def\\layersep{3.5cm}\n\n\\begin{tikzpicture}[shorten &gt;=1pt,-&gt;,draw=black!50, node distance=\\layersep]\n    \\tikzstyle{every pin edge}=[&lt;-,shorten &lt;=1pt]\n    \\tikzstyle{neuron}=[circle,fill=black!25,minimum size=17pt,inner sep=0pt]\n    \\tikzstyle{input neuron}=[neuron, fill=green!50];\n    \\tikzstyle{output neuron}=[neuron, fill=red!50];\n    \\tikzstyle{annot} = [text width=4em, text centered]\n\n    % Draw the input layer nodes\n    \\foreach \\name / \\y in {1,2}\n        \\node[input neuron, pin=left:Input \\#\\y] (I-\\name) at (0,-\\y) {$X_{\\y}$};\n\n    % Draw the output layer nodes\n    \\foreach \\name / \\y in {1,2,3}\n        \\path[yshift=1.0cm]\n            node[output neuron] (O-\\name) at (\\layersep,-\\y cm) {$Y_{\\y}$};\n\n    % Connect every node in the input layer with every node in the\n    % output layer.\n    \\foreach \\source in {1,2}\n        \\foreach \\dest in {1,2,3}\n            \\path (I-\\source) edge (O-\\dest);\n\n    % Annotate the layers with equations\n    \\node[above of=I-1, node distance=1.5cm] (il) {$a_i(X)=e^{-\\gamma \\cdot (X-X_i)^2}$ \\\\ $\\frac{a_i(X)}{\\sum a_i(X)}$};\n    \\node[above of=O-1, node distance=1.5cm] (ol) {$O_j(X)=\\sum_{i=1}^M w_{j i} \\cdot a_i(X)$ \\\\ $P[Y_j|X]=\\frac{O_j(X)}{\\sum_{k=1}^L O_k(X)}$};\n\n    % Draw rectangles over the input and output layer nodes\n    \\node[rectangle, draw=black, inner sep=0.5cm, fit=(I-1) (I-2)] (inputbox) {};\n    \\node[rectangle, draw=black, inner sep=0.5cm, fit=(O-1) (O-2) (O-3)] (outputbox) {};\n\n\\end{tikzpicture}\n\n```\n\n\n\nCode```{r, engine = 'tikz'}\n#| eval: false\n\n\\usetikzlibrary{positioning, fit, calc}\n\n\\def\\layersep{5cm}\n\\begin{tikzpicture}[shorten &gt;=1pt,-&gt;,draw=black!50, node distance=\\layersep]\n    \\tikzstyle{every pin edge}=[&lt;-,shorten &lt;=1pt]\n    \\tikzstyle{neuron}=[circle,fill=black!25,minimum size=17pt,inner sep=0pt]\n    \\tikzstyle{input neuron}=[neuron, fill=green!50];\n    \\tikzstyle{output neuron}=[neuron, fill=red!50];\n    \\tikzstyle{annot} = [text centered]\n\n    % Draw the input layer nodes horizontally\n    \\foreach \\name / \\y in {1,2}\n        \\node[input neuron, pin=left:Input \\#\\y] (I-\\name) at ($(1.5*\\y cm,0)$) {$X_{\\y}$};\n\n    % Draw the output layer nodes\n    \\foreach \\name / \\y in {1,2,3}\n        \\node[output neuron] (O-\\name) at ($(1.5*\\name cm, -\\layersep)$) {$Y_{\\y}$};\n\n    % Connect every node in the input layer with every node in the\n    % output layer.\n    \\foreach \\source in {1,2}\n        \\foreach \\dest in {1,2,3}\n            \\path (I-\\source) edge (O-\\dest);\n\n    % Add input stimulus symbol above the input layer\n    \\node[above=2cm of I-1, anchor=south] (input-stimulus) {Stimulus $S$};\n\n    % Add output response symbol below the output layer\n    \\node[below=2cm of O-2, anchor=north] (output-response) {Response $R$};\n\n    % Annotate the layers with equations\n    \\node[left=4cm of I-1, anchor=east, font=\\small, text width=5cm] (ile) {$a_i(X)=e^{-\\gamma \\cdot (X-X_i)^2}$ \\\\ $\\frac{a_i(X)}{\\sum a_i(X)}$};\n    \\node[left=4cm of O-1, anchor=east, font=\\small, text width=5cm] (ole) {$O_j(X)=\\sum_{i=1}^M w_{j i} \\cdot a_i(X)$ \\\\ $P[Y_j|X]=\\frac{O_j(X)}{\\sum_{k=1}^L O_k(X)}$};\n\n    % Add rectangles around input and output layers\n    \\node[draw,rectangle,fit=(I-1) (I-2),minimum width=4cm, label=above:Input Layer] (input-rect) {};\n    \\node[draw,rectangle,fit=(O-1) (O-2) (O-3),minimum width=4cm, label=above:Output Layer] (output-rect) {};\n\n    % Add rectangle for the decoding process\n    \\node[draw,rectangle,fit=(output-response), label=above:Decoding Process, minimum width=3cm] (decoding-rect) {};\n\n    % Add arrow from output layer to decoding process\n    \\draw[-&gt;,thick] (output-rect) -- (decoding-rect);\n\n\\end{tikzpicture}\n\n```"
  },
  {
    "objectID": "Misc/Visuals_Interactives/ojs_alm.html",
    "href": "Misc/Visuals_Interactives/ojs_alm.html",
    "title": "OJS ALM",
    "section": "",
    "text": "Codepacman::p_load(tidyverse)\nd &lt;- tibble(x=1:20,y=x^2)\nojs_define(d = d)\n\ninputNodes = seq(1,7,1)  # \noutputNodes = seq(50,1600,50)\n#wm=matrix(rnorm(length(inputNodes)*length(outputNodes),5,2),nrow=length(outputNodes),ncol=length(inputNodes))\n#ojs_define(iN = inputNodes, outputNodes = outputNodes, wm = wm)\n\n\n\nCoded3 = require(\"d3@7\")\nmath = require('mathjs')\n// let inputNodes = Array.from({ length: 7 }, (_, i) =&gt; i + 1);\n// let outputNodes = Array.from({ length: 32 }, (_, i) =&gt; (i + 1) * 50);\n// let wm = Array.from({ length: outputNodes.length }, () =&gt;\n//   Array.from({ length: inputNodes.length }, () =&gt; 0.0)\n// );\n\nfunction inputActivation(xTarget, c) {\n  console.log(inputNodes)\n  return inputNodes.map((inputNode) =&gt;\n    Math.exp(-1 * c * Math.pow(xTarget - inputNode, 2))\n  );\n}\n\n\nfunction outputActivation(xTarget, weights, c) {\n  const inputAct = inputActivation(xTarget, c);\n  return math.multiply(weights, inputAct);\n}\n\nfunction meanPrediction(xTarget, weights, c) {\n  const outputAct = outputActivation(xTarget, weights, c);\n  const probability = math.divide(outputAct, math.sum(outputAct));\n  return math.multiply(outputNodes, probability);\n}\n\n\nfunction updateWeights(xNew, yNew, weights, c, lr) {\n  const yFeedbackActivation = outputNodes.map(\n    (outputNode) =&gt; Math.exp(-1 * c * Math.pow(yNew - outputNode, 2))\n  );\n //console.log(yFeedbackActivation)\n  const xFeedbackActivation = outputActivation(xNew, weights, c);\n  const inputAct = inputActivation(xNew, c);\n  const inputActReshaped = math.reshape(inputAct, [inputAct.length, 1]);\n  const yFeedbackActivationReshaped = math.reshape(yFeedbackActivation, [yFeedbackActivation.length, 1]);\n  const xFeedbackActivationReshaped = math.reshape(xFeedbackActivation, [xFeedbackActivation.length, 1]);\n  const error = math.reshape(math.subtract(yFeedbackActivationReshaped, xFeedbackActivationReshaped), [yFeedbackActivation.length, 1]);\n  // console.log(math.size(math.transpose(inputActReshaped)))\n  const weightUpdate = math.multiply(error, math.transpose(inputActReshaped));\n  //console.log(weightUpdate)\n  const raw_Weights = math.add(weights, math.multiply(lr, weightUpdate));\n\n  const new_Weights = raw_Weights\n  //return JSON.parse(result);\n  return(new_Weights)\n}\n\nfunction randomNormal(mean, sd) {\n  let u = 0,\n    v = 0;\n  while (u === 0) u = Math.random();\n  while (v === 0) v = Math.random();\n  const z = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n  return mean + z * sd;\n}\n\nfunction examPrediction(xTarget, weights, c, trainVec) {\n  const nearestTrain = trainVec[math.argmin(math.abs(trainVec - xTarget))];\n  const aResp = meanPrediction(nearestTrain, weights, c);\n  const xUnder = math.min(trainVec) === nearestTrain ? nearestTrain : trainVec[math.findIndex(trainVec, (d) =&gt; d === nearestTrain) - 1];\n  const xOver = math.max(trainVec) === nearestTrain ? nearestTrain : trainVec[math.findIndex(trainVec, (d) =&gt; d === nearestTrain) + 1];\n  const mUnder = meanPrediction(xUnder, weights, c);\n  const mOver = meanPrediction(xOver, weights, c);\n  const examOutput = math.round(aResp + ((mOver - mUnder) / (xOver - xUnder)) * (xTarget - nearestTrain), 3);\n  return examOutput;\n}\n\n\nfunction trainALM(dat, c, lr, weights) {\n    console.log('training')\n  const almTrain = new Array(dat.input.length).fill(NaN);\n  for (let i = 0; i &lt; dat.input.length; i++) {\n    console.log('i: ', i, ' dat.input[i]: ', dat.input[i], ' dat.vx[i]: ', dat.vx[i], ' c: ', c, ' lr: ', lr)\n    weights = updateWeights(dat.input[i], dat.vx[i], weights, c, lr);\n    const resp = math.round(meanPrediction(dat.input[i], weights, c),0);\n    // round resp to 1 decimal place\n    almTrain[i] = resp;\n      weights = math.map(weights, (value) =&gt; {\n        return value &lt; 0 ? 0 : value;\n      });\n  }\n  console.log('almTrain: ', almTrain)\n  console.log(weights)\n  return {almTrain, weights};\n}\n\nfunction trainTestALM(dat, c = 0.05, lr = 0.5, weights, testVec) {\n  const almTrain = new Array(dat.length).fill(NaN);\n  \n  for (let i = 0; i &lt; dat.length; i++) {\n    weights = updateWeights(dat[i].input, dat[i].vx, weights, c, lr);\n    const resp = meanPrediction(dat[i].input, weights, c);\n    almTrain[i] = resp;\n    weights = math.map(weights, (value) =&gt; {\n      return value &lt; 0 ? 0 : value;\n    });\n  }\n\n  const almPred = testVec.map((value) =&gt; {\n    return meanPrediction(value, weights, c);\n  });\n\n  const examPred = testVec.map((value) =&gt; {\n    return examPrediction(value, weights, c, [1, ...math.sort(math.unique(dat.map((d) =&gt; d.input)))]);\n  });\n    \n  return { almTrain, almPred, examPred };\n}\n\n// Modify the sim_data function to accept the dataset as an argument\n// function sim_data(dat, c=0.5, lr=0.2, inNodes=7, outNodes=32, trainVec=[5,6,7]) {\n//   inputNodes = math.range(1,7,inNodes).toArray();  \n//   outputNodes = math.range(50,1600,outNodes).toArray(); \n//   wm = math.zeros(outputNodes.length, inputNodes.length)._data;\n//   tt = trainTest_alm(dat, c, lr, wm, trainVec);\n// }\n\nfunction gen_train(trainVec, trainRep, noise) {\n   let bandVec=[0,100,350,600,800,1000,1200];\n   let ts = [];\n   for (let i=0; i&lt;trainRep; i++) {\n       ts.push(...trainVec);\n   }\n    let mean = 0;\n    let stdDev = 1;\n   //let noiseVec = math.random([ts.length])._data;\n   //noiseVec = math.multiply(noiseVec, noise)._data;\n   //if(noise==0) {noiseVec=noiseVec*0}\n   let inputArr = [];\n   let vxArr = [];\n   for (let i=0; i&lt;ts.length; i++) {\n       inputArr.push(ts[i]);\n       vxArr.push(bandVec[ts[i]]);\n       //vxArr.push(bandVec[ts[i]]+noiseVec[i]);\n   }\n   return {input: inputArr, vx: vxArr};\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSimulation\n\n\nCodeviewof c = Inputs.range([.0001, 2], {value: .00005, step: .05, label: \"c value:\"})\nviewof lr = Inputs.range([.001, 2], {value: .05, step: .01, label: \"lr value:\"})\n\nviewof n_inputNodes = Inputs.range([1, 50], {value: 7, step: 1, label: \"N Input Nodes:\"})\nviewof n_outputNodes = Inputs.range([1, 200], {value: 32, step: 1, label: \"N Output Nodes:\"})\n\nviewof weight_mean = Inputs.range([0, 1], {value: 0, step: .0005, label: \"initial weight mean:\"})\nviewof weight_sd = Inputs.range([.00000001, 1], {value: .000001, step: .0001, label: \"initial weight sd:\"})\n\nviewof trainRep = Inputs.range([4, 50], {value: 1, step: 1, label: \"Train Reps:\"})\n\n //inputNodes = Array.from({ length: n_inputNodes }, (_, i) =&gt; i + 1);\n inputNodes = Array.from({ length: n_inputNodes }, (_, i) =&gt; 1 + i * (7 - 1) / (n_inputNodes - 1));\n\n\n\nstart = 0;\nend = 1800;\nN_Steps = n_outputNodes; // replace with desired length\nstepSize = (end - start) / (N_Steps - 1);\noutputNodes = Array.from({ length: N_Steps }, (_, i) =&gt; start + i * stepSize);\n\nconsole.log(inputNodes)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodeconsole.log(outputNodes)\n\n\n\n\n\n\n\nCodewm = outputNodes.map(() =&gt; {\n  return inputNodes.map(() =&gt; randomNormal(weight_mean, weight_sd));\n});\n\nnoise=0\nviewof trainVec = Inputs.checkbox([1, 2, 3, 4, 5, 6], {value: [4,5,6], label: \"Select training examples:\"});\ngd = gen_train(trainVec, trainRep, noise);\n\n//trainVec = [1,2,4,5,6];\n//gd = gen_train(trainVec, trainRep, noise)\n// w2= updateWeights(4, 800, wm,c,lr)\n\ntalm = trainALM(gd, c, lr, wm);\n\n//inputNodes = transpose(iN)\nia = inputActivation(inputX, c, inputNodes)\noa = outputActivation(inputX, wm, c)\nmp = meanPrediction(inputX, wm, c)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodetdat = gd.vx.map((value, index) =&gt; {\n  return { Trial: index, Vx: value, Response: talm.almTrain[index], Error: Math.abs(value -  talm.almTrain[index]) };\n});\n\n\n\n\n\n\nCodePlot.plot({\n  marks: [\n    Plot.line(tdat, {\n      x: \"Trial\",      // feature for the x channel\n      y: \"Response\",     // feature for the y channel\n      stroke: \"Vx\",     \n    }),\n  ],\n  x: {label: \"Trial Number\"},\n  y: {label: \"Vx\", domain: [0, 1800],grid: true},\n  color: {legend: true, scheme: \"Turbo\",type: \"categorical\"},\n  width: 400,\n  height: 400\n});\n  //caption: html`Figure 1. This chart has a &lt;i&gt;fancy&lt;/i&gt; caption.`\nPlot.plot({\n  marks: [\n    Plot.line(tdat, {\n      x: \"Trial\",      // feature for the x channel\n      y: \"Error\",     // feature for the y channel\n      stroke: \"Vx\",     // feature for the fill channel\n    }),\n  ],\n  y: {label: \"Error\",grid: true},\n  color: {legend: true, scheme: \"Turbo\",type: \"categorical\"},\n  width: 400,\n  height: 400\n});\n\n\nVx Across Training\n\n\n\n\n\nTraining Error\n\n\n\n\n\n\n\n\n\n\nWeight Matrices\n\nCodePlotly = require(\"https://cdn.plot.ly/plotly-latest.min.js\")\n//div = DOM.element('div');\nP1=Plotly.newPlot(\"plot-canvas\", [{\n  z: wm,\n  x: outputNodes,\n  y: inputNodes,\n  type: 'heatmap',\n  colorscale: 'Viridis'\n}],{width:500});\n\nconsole.log(inputNodes)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodeconsole.log(outputNodes)\n\n\n\n\n\n\n\nCodeP2=Plotly.newPlot(\"plot-tw\", [{\n  z: talm.weights,\n  x: inputNodes,\n  y: outputNodes,\n  type: 'heatmap',\n  colorscale: 'Viridis'\n}],{width:600});\n\n\n\n\n\n\n\n\n\n\n\n\n\nStarting Weights\n\nFinal Weights\n\n\n\n\nInput and Output layer activations\n\nCodein_data = ia.map((value, index) =&gt; {\n  return { Node: inputNodes[index], Activation: value };\n});\n\n out_data = oa.map((value, index) =&gt; {\n  return { Node: outputNodes[index], Activation: value };\n});\n\nviewof inputX = Inputs.range([1, 7], {value: 4, step: 1, label: \"input value:\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodePlot.plot({\n  marks: [\n    Plot.dot(in_data, {\n      x: \"Node\",      // feature for the x channel\n      y: \"Activation\",     // feature for the y channel\n    }),\n  ],\n  width: 400,\n  height: 200,\n  title: \"Input Activation Plot\",\n});\nPlot.plot({\n  marks: [\n    Plot.dot(out_data, {\n      x: \"Node\",      // feature for the x channel\n      y: \"Activation\",     // feature for the y channel\n    }),\n  ],\n  width: 400,\n  height: 200,\n  title: \"Output Activation Plot\",\n});\n\n\n\n\n\n\nInput Activation\n\n\n\n\n\nSecond\n\n\n\n\nCharts\n\n\n\n\nCodeconsole.log(wm)\n\n\n\n\n\n\n\nCodeconsole.log(talm.weights)\n\n\n\n\n\n\n\n\nTesting\n\nCodeviewof xV = Inputs.range(\n  [1, 20], \n  {value: 1, step: 1, label: \"x range:\"}\n)\nviewof yV = Inputs.range(\n  [1, 400], \n  {value: 1, step: 10, label: \"y range:\"}\n)\n\ndO = transpose(d)\nfiltered = dO.filter(function(dO) {\n  return dO.x&gt;=xV && dO.y &gt;= yV;\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTab 1\nTab 2\n\n\n\n\nCodePlot.plot({\n  marks: [\n    Plot.dot(filtered, \n      { x: \"x\", y: \"y\"}, \n      { stroke: \"black\" }\n    )\n  ]\n})\n\n\n\n\n\n\nx:  y: \n\n\n\nCode//Plot = require(\"plot\")\nPlot.plot({\n  marks: [\n    Plot.line(transpose(d), \n      { x: \"x\", y: \"y\"}, \n      { stroke: \"black\" }\n    )\n  ]\n})\n\n\n\n\n\n\n\n\n\n```{ojs}\n//| include: false\n```",
    "crumbs": [
      "Interactive",
      "OJS ALM"
    ]
  },
  {
    "objectID": "Misc/Visuals_Interactives/mermaid_consort.html",
    "href": "Misc/Visuals_Interactives/mermaid_consort.html",
    "title": "Mermaid with R + consort",
    "section": "",
    "text": "Code#lapply(c('tidyverse','data.table','igraph','ggraph','kableExtra'),library,character.only=TRUE))\npacman::p_load(tidyverse,data.table,igraph,ggraph,kableExtra,DiagrammeR,png,consort,data.table)\nflowchart LR\n    data1(Varied Training&lt;br/&gt;800-1000&lt;br/&gt;1000-1200&lt;br/&gt;1200-1400)\n    data2(Constant Training&lt;br/&gt;800-1000)\n    Test1(Testing - No Feedback&lt;br/&gt;100-300&lt;br/&gt;350-550&lt;br/&gt;600-800)\n    Test2(Test From Train&lt;br/&gt;800-1000&lt;br/&gt;1000-1200&lt;br/&gt;1200-1400)\n    Test3(Testing - Feedback&lt;br/&gt;100-300&lt;br/&gt;350-550&lt;br/&gt;600-800)\n\n    data1 --&gt; Test1\n    data2 --&gt; Test1\n    Test1 --&gt; Test2\n    Test2 --&gt; Test3\n    \n%% https://quarto.org/docs/authoring/diagrams.html\n\n\n Mean Vx over training blocks\ndata1\nVaried Training800-10001000-12001200-1400Test1\nTesting - No Feedback100-300350-550600-800data1-&gt;Test1\ndata2\nConstant Training800-1000data2-&gt;Test1\nTest2\nTest From Train800-10001000-12001200-1400Test1-&gt;Test2\nTest3\nTesting - Feedback100-300350-550600-800Test2-&gt;Test3\n\n\n\n\nFigure 1: This is a simple graphviz graph.\ndata1\nVaried Training800-10001000-12001200-1400Test1\nTesting - No Feedback100-300350-550600-800data1-&gt;Test1\ndata2\nConstant Training800-1000data2-&gt;Test1\nTest2\nTest From Train800-10001000-12001200-1400Test1-&gt;Test2\nTest3\nTesting - Feedback100-300350-550600-800Test2-&gt;Test3\n\n\n\n\nFigure 2: This is a simple graphviz graph."
  },
  {
    "objectID": "Misc/Visuals_Interactives/mermaid_consort.html#subgraph",
    "href": "Misc/Visuals_Interactives/mermaid_consort.html#subgraph",
    "title": "Mermaid with R + consort",
    "section": "subgraph",
    "text": "subgraph\n\n\n\n\n\ncluster_counterbalanced\nCounterbalanced Orderdata1\nVaried Training800-10001000-12001200-1400subgraph1\nsubgraph1data1-&gt;subgraph1\ndata2\nConstant Training800-1000data2-&gt;subgraph1\nTest1\nTesting - No Feedback100-300350-550600-800Test2\nTest From Train800-10001000-12001200-1400Test3\nTesting - Feedback100-300350-550600-800subgraph1-&gt;Test3\n\n\n\n\n\n\n\n\n\n\n\ncluster\nCounterbalanced Orderdata1\nVaried Training800-10001000-12001200-1400Test1\nTesting - No Feedback100-300350-550600-800data1-&gt;Test1\ndata2\nConstant Training800-1000data2-&gt;Test1\nTest3\nTesting - Feedback100-300350-550600-800Test2\nTest From Train800-10001000-12001200-1400Test1-&gt;Test2\nTest2-&gt;Test3\n\n\n\n\n\n\n\n\n\n\n\ncluster\nCounterbalanced Orderdata1\nVaried Training800-10001000-12001200-1400Test1\nTesting - No Feedback100-300350-550600-800data1-&gt;Test1\ndata2\nConstant Training800-1000data2-&gt;Test1\nTest3\nTesting - Feedback100-300350-550600-800Test2\nTest From Train800-10001000-12001200-1400Test1-&gt;Test2\nTest2-&gt;Test3\n\n\n\n\n\n\n\n\n\n\n\nALM\nInput1\nInput1Input2\nInput2Output1\nOutput1Input1-&gt;Output1\nw_{11}Output2\nOutput2Input1-&gt;Output2\nw_{12}Output3\nOutput3Input1-&gt;Output3\nw_{13}Input2-&gt;Output1\nw_{21}Input2-&gt;Output2\nw_{22}Input2-&gt;Output3\nw_{23}equation1\na_i(X) = e^{-γ(X-X_i)^2}, normalized: a_i(X) / Σa_i(X)equation2\nO_j(X) = Σ w_{ji} ⋅ a_i(X), P[Y_j | X] = O_j(X) / Σ O_k(X)\n\n\n\n\n\ntest\n\n\n\n\n\nALM\ncluster_input\nInput Layercluster_output\nOutput LayerInput1\nInput1Output1\nOutput1Input1-&gt;Output1\nw_11Output2\nOutput2Input1-&gt;Output2\nw_12Output3\nOutput3Input1-&gt;Output3\nw_13Input2\nInput2Input2-&gt;Output1\nw_21Input2-&gt;Output2\nw_22Input2-&gt;Output3\nw_23equation1\nInput activation ai(X) = exp(-gamma*(X-Xi)^2), normalized by dividing by sumequation2\nOutput Oj(X) = sum(w_ji * ai(X)), Probability P[Yj | X] = Oj(X) / sum(Ok(X))\n\n\n\n\n\ntest2\n\n\n\n\n\nG\nE1\n⋮z\nzE2\n⋮x100\nx100a\nab\nbx1\nx1a-&gt;x1\nx2\nx2a-&gt;x2\na-&gt;x100\nb-&gt;x1\nb-&gt;x2\nb-&gt;x100\nz-&gt;x1\nz-&gt;x2\nz-&gt;x100\nY\nYx1-&gt;Y\nx2-&gt;Y\nx100-&gt;Y\n\n\n\n\n\n\ntest3\n\n\n\n\n\nG\nclusterX\nn1n2n1-&gt;n2\nn3n1-&gt;n3\nn4\nn2-&gt;n4\nn5\nn4-&gt;n5\nn6\nn5-&gt;n6\nJ1J2\nJ1-&gt;J2\nJ6\nJ1-&gt;J6\nJ4J5\nJ5-&gt;J4\nJ6-&gt;J5\n\n\n\n\n\n\ntest4\nNest Cluster - GraphViz\n\n\n\n\n\nD\ncluster_p\nParentcluster_c1\nChild onecluster_gc_1\nGrand-Child onecluster_gc_2\nGrand-Child twocluster_c2\nChild twoa\nab\nbc\ncd\nde\ne\n\n\n\n\n\n\n\n\n\n\nG\nE1\nE1z\nzE2\n⋮x100\nx100a\nab\nbx1\nx1a-&gt;x1\nx2\nx2a-&gt;x2\na-&gt;x100\nb-&gt;x1\nb-&gt;x2\nb-&gt;x100\nz-&gt;x1\nz-&gt;x2\nz-&gt;x100\nY\nYx1-&gt;Y\nx2-&gt;Y\nx100-&gt;Y\n\n\n\n\n\n\ntest5\n\n\n\n\n\nG\nn1n2n1-&gt;n2\nn4n2-&gt;n4\n\n\n\n\n\n\ntest6\n\n\n\n\n\nALM\nInput1\nX1Input2\nX2Output1\nY1Input1:e-&gt;Output1:w\nw11Output2\nY2Input1:e-&gt;Output2:w\nw12Output3\nY3Input1:e-&gt;Output3:w\nw13Input2:e-&gt;Output1:w\nw21Input2:e-&gt;Output2:w\nw22Input2:e-&gt;Output3:w\nw23label_input\nInput Layerlabel_output\nOutput Layer\n\n\n\n\n\ntest7\n\n\n\n\n\nG\ncluster_0\nlayer 1 (input layer)cluster_1\nlayer 2 (hidden layer)cluster_2\nlayer 3 (hidden layer)cluster_3\nlayer 4 (output layer)x0\nx0a02\na0(2)x0:e-&gt;a02:wa12\na5(2)x0:e-&gt;a12:w\na22\na1(2)x0:e-&gt;a22:w\na32\na2(2)x0:e-&gt;a32:w\na42\na3(2)x0:e-&gt;a42:w\na52\na4(2)x0:e-&gt;a52:w\nx1\nx1x1:e-&gt;a12:w\nx1:e-&gt;a22:w\nx1:e-&gt;a32:w\nx1:e-&gt;a42:w\nx1:e-&gt;a52:w\nx2\nx2x2:e-&gt;a12:w\nx2:e-&gt;a22:w\nx2:e-&gt;a32:w\nx2:e-&gt;a42:w\nx2:e-&gt;a52:w\nx3\nx3x3:e-&gt;a12:w\nx3:e-&gt;a22:w\nx3:e-&gt;a32:w\nx3:e-&gt;a42:w\nx3:e-&gt;a52:w\na03\na0(3)a02:e-&gt;a03:wa13\na3(3)a02:e-&gt;a13:w\na23\na4(3)a02:e-&gt;a23:w\na33\na5(3)a02:e-&gt;a33:w\na43\na1(3)a02:e-&gt;a43:w\na53\na2(3)a02:e-&gt;a53:w\na12:e-&gt;a13:w\na12:e-&gt;a23:w\na12:e-&gt;a33:w\na12:e-&gt;a43:w\na12:e-&gt;a53:w\na22:e-&gt;a13:w\na22:e-&gt;a23:w\na22:e-&gt;a33:w\na22:e-&gt;a43:w\na22:e-&gt;a53:w\na32:e-&gt;a13:w\na32:e-&gt;a23:w\na32:e-&gt;a33:w\na32:e-&gt;a43:w\na32:e-&gt;a53:w\na42:e-&gt;a13:w\na42:e-&gt;a23:w\na42:e-&gt;a33:w\na42:e-&gt;a43:w\na42:e-&gt;a53:w\na52:e-&gt;a13:w\na52:e-&gt;a23:w\na52:e-&gt;a33:w\na52:e-&gt;a43:w\na52:e-&gt;a53:w\nO1\na1(4)a03:e-&gt;O1:w\nO2\na2(4)a03:e-&gt;O2:w\nO3\na3(4)a03:e-&gt;O3:w\nO4\na4(4)a03:e-&gt;O4:w\na13:e-&gt;O1:w\na13:e-&gt;O2:w\na13:e-&gt;O3:w\na13:e-&gt;O4:w\na23:e-&gt;O1:w\na23:e-&gt;O2:w\na23:e-&gt;O3:w\na23:e-&gt;O4:w\na33:e-&gt;O1:w\na33:e-&gt;O2:w\na33:e-&gt;O3:w\na33:e-&gt;O4:w\na43:e-&gt;O1:w\na43:e-&gt;O2:w\na43:e-&gt;O3:w\na43:e-&gt;O4:w\na53:e-&gt;O1:w\na53:e-&gt;O2:w\na53:e-&gt;O3:w\na53:e-&gt;O4:w\n\n\n\n\n\n\ntest8\n\n\n\n\n\nG\ncluster_0\nlayer 1 (Input layer)cluster_1\nlayer 2 (hidden layer)cluster_2\nlayer 3 (output layer)x1\na12\nx1-&gt;a12\na22\nx1-&gt;a22\na32\nx1-&gt;a32\nx2\nx2-&gt;a12\nx2-&gt;a22\nx2-&gt;a32\nx3\nx3-&gt;a12\nx3-&gt;a22\nx3-&gt;a32\nO\na12-&gt;O\na22-&gt;O\na32-&gt;O\n\n\n\n\n\n\n\n\n\n\n\nG\nx0\nx0x1\nx1a12\na1(2)x0:e-&gt;a12:w\na22\na2(2)x0:e-&gt;a22:w\na32\na3(2)x0:e-&gt;a32:w\na42\na4(2)x0:e-&gt;a42:w\na52\na5(2)x0:e-&gt;a52:w\na02\na0(2)a03\na0(3)a13\na1(3)a02:e-&gt;a13:w\na23\na2(3)a02:e-&gt;a23:w\na33\na3(3)a02:e-&gt;a33:w\na43\na4(3)a02:e-&gt;a43:w\na53\na5(3)a02:e-&gt;a53:w\nO1\na1(4)a03:e-&gt;O1:w\nO2\na2(4)a03:e-&gt;O2:w\nO3\na3(4)a03:e-&gt;O3:w\nO4\na4(4)a03:e-&gt;O4:w\nx2\nx2x1:e-&gt;a12:w\nx1:e-&gt;a22:w\nx1:e-&gt;a32:w\nx1:e-&gt;a42:w\nx1:e-&gt;a52:w\nx3\nx3x2:e-&gt;a12:w\nx2:e-&gt;a22:w\nx2:e-&gt;a32:w\nx2:e-&gt;a42:w\nx2:e-&gt;a52:w\nx3:e-&gt;a12:w\nx3:e-&gt;a22:w\nx3:e-&gt;a32:w\nx3:e-&gt;a42:w\nx3:e-&gt;a52:w\na12:e-&gt;a13:w\na12:e-&gt;a23:w\na12:e-&gt;a33:w\na12:e-&gt;a43:w\na12:e-&gt;a53:w\na22:e-&gt;a13:w\na22:e-&gt;a23:w\na22:e-&gt;a33:w\na22:e-&gt;a43:w\na22:e-&gt;a53:w\na32:e-&gt;a13:w\na32:e-&gt;a23:w\na32:e-&gt;a33:w\na32:e-&gt;a43:w\na32:e-&gt;a53:w\na42:e-&gt;a13:w\na42:e-&gt;a23:w\na42:e-&gt;a33:w\na42:e-&gt;a43:w\na42:e-&gt;a53:w\na52:e-&gt;a13:w\na52:e-&gt;a23:w\na52:e-&gt;a33:w\na52:e-&gt;a43:w\na52:e-&gt;a53:w\na13:e-&gt;O1:w\na13:e-&gt;O2:w\na13:e-&gt;O3:w\na13:e-&gt;O4:w\na23:e-&gt;O1:w\na23:e-&gt;O2:w\na23:e-&gt;O3:w\na23:e-&gt;O4:w\na33:e-&gt;O1:w\na33:e-&gt;O2:w\na33:e-&gt;O3:w\na33:e-&gt;O4:w\na43:e-&gt;O1:w\na43:e-&gt;O2:w\na43:e-&gt;O3:w\na43:e-&gt;O4:w\na53:e-&gt;O1:w\na53:e-&gt;O2:w\na53:e-&gt;O3:w\na53:e-&gt;O4:w\nl0\nlayer 1 (input layer)l1\nlayer 2 (hidden layer)l2\nlayer 3 (hidden layer)l3\nlayer 4 (output layer)\n\n\n\n\n\n\n\n\n\n\nthreevar\nk\n?X1\nX1k-&gt;X1\nn@_{S}X2\nX2k-&gt;X2\nθ@^{(h)}X3\nX3k-&gt;X3\n?3z1\nd1z1-&gt;X1\nz2\nd2z2-&gt;X2\nz3\nd3z3-&gt;X3\n\n\n\n\n\n\n\nCodegrViz('digraph threevar {\n      rankdir=LR;\n      size=\"8,4\";\n      node [fontsize=14 shape=box];\n      edge [fontsize=10];\n      center=1;\n      {rank=min k }\n      {rank=same X1 X2 X3 }\n      {rank=max z1 z2 z3 }\n      z1 [shape=circle label=\"d1\"];\n      z2 [shape=circle label=\"d2\"];\n      z3 [shape=circle label=\"d3\"];\n      k [label=\"?\" shape=\"ellipse\"];\n      k -&gt; X1 [label=\"n@_{S}\"];\n      k -&gt; X2 [label=\"&theta;@^{(h)}\"];\n      k -&gt; X3 [label=\"?3\"];\n      z1 -&gt; X1;\n      z2 -&gt; X2;\n      z3 -&gt; X3;\n    }\n      ')\n\n\n\n\n\n\nCodegrViz(\"digraph dot {\n      graph [style = filled, fillcolor = white]\n      \n      node [shape = circle,\n            style = filled, fillcolor = white,\n            fixedsize = true, width = 0.5, height = 0.5,\n            fontname = 'Times-italic']\n        c\n        d\n      node [shape = doublecircle,\n            style = filled, fillcolor = white,\n            fixedsize = true, width = 0.5, height = 0.5,\n            fontname = 'Times-italic']\n        thetah [label = '&theta;@^{(h)}']\n        thetaf [label = '&theta;@^{(f)}']\n      node [shape = square,\n            style = filled, fillcolor = grey,\n            fixedsize = true, width=0.5, height=0.5,\n            fontname = 'Times-italic']\n        h\n        f\n        ns [label = 'n@_{S}']\n        nn [label = 'n@_{N}']\n      \n      edge [color = black]\n        c -&gt; thetah -&gt; h\n        d -&gt; thetaf -&gt; f\n        c -&gt; thetaf\n        d -&gt; thetah\n        ns -&gt; h\n        nn -&gt; f\n      {rank = max; ns; nn}\n      }\")\n\n\n\n\nCodegrViz(\"digraph dot {\n      graph [style = filled, fillcolor = white,\n             rankdir = LR,\n             newrank = true]\n      \n      node [shape = circle,\n            style = filled, fillcolor = white,\n            fixedsize = true, width = 0.5, height = 0.5,\n            fontname = 'Times-italic']\n        p [fillcolor = gray]\n        gamma [label = '&gamma;']\n        omega [label = '&omega;', shape = doublecircle]\n        beta [label = '&beta;']\n      subgraph cluster_out{\n        fontsize = 8\n        label = &lt;&lt;I&gt;j&lt;/I&gt;:試行&gt;\n        labelloc = b\n        labeljust = r\n        subgraph cluster_in{\n          fontsize = 8\n          label = &lt;&lt;I&gt;k&lt;/I&gt;:回数&gt;\n          labelloc = b\n          labeljust = r\n          thetajk [label = '&theta;@_{jk}', shape = doublecircle]\n          djk [label = 'd@_{jk}', shape = square, fillcolor = gray]\n        }}\n      edge [color=black]\n        p -&gt; omega -&gt; thetajk -&gt; djk\n        gamma -&gt; omega\n        beta -&gt; thetajk \n      {rank = same; gamma; omega}\n      {rank = same; beta; thetajk}\n      }\")\n\n\n\n\nCodegrViz('\ndigraph G {\n    fontname=\"Helvetica,Arial,sans-serif\"\n    node [fontname=\"Helvetica,Arial,sans-serif\"]\n    edge [fontname=\"Helvetica,Arial,sans-serif\"]\n\n    subgraph cluster_0 {\n        style=filled;\n        color=lightgrey;\n        node [style=filled,color=white];\n        a0 -&gt; a1 -&gt; a2 -&gt; a3;\n        label = \"process #1\";\n    }\n\n    subgraph cluster_1 {\n        node [style=filled];\n        b0 -&gt; b1 -&gt; b2 -&gt; b3;\n        label = \"process #2\";\n        color=blue\n    }\n    start -&gt; a0;\n    start -&gt; b0;\n    a1 -&gt; b3;\n    b2 -&gt; a3;\n    a3 -&gt; a0;\n    a3 -&gt; end;\n    b3 -&gt; end;\n\n    start [shape=Mdiamond];\n    end [shape=Msquare];\n}')\n\n\n\n\nCode#https://graphviz.org/Gallery/directed/neural-network.html\n\ngrViz('digraph G {\n  fontname=\"Helvetica,Arial,sans-serif\"\n  node [fontname=\"Helvetica,Arial,sans-serif\"]\n  edge [fontname=\"Helvetica,Arial,sans-serif\"]\n  concentrate=True;\n  rankdir=TB;\n  node [shape=record];\n  140087530674552 [label=\"title: InputLayer\\n|{input:|output:}|{{[(?, ?)]}|{[(?, ?)]}}\"];\n  140087537895856 [label=\"body: InputLayer\\n|{input:|output:}|{{[(?, ?)]}|{[(?, ?)]}}\"];\n  140087531105640 [label=\"embedding_2: Embedding\\n|{input:|output:}|{{(?, ?)}|{(?, ?, 64)}}\"];\n  140087530711024 [label=\"embedding_3: Embedding\\n|{input:|output:}|{{(?, ?)}|{(?, ?, 64)}}\"];\n  140087537980360 [label=\"lstm_2: LSTM\\n|{input:|output:}|{{(?, ?, 64)}|{(?, 128)}}\"];\n  140087531256464 [label=\"lstm_3: LSTM\\n|{input:|output:}|{{(?, ?, 64)}|{(?, 32)}}\"];\n  140087531106200 [label=\"tags: InputLayer\\n|{input:|output:}|{{[(?, 12)]}|{[(?, 12)]}}\"];\n  140087530348048 [label=\"concatenate_1: Concatenate\\n|{input:|output:}|{{[(?, 128), (?, 32), (?, 12)]}|{(?, 172)}}\"];\n  140087530347992 [label=\"priority: Dense\\n|{input:|output:}|{{(?, 172)}|{(?, 1)}}\"];\n  140087530711304 [label=\"department: Dense\\n|{input:|output:}|{{(?, 172)}|{(?, 4)}}\"];\n  140087530674552 -&gt; 140087531105640;\n  140087537895856 -&gt; 140087530711024;\n  140087531105640 -&gt; 140087537980360;\n  140087530711024 -&gt; 140087531256464;\n  140087537980360 -&gt; 140087530348048;\n  140087531256464 -&gt; 140087530348048;\n  140087531106200 -&gt; 140087530348048;\n  140087530348048 -&gt; 140087530347992;\n  140087530348048 -&gt; 140087530711304;\n}')\n\n\n\n\n\n\nCoderequire(data.table)\nrequire(qreport)\nrequire(consort)\n\n# Load the necessary libraries\nrequire(data.table)\nrequire(qreport)\n\n# Define the mermaid diagram\nx &lt;- '\ngraph LR\n  InputLayer[Input Layer] --&gt; I1[{{I1}}]\n  InputLayer --&gt; I2[{{I2}}]\n  InputLayer --&gt; I3[{{I3}}]\n  I1 --&gt; O1[w1]\n  I1 --&gt; O2[w2]\n  I1 --&gt; O3[w3]\n  I1 --&gt; O4[w4]\n  I2 --&gt; O1[w5]\n  I2 --&gt; O2[w6]\n  I2 --&gt; O3[w7]\n  I2 --&gt; O4[w8]\n  I3 --&gt; O1[w9]\n  I3 --&gt; O2[w10]\n  I3 --&gt; O3[w11]\n  I3 --&gt; O4[w12]\n  OutputLayer[Output Layer] --&gt; O1\n  OutputLayer --&gt; O2\n  OutputLayer --&gt; O3\n  OutputLayer --&gt; O4\n  OutputLayer --&gt; ALM[ALM Response]\n  OutputLayer --&gt; EXAM[EXAM Response]\n  ALM --&gt; EXAM[Pure ALM Model]\n  EXAM --&gt; ALM[ALM with EXAM Response Component]\n'\n\n# Generate the mermaid diagram\nmakemermaid(x,\n            I1 = '![Gaussian Curve](gaussian_curve_input_node_1.png)',\n            I2 = '![Gaussian Curve](gaussian_curve_input_node_2.png)',\n            I3 = '![Gaussian Curve](gaussian_curve_input_node_3.png)',\n            file = 'assets/alm_exam.mer'\n            )\n\n# Output the mermaid diagram\n# cat('```{mermaid}\\n')\n# cat(readLines('assets/alm_exam.mer'), sep = '\\n')\n# cat('```\\n')\n\n\n\n\n\n\n\ngraph LR\n  InputLayer[Input Layer] --&gt; I1[![Gaussian Curve](gaussian_curve_input_node_1.png)]\n  InputLayer --&gt; I2[![Gaussian Curve](gaussian_curve_input_node_2.png)]\n  InputLayer --&gt; I3[![Gaussian Curve](gaussian_curve_input_node_3.png)]\n  I1 --&gt; O1[w1]\n  I1 --&gt; O2[w2]\n  I1 --&gt; O3[w3]\n  I1 --&gt; O4[w4]\n  I2 --&gt; O1[w5]\n  I2 --&gt; O2[w6]\n  I2 --&gt; O3[w7]\n  I2 --&gt; O4[w8]\n  I3 --&gt; O1[w9]\n  I3 --&gt; O2[w10]\n  I3 --&gt; O3[w11]\n  I3 --&gt; O4[w12]\n  OutputLayer[Output Layer] --&gt; O1\n  OutputLayer --&gt; O2\n  OutputLayer --&gt; O3\n  OutputLayer --&gt; O4\n  OutputLayer --&gt; ALM[ALM Response]\n  OutputLayer --&gt; EXAM[EXAM Response]\n  ALM --&gt; EXAM[Pure ALM Model]\n  EXAM --&gt; ALM[ALM with EXAM Response Component]\n\n\n\n\nFigure 3: ALM diagram produced with mermaid with individual exclusions linked to the overall exclusions node, and with a tooltip to show more detail\n\n\n\n\n\nCodelibrary(consort)\nset.seed(1001)\nN &lt;- 300\n\ntrialno &lt;- sample(c(1000:2000), N)\nexc &lt;- rep(NA, N)\nexc[sample(1:N, 15)] &lt;- sample(c(\"Sample not collected\", \"MRI not collected\", \"Other\"),\n                                15, replace = T, prob = c(0.4, 0.4, 0.2))\n\narm &lt;- rep(NA, N)\narm[is.na(exc)] &lt;- sample(c(\"Conc\", \"Seq\"), sum(is.na(exc)), replace = T)\n\nfow1 &lt;- rep(NA, N)\nfow1[!is.na(arm)] &lt;- sample(c(\"Withdraw\", \"Discontinued\", \"Death\", \"Other\", NA),\n                            sum(!is.na(arm)), replace = T, \n                            prob = c(0.05, 0.05, 0.05, 0.05, 0.8))\nfow2 &lt;- rep(NA, N)\nfow2[!is.na(arm) & is.na(fow1)] &lt;- sample(c(\"Protocol deviation\", \"Outcome missing\", NA),\n                                          sum(!is.na(arm) & is.na(fow1)), replace = T, \n                                          prob = c(0.05, 0.05, 0.9))\ndf &lt;- data.frame(trialno, exc, arm, fow1, fow2)\nout &lt;- consort_plot(data = df,\n             order = c(trialno = \"Population\",\n                          exc    = \"Excluded\",\n                          arm     = \"Randomized patient\",\n                          fow1    = \"Lost of Follow-up\",\n                          trialno = \"Finished Followup\",\n                          fow2    = \"Not evaluable\",\n                          trialno = \"Final Analysis\"),\n             side_box = c(\"exc\", \"fow1\", \"fow2\"),\n             allocation = \"arm\",\n             labels = c(\"1\" = \"Screening\", \"2\" = \"Randomization\",\n                        \"5\" = \"Final\"),\n             cex = 0.6)\n\nplot(out)\n\n\n\n\n\n\n\n\nCodeplot(out, grViz = TRUE)\n\n\n\n\n\n\nCoderequire(Hmisc)\nrequire(data.table)\nrequire(qreport)\nhookaddcap()\nN &lt;- 1000\nset.seed(1)\nr &lt;- data.table(\n  id    = 1 : N,\n  age   = round(rnorm(N, 60, 15)),\n  pain  = sample(0 : 5, N, replace=TRUE),\n  hxmed = sample(0 : 1, N, replace=TRUE, prob=c(0.95, 0.05))   )\n# Set consent status to those not excluded at screening\nr[age &gt;= 40 & pain &gt; 0 & hxmed == 0,\n  consent := sample(0 : 1, .N, replace=TRUE, prob=c(0.1, 0.9))]\n# Set randomization status for those consenting\nr[consent == 1,\n  randomized := sample(0 : 1, .N, replace=TRUE, prob=c(0.15, 0.85))]\n# Add treatment and follow-up time to randomized subjects\nr[randomized == 1, tx     := sample(c('A', 'B'), .N, replace=TRUE)]\nr[randomized == 1, futime := pmin(runif(.N, 0, 10), 3)]\n# Add outcome status for those followed 3 years\n# Make a few of those followed 3 years missing\nr[futime == 3,\n  y := sample(c(0, 1, NA), .N, replace=TRUE, prob=c(0.75, 0.2, 0.05))]\n# Print first 15 subjects\nkabl(r[1 : 15, ])\n\n\n\nid\nage\npain\nhxmed\nconsent\nrandomized\ntx\nfutime\ny\n\n\n\n1\n51\n2\n1\nNA\nNA\nNA\nNA\nNA\n\n\n2\n63\n2\n0\n1\n1\nA\n3.0000\n0\n\n\n3\n47\n1\n0\n1\n1\nA\n3.0000\nNA\n\n\n4\n84\n5\n0\n1\n0\nNA\nNA\nNA\n\n\n5\n65\n3\n0\n1\n1\nB\n3.0000\n1\n\n\n6\n48\n4\n0\n1\n1\nA\n3.0000\n0\n\n\n7\n67\n3\n0\n1\n1\nB\n2.0566\nNA\n\n\n8\n71\n0\n0\nNA\nNA\nNA\nNA\nNA\n\n\n9\n69\n5\n0\n1\n1\nB\n1.2815\nNA\n\n\n10\n55\n2\n0\n1\n1\nB\n1.2388\nNA\n\n\n11\n83\n4\n0\n1\n1\nA\n3.0000\n1\n\n\n12\n66\n5\n0\n1\n1\nA\n3.0000\n0\n\n\n13\n51\n1\n0\n1\n1\nB\n3.0000\n0\n\n\n14\n27\n2\n0\nNA\nNA\nNA\nNA\nNA\n\n\n15\n77\n2\n0\n1\n1\nA\n3.0000\n0\n\n\n\n\n\n\nCoder[, exc := seqFreq('pain-free'  = pain  == 0,\n                    'Hx med'    = hxmed == 1,\n                                  age &lt; 40,\n                    noneNA=TRUE)]\neo  &lt;- attr(r[, exc], 'obs.per.numcond')\nmult &lt;- paste0('1, 2, ≥3 exclusions: n=',\n                eo[2], ', ',\n                eo[3], ', ',\n                eo[-(1:3)]  )\n\nr[, .q(qual, consent, fin) :=\n    .(is.na(exc),\n      ifelse(consent == 1, 1, NA),\n      ifelse(futime  &gt;= 3, 1, NA))]\n            \nrequire(consort)\n# consort_plot used to take a coords=c(0.4, 0.6) argument that prevented\n# the collision you see here\nconsort_plot(r,\n             orders = c(id      = 'Screened',\n                        exc     = 'Excluded',\n                        qual    = 'Qualified for Randomization',\n                        consent = 'Consented',\n                        tx      = 'Randomized',\n                        fin     = 'Finished',\n                        y       = 'Outcome\\nassessed'),\n             side_box = 'exc',\n             allocation = 'tx',\n             labels=c('1'='Screening', '3'='Consent', '4'='Randomization', '6'='Follow-up'))\n\n\n\n\n\n\n\nhtab\n\nCodeh &lt;- function(n, label) paste0(label, ' (n=', n, ')')\nhtab &lt;- function(x, label=NULL, split=! length(label), br='\\n') {\n  tab &lt;- table(x)\n  w &lt;- if(length(label)) paste0(h(sum(tab), label), ':', br)\n  f &lt;- if(split) h(tab, names(tab)) \n  else\n    paste(paste0('   ', h(tab, names(tab))), collapse=br)\n  if(split) return(f)\n  paste(w, f, sep=if(length(label))'' else br)\n}  \ncount &lt;- function(x, by=rep(1, length(x)))\n  tapply(x, by, sum, na.rm=TRUE)\n\nw &lt;- r[, {\n g &lt;-\n   add_box(txt=h(nrow(r),       'Screened'))                    |&gt;\n   add_side_box(htab(exc,       'Excluded'))                    |&gt;\n   add_box(h(count(is.na(exc)), 'Qualified for Randomization')) |&gt;\n   add_box(h(count(consent),    'Consented'))                   |&gt;\n   add_box(h(count(randomized), 'Randomized'))                  |&gt;\n   add_split(htab(tx))                                          |&gt;\n   add_box(h(count(fin, tx),    'Finished'))                    |&gt;\n   add_box(h(count(! is.na(y), tx), 'Outcome\\nassessed'))       |&gt;\n   add_label_box(c('1'='Screening',     '3'='Consent',\n                   '4'='Randomization', '6'='Follow-up'))\n plot(g)\n}\n]\n\n\n\n\n\n\n\nmermaid maker\n\nCodeaddCap('fig-doverview-mermaid1', 'Consort diagram produced by `mermaid`')\nx &lt;- 'flowchart TD\n  S[\"Screened (n={{N0}})\"] --&gt; E[\"{{excl}}\"]\n  S   --&gt; Q[\"Qualified for Randomization (n={{Nq}})\"]\n  Q   --&gt; C[\"Consented (n={{Nc}})\"]\n  C   --&gt; R[\"Randomized (n={{Nr}})\"]\n  R   --&gt; TxA[\"A (n={{Ntxa}})\"]\n  R   --&gt; TxB[\"B (n={{Ntxb}})\"]\n  TxA --&gt; FA[\"Finished (n={{Ntxaf}})\"]\n  TxB --&gt; FB[\"Finished (n={{Ntxbf}})\"]\n  FA  --&gt; OA[\"Outcome assessed (n={{Ntxao}})\"]\n  FB  --&gt; OB[\"Outcome assessed (n={{Ntxbo}})\"]\nclassDef largert fill:lightgray,width:1.5in,height:10em,text-align:right,font-size:0.8em;\nclass E largert;\n'\n\nw &lt;- r[, \nmakemermaid(x,\n            N0   = nrow(r),\n            excl = htab(exc, 'Excluded', br='&lt;br&gt;'),\n            Nq   = count(is.na(exc)),\n            Nc   = count(consent),\n            Nr   = count(randomized),\n            Ntxa = count(tx == 'A'),\n            Ntxb = count(tx == 'B'),\n            Ntxaf= count(tx == 'A' & fin),\n            Ntxbf= count(tx == 'B' & fin),\n            Ntxao= count(tx == 'A' & ! is.na(y)),\n            Ntxbo= count(tx == 'B' & ! is.na(y)),\n            file = 'assets/mermaid1.mer'\n            )\n]\n\n\n\n\n\n\n\nflowchart TD\n  S[\"Screened (n=1000)\"] --&gt; E[\"Excluded (n=286):&lt;br&gt;   pain-free (n=156)&lt;br&gt;   age &lt; 40 (n=85)&lt;br&gt;   Hx med (n=45)\"]\n  S   --&gt; Q[\"Qualified for Randomization (n=714)\"]\n  Q   --&gt; C[\"Consented (n=634)\"]\n  C   --&gt; R[\"Randomized (n=534)\"]\n  R   --&gt; TxA[\"A (n=285)\"]\n  R   --&gt; TxB[\"B (n=249)\"]\n  TxA --&gt; FA[\"Finished (n=204)\"]\n  TxB --&gt; FB[\"Finished (n=175)\"]\n  FA  --&gt; OA[\"Outcome assessed (n=196)\"]\n  FB  --&gt; OB[\"Outcome assessed (n=165)\"]\nclassDef largert fill:lightgray,width:1.5in,height:10em,text-align:right,font-size:0.8em;\nclass E largert;\n\n\n\n\nFigure 4: Consort diagram produced by mermaid\n\n\n\n\nnode plot\n\nCode# Create some service functions so later it will be easy to change from\n# mermaid to graphviz\nmakenode       &lt;- function(name, label) paste0(name, '[\"', label, '\"]')\nmakeconnection &lt;- function(from, to)    paste0(from, ' --&gt; ', to)\n\nexclnodes &lt;- function(x, from='E', root='E', seq=FALSE, remain=FALSE) {\n  # Create complete node specifications for individual exclusions, each\n  # linking to overall exclusion count assumed to be in node root.\n  # Set seq=TRUE to make use of the fact that the exclusions were\n  # done in frequency priority order so that each exclusion is in\n  # addition to the previous one.  Leave seq=FALSE to make all exclusions\n  # subservient to root.  Use remain=TRUE to include # obs remaining\n    # remain=TRUE assumes noneNA specified to seqFreq\n  tab &lt;- table(x)\n  i &lt;- 1 : length(tab)\n    rem &lt;- if(remain) paste0(', ', length(x) - cumsum(tab), ' remain')\n  labels &lt;- paste0(names(tab), ' (n=', tab, rem, ')')\n  nodes  &lt;- if(seq) makenode(ifelse(i == 1, paste0(root, '1'), paste0(root, i)),\n                             labels)\n            else    makenode(paste0(root, i), labels)\n  connects &lt;- if(seq) makeconnection(ifelse(i == 1, from, paste0(root, i - 1)),\n                                     paste0(root, i))\n              else makeconnection(from, paste0(root, i))\n   paste(c(nodes, connects), collapse='\\n')\n}\n\n# Create parallel treatment nodes\n# Treatments are assumed to be in order by the tx variable\n# and will appear left to right in the diagram\n# Treatment node names correspond to that and are Tx1, Tx2, ...\n# root: root of new nodes, from: single node name to connect from\n# fromparallel: root of connected-from node name which is to be\n# expanded by adding the integers 1, 2, ... number of treatments.\n\nTxs &lt;- r[, if(is.factor(tx)) levels(tx) else sort(unique(tx))]\n\nparNodes &lt;- function(counts, root, from=NULL, fromparallel=NULL,\n                      label=Txs) {\n  if(! identical(names(counts), Txs)) stop('Txs not consistent')\n  k &lt;- length(Txs)\n  ns &lt;- paste0(' (n=', counts, ')')\n   nodenames &lt;- paste0(root, 1 : k)\n  nodes &lt;- makenode(nodenames, paste0(label, ns))\n  connects &lt;- if(length(fromparallel)) makeconnection(paste0(fromparallel, 1 : k), nodenames)\n              else                     makeconnection(from,                        nodenames)\n  paste(c(nodes, connects), collapse='\\n')\n    }\n\n# Create tooltip text from tabulation created by seqFreq earlier\nefreq &lt;- data.frame('# Exclusions'= (1 : length(eo)) - 1,\n                    '# Subjects'  = eo, check.names=FALSE)\nefreq &lt;- subset(efreq, `# Subjects` &gt; 0)\n# Convert to text which will be wrapped by the html\nexcltab &lt;- paste(capture.output(print(efreq, row.names=FALSE)),\n                 collapse='\\n')\n\n\naddCap('fig-doverview-mermaid2', 'Consort diagram produced with `mermaid` with individual exclusions linked to the overall exclusions node, and with a tooltip to show more detail')\n\nx &lt;- '\nflowchart TD\n  S[\"Screened (n={{N0}})\"] --&gt; E[\"Excluded (n={{Ne}})\"]\n  {{exclsep}}\n  E1 & E2 & E3 --&gt; M[\"{{mult}}\"]\n  S   --&gt; Q[\"Qualified for Randomization (n={{Nq}})\"]\n  Q   --&gt; C[\"Consented (n={{Nc}})\"]\n  C   --&gt; R[\"Randomized (n={{Nr}})\"]\n  {{txcounts}}\n  {{finished}}\n  {{outcome}}\nclick E callback \"{{excltab}}\"\n'\n\nw &lt;- r[, \nmakemermaid(x,\n  N0       = nrow(r),\n  Ne       = count(! is.na(exc)),\n  exclsep  = exclnodes(exc),  # add seq=TRUE to put exclusions vertical\n  excltab  = excltab,         # tooltip text\n  mult     = mult,  # separate node: count multiple exclusions\n  Nq       = count(is.na(exc)),\n  Nc       = count(consent),\n  Nr       = count(randomized),\n  txcounts = parNodes(table(tx),         'Tx', from='R'),\n  finished = parNodes(count(fin, by=tx), 'F',  fromparallel='Tx',\n                      label='Finished'),\n  outcome  = parNodes(count(! is.na(y), by=tx), 'O',\n                      fromparallel='F', label='Outcome assessed'),\n  file='mermaid2.mer'  # save generated code for another use\n)\n]\n\n\nmakenode       &lt;- function(name, label) paste0(name, ' [label=\"', label, '\"];')\nmakeconnection &lt;- function(from, to)    paste0(from, ' -&gt; ', to, ';')\n\n# Create data frame from tabulation created by seqFreq earlier\nefreq &lt;- data.frame('# Exclusions'= (1 : length(eo)) - 1,\n                    '# Subjects'  = eo, check.names=FALSE)\nefreq &lt;- subset(efreq, `# Subjects` &gt; 0)\n\nx &lt;- 'digraph {\n  graph [pad=\"0.5\", nodesep=\"0.5\", ranksep=\"2\", splines=ortho]\n  //  splines=ortho for square connections\n  node  [shape=box, fontsize=\"30\"]\n  rankdir=TD;\n  S [label=\"Screened (n={{N0}})\"];\n  E [label=\"Excluded (n={{Ne}})\"];\n  S -&gt; E;\n  {{exclsep}}\n  M [label=\"{{mult}}\"];\n  E1 -&gt; M;\n  E2 -&gt; M;\n  E3 -&gt; M;\n  Q [label=\"Qualified for Randomization (n={{Nq}})\"];\n  C [label=\"Consented (n={{Nc}})\"];\n  R [label=\"Randomized (n={{Nr}})\"];\n  S -&gt; Q;\n  Q -&gt; C;\n  C -&gt; R;\n  {{txcounts}}\n  {{finished}}\n  {{outcome}}\n  efreq [label=&lt;{{efreq}}&gt;];\n  M -&gt; efreq [dir=none, style=dotted];\n}\n'\n\nw &lt;- r[, \nmakegraphviz(x,\n  N0       = nrow(r),\n  Ne       = count(! is.na(exc)),\n  exclsep  = exclnodes(exc),  # add seq=TRUE to put exclusions vertical\n  efreq    = efreq,\n  mult     = mult,  # separate node: count multiple exclusions\n  Nq       = count(is.na(exc)),\n  Nc       = count(consent),\n  Nr       = count(randomized),\n  txcounts = parNodes(table(tx),         'Tx', from='R'),\n  finished = parNodes(count(fin, by=tx), 'F',  fromparallel='Tx',\n                      label='Finished'),\n  outcome  = parNodes(count(! is.na(y), by=tx), 'O',\n                      fromparallel='F', label='Outcome assessed'),\n  file='graphviz.dot'\n)\n]\n#  addCap('fig-doverview-graphviza', 'Consort diagram produced with `graphviz` with detailed exclusion frequencies in a separate node', scap='Consort diagram produced with `graphviz`')\n\n\n\n\n\n\n\nflowchart TD\n  S[\"Screened (n=1000)\"] --&gt; E[\"Excluded (n=286)\"]\n  E1[\"pain-free (n=156)\"]\nE2[\"age &lt; 40 (n=85)\"]\nE3[\"Hx med (n=45)\"]\nE --&gt; E1\nE --&gt; E2\nE --&gt; E3\n  E1 & E2 & E3 --&gt; M[\"1, 2, ≥3 exclusions: n=260, 25, 1\"]\n  S   --&gt; Q[\"Qualified for Randomization (n=714)\"]\n  Q   --&gt; C[\"Consented (n=634)\"]\n  C   --&gt; R[\"Randomized (n=534)\"]\n  Tx1[\"A (n=285)\"]\nTx2[\"B (n=249)\"]\nR --&gt; Tx1\nR --&gt; Tx2\n  F1[\"Finished (n=204)\"]\nF2[\"Finished (n=175)\"]\nTx1 --&gt; F1\nTx2 --&gt; F2\n  O1[\"Outcome assessed (n=196)\"]\nO2[\"Outcome assessed (n=165)\"]\nF1 --&gt; O1\nF2 --&gt; O2\nclick E callback \" # Exclusions # Subjects\n            0        714\n            1        260\n            2         25\n            3          1\"\n\n\n\n\nFigure 5: Consort diagram produced with mermaid with individual exclusions linked to the overall exclusions node, and with a tooltip to show more detail\n\n\n\n\n\nCodegetHdata(support)\nsetDT(support)\n# addCap('fig-doverview-missflow', 'Flowchart of sequential exclusion of observations due to missing values')\nvars &lt;-  .q(age, sex, dzgroup, edu, income, meanbp, wblc,\n            alb, bili, crea, glucose, bun, urine)\nex &lt;- missChk(support, use=vars, type='seq') # seq: don't make report\n\n# Create tooltip text from tabulation created by seqFreq\noc   &lt;- attr(ex, 'obs.per.numcond')\nfreq &lt;- data.frame('# Exclusions'= (1 : length(oc)) - 1,\n                   '# Subjects'  = oc, check.names=FALSE)\nfreq &lt;- subset(freq, `# Subjects` &gt; 0)\n\nx &lt;- '\ndigraph {\n  graph [pad=\"0.5\", nodesep=\"0.5\", ranksep=\"2\", splines=ortho]\n  //  splines=ortho for square connections\n  node  [shape=box, fontsize=\"30\"]\n  rankdir=TD;\n  Enr [label=\"Enrolled (n={{N0}})\"];\n  Enr;\n  {{exclsep}}\n    Extab [label=&lt;{{excltab}}&gt;];\n  Enr:e -&gt; Extab [dir=none];\n}\n'\nmakegraphviz(x,\n  N0        = nrow(support),\n  exclsep   = exclnodes(ex, from='Enr', seq=TRUE, remain=TRUE),\n  excltab   = freq,\n  file      = 'support.dot'\n)\n\n\n\nCodegrViz('\ngraph G {\nfontname=\"Helvetica,Arial,sans-serif\"\nnode [fontname=\"Helvetica,Arial,sans-serif\"]\nedge [fontname=\"Helvetica,Arial,sans-serif\"]\nI5 [shape=ellipse,color=red,style=bold,label=\"Caroline Bouvier Kennedy\\nb. 27.11.1957 New York\",image=\"images/165px-Caroline_Kennedy.jpg\",labelloc=b];\nI1 [shape=box,color=blue,style=bold,label=\"John Fitzgerald Kennedy\\nb. 29.5.1917 Brookline\\nd. 22.11.1963 Dallas\",image=\"images/kennedyface.jpg\",labelloc=b];\nI6 [shape=box,color=blue,style=bold,label=\"John Fitzgerald Kennedy\\nb. 25.11.1960 Washington\\nd. 16.7.1999 over the Atlantic Ocean, near Aquinnah, MA, USA\",image=\"images/180px-JFKJr2.jpg\",labelloc=b];\nI7 [shape=box,color=blue,style=bold,label=\"Patrick Bouvier Kennedy\\nb. 7.8.1963\\nd. 9.8.1963\"];\nI2 [shape=ellipse,color=red,style=bold,label=\"Jaqueline Lee Bouvier\\nb. 28.7.1929 Southampton\\nd. 19.5.1994 New York City\",image=\"images/jacqueline-kennedy-onassis.jpg\",labelloc=b];\nI8 [shape=box,color=blue,style=bold,label=\"Joseph Patrick Kennedy\\nb. 6.9.1888 East Boston\\nd. 16.11.1969 Hyannis Port\",image=\"images/1025901671.jpg\",labelloc=b];\nI10 [shape=box,color=blue,style=bold,label=\"Joseph Patrick Kennedy Jr\\nb. 1915\\nd. 1944\"];\nI11 [shape=ellipse,color=red,style=bold,label=\"Rosemary Kennedy\\nb. 13.9.1918\\nd. 7.1.2005\",image=\"images/rosemary.jpg\",labelloc=b];\nI12 [shape=ellipse,color=red,style=bold,label=\"Kathleen Kennedy\\nb. 1920\\nd. 1948\"];\nI13 [shape=ellipse,color=red,style=bold,label=\"Eunice Mary Kennedy\\nb. 10.7.1921 Brookline\"];\nI9 [shape=ellipse,color=red,style=bold,label=\"Rose Elizabeth Fitzgerald\\nb. 22.7.1890 Boston\\nd. 22.1.1995 Hyannis Port\",image=\"images/Rose_kennedy.JPG\",labelloc=b];\nI15 [shape=box,color=blue,style=bold,label=\"Aristotle Onassis\"];\nI3 [shape=box,color=blue,style=bold,label=\"John Vernou Bouvier III\\nb. 1891\\nd. 1957\",image=\"images/BE037819.jpg\",labelloc=b];\nI4 [shape=ellipse,color=red,style=bold,label=\"Janet Norton Lee\\nb. 2.10.1877\\nd. 3.1.1968\",image=\"images/n48862003257_1275276_1366.jpg\",labelloc=b];\n I1 -- I5  [style=bold,color=blue]; \n I1 -- I6  [style=bold,color=orange]; \n I2 -- I6  [style=bold,color=orange]; \n I1 -- I7  [style=bold,color=orange]; \n I2 -- I7  [style=bold,color=orange]; \n I1 -- I2  [style=bold,color=violet]; \n I8 -- I1  [style=bold,color=blue]; \n I8 -- I10  [style=bold,color=orange]; \n I9 -- I10  [style=bold,color=orange]; \n I8 -- I11  [style=bold,color=orange]; \n I9 -- I11  [style=bold,color=orange]; \n I8 -- I12  [style=bold,color=orange]; \n I9 -- I12  [style=bold,color=orange]; \n I8 -- I13  [style=bold,color=orange]; \n I9 -- I13  [style=bold,color=orange]; \n I8 -- I9  [style=bold,color=violet]; \n I9 -- I1  [style=bold,color=red]; \n I2 -- I5  [style=bold,color=red]; \n I2 -- I15  [style=bold,color=violet]; \n I3 -- I2  [style=bold,color=blue]; \n I3 -- I4  [style=bold,color=violet]; \n I4 -- I2  [style=bold,color=red]; \n}')"
  },
  {
    "objectID": "Misc/Visuals_Interactives/ALM_Shiny.html",
    "href": "Misc/Visuals_Interactives/ALM_Shiny.html",
    "title": "ALM Shiny App Code",
    "section": "",
    "text": "Shiny App Simulating ALM and EXAM  \n\n\nYou can play with the embedded version of the app below, or go to direct link\nYou can adjust the values of the Association parameter (i.e. the c parameter), and the Update parameter, (i.e. the learning rate parameter). The App also allows you to control the number and location of training instances. And the shape of the true function (linear, quadratic or exponential)\n\n\nAlternatively, you can run the app locally by copying the code below into a .R file.\n\nShow App Codepacman::p_load(tidyverse,shiny,reactable,shinydashboard,shinydashboardPlus)\n\ninput.activation &lt;- function(x.target, association.parameter) {\n    return(exp(-1 * association.parameter * (x.target - x.plotting)^2))\n}\n\noutput.activation &lt;- function(x.target, weights, association.parameter) {\n    return(weights %*% input.activation(x.target, association.parameter))\n}\n\nmean.prediction &lt;- function(x.target, weights, association.parameter) {\n    probability &lt;- output.activation(x.target, weights, association.parameter) / sum(output.activation(x.target, weights, association.parameter))\n    return(y.plotting %*% probability)\n}\n# function to generate exam predictions\nexam.prediction &lt;- function(x.target, weights, association.parameter) {\n    trainVec &lt;- sort(unique(x.learning))\n    nearestTrain &lt;- trainVec[which.min(abs(trainVec - x.target))]\n    aresp &lt;- mean.prediction(nearestTrain, weights, association.parameter)\n    xUnder &lt;- ifelse(min(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) - 1])\n    xOver &lt;- ifelse(max(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) + 1])\n    mUnder &lt;- mean.prediction(xUnder, weights, association.parameter)\n    mOver &lt;- mean.prediction(xOver, weights, association.parameter)\n    exam.output &lt;- round(aresp + ((mOver - mUnder) / (xOver - xUnder)) * (x.target - nearestTrain), 3)\n    exam.output\n}\n\nupdate.weights &lt;- function(x.new, y.new, weights, association.parameter, update.parameter) {\n    y.feedback.activation &lt;- exp(-1 * association.parameter * (y.new - y.plotting)^2)\n    x.feedback.activation &lt;- output.activation(x.new, weights, association.parameter)\n    return(weights + update.parameter * (y.feedback.activation - x.feedback.activation) %*% t(input.activation(x.new, association.parameter)))\n}\n\nlearn.alm &lt;- function(y.learning, association.parameter = 0.05, update.parameter = 0.5) {\n    weights &lt;- matrix(rep(0.00, length(y.plotting) * length(x.plotting)), nrow = length(y.plotting), ncol = length(x.plotting))\n    for (i in 1:length(y.learning)) {\n        weights &lt;- update.weights(x.learning[i], y.learning[i], weights, association.parameter, update.parameter)\n        weights[weights &lt; 0] &lt;- 0\n    }\n    alm.predictions &lt;- sapply(x.plotting, mean.prediction, weights = weights, association.parameter = association.parameter)\n    exam.predictions &lt;- sapply(x.plotting, exam.prediction, weights = weights, association.parameter = association.parameter)\n    return(list(alm.predictions = alm.predictions, exam.predictions = exam.predictions))\n    # return(list(alm.predictions=alm.predictions, exam.predictions=exam.predictions,wmFinal=weights))\n}\n\n\n\nx.plotting &lt;&lt;- seq(0, 90, .5)\ny.plotting &lt;&lt;- seq(0, 210, by = 2)\n# trainOptions=round(seq(1,length(x.plotting),length.out=21),0)\ntrainOptions &lt;- x.plotting[seq(1, 181, by = 4)]\ntrainItems &lt;- trainOptions[c(10, 11, 12)]\n\n\n\n# Define UI for application\n# \nui &lt;- dashboardPage(\n\n  skin = \"black\",\n  dashboardHeader(title = \"ALM Simulation App\"),\n  dashboardSidebar(\n    sidebarMenu(\n      menuItem(\"Home\", tabName = \"home\", icon = icon(\"home\")),\n      menuItem(\"Code\", tabName = \"code\", icon = icon(\"code\"))\n    )\n  ),\n  dashboardBody(\n    tabItems(\n      tabItem(tabName = \"home\",\n              fluidRow(\n                column(4,\n                       box(\n                         title = \"Simulation Parameters\",\n                         status = \"primary\",\n                         solidHeader = TRUE,\n                         collapsible = TRUE,\n                         collapsed = FALSE,\n                         width = 12,\n                         sliderInput(\"assoc\", \"Association Parameter (c):\",\n                                     min = .001, max = 1, value = 0.5, step = 0.01),\n                         sliderInput(\"update\", \"Update Parameter:\",\n                                     min = 0, max = 1, value = 0.5, step = 0.1),\n                         sliderInput(\"trainRep\", \"Training Repetitions Per Item:\",\n                                     min = 1, max = 200, value = 1, step = 1),\n                         sliderInput(\"Noise\",\"Noise Level:\",\n                                     min = 0, max = 50, value = 0.00, step = 1),\n                         checkboxGroupInput(\"trainItems\", \"Training Items:\", choices = trainOptions, selected = trainOptions[c(10,15,35)],inline=TRUE),\n                         # radio buttons for selecting function form\n                         radioButtons(\"functionForm\", \"Function Form:\",\n                                      choices = c(\"Linear\", \"Quadratic\", \"Exponential\"),\n                                      selected = \"Quadratic\"),\n                        # numericInput(\"nRep\", \"Number of Replications:\", value = 1, min = 1, max = 100),\n                         actionButton(\"run\", \"Run Simulation\")\n                       )\n                ),\n                column(8,\n                       box(\n                         title = \"Model Performance\",\n                         status = \"primary\",\n                         solidHeader = TRUE,\n                         collapsible = TRUE,\n                         collapsed = FALSE,\n                          width = 12,\n                         plotOutput(\"plot\"),\n                         h5(\"*Dashed line shows true function. Red shows ALM, and blue depicts EXAM predictions*\"),\n                         h4(\"Average Model Performance\"),\n                         reactableOutput(\"table\"),\n                         h4(\"Model Performance by Item Type\"),\n                         reactableOutput(\"table2\")\n                       )\n                )\n              )\n      ),\n      tabItem(tabName = \"code\",\n              fluidRow(\n                column(12,\n                       box(\n                         title = \"Code\",\n                         status = \"primary\",\n                         solidHeader = TRUE,\n                         collapsible = TRUE,\n                         collapsed = FALSE,\n                         width = 12,\n                         verbatimTextOutput(\"code\")\n                       )\n                )\n                )\n        )\n    )\n    )\n)\n\n# Define server \n\n\n\nserver &lt;- function(input, output, session) {\n  \n  nRep=1\n  user_choice &lt;- eventReactive(input$run, {\n    return(list(assoc = input$assoc, update = input$update, Noise=input$Noise,\n                functionForm=input$functionForm,trainRep = as.numeric(input$trainRep),\n                trainItems = input$trainItems))\n    \n  }, ignoreNULL = FALSE)\n  \n\n    output_df &lt;- eventReactive(input$run, {\n      uc &lt;- reactive({user_choice()})\n    if (uc()$functionForm == \"Linear\") {\n      f.plotting &lt;&lt;- as.numeric(x.plotting * 2.2 + 30)\n    } else if (uc()$functionForm == \"Quadratic\") {\n      f.plotting &lt;&lt;- as.numeric(210 - ((x.plotting - 50)^2) / 12)\n    } else if (uc()$functionForm == \"Exponential\") {\n      # f.plotting&lt;&lt;-as.numeric(scale(200*(1-exp(-x.plotting/25))))\n      f.plotting &lt;&lt;- as.numeric(200 * (1 - exp(-x.plotting / 25)))\n    }\n    trainItems &lt;- as.numeric(uc()$trainItems)\n    y.plotting &lt;&lt;- seq(0, max(f.plotting), by = 1)\n    x.learning &lt;&lt;- rep(trainItems, times = uc()$trainRep)\n    f.learning &lt;&lt;- rep(f.plotting[which(x.plotting %in% trainItems)], times = uc()$trainRep)\n    # print(x.learning)\n    # print(f.learning)\n    # print(uc()$trainRep)\n    # print(trainItems)\n    # print(uc()$functionForm)\n    \n    \n    output_list &lt;- replicate(nRep, list(learn.alm(f.learning + rnorm(length(f.learning), sd = uc()$Noise),\n                                                  association.parameter = uc()$assoc, update.parameter = uc()$update)))\n    \n    output_df &lt;- lapply(output_list, function(x) as.data.frame(x))\n    #output_df &lt;- lapply(output_list, function(x) lapply(x, as.data.frame)) # 10 dfs x 9 lists\n    output_df &lt;- Reduce(rbind, output_df) %&gt;% mutate(x = x.plotting, y = f.plotting)\n    #output_df &lt;- lapply(output_df, function(x) Reduce(rbind,x))# 1 df x 9 lists\n    output_df &lt;- output_df %&gt;%\n      pivot_longer(names_to = \"Model\", values_to = \"Prediction\", cols = c(alm.predictions, exam.predictions)) %&gt;%\n      rbind(data.frame(data.frame(x = x.plotting, y = f.plotting, Model = \"True Function\", Prediction = f.plotting)), .)\n    #str(output_df)\n    return(output_df)\n    \n    }, ignoreNULL = FALSE)\n    \n    output$plot &lt;- renderPlot({\n      \n      output_df2 &lt;- reactive({output_df()})\n      ggplot(data = output_df2(), aes(x = x, y = Prediction,color=Model),alpha=.2) + \n        geom_line(aes(linetype=Model,alpha=Model)) + \n        geom_point(data = data.frame(x.learning, f.learning), \n                   aes(x = x.learning,y = f.learning),color=\"black\",size=4,shape=4) +\n        # geom_line(data = data.frame(x.plotting, f.plotting), \n        #           aes(x = x.plotting, y = f.plotting),linetype=2, color = \"black\",alpha=.3) + \n        scale_color_manual(values = c(\"red\", \"blue\", \"black\"))+\n        scale_alpha_manual(values=c(.8,.8,.4))+\n        scale_linetype_manual(values=c(1,1,2))+\n        ylim(c(0,250))#+\n        # ggtitle(paste(\"Association Parameter:\", user_choice()$assoc, \" Update Parameter:\", \n        #               uc$update, \" Train Reps:\", \n        #               uc$trainRep, \" Noise:\", uc$Noise))\n    }) \n    # table 1 reports the summary stats for all items. Table uses GT library to make gt table\n    output$table &lt;- renderReactable({\n      output_df &lt;- output_df()\n      output_df() %&gt;% group_by(Model) %&gt;% filter(Model !=\"True Function\") %&gt;%\n        summarise(MeanDeviation = mean(abs(Prediction - y)), \n                  RMSD = sqrt(mean((Prediction -y)^2)),Correlation = cor(Prediction, y)) %&gt;%\n        mutate(across(where(is.numeric), round, 1)) %&gt;%\n        reactable::reactable(compact=TRUE,bordered = TRUE, highlight = TRUE, resizable=TRUE)\n    })\n    # table 2 reports the summary stats separately for training items, interpolation items, and extrapolation items\n    output$table2 &lt;- renderReactable({\n      uc &lt;- reactive({user_choice()})\n      output_df() %&gt;% filter(Model !=\"True Function\") %&gt;% \n        mutate(ItemType = ifelse(x %in% x.learning, \"Training\", ifelse(x &gt; min(x.learning) & x &lt; max(x.learning), \"Interpolation\", \"Extrapolation\"))) %&gt;%\n        group_by(ItemType,Model) %&gt;%\n        summarise(MeanDeviation = mean(abs(Prediction - y)), \n                  RMSD = sqrt(mean((Prediction -y)^2)),Correlation = cor(Prediction, y),\n                  .groups=\"keep\") %&gt;% \n        mutate(across(where(is.numeric), round, 1)) %&gt;%\n        reactable::reactable(compact=TRUE,bordered = TRUE, highlight = TRUE, resizable=TRUE) \n    })\n    \n    \n    output$code &lt;- renderPrint({\n      # code to implement the ALM and EXAM models\n      # code to generate data\n      # code to run models\n      # code to format output\n      cat(\" input.activation&lt;-function(x.target, association.parameter){\n  return(exp(-1*association.parameter*(x.target-x.plotting)^2))\n}\n\noutput.activation&lt;-function(x.target, weights, association.parameter){\n  return(weights%*%input.activation(x.target, association.parameter))\n}\n\nmean.prediction&lt;-function(x.target, weights, association.parameter){\n  probability&lt;-output.activation(x.target, weights, association.parameter)/sum(output.activation(x.target, weights, association.parameter))\n  return(y.plotting%*%probability)\n}\n# function to generate exam predictions\nexam.prediction&lt;-function(x.target, weights, association.parameter){\n  trainVec = sort(unique(x.learning))\n  nearestTrain = trainVec[which.min(abs(trainVec-x.target))]\n  aresp = mean.prediction(nearestTrain, weights, association.parameter)\n  xUnder = ifelse(min(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) - 1])\n  xOver = ifelse(max(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) + 1])\n  mUnder = mean.prediction(xUnder, weights, association.parameter)\n  mOver = mean.prediction(xOver, weights, association.parameter)\n  exam.output = round(aresp + ((mOver - mUnder) / (xOver - xUnder)) * (x.target - nearestTrain), 3)\n  exam.output\n}\n\nupdate.weights&lt;-function(x.new, y.new, weights, association.parameter, update.parameter){\n  y.feedback.activation&lt;-exp(-1*association.parameter*(y.new-y.plotting)^2)\n  x.feedback.activation&lt;-output.activation(x.new, weights, association.parameter)\n  return(weights+update.parameter*(y.feedback.activation-x.feedback.activation)%*%t(input.activation(x.new, association.parameter)))\n}\n\nlearn.alm&lt;-function(y.learning, association.parameter=0.05, update.parameter=0.5){\n  weights&lt;-matrix(rep(0.00, length(y.plotting)*length(x.plotting)), nrow=length(y.plotting), ncol=length(x.plotting))\n  for (i in 1:length(y.learning)){\n    weights&lt;-update.weights(x.learning[i], y.learning[i], weights, association.parameter, update.parameter)\n    weights[weights&lt;0]=0\n  }\n  alm.predictions&lt;-sapply(x.plotting, mean.prediction, weights=weights, association.parameter=association.parameter)\n  exam.predictions &lt;- sapply(x.plotting, exam.prediction, weights=weights, association.parameter=association.parameter)\n  return(list(alm.predictions=alm.predictions, exam.predictions=exam.predictions))\n  #return(list(alm.predictions=alm.predictions, exam.predictions=exam.predictions,wmFinal=weights))\n}\n\n    \")\n    })\n    \n}\n\n\n\n# Run the application\n\n\nshinyApp(ui, server)",
    "crumbs": [
      "Interactive",
      "ALM Shiny App Code"
    ]
  },
  {
    "objectID": "Misc/Distributional_Explore.html",
    "href": "Misc/Distributional_Explore.html",
    "title": "Distributional_Explorations",
    "section": "",
    "text": "Codepacman::p_load(tidyverse,tidybayes,brms,bayesplot,broom,broom.mixed,lme4,emmeans,here,knitr,kableExtra,gt,gghalves,patchwork,ggforce,ggdist,moments)\ne1 &lt;- readRDS(here(\"data/e1_08-21-23.rds\"))\nsource(here(\"Functions/Display_Functions.R\"))\nsource(here(\"Functions/org_functions.R\"))\ntest &lt;- e1 |&gt; \n  filter(expMode2 == \"Test\") |&gt; \n  group_by(vb) |&gt; \n  mutate(distS = as.numeric(scale(dist, scale = FALSE)), \n         distS2 = custom_scale(dist))\n\noptions(brms.backend=\"cmdstanr\",mc.cores=4)\n\ntest %&gt;% group_by(condit) |&gt; summarise(mean=mean(dist),sd=sd(dist),sk=moments::skewness(dist)) \ntest %&gt;% group_by(vb) |&gt; summarise(mean=mean(dist),sd=sd(dist),sk=moments::skewness(dist)) \n\n\n\nCode# test |&gt; ggplot(aes(x=dist))+geom_histogram() + facet_wrap(~vb) + ggtitle(\"empirical_dist\")  +\n# test |&gt; ggplot(aes(x=distS))+geom_histogram() + facet_wrap(~vb) + ggtitle(\"centered dist\")  +\n# test |&gt; ggplot(aes(x=distS2))+geom_histogram() + facet_wrap(~vb) + ggtitle(\"scaled dist\")\n\ntest |&gt; filter(id %in% 1:5) |&gt; ggplot(aes(x=dist))+geom_histogram() + facet_wrap(id~vb) + ggtitle(\"empirical_dist\")  \nplot(density(test$vx))\nplot(density(test$dist))\n\n\ntest |&gt; ggplot(aes(x=dist))+geom_density() + facet_wrap(~vb) + ggtitle(\"empirical_dist\") \ntest |&gt; ggplot(aes(x=vx))+geom_density() + facet_wrap(~vb) + ggtitle(\"empirical_dist\") \n\n\n\nCodesk1 &lt;- brm(dist ~ vb,family=skew_normal(),data=test,iter=800,chains=2)\ng1 &lt;- brm(dist ~ vb,family=gaussian(),data=test,iter=800,chains=2)\nga2 &lt;- brm(dist+.01 ~ vb,family=Gamma(),data=test,iter=800,chains=2)\nln1 &lt;- brm(dist+.01 ~ vb,family=lognormal(),data=test,iter=800,chains=2)\nln2 &lt;- brm(dist+.0001 ~ vb,family=lognormal(link=\"inverse\"),data=test,iter=800,chains=2)\n\ng2 &lt;- brm(bf(dist+.001|trunc(lb=0) ~ vb),data=testS,iter=800,chains=2,family=gaussian())\nbayesplot::ppc_dens_overlay_grouped(testS$dist,yrep=posterior_predict(g2,ndraws=200),group=testS$vb)\npp_check(g2,type=\"stat_grouped\",ndraws=200, group=\"vb\",stat=\"mean\")\n\n\n\n\nbayesplot::ppc_dens_overlay_grouped(test$dist,yrep=posterior_predict(sk1,ndraws=200),group=test$vb)\nbayesplot::ppc_dens_overlay_grouped(test$dist,yrep=posterior_predict(g1,ndraws=200),group=test$vb)\nbayesplot::ppc_dens_overlay_grouped(test$dist,yrep=posterior_predict(ga2,ndraws=200),group=test$vb)\nbayesplot::ppc_dens_overlay_grouped(test$dist,yrep=posterior_predict(ln1,ndraws=200),group=test$vb)\n\n\n\nbayes_R2(g1)\nbayes_R2(ga1)\nbayes_R2(sk1)\nbayes_R2(sk1)\nbayes_R2(g1S)\n\n\n#testS &lt;- test %&gt;% group_by(id,vb) |&gt; filter(id %in% c(\"1\",\"2\",\"139\")) |&gt; select(id,vb,gt.stage,trial,condit,vx,dist,distS,distS2)\ntestS &lt;- test %&gt;% group_by(id,vb) |&gt; filter(id %in% 1:15) |&gt; select(id,vb,gt.stage,trial,condit,vx,dist,distS,distS2)\n\ntestS |&gt; ggplot(aes(x=trial,y=dist,col=vb))+geom_line()+facet_wrap(~id)\ntestS |&gt; ggplot(aes(x=trial,y=distS2,col=vb))+geom_line()+facet_wrap(~id)\n\n\n\ng1S &lt;- brm(distS ~ 0+ vb + condit,family=gaussian(),data=test,iter=1000,chains=4)\nbayesplot::ppc_dens_overlay_grouped(test$distS,yrep=posterior_predict(g1S,ndraws=200),group=test$vb)\n\ng1S2 &lt;- brm(distS2 ~ vb,family=gaussian(),data=test,iter=1000,chains=4)\nbayesplot::ppc_dens_overlay_grouped(test$distS2,yrep=posterior_predict(g1S2,ndraws=200),group=test$vb)\n\n\ng1S_F &lt;- brm(distS ~ 0+ vb + condit + (0+vb|id),family=gaussian(),data=test,iter=1000,chains=4,\n             file=paste0(here::here(\"data/model_cache\",\"e1_test_centeredDistS\")))\n\nbayesplot::ppc_dens_overlay_grouped(test$distS,yrep=posterior_predict(g1S_F,ndraws=200),group=test$vb)\nbayesplot::ppc_dens_overlay_grouped(test$distS,yrep=posterior_predict(g1S_F,ndraws=200),group=test$vb)\n\n\n\ng1S_gamma &lt;- brm(dist+.001 ~ 1+ vb + condit + (0+vb|id),family=Gamma(),data=test,iter=1000,chains=4,\n             file=paste0(here::here(\"data/model_cache\",\"e1_test_Gamma\")))\nbayesplot::ppc_dens_overlay_grouped(test$dist,yrep=posterior_predict(g1S_gamma,ndraws=200),group=test$vb)\n\npp_check(g1S_weibull)+ xlim(c(-300,300))\n\n\ng1S_exG &lt;- brm(dist ~ 0 + vb + condit + (0+vb|id),family=exgaussian(),data=test,iter=1000,chains=4,\n             file=paste0(here::here(\"data/model_cache\",\"e1_test_exgauss\")))\nbayesplot::ppc_dens_overlay_grouped(test$dist,yrep=posterior_predict(g1S_exG,ndraws=200),group=test$vb)"
  },
  {
    "objectID": "Analysis/e3_test.html",
    "href": "Analysis/e3_test.html",
    "title": "HTW E3 Testing",
    "section": "",
    "text": "The major manipulation adjustment of experiment 3 is for participants to receive ordinal feedback during training, in contrast to the continuous feedback of the earlier experiments. Ordinal feedback informs participants whether a throw was too soft, too hard, or fell within the target velocity range. Experiment 3 participants were randomly assigned to both a training condition (Constant vs. Varied) and a Band Order condition (original order used in Experiment 1, or the Reverse order of Experiment 2).\nResults\nTesting Phase - No feedback.\nIn the first part of the testing phase, participants are tested from each of the velocity bands, and receive no feedback after each throw. Note that these no-feedback testing trials are identical to those of Experiment 1 and 2, as the ordinal feedback only occurs during the training phase, and final testing phase, of Experiment 3.\nDeviation From Target Band\nDescriptive summaries testing deviation data are provided in Table 1 and Figure 1. To model differences in accuracy between groups, we fit Bayesian mixed effects regression models to the trial level data from the testing phase. The primary model predicted the absolute deviation from the target velocity band (dist) as a function of training condition (condit), target velocity band (band), and their interaction, with random intercepts and slopes for each participant (id).\n\nCoderesultOrig &lt;- test_summary_table(testE3 |&gt; filter(bandOrder==\"Original\"), \"dist\",\"Deviation\", mfun = list(mean = mean, median = median, sd = sd))\nresultOrig$constant |&gt; kable() \nresultOrig$varied |&gt; kable() \nresultRev &lt;- test_summary_table(testE3 |&gt; filter(bandOrder==\"Reverse\"), \"dist\",\"Deviation\", mfun = list(mean = mean, median = median, sd = sd))\nresultRev$constant |&gt; kable() \nresultRev$varied |&gt; kable() \n\n\nTable 1: Testing Deviation - Empirical Summary\n\n\n\n\n(a) Constant Testing - Deviation\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n396\n325\n350\n\n\n350-550\nExtrapolation\n278\n176\n299\n\n\n600-800\nExtrapolation\n173\n102\n215\n\n\n800-1000\nTrained\n225\n126\n284\n\n\n1000-1200\nExtrapolation\n253\n192\n271\n\n\n1200-1400\nExtrapolation\n277\n210\n262\n\n\n\n\n\n\n\n\n\n\n(b) Varied Testing - Deviation\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n383\n254\n385\n\n\n350-550\nExtrapolation\n287\n154\n318\n\n\n600-800\nExtrapolation\n213\n140\n244\n\n\n800-1000\nTrained\n199\n142\n209\n\n\n1000-1200\nTrained\n222\n163\n221\n\n\n1200-1400\nTrained\n281\n227\n246\n\n\n\n\n\n\n\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n403\n334\n383\n\n\n350-550\nExtrapolation\n246\n149\n287\n\n\n600-800\nTrained\n155\n82\n209\n\n\n800-1000\nExtrapolation\n207\n151\n241\n\n\n1000-1200\nExtrapolation\n248\n220\n222\n\n\n1200-1400\nExtrapolation\n322\n281\n264\n\n\n\n\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nTrained\n153\n0\n307\n\n\n350-550\nTrained\n147\n55\n258\n\n\n600-800\nTrained\n159\n107\n192\n\n\n800-1000\nExtrapolation\n221\n160\n235\n\n\n1000-1200\nExtrapolation\n244\n185\n235\n\n\n1200-1400\nExtrapolation\n324\n264\n291\n\n\n\n\n\n\n\n\n\nCodetestE3 |&gt;  ggplot(aes(x = vb, y = dist,fill=condit)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) + \n  labs(x=\"Band\", y=\"Deviation From Target\") + facet_wrap(~bandOrder)\n\n\n\n\n\n\nFigure 1: e3. Deviations from target band during testing without feedback stage.\n\n\n\n\n\nCode#contrasts(test$condit) \n\n# contrasts(testE3$vb)\n\nmodelName &lt;- \"e3_testDistBand_RF_5K\"\ne3_distBMM &lt;- brm(dist ~ condit * bandOrder * bandInt + (1 + bandInt|id),\n                      data=testE3,file=paste0(here::here(\"data/model_cache\",modelName)),\n                      iter=5000,chains=4)\n\n\n#bayestestR::describe_posterior(e3_distBMM)\nm1 &lt;- as.data.frame(describe_posterior(e3_distBMM, centrality = \"Mean\"))\nm2 &lt;- fixef(e3_distBMM)\nmp3 &lt;- m1[, c(1,2,4,5,6)]\ncolnames(mp3) &lt;- c(\"Term\", \"Estimate\",\"95% CrI Lower\", \"95% CrI Upper\", \"pd\")\n                        \nmp3 |&gt; mutate(across(where(is.numeric), \\(x) round(x, 2))) |&gt;\n  tibble::remove_rownames() |&gt; \n  mutate(Term = stringr::str_replace_all(Term, \"b_bandInt\", \"Band\")) |&gt;\n  kable(escape=F,booktabs=T)\ncd1 &lt;- get_coef_details(e3_distBMM, \"conditVaried\")\nsc1 &lt;- get_coef_details(e3_distBMM, \"bandInt\")\nintCoef1 &lt;- get_coef_details(e3_distBMM, \"conditVaried:bandInt\")\n\n\nTable 2: Experiment 3. Bayesian Mixed Model predicting absolute deviation as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\n\n\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nb_Intercept\n342.85\n260.18\n426.01\n1.00\n\n\nb_conditVaried\n7.38\n-116.96\n133.20\n0.54\n\n\nb_bandOrderReverse\n-64.99\n-179.19\n49.75\n0.86\n\n\nBand\n-0.13\n-0.22\n-0.04\n1.00\n\n\nb_conditVaried:bandOrderReverse\n-185.30\n-360.16\n-8.89\n0.98\n\n\nb_conditVaried:bandInt\n0.00\n-0.15\n0.13\n0.52\n\n\nb_bandOrderReverse:bandInt\n0.11\n-0.01\n0.24\n0.96\n\n\nb_conditVaried:bandOrderReverse:bandInt\n0.19\n-0.01\n0.38\n0.97\n\n\n\n\n\n\n\n\nThe effect of training condition in Experiment 3 showed a similar pattern to Experiment 2, with the varied group tending to have lower deviation than the constant group (β = 7.38, 95% CrI [-116.96, 133.2]), with 97% of the posterior distribution falling under 0.\n(NEED TO CONTROL FOR BAND ORDER HERE)\n\nCodee3_distBMM |&gt; emmeans( ~condit * bandInt * bandOrder, \n                       at = list(bandInt = c(100, 350, 600, 800, 1000, 1200))) |&gt;\n  gather_emmeans_draws() |&gt;\n  ggplot(aes(x = bandInt, y = .value, color = condit, fill = condit)) + \n  stat_dist_pointinterval() +\n  stat_lineribbon(alpha = .25, size = 1, .width = c(.95)) +\n    ylab(\"Predicted Deviation\") + xlab(\"Velocity Band\")+\n  scale_x_continuous(breaks = c(100, 350, 600, 800, 1000, 1200), \n                     labels = levels(testE3$vb), \n                     limits = c(0, 1400)) +\n  facet_wrap(~bandOrder) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\nLoading required namespace: rstanarm\n\n\n\n\n\n\n\nFigure 2: e3. Conditioinal Effect of Training Condition and Band. Ribbon indicated 95% Credible Intervals.\n\n\n\n\nDiscrimination between Velocity Bands\nIn addition to accuracy/deviation. We also assessed the ability of participants to reliably discriminate between the velocity bands (i.e. responding differently when prompted for band 600-800 than when prompted for band 150-350). Table 3 shows descriptive statistics of this measure, and Figure 1 visualizes the full distributions of throws for each combination of condition and velocity band. To quantify discrimination, we again fit Bayesian Mixed Models as above, but this time the dependent variable was the raw x velocity generated by participants.\n\\[\\begin{equation}\nvx_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot bandInt_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot bandInt_{ij} + b_{0i} + b_{1i} \\cdot bandInt_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\nCode# testE3 |&gt; filter(bandOrder==\"Original\")|&gt; group_by(id,vb,condit) |&gt; plot_distByCondit()\n# testE3 |&gt; filter(bandOrder==\"Reverse\")|&gt; group_by(id,vb,condit) |&gt; plot_distByCondit() +ggtitle(\"test\")\n\ntestE3 |&gt; group_by(id,vb,condit,bandOrder) |&gt; plot_distByCondit() + \n  facet_wrap(bandOrder~condit,scale=\"free_x\") \n\n\n\n\n\n\nFigure 3: e3 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\n\n\n\n\nCoderesultOrig &lt;- test_summary_table(testE3 |&gt; filter(bandOrder==\"Original\"), \"vx\",\"X Velocity\", mfun = list(mean = mean, median = median, sd = sd))\nresultOrig$constant |&gt; kable() \nresultOrig$varied |&gt; kable() \nresultRev &lt;- test_summary_table(testE3 |&gt; filter(bandOrder==\"Reverse\"), \"vx\",\"X Velocity\", mfun = list(mean = mean, median = median, sd = sd))\nresultRev$constant |&gt; kable() \nresultRev$varied |&gt; kable() \n\n\nTable 3: Testing vx - Empirical Summary\n\n\n\n\n\n(a) Constant Testing - vx\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n680\n625\n370\n\n\n350-550\nExtrapolation\n771\n716\n357\n\n\n600-800\nExtrapolation\n832\n786\n318\n\n\n800-1000\nTrained\n1006\n916\n417\n\n\n1000-1200\nExtrapolation\n1149\n1105\n441\n\n\n1200-1400\nExtrapolation\n1180\n1112\n443\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Varied Testing - vx\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n667\n554\n403\n\n\n350-550\nExtrapolation\n770\n688\n383\n\n\n600-800\nExtrapolation\n869\n814\n358\n\n\n800-1000\nTrained\n953\n928\n359\n\n\n1000-1200\nTrained\n1072\n1066\n388\n\n\n1200-1400\nTrained\n1144\n1093\n426\n\n\n\n\n\n\n\n\n\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n684\n634\n406\n\n\n350-550\nExtrapolation\n729\n679\n350\n\n\n600-800\nTrained\n776\n721\n318\n\n\n800-1000\nExtrapolation\n941\n883\n387\n\n\n1000-1200\nExtrapolation\n1014\n956\n403\n\n\n1200-1400\nExtrapolation\n1072\n1014\n442\n\n\n\n\n\n\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nTrained\n392\n270\n343\n\n\n350-550\nTrained\n540\n442\n343\n\n\n600-800\nTrained\n642\n588\n315\n\n\n800-1000\nExtrapolation\n943\n899\n394\n\n\n1000-1200\nExtrapolation\n1081\n1048\n415\n\n\n1200-1400\nExtrapolation\n1185\n1129\n500\n\n\n\n\n\n\n\n\n\nCodee3_vxBMM &lt;- brm(vx ~ condit * bandOrder * bandInt + (1 + bandInt|id),\n                        data=testE3,file=paste0(here::here(\"data/model_cache\", \"e3_testVxBand_RF_5k\")),\n                        iter=5000,chains=4,silent=0,\n                        control=list(adapt_delta=0.94, max_treedepth=13))\n\n# mt4 &lt;-GetModelStats(e3_vxBMM ) |&gt; kable(escape=F,booktabs=T)\n# mt4\n\n#bayestestR::describe_posterior(e3_vxBMM)\nm1 &lt;- as.data.frame(describe_posterior(e3_vxBMM, centrality = \"Mean\"))\nm2 &lt;- fixef(e3_vxBMM)\nmp3 &lt;- m1[, c(1,2,4,5,6)]\ncolnames(mp3) &lt;- c(\"Term\", \"Estimate\",\"95% CrI Lower\", \"95% CrI Upper\", \"pd\")\n                        \nmp3 |&gt; mutate(across(where(is.numeric), \\(x) round(x, 2))) |&gt;\n  tibble::remove_rownames() |&gt; \n  mutate(Term = stringr::str_replace_all(Term, \"b_bandInt\", \"Band\")) |&gt;\n  kable(escape=F,booktabs=T)\ncd1 &lt;- get_coef_details(e3_vxBMM, \"conditVaried\")\nsc1 &lt;- get_coef_details(e3_vxBMM, \"bandInt\")\nintCoef1 &lt;- get_coef_details(e3_vxBMM, \"conditVaried:bandInt\")\n\n\nTable 4: Experiment 3. Bayesian Mixed Model Predicting Vx as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\n\n\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nb_Intercept\n601.83\n504.75\n699.42\n1.00\n\n\nb_conditVaried\n12.18\n-134.94\n162.78\n0.56\n\n\nb_bandOrderReverse\n13.03\n-123.89\n144.67\n0.58\n\n\nBand\n0.49\n0.36\n0.62\n1.00\n\n\nb_conditVaried:bandOrderReverse\n-338.15\n-541.44\n-132.58\n1.00\n\n\nb_conditVaried:bandInt\n-0.04\n-0.23\n0.15\n0.67\n\n\nb_bandOrderReverse:bandInt\n-0.10\n-0.27\n0.08\n0.86\n\n\nb_conditVaried:bandOrderReverse:bandInt\n0.42\n0.17\n0.70\n1.00\n\n\n\n\n\n\n\n\nSee Table 4 for the full model results.\nSlope estimates for experiment 3 suggest that participants were capable of distinguishing between velocity bands even when provided only ordinal feedback during training (β = 0.49, 95% CrI [0.36, 0.62]). Unlike the previous two experiments, the posterior distribution for the interaction between condition and band was consistently positive, suggestive of superior discrimination for the varied participants β = -0.04, 95% CrI [-0.23, 0.15].\n\nCodee3_vxBMM |&gt; emmeans( ~condit* bandOrder* bandInt, \n                       at = list(bandInt = c(100, 350, 600, 800, 1000, 1200))) |&gt;\n  gather_emmeans_draws() |&gt;\n  ggplot(aes(x = bandInt, y = .value, color = condit, fill = condit)) + \n  stat_dist_pointinterval() +\n  stat_lineribbon(alpha = .25, size = 1, .width = c(.95)) +\n  ylab(\"Predicted X Velocity\") + xlab(\"Band\")+\n  scale_x_continuous(breaks = c(100, 350, 600, 800, 1000, 1200), \n                     labels = levels(testE3$vb), \n                     limits = c(0, 1400)) +\n  facet_wrap(~bandOrder) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\n\n\n\n\n\nFigure 4: Conditional effect of training condition and Band. Ribbons indicate 95% HDI.\n\n\n\n\n\nCodenew_data_grid=map_dfr(1, ~data.frame(unique(testE3[,c(\"id\",\"condit\",\"bandInt\")]))) |&gt; \n  dplyr::arrange(id,bandInt) |&gt; \n  mutate(condit_dummy = ifelse(condit == \"Varied\", 1, 0)) \n\nindv_coefs &lt;- as_tibble(coef(e3_vxBMM)$id, rownames=\"id\")|&gt; \n  select(id, starts_with(\"Est\")) |&gt;\n  left_join(e3Sbjs, by=join_by(id) ) \n\n\nfixed_effects &lt;- e3_vxBMM |&gt; \n  spread_draws(`^b_.*`,regex=TRUE) |&gt; arrange(.chain,.draw,.iteration)\n\n\nrandom_effects &lt;- e3_vxBMM |&gt; \n  gather_draws(`^r_id.*$`, regex = TRUE, ndraws = 1500) |&gt; \n  separate(.variable, into = c(\"effect\", \"id\", \"term\"), sep = \"\\\\[|,|\\\\]\") |&gt; \n  mutate(id = factor(id,levels=levels(testE3$id))) |&gt; \n  pivot_wider(names_from = term, values_from = .value) |&gt; arrange(id,.chain,.draw,.iteration)\n\nWarning: Expected 3 pieces. Additional pieces discarded in 585000 rows [1, 2, 3, 4, 5,\n6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].\n\nCode indvDraws &lt;- left_join(random_effects, fixed_effects, by = join_by(\".chain\", \".iteration\", \".draw\")) |&gt; \n  rename(bandInt_RF = bandInt,RF_Intercept=Intercept) |&gt;\n  right_join(new_data_grid, by = join_by(\"id\")) |&gt; \n  mutate(\n    Slope = bandInt_RF+b_bandInt,\n    Intercept= RF_Intercept + b_Intercept,\n    estimate = (b_Intercept + RF_Intercept) + (bandInt*(b_bandInt+bandInt_RF)) + (bandInt * condit_dummy) * `b_conditVaried:bandInt`,\n    SlopeInt = Slope + (`b_conditVaried:bandInt`*condit_dummy)\n  ) \n\nWarning in right_join(rename(left_join(random_effects, fixed_effects, by = join_by(\".chain\", : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\nCode  indvSlopes &lt;- indvDraws |&gt; group_by(id) |&gt; median_qi(Slope,SlopeInt, Intercept,b_Intercept,b_bandInt) |&gt;\n  left_join(e3Sbjs, by=join_by(id)) |&gt; group_by(condit) |&gt;\n    select(id,condit,bandOrder,Intercept,b_Intercept,starts_with(\"Slope\"),b_bandInt, n) |&gt;\n  mutate(rankSlope=rank(Slope)) |&gt; arrange(rankSlope)   |&gt; ungroup()\n \n  \n  indvSlopes |&gt; mutate(Condition=condit) |&gt;  group_by(Condition) |&gt; \n    reframe(enframe(quantile(SlopeInt, c(0.0,0.25, 0.5, 0.75,1)), \"quantile\", \"SlopeInt\")) |&gt; \n  pivot_wider(names_from=quantile,values_from=SlopeInt,names_prefix=\"Q_\") |&gt;\n  group_by(Condition) |&gt;\n  summarise(across(starts_with(\"Q\"), list(mean = mean))) |&gt; kable()\n  indvSlopes |&gt; mutate(Condition=condit) |&gt;  group_by(Condition, bandOrder) |&gt; \n    reframe(enframe(quantile(SlopeInt, c(0.0,0.25, 0.5, 0.75,1)), \"quantile\", \"SlopeInt\")) |&gt; \n  pivot_wider(names_from=quantile,values_from=SlopeInt,names_prefix=\"Q_\") |&gt;\n  group_by(bandOrder,Condition) |&gt;\n  summarise(across(starts_with(\"Q\"), list(mean = mean))) |&gt; kable()\n\n\nTable 5: Slope coefficients by quartile, per condition\n\n\n\n\n\n\n\n\n\n\n\n\nCondition\nQ_0%_mean\nQ_25%_mean\nQ_50%_mean\nQ_75%_mean\nQ_100%_mean\n\n\n\nConstant\n-0.3447875\n0.1785921\n0.4434583\n0.6928841\n1.937316\n\n\nVaried\n-0.3984179\n0.0965310\n0.4254479\n0.7378540\n1.439175\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbandOrder\nCondition\nQ_0%_mean\nQ_25%_mean\nQ_50%_mean\nQ_75%_mean\nQ_100%_mean\n\n\n\nOriginal\nConstant\n-0.3447875\n0.2665602\n0.4386760\n0.6599265\n1.937316\n\n\nOriginal\nVaried\n-0.3240205\n0.1612939\n0.4235077\n0.7093060\n1.338981\n\n\nReverse\nConstant\n-0.2152950\n0.1593070\n0.4576568\n0.7051957\n1.887112\n\n\nReverse\nVaried\n-0.3984179\n0.0118268\n0.4352367\n0.7849845\n1.439175\n\n\n\n\n\n\n\n\nFigure 5 shows the distributions of estimated slopes relating velocity band to x velocity for each participant, ordered from lowest to highest within condition. Slope values are lower overall for varied training compared to constant training. Figure Xb plots the density of these slopes for each condition. The distribution for varied training has more mass at lower values than the constant training distribution. Both figures illustrate the model’s estimate that varied training resulted in less discrimination between velocity bands, evidenced by lower slopes on average.\n\nCodeindvSlopes |&gt; \n  ggplot(aes(y=rankSlope, x=SlopeInt,fill=condit,color=condit)) + \n  geom_pointrange(aes(xmin=SlopeInt.lower , xmax=SlopeInt.upper)) + \n  labs(x=\"Estimated Slope\", y=\"Participant\")  + \n  facet_wrap(~condit) +\n  ggplot(indvSlopes, aes(x = SlopeInt, color = condit)) + \n  geom_density() + labs(x=\"Slope Coefficient\",y=\"Density\") \n\n\n\nindvSlopes |&gt; \n  #left_join(e3Sbjs, by=c(\"id\",\"condit\")) |&gt;\n  ggplot(aes(y=rankSlope, x=SlopeInt,fill=condit,color=condit)) + \n  geom_pointrange(aes(xmin=SlopeInt.lower , xmax=SlopeInt.upper)) + \n  labs(x=\"Estimated Slope\", y=\"Participant\")  + \n  facet_wrap(~bandOrder+condit) + \n  {\n  ggplot(indvSlopes,\n    #left_join(e3Sbjs, by=c(\"id\",\"condit\")), \n    aes(x = SlopeInt, color = condit)) + \n    geom_density() + \n        facet_wrap(~bandOrder) +\n    labs(x=\"Slope Coefficient\",y=\"Density\")  }\n\n\n\n\n\n\n\n\n(a) Slope estimates by participant - ordered from lowest to highest within each condition.\n\n\n\n\n\n\n\n\n\n(b) Destiny of slope coefficients by training group\n\n\n\n\n\nFigure 5: Slope distributions between condition\n\n\n\n\nCodenSbj &lt;- 3\nindvDraws  |&gt; indv_model_plot(indvSlopes, testE3Avg, SlopeInt,rank_variable=Slope,n_sbj=nSbj,\"max\")\nindvDraws |&gt; indv_model_plot(indvSlopes, testE3Avg,SlopeInt, rank_variable=Slope,n_sbj=nSbj,\"min\")\n\n\n\n\n\n\n\n\n(a) subset with largest slopes\n\n\n\n\n\n\n\n\n\n(b) subset with smallest slopes\n\n\n\n\n\nFigure 6: Subset of Varied and Constant Participants with the smallest and largest estimated slope values. Red lines represent the best fitting line for each participant, gray lines are 200 random samples from the posterior distribution. Colored points and intervals at each band represent the empirical median and 95% HDI.\n\n\n\n\n\n\n\n\nFigure 1: e3. Deviations from target band during testing without feedback stage.\nFigure 2: e3. Conditioinal Effect of Training Condition and Band. Ribbon indicated 95% Credible Intervals.\nFigure 3: e3 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\nFigure 4: Conditional effect of training condition and Band. Ribbons indicate 95% HDI.\nFigure 5 (a): Slope estimates by participant - ordered from lowest to highest within each condition.\nFigure 5 (b): Destiny of slope coefficients by training group\nFigure 6 (a): subset with largest slopes\nFigure 6 (b): subset with smallest slopes",
    "crumbs": [
      "Analyses",
      "HTW E3 Testing"
    ]
  },
  {
    "objectID": "Analysis/e3_test.html#results",
    "href": "Analysis/e3_test.html#results",
    "title": "HTW E3 Testing",
    "section": "Results",
    "text": "Results\nTesting Phase - No feedback.\nIn the first part of the testing phase, participants are tested from each of the velocity bands, and receive no feedback after each throw. Note that these no-feedback testing trials are identical to those of Experiment 1 and 2, as the ordinal feedback only occurs during the training phase, and final testing phase, of Experiment 3.\nDeviation From Target Band\nDescriptive summaries testing deviation data are provided in Table 1 and Figure 1. To model differences in accuracy between groups, we fit Bayesian mixed effects regression models to the trial level data from the testing phase. The primary model predicted the absolute deviation from the target velocity band (dist) as a function of training condition (condit), target velocity band (band), and their interaction, with random intercepts and slopes for each participant (id).\nCode```{r}\n#| label: tbl-e3-test-nf-deviation\n#| tbl-cap: \"Testing Deviation - Empirical Summary\"\n#| tbl-subcap: [\"Constant Testing - Deviation\", \"Varied Testing - Deviation\"]\n#| layout-ncol: 2\n\nresultOrig &lt;- test_summary_table(testE3 |&gt; filter(bandOrder==\"Original\"), \"dist\",\"Deviation\", mfun = list(mean = mean, median = median, sd = sd))\nresultOrig$constant \nresultOrig$varied \n\nresultRev &lt;- test_summary_table(testE3 |&gt; filter(bandOrder==\"Reverse\"), \"dist\",\"Deviation\", mfun = list(mean = mean, median = median, sd = sd))\nresultRev$constant \nresultRev$varied \n```\n\n\nTable 1: Testing Deviation - Empirical Summary\n\n\n\n# A tibble: 6 × 5\n  Band      `Band Type`    Mean Median    Sd\n  &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 100-300   Extrapolation   396    325   350\n2 350-550   Extrapolation   278    176   299\n3 600-800   Extrapolation   173    102   215\n4 800-1000  Trained         225    126   284\n5 1000-1200 Extrapolation   253    192   271\n6 1200-1400 Extrapolation   277    210   262\n# A tibble: 6 × 5\n  Band      `Band Type`    Mean Median    Sd\n  &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 100-300   Extrapolation   383    254   385\n2 350-550   Extrapolation   287    154   318\n3 600-800   Extrapolation   213    140   244\n4 800-1000  Trained         199    142   209\n5 1000-1200 Trained         222    163   221\n6 1200-1400 Trained         281    227   246\n# A tibble: 6 × 5\n  Band      `Band Type`    Mean Median    Sd\n  &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 100-300   Extrapolation   403    334   383\n2 350-550   Extrapolation   246    149   287\n3 600-800   Trained         155     82   209\n4 800-1000  Extrapolation   207    151   241\n5 1000-1200 Extrapolation   248    220   222\n6 1200-1400 Extrapolation   322    281   264\n# A tibble: 6 × 5\n  Band      `Band Type`    Mean Median    Sd\n  &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 100-300   Trained         153      0   307\n2 350-550   Trained         147     55   258\n3 600-800   Trained         159    107   192\n4 800-1000  Extrapolation   221    160   235\n5 1000-1200 Extrapolation   244    185   235\n6 1200-1400 Extrapolation   324    264   291\n\n\n\n\n\n\nCodetestE3 |&gt;  ggplot(aes(x = vb, y = dist,fill=condit)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) + \n  labs(x=\"Band\", y=\"Deviation From Target\") + facet_wrap(~bandOrder)\n\n\n\n\n\n\nFigure 1: e3. Deviations from target band during testing without feedback stage.\n\n\n\n\n\nCodemodelName &lt;- \"e3_testDistBand_RF_5K\"\ne3_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id),\n                      data=testE3,file=paste0(here::here(\"data/model_cache\",modelName)),\n                      iter=5000,chains=4)\nmp3 &lt;- GetModelStats(e3_distBMM) |&gt; kable(booktabs=T)\nmp3\ncd1 &lt;- get_coef_details(e3_distBMM, \"conditVaried\")\nsc1 &lt;- get_coef_details(e3_distBMM, \"bandInt\")\nintCoef1 &lt;- get_coef_details(e3_distBMM, \"conditVaried:bandInt\")\n\n\nTable 2: Experiment 3. Bayesian Mixed Model predicting absolute deviation as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n306.47\n243.89\n368.75\n1.00\n\n\nconditVaried\n-90.65\n-182.79\n3.75\n0.97\n\n\nBand\n-0.07\n-0.13\n0.00\n0.97\n\n\ncondit*Band\n0.09\n-0.01\n0.19\n0.96\n\n\n\n\n\n\n\n\n\nThe effect of training condition in Experiment 3 showed a similar pattern to Experiment 2, with the varied group tending to have lower deviation than the constant group (β = -90.65, 95% CrI [-182.79, 3.75]), with 97% of the posterior distribution falling under 0.\n(NEED TO CONTROL FOR BAND ORDER HERE)\n\nCodee3_distBMM |&gt; emmeans( ~condit + bandInt, \n                       at = list(bandInt = c(100, 350, 600, 800, 1000, 1200))) |&gt;\n  gather_emmeans_draws() |&gt;\n  ggplot(aes(x = bandInt, y = .value, color = condit, fill = condit)) + \n  stat_dist_pointinterval() +\n  stat_lineribbon(alpha = .25, size = 1, .width = c(.95)) +\n    ylab(\"Predicted Deviation\") + xlab(\"Velocity Band\")+\n  scale_x_continuous(breaks = c(100, 350, 600, 800, 1000, 1200), \n                     labels = levels(testE3$vb), \n                     limits = c(0, 1400)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\n\n\n\n\n\nFigure 2: e3. Conditioinal Effect of Training Condition and Band. Ribbon indicated 95% Credible Intervals.\n\n\n\n\nDiscrimination between Velocity Bands\nIn addition to accuracy/deviation. We also assessed the ability of participants to reliably discriminate between the velocity bands (i.e. responding differently when prompted for band 600-800 than when prompted for band 150-350). Table 3 shows descriptive statistics of this measure, and Figure 1 visualizes the full distributions of throws for each combination of condition and velocity band. To quantify discrimination, we again fit Bayesian Mixed Models as above, but this time the dependent variable was the raw x velocity generated by participants.\n\\[\\begin{equation}\nvx_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot bandInt_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot bandInt_{ij} + b_{0i} + b_{1i} \\cdot bandInt_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\nCode# testE3 |&gt; filter(bandOrder==\"Original\")|&gt; group_by(id,vb,condit) |&gt; plot_distByCondit()\n# testE3 |&gt; filter(bandOrder==\"Reverse\")|&gt; group_by(id,vb,condit) |&gt; plot_distByCondit() +ggtitle(\"test\")\n\ntestE3 |&gt; group_by(id,vb,condit,bandOrder) |&gt; plot_distByCondit() + \n  facet_wrap(bandOrder~condit,scale=\"free_x\") \n\n\n\n\n\n\nFigure 3: e3 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\n\n\n\n\nCode```{r}\n#| label: tbl-e3-test-nf-vx\n#| tbl-cap: \"Testing vx - Empirical Summary\"\n#| tbl-subcap: [\"Constant Testing - vx\", \"Varied Testing - vx\"]\n#| layout-ncol: 2\n\nresultOrig &lt;- test_summary_table(testE3 |&gt; filter(bandOrder==\"Original\"), \"vx\",\"X Velocity\", mfun = list(mean = mean, median = median, sd = sd))\nresultOrig$constant \nresultOrig$varied \n\nresultRev &lt;- test_summary_table(testE3 |&gt; filter(bandOrder==\"Reverse\"), \"vx\",\"X Velocity\", mfun = list(mean = mean, median = median, sd = sd))\nresultRev$constant \nresultRev$varied \n```\n\n\nTable 3: Testing vx - Empirical Summary\n\n\n\n# A tibble: 6 × 5\n  Band      `Band Type`    Mean Median    Sd\n  &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 100-300   Extrapolation   680    625   370\n2 350-550   Extrapolation   771    716   357\n3 600-800   Extrapolation   832    786   318\n4 800-1000  Trained        1006    916   417\n5 1000-1200 Extrapolation  1149   1105   441\n6 1200-1400 Extrapolation  1180   1112   443\n# A tibble: 6 × 5\n  Band      `Band Type`    Mean Median    Sd\n  &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 100-300   Extrapolation   667    554   403\n2 350-550   Extrapolation   770    688   383\n3 600-800   Extrapolation   869    814   358\n4 800-1000  Trained         953    928   359\n5 1000-1200 Trained        1072   1066   388\n6 1200-1400 Trained        1144   1093   426\n# A tibble: 6 × 5\n  Band      `Band Type`    Mean Median    Sd\n  &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 100-300   Extrapolation   684    634   406\n2 350-550   Extrapolation   729    679   350\n3 600-800   Trained         776    721   318\n4 800-1000  Extrapolation   941    883   387\n5 1000-1200 Extrapolation  1014    956   403\n6 1200-1400 Extrapolation  1072   1014   442\n# A tibble: 6 × 5\n  Band      `Band Type`    Mean Median    Sd\n  &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 100-300   Trained         392    270   343\n2 350-550   Trained         540    442   343\n3 600-800   Trained         642    588   315\n4 800-1000  Extrapolation   943    899   394\n5 1000-1200 Extrapolation  1081   1048   415\n6 1200-1400 Extrapolation  1185   1129   500\n\n\n\n\n\n\nCodee3_vxBMM &lt;- brm(vx ~ condit * bandInt + (1 + bandInt|id),\n                        data=testE3,file=paste0(here::here(\"data/model_cache\", \"e3_testVxBand_RF_5k\")),\n                        iter=5000,chains=4,silent=0,\n                        control=list(adapt_delta=0.94, max_treedepth=13))\nmt4 &lt;-GetModelStats(e3_vxBMM ) |&gt; kable(escape=F,booktabs=T)\nmt4\ncd1 &lt;- get_coef_details(e3_vxBMM, \"conditVaried\")\nsc1 &lt;- get_coef_details(e3_vxBMM, \"bandInt\")\nintCoef1 &lt;- get_coef_details(e3_vxBMM, \"conditVaried:bandInt\")\n\n\nTable 4: Experiment 3. Bayesian Mixed Model Predicting Vx as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n607.67\n536.02\n679.87\n1\n\n\nconditVaried\n-167.76\n-277.14\n-64.08\n1\n\n\nBand\n0.44\n0.35\n0.52\n1\n\n\ncondit*Band\n0.18\n0.06\n0.31\n1\n\n\n\n\n\n\n\n\n\nSee Table 4 for the full model results.\nSlope estimates for experiment 3 suggest that participants were capable of distinguishing between velocity bands even when provided only ordinal feedback during training (β = 0.44, 95% CrI [0.35, 0.52]). Unlike the previous two experiments, the posterior distribution for the interaction between condition and band was consistently positive, suggestive of superior discrimination for the varied participants β = 0.18, 95% CrI [0.06, 0.31].\n\nCodee3_vxBMM |&gt; emmeans( ~condit + bandInt, \n                       at = list(bandInt = c(100, 350, 600, 800, 1000, 1200))) |&gt;\n  gather_emmeans_draws() |&gt;\n  ggplot(aes(x = bandInt, y = .value, color = condit, fill = condit)) + \n  stat_dist_pointinterval() +\n  stat_lineribbon(alpha = .25, size = 1, .width = c(.95)) +\n  ylab(\"Predicted X Velocity\") + xlab(\"Band\")+\n  scale_x_continuous(breaks = c(100, 350, 600, 800, 1000, 1200), \n                     labels = levels(testE3$vb), \n                     limits = c(0, 1400)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\n\n\n\n\n\nFigure 4: Conditional effect of training condition and Band. Ribbons indicate 95% HDI.\n\n\n\n\n\nCodenew_data_grid=map_dfr(1, ~data.frame(unique(testE3[,c(\"id\",\"condit\",\"bandInt\")]))) |&gt; \n  dplyr::arrange(id,bandInt) |&gt; \n  mutate(condit_dummy = ifelse(condit == \"Varied\", 1, 0)) \n\nindv_coefs &lt;- as_tibble(coef(e3_vxBMM)$id, rownames=\"id\")|&gt; \n  select(id, starts_with(\"Est\")) |&gt;\n  left_join(e3Sbjs, by=join_by(id) ) \n\n\nfixed_effects &lt;- e3_vxBMM |&gt; \n  spread_draws(`^b_.*`,regex=TRUE) |&gt; arrange(.chain,.draw,.iteration)\n\n\nrandom_effects &lt;- e3_vxBMM |&gt; \n  gather_draws(`^r_id.*$`, regex = TRUE, ndraws = 1500) |&gt; \n  separate(.variable, into = c(\"effect\", \"id\", \"term\"), sep = \"\\\\[|,|\\\\]\") |&gt; \n  mutate(id = factor(id,levels=levels(testE3$id))) |&gt; \n  pivot_wider(names_from = term, values_from = .value) |&gt; arrange(id,.chain,.draw,.iteration)\n\n\n indvDraws &lt;- left_join(random_effects, fixed_effects, by = join_by(\".chain\", \".iteration\", \".draw\")) |&gt; \n  rename(bandInt_RF = bandInt,RF_Intercept=Intercept) |&gt;\n  right_join(new_data_grid, by = join_by(\"id\")) |&gt; \n  mutate(\n    Slope = bandInt_RF+b_bandInt,\n    Intercept= RF_Intercept + b_Intercept,\n    estimate = (b_Intercept + RF_Intercept) + (bandInt*(b_bandInt+bandInt_RF)) + (bandInt * condit_dummy) * `b_conditVaried:bandInt`,\n    SlopeInt = Slope + (`b_conditVaried:bandInt`*condit_dummy)\n  ) \n\n  indvSlopes &lt;- indvDraws |&gt; group_by(id) |&gt; median_qi(Slope,SlopeInt, Intercept,b_Intercept,b_bandInt) |&gt;\n  left_join(e3Sbjs, by=join_by(id)) |&gt; group_by(condit) |&gt;\n    select(id,condit,Intercept,b_Intercept,starts_with(\"Slope\"),b_bandInt, n) |&gt;\n  mutate(rankSlope=rank(Slope)) |&gt; arrange(rankSlope)   |&gt; ungroup()\n \n  \n  indvSlopes |&gt; mutate(Condition=condit) |&gt;  group_by(Condition) |&gt; \n    reframe(enframe(quantile(SlopeInt, c(0.0,0.25, 0.5, 0.75,1)), \"quantile\", \"SlopeInt\")) |&gt; \n  pivot_wider(names_from=quantile,values_from=SlopeInt,names_prefix=\"Q_\") |&gt;\n  group_by(Condition) |&gt;\n  summarise(across(starts_with(\"Q\"), list(mean = mean))) |&gt; kbl()\n\n\nTable 5: Slope coefficients by quartile, per condition\n\n\n\n\n\nCondition\nQ_0%_mean\nQ_25%_mean\nQ_50%_mean\nQ_75%_mean\nQ_100%_mean\n\n\n\nConstant\n-0.357719\n0.1216264\n0.4255778\n0.6401952\n1.928427\n\n\nVaried\n-0.310600\n0.2452145\n0.5919228\n0.9183043\n1.745801\n\n\n\n\n\n\n\n\n\nFigure 5 shows the distributions of estimated slopes relating velocity band to x velocity for each participant, ordered from lowest to highest within condition. Slope values are lower overall for varied training compared to constant training. Figure Xb plots the density of these slopes for each condition. The distribution for varied training has more mass at lower values than the constant training distribution. Both figures illustrate the model’s estimate that varied training resulted in less discrimination between velocity bands, evidenced by lower slopes on average.\n\nCodeindvSlopes |&gt; ggplot(aes(y=rankSlope, x=SlopeInt,fill=condit,color=condit)) + \n  geom_pointrange(aes(xmin=SlopeInt.lower , xmax=SlopeInt.upper)) + \n  labs(x=\"Estimated Slope\", y=\"Participant\")  + facet_wrap(~condit) +\nggplot(indvSlopes, aes(x = SlopeInt, color = condit)) + \ngeom_density() + labs(x=\"Slope Coefficient\",y=\"Density\") \n\n\n\n\n\n\n\n\n(a) Slope estimates by participant - ordered from lowest to highest within each condition.\n\n\n\n\n\nFigure 5: Slope distributions between condition\n\n\n\n\nCodenSbj &lt;- 3\nindvDraws  |&gt; indv_model_plot(indvSlopes, testE3Avg, SlopeInt,rank_variable=Slope,n_sbj=nSbj,\"max\")\nindvDraws |&gt; indv_model_plot(indvSlopes, testE3Avg,SlopeInt, rank_variable=Slope,n_sbj=nSbj,\"min\")\n\n\n\n\n\n\n\n\n(a) subset with largest slopes\n\n\n\n\n\n\n\n\n\n(b) subset with smallest slopes\n\n\n\n\n\nFigure 6: Subset of Varied and Constant Participants with the smallest and largest estimated slope values. Red lines represent the best fitting line for each participant, gray lines are 200 random samples from the posterior distribution. Colored points and intervals at each band represent the empirical median and 95% HDI.",
    "crumbs": [
      "Analyses",
      "HTW E3 Testing"
    ]
  },
  {
    "objectID": "Analysis/e1_test.html",
    "href": "Analysis/e1_test.html",
    "title": "HTW E1 Testing",
    "section": "",
    "text": "Analyses Strategy\nAll data processing and statistical analyses were performed in R version 4.31 Team (2020). To assess differences between groups, we used Bayesian Mixed Effects Regression. Model fitting was performed with the brms package in R Bürkner (2017), and descriptive stats and tables were extracted with the BayestestR package Makowski et al. (2019). Mixed effects regression enables us to take advantage of partial pooling, simultaneously estimating parameters at the individual and group level. Our use of Bayesian, rather than frequentist methods allows us to directly quantify the uncertainty in our parameter estimates, as well as circumventing convergence issues common to the frequentist analogues of our mixed models. For each model, we report the median values of the posterior distribution, and 95% credible intervals.\nEach model was set to run with 4 chains, 5000 iterations per chain, with the first 2500 of which were discarded as warmup chains. Rhat values were generally within an acceptable range, with values &lt;=1.02 (see appendix for diagnostic plots). We used uninformative priors for the fixed effects of the model (condition and velocity band), and weakly informative Student T distributions for for the random effects.\nWe compared varied and constant performance across two measures, deviation and discrimination. Deviation was quantified as the absolute deviation from the nearest boundary of the velocity band, or set to 0 if the throw velocity fell anywhere inside the target band. Thus, when the target band was 600-800, throws of 400, 650, and 1100 would result in deviation values of 200, 0, and 300, respectively. Discrimination was measured by fitting a linear model to the testing throws of each subjects, with the lower end of the target velocity band as the predicted variable, and the x velocity produced by the participants as the predictor variable. Participants who reliably discriminated between velocity bands tended to have positive slopes with values ~1, while participants who made throws irrespective of the current target band would have slopes ~0.\n\n\nCode# Create the data frame for the table\ntable_data &lt;- data.frame(\n  Type = c(\n    rep(\"Population-Level Effects\", 4),\n    rep(\"Group-Level Effects\", 2),\n    \"Family Specific Parameters\"\n  ),\n  Parameter = c(\n    \"\\\\(\\\\beta_0\\\\)\", \"\\\\(\\\\beta_1\\\\)\", \"\\\\(\\\\beta_2\\\\)\", \"\\\\(\\\\beta_3\\\\)\",\n    \"\\\\(\\\\sigma_{\\\\text{Intercept}}\\\\)\", \"\\\\(\\\\sigma_{\\\\text{bandInt}}\\\\)\", \"\\\\(\\\\sigma_{\\\\text{Observation}}\\\\)\"\n  ),\n  Term = c(\n    \"(Intercept)\", \"conditVaried\", \"bandInt\", \"conditVaried:bandInt\",\n    \"sd__(Intercept)\", \"sd__bandInt\", \"sd__Observation\"\n  ),\n  Description = c(\n    \"Intercept representing the baseline deviation\", \"Effect of condition (Varied vs. Constant) on deviation\", \"Effect of target velocity band (bandInt) on deviation\", \"Interaction effect between training condition and target velocity band on deviation\",\n    \"Standard deviation for (Intercept)\", \"Standard deviation for bandInt\", \"Standard deviation for Gaussian Family\"\n  )\n) |&gt;   mutate(\n    Term = glue::glue(\"&lt;code&gt;{Term}&lt;/code&gt;\")\n  ) \n\n# Create the table\nkable_out &lt;- table_data %&gt;%\n  kbl(format = 'html', escape = FALSE, booktabs = TRUE, \n      #caption = '&lt;span style = \"color:black;\"&gt;&lt;center&gt;&lt;strong&gt;Table 1: General Model Structure Information&lt;/strong&gt;&lt;/center&gt;&lt;/span&gt;',\n      col.names = c(\"Type\", \"Parameter\", \"Term\", \"Description\")) %&gt;%\n  kable_styling(position=\"left\", bootstrap_options = c(\"hover\"), full_width = FALSE) %&gt;%\n  column_spec(1, bold = FALSE, border_right = TRUE) %&gt;%\n  column_spec(2, width = '4cm') %&gt;%\n  column_spec(3, width = '4cm') %&gt;%\n  row_spec(c(4, 7), extra_css = \"border-bottom: 2px solid black;\") %&gt;%\n  pack_rows(\"\", 1, 4, bold = FALSE, italic = TRUE) %&gt;%\n  pack_rows(\"\", 5, 6, bold = FALSE, italic = TRUE) %&gt;%\n  pack_rows(\"\", 7, 7, bold = FALSE, italic = TRUE)\n\nkable_out\n\n\nTable 1: Mixed model structure and coefficient descriptions\n\n\n\n\n\nType\nParameter\nTerm\nDescription\n\n\n\n\n\n\nPopulation-Level Effects\n\\(\\beta_0\\)\n(Intercept)\nIntercept representing the baseline deviation\n\n\nPopulation-Level Effects\n\\(\\beta_1\\)\nconditVaried\nEffect of condition (Varied vs. Constant) on deviation\n\n\nPopulation-Level Effects\n\\(\\beta_2\\)\nbandInt\nEffect of target velocity band (bandInt) on deviation\n\n\nPopulation-Level Effects\n\\(\\beta_3\\)\nconditVaried:bandInt\nInteraction effect between training condition and target velocity band on deviation\n\n\n\n\n\nGroup-Level Effects\n\\(\\sigma_{\\text{Intercept}}\\)\nsd__(Intercept)\nStandard deviation for (Intercept)\n\n\nGroup-Level Effects\n\\(\\sigma_{\\text{bandInt}}\\)\nsd__bandInt\nStandard deviation for bandInt\n\n\n\n\n\nFamily Specific Parameters\n\\(\\sigma_{\\text{Observation}}\\)\nsd__Observation\nStandard deviation for Gaussian Family\n\n\n\n\n\n\n\n\n\n\nResults\nTesting Phase - No feedback.\nIn the first part of the testing phase, participants are tested from each of the velocity bands, and receive no feedback after each throw.\nDeviation From Target Band\nDescriptive summaries testing deviation data are provided in Table 2 and Figure 1. To model differences in accuracy between groups, we used Bayesian mixed effects regression models to the trial level data from the testing phase. The primary model predicted the absolute deviation from the target velocity band (dist) as a function of training condition (condit), target velocity band (band), and their interaction, with random intercepts and slopes for each participant (id).\n\\[\\begin{equation}\ndist_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot band_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot band_{ij} + b_{0i} + b_{1i} \\cdot band_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\nCodedatasummary(vx*vb ~ Mean + SD + Histogram, data = testAvg)\n\ndatasummary(vx*vb*condit ~ Mean + SD + Histogram, data = testAvg)\n\n\nCoderesult &lt;- test_summary_table(test, \"dist\",\"Deviation\", mfun = list(mean = mean, median = median, sd = sd))\nresult$constant |&gt; kbl()\nresult$varied |&gt; kbl()\n\n\nTable 2: Testing Deviation - Empirical Summary\n\n\n\n\n\n\n(a) Constant Testing - Deviation\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n254\n148\n298\n\n\n350-550\nExtrapolation\n191\n110\n229\n\n\n600-800\nExtrapolation\n150\n84\n184\n\n\n800-1000\nTrained\n184\n106\n242\n\n\n1000-1200\nExtrapolation\n233\n157\n282\n\n\n1200-1400\nExtrapolation\n287\n214\n290\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Varied Testing - Deviation\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n386\n233\n426\n\n\n350-550\nExtrapolation\n285\n149\n340\n\n\n600-800\nExtrapolation\n234\n144\n270\n\n\n800-1000\nTrained\n221\n149\n248\n\n\n1000-1200\nTrained\n208\n142\n226\n\n\n1200-1400\nTrained\n242\n182\n235\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodetest |&gt;  ggplot(aes(x = vb, y = dist,fill=condit)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) + \n  labs(x=\"Band\", y=\"Deviation From Target\")\n\n\n\n\n\n\nFigure 1: E1. Deviations from target band during testing without feedback stage.\n\n\n\n\n\nCode#options(brms.backend=\"cmdstanr\",mc.cores=4)\nmodelFile &lt;- paste0(here::here(\"data/model_cache/\"), \"e1_dist_Cond_Type_RF_2\")\nbmtd &lt;- brm(dist ~ condit * bandType + (1|bandInt) + (1|id), \n    data=testE1, file=modelFile,\n    iter=5000,chains=4, control = list(adapt_delta = .94, max_treedepth = 13))\n                        \n#bayestestR::describe_posterior(bmtd)\n\nmted1 &lt;- as.data.frame(describe_posterior(bmtd, centrality = \"Mean\"))[, c(1,2,4,5,6)]\ncolnames(mted1) &lt;- c(\"Term\", \"Estimate\",\"95% CrI Lower\", \"95% CrI Upper\", \"pd\")\n\n\n# r_bandInt_params &lt;- get_variables(bmtd)[grepl(\"r_bandInt\", get_variables(bmtd))]\n# posterior_summary(bmtd,variable=r_bandInt_params)\n# \n# r_bandInt_params &lt;- get_variables(bmtd)[grepl(\"r_id:bandInt\", get_variables(bmtd))]\n# posterior_summary(bmtd,variable=r_bandInt_params)\n\nmted1 |&gt; mutate(across(where(is.numeric), \\(x) round(x, 2))) |&gt;\n  tibble::remove_rownames() |&gt; \n  mutate(Term = stringr::str_remove(Term, \"b_\")) |&gt; kable(booktabs = TRUE)\ncdted1 &lt;- get_coef_details(bmtd, \"conditVaried\")\ncdted2 &lt;-get_coef_details(bmtd, \"bandTypeExtrapolation\")\ncdted3 &lt;-get_coef_details(bmtd, \"conditVaried:bandTypeExtrapolation\")\n\n\nTable 3: E1. Training vs. Extrapolation\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n152.55\n70.63\n229.85\n1.0\n\n\nconditVaried\n39.00\n-21.10\n100.81\n0.9\n\n\nbandTypeExtrapolation\n71.51\n33.24\n109.60\n1.0\n\n\nconditVaried:bandTypeExtrapolation\n66.46\n32.76\n99.36\n1.0\n\n\n\n\n\n\n\n\n\nTesting. To compare conditions in the testing stage, we first fit a model predicting deviation from the target band as a function of training condition and band type, with random intercepts for participants and bands. The model is shown in Table 3. The effect of training condition was not reliably different from 0 (β = 39, 95% CrI [-21.1, 100.81]; pd = 89.93%). The extrapolation testing items had a significantly greater deviation than the interpolation band (β = 71.51, 95% CrI [33.24, 109.6]; pd = 99.99%). The interaction between training condition and band type was significant (β = 66.46, 95% CrI [32.76, 99.36]; pd = 99.99%), with the varied group showing a greater deviation than the constant group in the extrapolation bands. See Figure 2.\n\nCodepe1td &lt;- testE1 |&gt;  ggplot(aes(x = vb, y = dist,fill=condit)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) + \n  theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) +\n  labs(x=\"Band\", y=\"Deviation From Target\")\n\ncondEffects &lt;- function(m,xvar){\n  m |&gt; ggplot(aes(x = {{xvar}}, y = .value, color = condit, fill = condit)) + \n  stat_dist_pointinterval() + \n  stat_halfeye(alpha=.1, height=.5) +\n  theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n  \n}\n\npe1ce &lt;- bmtd |&gt; emmeans( ~condit + bandType) |&gt;\n  gather_emmeans_draws() |&gt;\n condEffects(bandType) + labs(y=\"Absolute Deviation From Band\", x=\"Band Type\")\n\nLoading required namespace: rstanarm\n\nCode(pe1td + pe1ce) + plot_annotation(tag_levels= 'A')\n\n\n\n\n\n\nFigure 2: E1. Deviations from target band during testing without feedback stage.\n\n\n\n\n\nCode#contrasts(test$condit) \n#contrasts(test$vb)\nmodelName &lt;- \"e1_testDistBand_RF_5K\"\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id),\n                      data=test,file=paste0(here::here(\"data/model_cache\",modelName)),\n                      iter=5000,chains=4)\nGetModelStats(e1_distBMM) |&gt; kable(escape=F,booktabs=T,caption=\"Model Coefficients\")\ne1_distBMM |&gt; \n  emmeans(\"condit\",by=\"bandInt\",at=list(bandInt=c(100,350,600,800,1000,1200)),\n          epred = TRUE, re_formula = NA) |&gt; \n  pairs() |&gt; gather_emmeans_draws()  |&gt; \n   summarize(median_qi(.value),pd=sum(.value&gt;0)/n()) |&gt;\n   select(contrast,Band=bandInt,value=y,lower=ymin,upper=ymax,pd) |&gt; \n   mutate(across(where(is.numeric), \\(x) round(x, 2)),\n          pd=ifelse(value&lt;0,1-pd,pd)) |&gt;\n   kbl(caption=\"Contrasts\")\ncoef_details &lt;- get_coef_details(e1_distBMM, \"conditVaried\")\n\n\nTable 4: Experiment 1. Bayesian Mixed Model predicting absolute deviation as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\nModel Coefficients\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n205.09\n136.86\n274.06\n1.00\n\n\nconditVaried\n157.44\n60.53\n254.90\n1.00\n\n\nBand\n0.01\n-0.07\n0.08\n0.57\n\n\ncondit*Band\n-0.16\n-0.26\n-0.06\n1.00\n\n\n\n\n\n\n\n\nContrasts\n\ncontrast\nBand\nvalue\nlower\nupper\npd\n\n\n\nConstant - Varied\n100\n-141.49\n-229.19\n-53.83\n1.00\n\n\nConstant - Varied\n350\n-101.79\n-165.62\n-36.32\n1.00\n\n\nConstant - Varied\n600\n-62.02\n-106.21\n-14.77\n1.00\n\n\nConstant - Varied\n800\n-30.11\n-65.08\n6.98\n0.94\n\n\nConstant - Varied\n1000\n2.05\n-33.46\n38.41\n0.54\n\n\nConstant - Varied\n1200\n33.96\n-11.94\n81.01\n0.92\n\n\n\n\n\n\n\n\n\nThe model predicting absolute deviation (dist) showed clear effects of both training condition and target velocity band (Table X). Overall, the varied training group showed a larger deviation relative to the constant training group (β = 157.44, 95% CI [60.53, 254.9]). Deviation also depended on target velocity band, with lower bands showing less deviation. See Table 3 for full model output.\n\nCodecondEffects &lt;- function(m){\n  m |&gt; ggplot(aes(x = bandInt, y = .value, color = condit, fill = condit)) + \n  stat_dist_pointinterval() + stat_halfeye(alpha=.2) +\n  stat_lineribbon(alpha = .25, size = 1, .width = c(.95)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) +\n  ylab(\"Predicted X Velocity\") + xlab(\"Band\")\n}\n\ne1_distBMM |&gt; emmeans( ~condit + bandInt, \n                       at = list(bandInt = c(100, 350, 600, 800, 1000, 1200))) |&gt;\n  gather_emmeans_draws() |&gt;\n condEffects()+\n  scale_x_continuous(breaks = c(100, 350, 600, 800, 1000, 1200), \n                     labels = levels(test$vb), \n                     limits = c(0, 1400)) \n\n\n\n\n\n\nFigure 3: E1. Conditioinal Effect of Training Condition and Band. Ribbon indicated 95% Credible Intervals.\n\n\n\n\nDiscrimination between bands\nIn addition to accuracy/deviation, we also assessed the ability of participants to reliably discriminate between the velocity bands (i.e. responding differently when prompted for band 600-800 than when prompted for band 150-350). Table 5 shows descriptive statistics of this measure, and Figure 1 visualizes the full distributions of throws for each combination of condition and velocity band. To quantify discrimination, we again fit Bayesian Mixed Models as above, but this time the dependent variable was the raw x velocity generated by participants on each testing trial.\n\\[\\begin{equation}\nvx_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot bandInt_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot bandInt_{ij} + b_{0i} + b_{1i} \\cdot bandInt_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\nCodetest %&gt;% group_by(id,vb,condit) |&gt; plot_distByCondit()\n\n\n\n\n\n\nFigure 4: E1 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\n\n\n\n\nCoderesult &lt;- test_summary_table(test, \"vx\",\"X Velocity\", mfun = list(mean = mean, median = median, sd = sd))\nresult$constant |&gt; kable()\nresult$varied |&gt; kable()\n\n\nTable 5: Testing vx - Empirical Summary\n\n\n\n\n\n\n(a) Constant Testing - vx\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n524\n448\n327\n\n\n350-550\nExtrapolation\n659\n624\n303\n\n\n600-800\nExtrapolation\n770\n724\n300\n\n\n800-1000\nTrained\n1001\n940\n357\n\n\n1000-1200\nExtrapolation\n1167\n1104\n430\n\n\n1200-1400\nExtrapolation\n1283\n1225\n483\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Varied Testing - vx\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n664\n533\n448\n\n\n350-550\nExtrapolation\n768\n677\n402\n\n\n600-800\nExtrapolation\n876\n813\n390\n\n\n800-1000\nTrained\n1064\n1029\n370\n\n\n1000-1200\nTrained\n1180\n1179\n372\n\n\n1200-1400\nTrained\n1265\n1249\n412\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodee1_vxBMM &lt;- brm(vx ~ condit * bandInt + (1 + bandInt|id),\n                        data=test,file=paste0(here::here(\"data/model_cache\", \"e1_testVxBand_RF_5k\")),\n                        iter=5000,chains=4,silent=0,\n                        control=list(adapt_delta=0.94, max_treedepth=13))\nGetModelStats(e1_vxBMM ) |&gt; kable(escape=F,booktabs=T, caption=\"Fit to all 6 bands\")\ncd1 &lt;- get_coef_details(e1_vxBMM, \"conditVaried\")\nsc1 &lt;- get_coef_details(e1_vxBMM, \"bandInt\")\nintCoef1 &lt;- get_coef_details(e1_vxBMM, \"conditVaried:bandInt\")\n\n\nmodelName &lt;- \"e1_extrap_testVxBand\"\ne1_extrap_VxBMM &lt;- brm(vx ~ condit * bandInt + (1 + bandInt|id),\n                  data=test |&gt;\n                    filter(expMode==\"test-Nf\"),file=paste0(here::here(\"data/model_cache\",modelName)),\n                  iter=5000,chains=4)\nGetModelStats(e1_extrap_VxBMM ) |&gt; kable(escape=F,booktabs=T, caption=\"Fit to 3 extrapolation bands\")\nsc2 &lt;- get_coef_details(e1_extrap_VxBMM, \"bandInt\")\nintCoef2 &lt;- get_coef_details(e1_extrap_VxBMM, \"conditVaried:bandInt\")\n\n\nTable 6: Experiment 1. Bayesian Mixed Model Predicting Vx as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\n\n\n(a) Model fit to all 6 bands\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n408.55\n327.00\n490.61\n1.00\n\n\nconditVaried\n164.05\n45.50\n278.85\n1.00\n\n\nBand\n0.71\n0.62\n0.80\n1.00\n\n\ncondit*Band\n-0.14\n-0.26\n-0.01\n0.98\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Model fit to 3 extrapolation bands\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n497.49\n431.26\n566.17\n1.00\n\n\nconditVaried\n124.79\n26.61\n224.75\n0.99\n\n\nBand\n0.49\n0.42\n0.56\n1.00\n\n\ncondit*Band\n-0.06\n-0.16\n0.04\n0.88\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSee Table 6 for the full model results. The estimated coefficient for training condition (β = 164.05, 95% CrI [45.5, 278.85]) suggests that the varied group tends to produce harder throws than the constant group, but is not in and of itself useful for assessing discrimination. Most relevant to the issue of discrimination is the slope on Velocity Band (β = 0.71, 95% CrI [0.62, 0.8]). Although the median slope does fall underneath the ideal of value of 1, the fact that the 95% credible interval does not contain 0 provides strong evidence that participants exhibited some discrimination between bands. The estimate for the interaction between slope and condition (β = -0.14, 95% CrI [-0.26, -0.01]), suggests that the discrimination was somewhat modulated by training condition, with the varied participants showing less sensitivity between bands than the constant condition. This difference is depicted visually in Figure 5. Table 7 shows the average slope coefficients for varied and constant participants separately for each quartile. The constant participant participants appear to have larger slopes across quartiles, but the difference between conditions may be less pronounced for the top quartiles of subjects who show the strongest discrimination. Figure Figure 6 shows the distributions of slope values for each participant, and the compares the probability density of slope coefficients between training conditions. Figure 7\nThe second model, which focused solely on extrapolation bands, revealed similar patterns. The Velocity Band term (β = 0.49, 95% CrI [0.42, 0.56]) still demonstrates a high degree of discrimination ability. However, the posterior distribution for interaction term (β = -0.06, 95% CrI [-0.16, 0.04] ) does across over 0, suggesting that the evidence for decreased discrimination ability for the varied participants is not as strong when considering only the three extrapolation bands.\nCodee1_vxBMM |&gt; emmeans( ~condit + bandInt, \n                       at = list(bandInt = c(100, 350, 600, 800, 1000, 1200))) |&gt;\n  gather_emmeans_draws() |&gt; \n  condEffects() +\n  scale_x_continuous(breaks = c(100, 350, 600, 800, 1000, 1200), \n                     labels = levels(test$vb), \n                     limits = c(0, 1400))\n\ne1_extrap_VxBMM |&gt; emmeans( ~condit + bandInt, \n                       at = list(bandInt = c(100, 350, 600))) |&gt;\n  gather_emmeans_draws() |&gt;\n  condEffects() +\n  scale_x_continuous(breaks = c(100, 350, 600), \n                     labels = levels(test$vb)[1:3], \n                     limits = c(0, 1000)) \n\n\n\n\n\n\n\n\n\n(a) Model fit to all 6 bands\n\n\n\n\n\n\n\n\n\n\n\n(b) Model fit to only 3 extrapolation bands\n\n\n\n\n\n\nFigure 5: Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.\n\n\n\nCodenew_data_grid=map_dfr(1, ~data.frame(unique(test[,c(\"id\",\"condit\",\"bandInt\")]))) |&gt; \n  dplyr::arrange(id,bandInt) |&gt; \n  mutate(condit_dummy = ifelse(condit == \"Varied\", 1, 0)) \n\nindv_coefs &lt;- as_tibble(coef(e1_vxBMM)$id, rownames=\"id\")|&gt; \n  select(id, starts_with(\"Est\")) |&gt;\n  left_join(e1Sbjs, by=join_by(id) ) \n\n\nfixed_effects &lt;- e1_vxBMM |&gt; \n  spread_draws(`^b_.*`,regex=TRUE) |&gt; arrange(.chain,.draw,.iteration)\n\n\nrandom_effects &lt;- e1_vxBMM |&gt; \n  gather_draws(`^r_id.*$`, regex = TRUE, ndraws = 500) |&gt; \n  separate(.variable, into = c(\"effect\", \"id\", \"term\"), sep = \"\\\\[|,|\\\\]\") |&gt; \n  mutate(id = factor(id,levels=levels(test$id))) |&gt; \n  pivot_wider(names_from = term, values_from = .value) |&gt; arrange(id,.chain,.draw,.iteration)\n\nWarning: Expected 3 pieces. Additional pieces discarded in 156000 rows [1, 2, 3, 4, 5,\n6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].\n\nCode indvDraws &lt;- left_join(random_effects, fixed_effects, by = join_by(\".chain\", \".iteration\", \".draw\")) |&gt; \n  rename(bandInt_RF = bandInt,RF_Intercept=Intercept) |&gt;\n  right_join(new_data_grid, by = join_by(\"id\")) |&gt; \n  mutate(\n    Slope = bandInt_RF+b_bandInt,\n    Intercept= RF_Intercept + b_Intercept,\n    estimate = (b_Intercept + RF_Intercept) + (bandInt*(b_bandInt+bandInt_RF)) + (bandInt * condit_dummy) * `b_conditVaried:bandInt`,\n    SlopeInt = Slope + (`b_conditVaried:bandInt`*condit_dummy)\n  ) \n\nWarning in right_join(rename(left_join(random_effects, fixed_effects, by = join_by(\".chain\", : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\nCode  indvSlopes &lt;- indvDraws |&gt; group_by(id) |&gt; median_qi(Slope,SlopeInt, Intercept,b_Intercept,b_bandInt) |&gt;\n  left_join(e1Sbjs, by=join_by(id)) |&gt; group_by(condit) |&gt;\n    select(id,condit,Intercept,b_Intercept,starts_with(\"Slope\"),b_bandInt, n) |&gt;\n  mutate(rankSlope=rank(Slope)) |&gt; arrange(rankSlope)   |&gt; ungroup()\n \n  \n  indvSlopes |&gt; mutate(Condition=condit) |&gt;  group_by(Condition) |&gt; \n    reframe(enframe(quantile(SlopeInt, c(0.0,0.25, 0.5, 0.75,1)), \"quantile\", \"SlopeInt\")) |&gt; \n  pivot_wider(names_from=quantile,values_from=SlopeInt,names_prefix=\"Q_\") |&gt;\n  group_by(Condition) |&gt;\n  summarise(across(starts_with(\"Q\"), list(mean = mean))) |&gt; kbl()\n\n\nTable 7: Slope coefficients by quartile, per condition\n\n\n\n\n\nCondition\nQ_0%_mean\nQ_25%_mean\nQ_50%_mean\nQ_75%_mean\nQ_100%_mean\n\n\n\nConstant\n-0.1065285\n0.4813997\n0.6901252\n0.9368777\n1.398519\n\n\nVaried\n-0.2039670\n0.2703687\n0.5939692\n0.8950950\n1.288174\n\n\n\n\n\n\n\n\n\nFigure 6 shows the distributions of estimated slopes relating velocity band to x velocity for each participant, ordered from lowest to highest within condition. Slope values are lower overall for varied training compared to constant training. Figure Xb plots the density of these slopes for each condition. The distribution for varied training has more mass at lower values than the constant training distribution. Both figures illustrate the model’s estimate that varied training resulted in less discrimination between velocity bands, evidenced by lower slopes on average.\nCode  indvSlopes |&gt; ggplot(aes(y=rankSlope, x=SlopeInt,fill=condit,color=condit)) + \n  geom_pointrange(aes(xmin=SlopeInt.lower , xmax=SlopeInt.upper)) + \n  labs(x=\"Estimated Slope\", y=\"Participant\")  + facet_wrap(~condit)\n\n   ggplot(indvSlopes, aes(x = SlopeInt, color = condit)) + \n  geom_density() + labs(x=\"Slope Coefficient\",y=\"Density\")\n\n\n\n\n\n\n\n\n\n(a) Slope estimates by participant - ordered from lowest to highest within each condition.\n\n\n\n\n\n\n\n\n\n\n\n(b) Destiny of slope coefficients by training group\n\n\n\n\n\n\nFigure 6: Slope distributions between condition\n\n\n\nCodenSbj &lt;- 3\nindvDraws  |&gt; indv_model_plot(indvSlopes, testAvg, SlopeInt,rank_variable=Slope,n_sbj=nSbj,\"max\")\nindvDraws |&gt; indv_model_plot(indvSlopes, testAvg,SlopeInt, rank_variable=Slope,n_sbj=nSbj,\"min\")\n\n\n\n\n\n\n\n\n(a) subset with largest slopes\n\n\n\n\n\n\n\n\n\n(b) subset with smallest slopes\n\n\n\n\n\nFigure 7: Subset of Varied and Constant Participants with the smallest and largest estimated slope values. Red lines represent the best fitting line for each participant, gray lines are 200 random samples from the posterior distribution. Colored points and intervals at each band represent the empirical median and 95% HDI.\n\n\n\ncontrol for training end performance\n\nCodetestE1 |&gt; group_by(id,condit) |&gt; pivot_longer(c(\"dist\",\"train_end\"),names_to=\"var\",values_to=\"value\") |&gt; \n  ggplot(aes(x=var,y=value, fill=condit)) + stat_bar + facet_wrap(~var)\n\n\n\n\n\n\nCodetestE1 |&gt; ggplot(aes(x=train_end,y=dist,fill=condit)) + \n  stat_summary(geom = \"line\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) + \n    facet_wrap(~vb) +\n  labs(x=\"Band\", y=\"Deviation From Target\")\n\nWarning: Width not defined\nℹ Set with `position_dodge(width = ...)`\n\n\nWarning: `position_dodge()` requires non-overlapping x intervals.\n`position_dodge()` requires non-overlapping x intervals.\n`position_dodge()` requires non-overlapping x intervals.\n`position_dodge()` requires non-overlapping x intervals.\n`position_dodge()` requires non-overlapping x intervals.\n`position_dodge()` requires non-overlapping x intervals.\n\n\n\n\n\n\n\nCodetestE1 |&gt; ggplot(aes(x=train_end,y=dist,fill=condit,col=condit)) + \n  #geom_point() +\n  geom_smooth(method=\"loess\") +\n    facet_wrap(~vb) +\n  labs(x=\"Band\", y=\"Deviation From Target\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nCode# create quartiles for train_end\ntestE1 |&gt; group_by(condit,vb) |&gt; \n  mutate(train_end_q = ntile(train_end,6)) |&gt; \n  ggplot(aes(x=train_end_q,y=dist,fill=condit)) + \n stat_bar + \n    facet_wrap(~vb) +\n  labs(x=\"quartile\", y=\"Deviation From Target\")\n\n\n\n\n\n\n\n\nCodebmtd3 &lt;- brm(dist ~ condit * bandType * train_end + (1|bandInt) + (1|id), \n    data=testE1, \n    file=paste0(here::here(\"data/model_cache\",\"e1_trainEnd_BT_RF2\")),\n    iter=1000,chains=2, control = list(adapt_delta = .92, max_treedepth = 11))\nsummary(bmtd3)\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: dist ~ condit * bandType * train_end + (1 | bandInt) + (1 | id) \n   Data: testE1 (Number of observations: 9491) \n  Draws: 2 chains, each with iter = 1000; warmup = 500; thin = 1;\n         total post-warmup draws = 1000\n\nGroup-Level Effects: \n~bandInt (Number of levels: 6) \n              Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsd(Intercept)    73.85     31.99    35.91   157.68 1.00      215      429\n\n~id (Number of levels: 156) \n              Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsd(Intercept)   140.36      8.62   125.43   159.07 1.03      111      142\n\nPopulation-Level Effects: \n                                             Estimate Est.Error l-95% CI\nIntercept                                       43.41     49.99   -62.85\nconditVaried                                    67.01     49.92   -32.25\nbandTypeExtrapolation                           97.92     27.14    45.56\ntrain_end                                        1.02      0.28     0.45\nconditVaried:bandTypeExtrapolation             -76.93     27.48  -132.46\nconditVaried:train_end                          -0.56      0.31    -1.11\nbandTypeExtrapolation:train_end                 -0.26      0.17    -0.58\nconditVaried:bandTypeExtrapolation:train_end     0.89      0.18     0.52\n                                             u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept                                      136.23 1.01      140      255\nconditVaried                                   154.69 1.05       71      147\nbandTypeExtrapolation                          151.52 1.00      290      382\ntrain_end                                        1.51 1.01      115      221\nconditVaried:bandTypeExtrapolation             -22.04 1.00      273      487\nconditVaried:train_end                           0.11 1.03       87      205\nbandTypeExtrapolation:train_end                  0.09 1.01      205      310\nconditVaried:bandTypeExtrapolation:train_end     1.24 1.01      207      432\n\nFamily Specific Parameters: \n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma   240.85      1.82   237.19   244.52 1.00     1029      512\n\nDraws were sampled using sample(hmc). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\nCodebayestestR::describe_posterior(bmtd3)\n\nSummary of Posterior Distribution\n\nParameter                                    | Median |            95% CI |     pd |            ROPE | % in ROPE |  Rhat |    ESS\n---------------------------------------------------------------------------------------------------------------------------------\n(Intercept)                                  |  41.58 | [ -62.85, 136.23] | 82.20% | [-29.55, 29.55] |    33.16% | 1.014 | 142.00\nconditVaried                                 |  69.52 | [ -32.25, 154.69] | 90.30% | [-29.55, 29.55] |    18.84% | 1.046 |  70.00\nbandTypeExtrapolation                        |  97.03 | [  45.56, 151.52] |   100% | [-29.55, 29.55] |        0% | 1.000 | 280.00\ntrain_end                                    |   1.04 | [   0.45,   1.51] | 99.90% | [-29.55, 29.55] |      100% | 1.010 | 108.00\nconditVaried:bandTypeExtrapolation           | -76.11 | [-132.46, -22.04] | 99.90% | [-29.55, 29.55] |     2.00% | 1.000 | 268.00\nconditVaried:train_end                       |  -0.57 | [  -1.11,   0.11] | 95.10% | [-29.55, 29.55] |      100% | 1.029 |  84.00\nbandTypeExtrapolation:train_end              |  -0.27 | [  -0.58,   0.09] | 92.00% | [-29.55, 29.55] |      100% | 1.006 | 204.00\nconditVaried:bandTypeExtrapolation:train_end |   0.89 | [   0.52,   1.24] |   100% | [-29.55, 29.55] |      100% | 1.005 | 206.00\n\nCodecondEffects &lt;- function(m,xvar){\n  m |&gt; ggplot(aes(x = {{xvar}}, y = .value, color = condit, fill = condit)) + \n  stat_dist_pointinterval() + \n  stat_halfeye(alpha=.1, height=.5) +\n  theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n  \n}\n\n bmtd3 |&gt; emmeans( ~condit * bandType * train_end) |&gt;\n  gather_emmeans_draws() |&gt;\n condEffects(bandType) + labs(y=\"Absolute Deviation From Band\", x=\"Band Type\")\n\n\n\n\n\n\nCodece_bmtd3 &lt;- plot(conditional_effects(bmtd3),points=FALSE,plot=FALSE)\nwrap_plots(ce_bmtd3)\n\n\n\n\n\n\n\nE1 Results Discussion\nNEEDS TO BE WRITTEN\n\n\n\n\n\n\nReferences\n\nBürkner, P.-C. (2017). Brms: An R Package for Bayesian Multilevel Models Using Stan. Journal of Statistical Software, 80, 1–28. https://doi.org/10.18637/jss.v080.i01\n\n\nMakowski, D., Ben-Shachar, M. S., & Lüdecke, D. (2019). bayestestR: Describing Effects and their Uncertainty, Existence and Significance within the Bayesian Framework. Journal of Open Source Software, 4(40), 1541. https://doi.org/10.21105/joss.01541\n\n\nTeam, R. C. (2020). R: A Language and Environment for Statistical Computing. R: A Language and Environment for Statistical Computing.",
    "crumbs": [
      "Analyses",
      "HTW E1 Testing"
    ]
  },
  {
    "objectID": "Analysis/e1_test.html#analyses-strategy",
    "href": "Analysis/e1_test.html#analyses-strategy",
    "title": "HTW E1 Testing",
    "section": "",
    "text": "All data processing and statistical analyses were performed in R version 4.31 Team (2020). To assess differences between groups, we used Bayesian Mixed Effects Regression. Model fitting was performed with the brms package in R Bürkner (2017), and descriptive stats and tables were extracted with the BayestestR package Makowski et al. (2019). Mixed effects regression enables us to take advantage of partial pooling, simultaneously estimating parameters at the individual and group level. Our use of Bayesian, rather than frequentist methods allows us to directly quantify the uncertainty in our parameter estimates, as well as circumventing convergence issues common to the frequentist analogues of our mixed models. For each model, we report the median values of the posterior distribution, and 95% credible intervals.\nEach model was set to run with 4 chains, 5000 iterations per chain, with the first 2500 of which were discarded as warmup chains. Rhat values were generally within an acceptable range, with values &lt;=1.02 (see appendix for diagnostic plots). We used uninformative priors for the fixed effects of the model (condition and velocity band), and weakly informative Student T distributions for for the random effects.\nWe compared varied and constant performance across two measures, deviation and discrimination. Deviation was quantified as the absolute deviation from the nearest boundary of the velocity band, or set to 0 if the throw velocity fell anywhere inside the target band. Thus, when the target band was 600-800, throws of 400, 650, and 1100 would result in deviation values of 200, 0, and 300, respectively. Discrimination was measured by fitting a linear model to the testing throws of each subjects, with the lower end of the target velocity band as the predicted variable, and the x velocity produced by the participants as the predictor variable. Participants who reliably discriminated between velocity bands tended to have positive slopes with values ~1, while participants who made throws irrespective of the current target band would have slopes ~0.\n\n\n\nTable 1: Mixed model structure and coefficient descriptions\n\n\n\n\n\nType\nParameter\nTerm\nDescription\n\n\n\n\n\n\nPopulation-Level Effects\n\\(\\beta_0\\)\n(Intercept)\nIntercept representing the baseline deviation\n\n\nPopulation-Level Effects\n\\(\\beta_1\\)\nconditVaried\nEffect of condition (Varied vs. Constant) on deviation\n\n\nPopulation-Level Effects\n\\(\\beta_2\\)\nbandInt\nEffect of target velocity band (bandInt) on deviation\n\n\nPopulation-Level Effects\n\\(\\beta_3\\)\nconditVaried:bandInt\nInteraction effect between training condition and target velocity band on deviation\n\n\n\n\n\nGroup-Level Effects\n\\(\\sigma_{\\text{Intercept}}\\)\nsd__(Intercept)\nStandard deviation for (Intercept)\n\n\nGroup-Level Effects\n\\(\\sigma_{\\text{bandInt}}\\)\nsd__bandInt\nStandard deviation for bandInt\n\n\n\n\n\nFamily Specific Parameters\n\\(\\sigma_{\\text{Observation}}\\)\nsd__Observation\nStandard deviation for Gaussian Family\n\n\n\n\n\n\n\n\n\n\n\nIn the first part of the testing phase, participants are tested from each of the velocity bands, and receive no feedback after each throw.\n\nDescriptive summaries testing deviation data are provided in Table 2 and Figure 1. To model differences in accuracy between groups, we used Bayesian mixed effects regression models to the trial level data from the testing phase. The primary model predicted the absolute deviation from the target velocity band (dist) as a function of training condition (condit), target velocity band (band), and their interaction, with random intercepts and slopes for each participant (id).\n\\[\\begin{equation}\ndist_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot band_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot band_{ij} + b_{0i} + b_{1i} \\cdot band_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\n\nTable 2: Testing Deviation - Empirical Summary\n\n\n\n\n\n\n(a) Constant Testing - Deviation\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n254\n148\n298\n\n\n350-550\nExtrapolation\n191\n110\n229\n\n\n600-800\nExtrapolation\n150\n84\n184\n\n\n800-1000\nTrained\n184\n106\n242\n\n\n1000-1200\nExtrapolation\n233\n157\n282\n\n\n1200-1400\nExtrapolation\n287\n214\n290\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Varied Testing - Deviation\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n386\n233\n426\n\n\n350-550\nExtrapolation\n285\n149\n340\n\n\n600-800\nExtrapolation\n234\n144\n270\n\n\n800-1000\nTrained\n221\n149\n248\n\n\n1000-1200\nTrained\n208\n142\n226\n\n\n1200-1400\nTrained\n242\n182\n235\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: E1. Deviations from target band during testing without feedback stage.\n\n\n\n\n\n\n\nTable 3: Experiment 1. Bayesian Mixed Model predicting absolute deviation as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\nModel Coefficients\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n205.09\n136.86\n274.06\n1.00\n\n\nconditVaried\n157.44\n60.53\n254.90\n1.00\n\n\nBand\n0.01\n-0.07\n0.08\n0.57\n\n\ncondit*Band\n-0.16\n-0.26\n-0.06\n1.00\n\n\n\n\n\n\n\n\nContrasts\n\ncontrast\nBand\nvalue\nlower\nupper\npd\n\n\n\nConstant - Varied\n100\n-141.49\n-229.19\n-53.83\n1.00\n\n\nConstant - Varied\n350\n-101.79\n-165.62\n-36.32\n1.00\n\n\nConstant - Varied\n600\n-62.02\n-106.21\n-14.77\n1.00\n\n\nConstant - Varied\n800\n-30.11\n-65.08\n6.98\n0.94\n\n\nConstant - Varied\n1000\n2.05\n-33.46\n38.41\n0.54\n\n\nConstant - Varied\n1200\n33.96\n-11.94\n81.01\n0.92\n\n\n\n\n\n\n\n\n\nThe model predicting absolute deviation (dist) showed clear effects of both training condition and target velocity band (Table X). Overall, the varied training group showed a larger deviation relative to the constant training group (β = 157.44, 95% CI [60.53, 254.9]). Deviation also depended on target velocity band, with lower bands showing less deviation. See Table 3 for full model output.\n\n\n\n\n\n\n\nFigure 2: E1. Conditioinal Effect of Training Condition and Band. Ribbon indicated 95% Credible Intervals.\n\n\n\n\n\nIn addition to accuracy/deviation, we also assessed the ability of participants to reliably discriminate between the velocity bands (i.e. responding differently when prompted for band 600-800 than when prompted for band 150-350). Table 4 shows descriptive statistics of this measure, and Figure 1 visualizes the full distributions of throws for each combination of condition and velocity band. To quantify discrimination, we again fit Bayesian Mixed Models as above, but this time the dependent variable was the raw x velocity generated by participants on each testing trial.\n\\[\\begin{equation}\nvx_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot bandInt_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot bandInt_{ij} + b_{0i} + b_{1i} \\cdot bandInt_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\n\n\n\n\n\n\nFigure 3: E1 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\n\n\n\n\n\n\nTable 4: Testing vx - Empirical Summary\n\n\n\n\n\n\n(a) Constant Testing - vx\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n524\n448\n327\n\n\n350-550\nExtrapolation\n659\n624\n303\n\n\n600-800\nExtrapolation\n770\n724\n300\n\n\n800-1000\nTrained\n1001\n940\n357\n\n\n1000-1200\nExtrapolation\n1167\n1104\n430\n\n\n1200-1400\nExtrapolation\n1283\n1225\n483\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Varied Testing - vx\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n664\n533\n448\n\n\n350-550\nExtrapolation\n768\n677\n402\n\n\n600-800\nExtrapolation\n876\n813\n390\n\n\n800-1000\nTrained\n1064\n1029\n370\n\n\n1000-1200\nTrained\n1180\n1179\n372\n\n\n1200-1400\nTrained\n1265\n1249\n412\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 5: Experiment 1. Bayesian Mixed Model Predicting Vx as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\n\n\n(a) Model fit to all 6 bands\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n408.55\n327.00\n490.61\n1.00\n\n\nconditVaried\n164.05\n45.50\n278.85\n1.00\n\n\nBand\n0.71\n0.62\n0.80\n1.00\n\n\ncondit*Band\n-0.14\n-0.26\n-0.01\n0.98\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Model fit to 3 extrapolation bands\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n497.49\n431.26\n566.17\n1.00\n\n\nconditVaried\n124.79\n26.61\n224.75\n0.99\n\n\nBand\n0.49\n0.42\n0.56\n1.00\n\n\ncondit*Band\n-0.06\n-0.16\n0.04\n0.88\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSee Table 5 for the full model results. The estimated coefficient for training condition (β = 164.05, 95% CrI [45.5, 278.85]) suggests that the varied group tends to produce harder throws than the constant group, but is not in and of itself useful for assessing discrimination. Most relevant to the issue of discrimination is the slope on Velocity Band (β = 0.71, 95% CrI [0.62, 0.8]). Although the median slope does fall underneath the ideal of value of 1, the fact that the 95% credible interval does not contain 0 provides strong evidence that participants exhibited some discrimination between bands. The estimate for the interaction between slope and condition (β = -0.14, 95% CrI [-0.26, -0.01]), suggests that the discrimination was somewhat modulated by training condition, with the varied participants showing less sensitivity between bands than the constant condition. This difference is depicted visually in Figure 4. Table 6 shows the average slope coefficients for varied and constant participants separately for each quartile. The constant participant participants appear to have larger slopes across quartiles, but the difference between conditions may be less pronounced for the top quartiles of subjects who show the strongest discrimination. Figure Figure 5 shows the distributions of slope values for each participant, and the compares the probability density of slope coefficients between training conditions. Figure 6\nThe second model, which focused solely on extrapolation bands, revealed similar patterns. The Velocity Band term (β = 0.49, 95% CrI [0.42, 0.56]) still demonstrates a high degree of discrimination ability. However, the posterior distribution for interaction term (β = -0.06, 95% CrI [-0.16, 0.04] ) does across over 0, suggesting that the evidence for decreased discrimination ability for the varied participants is not as strong when considering only the three extrapolation bands.\n\n\n\n\n\n\n\n\n\n(a) Model fit to all 6 bands\n\n\n\n\n\n\n\n\n\n\n\n(b) Model fit to only 3 extrapolation bands\n\n\n\n\n\n\nFigure 4: Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.\n\n\n\n\n\nTable 6: Slope coefficients by quartile, per condition\n\n\n\n\n\nCondition\nQ_0%_mean\nQ_25%_mean\nQ_50%_mean\nQ_75%_mean\nQ_100%_mean\n\n\n\nConstant\n-0.1044135\n0.4761353\n0.6916348\n0.9267655\n1.394219\n\n\nVaried\n-0.2010150\n0.2647400\n0.5883447\n0.8971391\n1.298517\n\n\n\n\n\n\n\n\n\nFigure 5 shows the distributions of estimated slopes relating velocity band to x velocity for each participant, ordered from lowest to highest within condition. Slope values are lower overall for varied training compared to constant training. Figure Xb plots the density of these slopes for each condition. The distribution for varied training has more mass at lower values than the constant training distribution. Both figures illustrate the model’s estimate that varied training resulted in less discrimination between velocity bands, evidenced by lower slopes on average.\n\n\n\n\n\n\n\n\n\n(a) Slope estimates by participant - ordered from lowest to highest within each condition.\n\n\n\n\n\n\n\n\n\n\n\n(b) Destiny of slope coefficients by training group\n\n\n\n\n\n\nFigure 5: Slope distributions between condition\n\n\n\n\n\n\n\n\n\n\n\n(a) subset with largest slopes\n\n\n\n\n\n\n\n\n\n(b) subset with smallest slopes\n\n\n\n\n\nFigure 6: Subset of Varied and Constant Participants with the smallest and largest estimated slope values. Red lines represent the best fitting line for each participant, gray lines are 200 random samples from the posterior distribution. Colored points and intervals at each band represent the empirical median and 95% HDI.\n\n\n\n\nNEEDS TO BE WRITTEN",
    "crumbs": [
      "Analyses",
      "HTW E1 Testing"
    ]
  },
  {
    "objectID": "Analysis/e1_test.html#results",
    "href": "Analysis/e1_test.html#results",
    "title": "HTW E1 Testing",
    "section": "Results",
    "text": "Results\nTesting Phase - No feedback.\nIn the first part of the testing phase, participants are tested from each of the velocity bands, and receive no feedback after each throw.\nDeviation From Target Band\nDescriptive summaries testing deviation data are provided in Table 2 and Figure 1. To model differences in accuracy between groups, we used Bayesian mixed effects regression models to the trial level data from the testing phase. The primary model predicted the absolute deviation from the target velocity band (dist) as a function of training condition (condit), target velocity band (band), and their interaction, with random intercepts and slopes for each participant (id).\n\\[\\begin{equation}\ndist_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot band_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot band_{ij} + b_{0i} + b_{1i} \\cdot band_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\n\nTable 2: Testing Deviation - Empirical Summary\n\n\n\n\n\n\n(a) Constant Testing - Deviation\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n254\n148\n298\n\n\n350-550\nExtrapolation\n191\n110\n229\n\n\n600-800\nExtrapolation\n150\n84\n184\n\n\n800-1000\nTrained\n184\n106\n242\n\n\n1000-1200\nExtrapolation\n233\n157\n282\n\n\n1200-1400\nExtrapolation\n287\n214\n290\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Varied Testing - Deviation\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n386\n233\n426\n\n\n350-550\nExtrapolation\n285\n149\n340\n\n\n600-800\nExtrapolation\n234\n144\n270\n\n\n800-1000\nTrained\n221\n149\n248\n\n\n1000-1200\nTrained\n208\n142\n226\n\n\n1200-1400\nTrained\n242\n182\n235\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: E1. Deviations from target band during testing without feedback stage.\n\n\n\n\n\n\n\nTable 3: Experiment 1. Bayesian Mixed Model predicting absolute deviation as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\nModel Coefficients\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n205.09\n136.86\n274.06\n1.00\n\n\nconditVaried\n157.44\n60.53\n254.90\n1.00\n\n\nBand\n0.01\n-0.07\n0.08\n0.57\n\n\ncondit*Band\n-0.16\n-0.26\n-0.06\n1.00\n\n\n\n\n\n\n\n\nContrasts\n\ncontrast\nBand\nvalue\nlower\nupper\npd\n\n\n\nConstant - Varied\n100\n-141.49\n-229.19\n-53.83\n1.00\n\n\nConstant - Varied\n350\n-101.79\n-165.62\n-36.32\n1.00\n\n\nConstant - Varied\n600\n-62.02\n-106.21\n-14.77\n1.00\n\n\nConstant - Varied\n800\n-30.11\n-65.08\n6.98\n0.94\n\n\nConstant - Varied\n1000\n2.05\n-33.46\n38.41\n0.54\n\n\nConstant - Varied\n1200\n33.96\n-11.94\n81.01\n0.92\n\n\n\n\n\n\n\n\n\nThe model predicting absolute deviation (dist) showed clear effects of both training condition and target velocity band (Table X). Overall, the varied training group showed a larger deviation relative to the constant training group (β = 157.44, 95% CI [60.53, 254.9]). Deviation also depended on target velocity band, with lower bands showing less deviation. See Table 3 for full model output.\n\n\n\n\n\n\n\nFigure 2: E1. Conditioinal Effect of Training Condition and Band. Ribbon indicated 95% Credible Intervals.\n\n\n\n\nDiscrimination between bands\nIn addition to accuracy/deviation, we also assessed the ability of participants to reliably discriminate between the velocity bands (i.e. responding differently when prompted for band 600-800 than when prompted for band 150-350). Table 4 shows descriptive statistics of this measure, and Figure 1 visualizes the full distributions of throws for each combination of condition and velocity band. To quantify discrimination, we again fit Bayesian Mixed Models as above, but this time the dependent variable was the raw x velocity generated by participants on each testing trial.\n\\[\\begin{equation}\nvx_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot bandInt_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot bandInt_{ij} + b_{0i} + b_{1i} \\cdot bandInt_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\n\n\n\n\n\n\nFigure 3: E1 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\n\n\n\n\n\n\nTable 4: Testing vx - Empirical Summary\n\n\n\n\n\n\n(a) Constant Testing - vx\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n524\n448\n327\n\n\n350-550\nExtrapolation\n659\n624\n303\n\n\n600-800\nExtrapolation\n770\n724\n300\n\n\n800-1000\nTrained\n1001\n940\n357\n\n\n1000-1200\nExtrapolation\n1167\n1104\n430\n\n\n1200-1400\nExtrapolation\n1283\n1225\n483\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Varied Testing - vx\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n664\n533\n448\n\n\n350-550\nExtrapolation\n768\n677\n402\n\n\n600-800\nExtrapolation\n876\n813\n390\n\n\n800-1000\nTrained\n1064\n1029\n370\n\n\n1000-1200\nTrained\n1180\n1179\n372\n\n\n1200-1400\nTrained\n1265\n1249\n412\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 5: Experiment 1. Bayesian Mixed Model Predicting Vx as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\n\n\n(a) Model fit to all 6 bands\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n408.55\n327.00\n490.61\n1.00\n\n\nconditVaried\n164.05\n45.50\n278.85\n1.00\n\n\nBand\n0.71\n0.62\n0.80\n1.00\n\n\ncondit*Band\n-0.14\n-0.26\n-0.01\n0.98\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Model fit to 3 extrapolation bands\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n497.49\n431.26\n566.17\n1.00\n\n\nconditVaried\n124.79\n26.61\n224.75\n0.99\n\n\nBand\n0.49\n0.42\n0.56\n1.00\n\n\ncondit*Band\n-0.06\n-0.16\n0.04\n0.88\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSee Table 5 for the full model results. The estimated coefficient for training condition (β = 164.05, 95% CrI [45.5, 278.85]) suggests that the varied group tends to produce harder throws than the constant group, but is not in and of itself useful for assessing discrimination. Most relevant to the issue of discrimination is the slope on Velocity Band (β = 0.71, 95% CrI [0.62, 0.8]). Although the median slope does fall underneath the ideal of value of 1, the fact that the 95% credible interval does not contain 0 provides strong evidence that participants exhibited some discrimination between bands. The estimate for the interaction between slope and condition (β = -0.14, 95% CrI [-0.26, -0.01]), suggests that the discrimination was somewhat modulated by training condition, with the varied participants showing less sensitivity between bands than the constant condition. This difference is depicted visually in Figure 4. Table 6 shows the average slope coefficients for varied and constant participants separately for each quartile. The constant participant participants appear to have larger slopes across quartiles, but the difference between conditions may be less pronounced for the top quartiles of subjects who show the strongest discrimination. Figure Figure 5 shows the distributions of slope values for each participant, and the compares the probability density of slope coefficients between training conditions. Figure 6\nThe second model, which focused solely on extrapolation bands, revealed similar patterns. The Velocity Band term (β = 0.49, 95% CrI [0.42, 0.56]) still demonstrates a high degree of discrimination ability. However, the posterior distribution for interaction term (β = -0.06, 95% CrI [-0.16, 0.04] ) does across over 0, suggesting that the evidence for decreased discrimination ability for the varied participants is not as strong when considering only the three extrapolation bands.\n\n\n\n\n\n\n\n\n\n(a) Model fit to all 6 bands\n\n\n\n\n\n\n\n\n\n\n\n(b) Model fit to only 3 extrapolation bands\n\n\n\n\n\n\nFigure 4: Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.\n\n\n\n\n\nTable 6: Slope coefficients by quartile, per condition\n\n\n\n\n\nCondition\nQ_0%_mean\nQ_25%_mean\nQ_50%_mean\nQ_75%_mean\nQ_100%_mean\n\n\n\nConstant\n-0.1075435\n0.4785976\n0.6929265\n0.9328510\n1.393223\n\n\nVaried\n-0.2051370\n0.2694008\n0.5880481\n0.9021356\n1.294943\n\n\n\n\n\n\n\n\n\nFigure 5 shows the distributions of estimated slopes relating velocity band to x velocity for each participant, ordered from lowest to highest within condition. Slope values are lower overall for varied training compared to constant training. Figure Xb plots the density of these slopes for each condition. The distribution for varied training has more mass at lower values than the constant training distribution. Both figures illustrate the model’s estimate that varied training resulted in less discrimination between velocity bands, evidenced by lower slopes on average.\n\n\n\n\n\n\n\n\n\n(a) Slope estimates by participant - ordered from lowest to highest within each condition.\n\n\n\n\n\n\n\n\n\n\n\n(b) Destiny of slope coefficients by training group\n\n\n\n\n\n\nFigure 5: Slope distributions between condition\n\n\n\n\n\n\n\n\n\n\n\n(a) subset with largest slopes\n\n\n\n\n\n\n\n\n\n(b) subset with smallest slopes\n\n\n\n\n\nFigure 6: Subset of Varied and Constant Participants with the smallest and largest estimated slope values. Red lines represent the best fitting line for each participant, gray lines are 200 random samples from the posterior distribution. Colored points and intervals at each band represent the empirical median and 95% HDI.\n\n\n\nE1 Results Discussion\nNEEDS TO BE WRITTEN",
    "crumbs": [
      "Analyses",
      "HTW E1 Testing"
    ]
  },
  {
    "objectID": "Analysis/e1_test.html#references",
    "href": "Analysis/e1_test.html#references",
    "title": "HTW E1 Testing",
    "section": "References",
    "text": "References\n\n\nBürkner, P.-C. (2017). Brms: An R Package for Bayesian Multilevel Models Using Stan. Journal of Statistical Software, 80, 1–28. https://doi.org/10.18637/jss.v080.i01\n\n\nMakowski, D., Ben-Shachar, M. S., & Lüdecke, D. (2019). bayestestR: Describing Effects and their Uncertainty, Existence and Significance within the Bayesian Framework. Journal of Open Source Software, 4(40), 1541. https://doi.org/10.21105/joss.01541\n\n\nTeam, R. C. (2020). R: A Language and Environment for Statistical Computing. R: A Language and Environment for Statistical Computing.",
    "crumbs": [
      "Analyses",
      "HTW E1 Testing"
    ]
  },
  {
    "objectID": "Analysis/e1_test.html#appendix",
    "href": "Analysis/e1_test.html#appendix",
    "title": "HTW E1 Testing",
    "section": "Appendix",
    "text": "Appendix",
    "crumbs": [
      "Analyses",
      "HTW E1 Testing"
    ]
  },
  {
    "objectID": "Analysis/e1_Analysis.html",
    "href": "Analysis/e1_Analysis.html",
    "title": "E1 Extras",
    "section": "",
    "text": "plot_violin_condit &lt;- function(fcondit, fvb, pvar) {\n\n  full_range &lt;- testAvg |&gt; pull({{pvar}}) |&gt; range(na.rm=TRUE)\n  testAvg |&gt;\n    filter(condit == fcondit, vb==fvb) |&gt; \n    ggplot(aes(.data[[pvar]])) +\n    geom_density(fill = 'dodgerblue4') +\n    theme_void() +\n    coord_cartesian(xlim = full_range)\n}\n\nunique_combinations = testAvg |&gt; ungroup() |&gt;\n  distinct(condit, vb)\n\ntestAvg |&gt; group_by(condit,vb) |&gt; \n  summarize(mean=mean(dist),sd=sd(dist)) |&gt; \n  mutate(Distribution=vb) |&gt; \n  gt() |&gt;\n  tab_spanner(\n    label = 'Training Condit',\n    columns = -condit\n  ) |&gt; \n  cols_label_with(fn = str_to_title) |&gt; \n  fmt_number(decimals = 2) |&gt; \n  cols_align('left', columns = condit) |&gt; \n  text_transform(\n    locations = cells_body(columns = 'Distribution'),\n    fn = function(column) {\n      map2(unique_combinations$condit, unique_combinations$vb,~plot_violin_condit(.x,.y,'vx')) |&gt;\n        ggplot_image(height = px(50), aspect_ratio = 3)\n    }\n  )\n\n\n\n\n\n\n\nTraining Condit\n\n\nVb\nMean\nSd\nDistribution\n\n\n\n\nConstant\n\n\n100-300\n252.99\n219.63\n\n\n\n350-550\n191.58\n159.52\n\n\n\n600-800\n150.40\n110.83\n\n\n\n800-1000\n188.91\n160.60\n\n\n\n1000-1200\n240.57\n173.05\n\n\n\n1200-1400\n295.42\n186.14\n\n\n\nVaried\n\n\n100-300\n387.25\n343.45\n\n\n\n350-550\n289.01\n272.48\n\n\n\n600-800\n236.17\n188.89\n\n\n\n800-1000\n224.16\n145.95\n\n\n\n1000-1200\n209.20\n130.32\n\n\n\n1200-1400\n242.13\n136.30\n\n\n\n\n\n\n\nvars_to_plot &lt;- c('dist', 'vx')\n\ntables &lt;- map(vars_to_plot, function(pvar) {\n  testAvg |&gt;\n    group_by(condit, vb) |&gt;\n    summarize(mean = mean(.data[[pvar]]), sd = sd(.data[[pvar]])) |&gt;\n    mutate(Distribution = vb) |&gt;\n    gt() |&gt;\n    tab_spanner(\n      label = 'Training Condit',\n      columns = -condit\n    ) |&gt;\n    cols_label_with(fn = str_to_title) |&gt;\n    fmt_number(decimals = 2) |&gt;\n    cols_align('left', columns = condit) |&gt;\n    text_transform(\n      locations = cells_body(columns = 'Distribution'),\n      fn = function(column) {\n        map2(unique_combinations$condit, unique_combinations$vb, ~plot_violin_condit(.x, .y, pvar)) |&gt;\n          ggplot_image(height = px(50), aspect_ratio = 3)\n      }\n    )\n})\n#print(tables[[1]])\n#print(tables[[2]])\n\nlibrary(gtExtras)\ngt_two_column_layout(tables)\n\n\n\n\n\n\n\n\n\nTraining Condit\n\n\nVb\nMean\nSd\nDistribution\n\n\n\n\nConstant\n\n\n100-300\n252.99\n219.63\n\n\n\n350-550\n191.58\n159.52\n\n\n\n600-800\n150.40\n110.83\n\n\n\n800-1000\n188.91\n160.60\n\n\n\n1000-1200\n240.57\n173.05\n\n\n\n1200-1400\n295.42\n186.14\n\n\n\nVaried\n\n\n100-300\n387.25\n343.45\n\n\n\n350-550\n289.01\n272.48\n\n\n\n600-800\n236.17\n188.89\n\n\n\n800-1000\n224.16\n145.95\n\n\n\n1000-1200\n209.20\n130.32\n\n\n\n1200-1400\n242.13\n136.30\n\n\n\n\n\n\n\n\n\n\n\n\nTraining Condit\n\n\nVb\nMean\nSd\nDistribution\n\n\n\n\nConstant\n\n\n100-300\n522.83\n245.10\n\n\n\n350-550\n660.61\n224.30\n\n\n\n600-800\n771.75\n210.50\n\n\n\n800-1000\n1,008.76\n254.58\n\n\n\n1000-1200\n1,173.42\n307.89\n\n\n\n1200-1400\n1,306.99\n355.81\n\n\n\nVaried\n\n\n100-300\n665.49\n365.02\n\n\n\n350-550\n772.47\n321.45\n\n\n\n600-800\n879.54\n291.57\n\n\n\n800-1000\n1,070.25\n248.79\n\n\n\n1000-1200\n1,180.70\n265.92\n\n\n\n1200-1400\n1,269.34\n291.65",
    "crumbs": [
      "Analyses",
      "E1 Extras"
    ]
  },
  {
    "objectID": "Analysis/e1_Analysis.html#testing",
    "href": "Analysis/e1_Analysis.html#testing",
    "title": "E1 Extras",
    "section": "Testing",
    "text": "Testing\n\n\nVaried vs. Constant\nDist\nVx\nSigned Distance\nPercent Hit\nTables\n\n\n\n\ne1 |&gt; filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) |&gt;  \n  ggplot(aes(x = vb, y = dist,fill=condit)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) \n\n\n\n\n\n\n\n\n\n\ne1 |&gt; filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) |&gt;  ggplot(aes(x = vb, y = dist,fill=condit)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) \n\n\n\n\n\n\n# create a kable table to mirror plot of distance effects for vb and condit \n\n\ne1 |&gt; filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) |&gt; group_by(vb,condit) %&gt;% \n  summarise(distMean=mean(dist),distSd=sd(dist)) %&gt;% \n  mutate(meanLab=paste0(\"Mean=\",round(distMean,0)),sdLab=paste0(\"Sd=\",round(distSd,0))) %&gt;% \n  mutate(sumStatLab=paste0(meanLab,\"\\n\",sdLab)) %&gt;% \n  select(vb,condit,sumStatLab) %&gt;% \n  spread(condit,sumStatLab) %&gt;% \n  kable(format = \"html\",escape = FALSE) %&gt;% \n  kable_styling(font_size = 10)\n\n\n\n\nvb\nConstant\nVaried\n\n\n\n100-300\nMean=254 Sd=298\nMean=386 Sd=426\n\n\n350-550\nMean=191 Sd=229\nMean=285 Sd=340\n\n\n600-800\nMean=150 Sd=184\nMean=234 Sd=270\n\n\n800-1000\nMean=184 Sd=242\nMean=221 Sd=248\n\n\n1000-1200\nMean=233 Sd=282\nMean=208 Sd=226\n\n\n1200-1400\nMean=287 Sd=290\nMean=242 Sd=235\n\n\n\n\n\n\n\n\n\ne1 |&gt; filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) |&gt;  ggplot(aes(x = vb, y = vx,fill=condit)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) \n\n\n\n\n\n\ntestAvg |&gt;  ggplot(aes(x = vb, y = vx,fill=condit)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) \n\n\n\n\n\n\ne1 |&gt; filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) |&gt; group_by(vb,condit) %&gt;% \n  summarise(vxMean=mean(vx),vxSd=sd(vx)) %&gt;% \n  mutate(meanLab=paste0(\"Mean=\",round(vxMean,0)),sdLab=paste0(\"Sd=\",round(vxSd,0))) %&gt;% \n  mutate(sumStatLab=paste0(meanLab,\"\\n\",sdLab)) %&gt;% \n  select(vb,condit,sumStatLab) %&gt;% \n  spread(condit,sumStatLab) %&gt;% \n  kable(format = \"html\",escape = FALSE) %&gt;% \n  kable_styling(font_size = 10)\n\n\n\n\nvb\nConstant\nVaried\n\n\n\n100-300\nMean=524 Sd=327\nMean=664 Sd=448\n\n\n350-550\nMean=659 Sd=303\nMean=768 Sd=402\n\n\n600-800\nMean=770 Sd=300\nMean=876 Sd=390\n\n\n800-1000\nMean=1001 Sd=357\nMean=1064 Sd=370\n\n\n1000-1200\nMean=1167 Sd=430\nMean=1180 Sd=372\n\n\n1200-1400\nMean=1283 Sd=483\nMean=1265 Sd=412\n\n\n\n\n\n\n\n\n\ne1 |&gt; filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) |&gt;  ggplot(aes(x = vb, y = sdist,fill=condit)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) \n\n\n\n\n\n\ntestAvg |&gt;  ggplot(aes(x = vb, y = sdist,fill=condit)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) \n\n\n\n\n\n\ne1 |&gt; filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) |&gt; group_by(vb,condit) %&gt;% \n  summarise(sdistMean=mean(sdist),sdistSd=sd(sdist)) %&gt;% \n  mutate(meanLab=paste0(\"Mean=\",round(sdistMean,0)),sdLab=paste0(\"Sd=\",round(sdistSd,0))) %&gt;% \n  mutate(sumStatLab=paste0(meanLab,\"\\n\",sdLab)) %&gt;% \n  select(vb,condit,sumStatLab) %&gt;% \n  spread(condit,sumStatLab) %&gt;% \n  kable(format = \"html\",escape = FALSE) %&gt;% \n  kable_styling(font_size = 10)\n\n\n\n\nvb\nConstant\nVaried\n\n\n\n100-300\nMean=252 Sd=299\nMean=385 Sd=427\n\n\n350-550\nMean=163 Sd=250\nMean=265 Sd=356\n\n\n600-800\nMean=62 Sd=229\nMean=152 Sd=323\n\n\n800-1000\nMean=89 Sd=291\nMean=136 Sd=303\n\n\n1000-1200\nMean=64 Sd=360\nMean=66 Sd=300\n\n\n1200-1400\nMean=-3 Sd=408\nMean=-25 Sd=336\n\n\n\n\n\n\n\n\n\ntestAvg |&gt;  ggplot(aes(x = vb, y = Percent_Hit,fill=condit)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) \n\n\n\n\n\n\ntestAvg |&gt; group_by(vb,condit) %&gt;% \n  summarise(Percent_HitMean=mean(Percent_Hit),Percent_HitSd=sd(Percent_Hit)) %&gt;% \n  mutate(meanLab=paste0(\"Mean=\",round(Percent_HitMean,3)),sdLab=paste0(\"Sd=\",round(Percent_HitSd,2))) %&gt;% \n  mutate(sumStatLab=paste0(meanLab,\"\\n\",sdLab)) %&gt;% \n  select(vb,condit,sumStatLab) %&gt;% \n  spread(condit,sumStatLab) %&gt;% \n  kable(format = \"html\",escape = FALSE) %&gt;% \n  kable_styling(font_size = 10)\n\n\n\n\nvb\nConstant\nVaried\n\n\n\n100-300\nMean=0.252 Sd=0.26\nMean=0.201 Sd=0.26\n\n\n350-550\nMean=0.246 Sd=0.19\nMean=0.245 Sd=0.21\n\n\n600-800\nMean=0.281 Sd=0.17\nMean=0.206 Sd=0.16\n\n\n800-1000\nMean=0.278 Sd=0.23\nMean=0.19 Sd=0.19\n\n\n1000-1200\nMean=0.21 Sd=0.2\nMean=0.206 Sd=0.2\n\n\n1200-1400\nMean=0.161 Sd=0.17\nMean=0.2 Sd=0.19\n\n\n\n\n\n\n\n\nBandType\n\ncreate_table(test, \"vx\")\n\n\n\nSummary of vx\n\n\n\n\n\n\n\nBand\nBand Type\nConstant\nBand Type\nVaried\n\n\n\n\n100-300\nExtrapolation\nMean=523 SD=245\nExtrapolation\nMean=665 SD=365\n\n\n350-550\nExtrapolation\nMean=661 SD=224\nExtrapolation\nMean=772 SD=321\n\n\n600-800\nExtrapolation\nMean=772 SD=210\nExtrapolation\nMean=880 SD=292\n\n\n800-1000\nTrained\nMean=1009 SD=255\nTrained\nMean=1070 SD=249\n\n\n1000-1200\nExtrapolation\nMean=1173 SD=308\nTrained\nMean=1181 SD=266\n\n\n1200-1400\nExtrapolation\nMean=1307 SD=356\nTrained\nMean=1269 SD=292\n\n\n\n\n\ncreate_table(test, \"Percent_Hit\")\n\n\n\nSummary of Percent_Hit\n\n\n\n\n\n\n\nBand\nBand Type\nConstant\nBand Type\nVaried\n\n\n\n\n100-300\nExtrapolation\nMean=0.252 SD=0.26\nExtrapolation\nMean=0.201 SD=0.26\n\n\n350-550\nExtrapolation\nMean=0.246 SD=0.19\nExtrapolation\nMean=0.245 SD=0.21\n\n\n600-800\nExtrapolation\nMean=0.281 SD=0.17\nExtrapolation\nMean=0.206 SD=0.16\n\n\n800-1000\nTrained\nMean=0.278 SD=0.23\nTrained\nMean=0.19 SD=0.19\n\n\n1000-1200\nExtrapolation\nMean=0.21 SD=0.2\nTrained\nMean=0.206 SD=0.2\n\n\n1200-1400\nExtrapolation\nMean=0.161 SD=0.17\nTrained\nMean=0.2 SD=0.19\n\n\n\n\n\n\nAggregation\n\ne1 %&gt;%\n  filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) %&gt;%\n  group_by(vb, condit, bandType) %&gt;%\n  summarise(distMean = mean(dist), distSd = sd(dist)) %&gt;%\n  mutate(\n    meanLab = paste0(\"Mean=\", round(distMean, 0)),\n    sdLab = paste0(\"Sd=\", round(distSd, 0))\n  ) %&gt;%\n  mutate(sumStatLab = paste0(meanLab, \"\\n\", sdLab)) %&gt;%\n  pivot_wider(\n    id_cols = c(vb, bandType),\n    names_from = condit,\n    values_from = sumStatLab\n  ) %&gt;%\n  arrange(vb, bandType) %&gt;%\n  kable(format = \"html\", escape = FALSE)\n\n\n\n\nvb\nbandType\nConstant\nVaried\n\n\n\n100-300\nExtrapolation\nMean=254 Sd=298\nMean=386 Sd=426\n\n\n350-550\nExtrapolation\nMean=191 Sd=229\nMean=285 Sd=340\n\n\n600-800\nExtrapolation\nMean=150 Sd=184\nMean=234 Sd=270\n\n\n800-1000\nTrained\nMean=184 Sd=242\nMean=221 Sd=248\n\n\n1000-1200\nTrained\nNA\nMean=208 Sd=226\n\n\n1000-1200\nExtrapolation\nMean=233 Sd=282\nNA\n\n\n1200-1400\nTrained\nNA\nMean=242 Sd=235\n\n\n1200-1400\nExtrapolation\nMean=287 Sd=290\nNA\n\n\n\n\n\ne1 |&gt; filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) |&gt; group_by(vb,condit) %&gt;% \n  summarise(vxMean=mean(vx),vxSd=sd(vx)) %&gt;% \n  mutate(meanLab=paste0(\"Mean=\",round(vxMean,0)),sdLab=paste0(\"Sd=\",round(vxSd,0))) %&gt;% \n  mutate(sumStatLab=paste0(meanLab,\"\\n\",sdLab)) %&gt;% \n  select(vb,condit,sumStatLab) %&gt;% \n  spread(condit,sumStatLab) %&gt;% \n  kable(format = \"html\",escape = FALSE,caption = \"Vx Mean\") %&gt;% \n  kable_styling(font_size = 10)\n\n\n\nVx Mean\n\nvb\nConstant\nVaried\n\n\n\n100-300\nMean=524 Sd=327\nMean=664 Sd=448\n\n\n350-550\nMean=659 Sd=303\nMean=768 Sd=402\n\n\n600-800\nMean=770 Sd=300\nMean=876 Sd=390\n\n\n800-1000\nMean=1001 Sd=357\nMean=1064 Sd=370\n\n\n1000-1200\nMean=1167 Sd=430\nMean=1180 Sd=372\n\n\n1200-1400\nMean=1283 Sd=483\nMean=1265 Sd=412\n\n\n\n\n\ne1 |&gt; filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) |&gt; group_by(vb,condit) %&gt;% \n  summarise(sdistMean=mean(sdist),sdistSd=sd(sdist)) %&gt;% \n  mutate(meanLab=paste0(\"Mean=\",round(sdistMean,0)),sdLab=paste0(\"Sd=\",round(sdistSd,0))) %&gt;% \n  mutate(sumStatLab=paste0(meanLab,\"\\n\",sdLab)) %&gt;% \n  select(vb,condit,sumStatLab) %&gt;% \n  spread(condit,sumStatLab) %&gt;% \n  kable(format = \"html\",escape = FALSE,caption = \"Signed Deviation Mean\") %&gt;% \n  kable_styling(font_size = 10)\n\n\n\nSigned Deviation Mean\n\nvb\nConstant\nVaried\n\n\n\n100-300\nMean=252 Sd=299\nMean=385 Sd=427\n\n\n350-550\nMean=163 Sd=250\nMean=265 Sd=356\n\n\n600-800\nMean=62 Sd=229\nMean=152 Sd=323\n\n\n800-1000\nMean=89 Sd=291\nMean=136 Sd=303\n\n\n1000-1200\nMean=64 Sd=360\nMean=66 Sd=300\n\n\n1200-1400\nMean=-3 Sd=408\nMean=-25 Sd=336\n\n\n\n\n\ntestAvg |&gt; group_by(vb,condit) %&gt;% \n  summarise(Percent_HitMean=mean(Percent_Hit),Percent_HitSd=sd(Percent_Hit)) %&gt;% \n  mutate(meanLab=paste0(\"Mean=\",round(Percent_HitMean,3)),sdLab=paste0(\"Sd=\",round(Percent_HitSd,2))) %&gt;% \n  mutate(sumStatLab=paste0(meanLab,\"\\n\",sdLab)) %&gt;% \n  select(vb,condit,sumStatLab) %&gt;% \n  spread(condit,sumStatLab) %&gt;% \n  kable(format = \"html\",escape = FALSE,caption = \"Mean % Hit\") %&gt;% \n  kable_styling(font_size = 10)\n\n\n\nMean % Hit\n\nvb\nConstant\nVaried\n\n\n\n100-300\nMean=0.252 Sd=0.26\nMean=0.201 Sd=0.26\n\n\n350-550\nMean=0.246 Sd=0.19\nMean=0.245 Sd=0.21\n\n\n600-800\nMean=0.281 Sd=0.17\nMean=0.206 Sd=0.16\n\n\n800-1000\nMean=0.278 Sd=0.23\nMean=0.19 Sd=0.19\n\n\n1000-1200\nMean=0.21 Sd=0.2\nMean=0.206 Sd=0.2\n\n\n1200-1400\nMean=0.161 Sd=0.17\nMean=0.2 Sd=0.19\n\n\n\n\n\n\nTables Aggregating by Id first\n\ne1 %&gt;% group_by(id, vb, condit) %&gt;%\n  summarise(dist = mean(dist), .groups = 'drop') %&gt;%\n  group_by(vb, condit) %&gt;%\n  summarise(distMean = mean(dist), distSd = sd(dist), .groups = 'drop') %&gt;%\n  mutate(\n    meanLab = paste0(\"Mean=\", round(distMean, 0)),\n    sdLab = paste0(\"Sd=\", round(distSd, 0))\n  ) %&gt;%\n  mutate(sumStatLab = paste0(meanLab, \"\\n\", sdLab)) %&gt;%\n  select(vb, condit, sumStatLab) %&gt;%\n  spread(condit, sumStatLab) %&gt;%\n  kable(format = \"html\", escape = FALSE, caption = \"Deviation Mean - Aggregate by Id\") %&gt;%\n  kable_styling(font_size = 11)\n\n\n\nDeviation Mean - Aggregate by Id\n\nvb\nConstant\nVaried\n\n\n\n100-300\nMean=241 Sd=174\nMean=340 Sd=264\n\n\n350-550\nMean=180 Sd=121\nMean=261 Sd=202\n\n\n600-800\nMean=146 Sd=76\nMean=218 Sd=145\n\n\n800-1000\nMean=138 Sd=57\nMean=206 Sd=86\n\n\n1000-1200\nMean=241 Sd=173\nMean=206 Sd=74\n\n\n1200-1400\nMean=295 Sd=186\nMean=261 Sd=70\n\n\n\n\n\ne1 %&gt;%\n  filter(expMode %in% c(\"test-Nf\", \"test-train-nf\")) %&gt;%\n  group_by(id, vb, condit) %&gt;%\n  summarise(vx = mean(vx), .groups = 'drop') %&gt;%\n  group_by(vb, condit) %&gt;%\n  summarise(vxMean = mean(vx), vxSd = sd(vx), .groups = 'drop') %&gt;%\n  mutate(\n    meanLab = paste0(\"Mean=\", round(vxMean, 0)),\n    sdLab = paste0(\"Sd=\", round(vxSd, 0))\n  ) %&gt;%\n  mutate(sumStatLab = paste0(meanLab, \"\\n\", sdLab)) %&gt;%\n  select(vb, condit, sumStatLab) %&gt;%\n  spread(condit, sumStatLab) %&gt;%\n  kable(format = \"html\", escape = FALSE, caption = \"Vx Mean - Aggregate by Id\") %&gt;%\n  kable_styling(font_size = 11)\n\n\n\nVx Mean - Aggregate by Id\n\nvb\nConstant\nVaried\n\n\n\n100-300\nMean=523 Sd=245\nMean=665 Sd=365\n\n\n350-550\nMean=661 Sd=224\nMean=772 Sd=321\n\n\n600-800\nMean=772 Sd=210\nMean=880 Sd=292\n\n\n800-1000\nMean=1009 Sd=255\nMean=1070 Sd=249\n\n\n1000-1200\nMean=1173 Sd=308\nMean=1181 Sd=266\n\n\n1200-1400\nMean=1307 Sd=356\nMean=1269 Sd=292\n\n\n\n\n\ne1 %&gt;%\n  filter(expMode %in% c(\"test-Nf\", \"test-train-nf\")) %&gt;%\n  group_by(id, vb, condit) %&gt;%\n  summarise(sdist = mean(sdist), .groups = 'drop') %&gt;%\n  group_by(vb, condit) %&gt;%\n  summarise(sdistMean = mean(sdist), sdistSd = sd(sdist), .groups = 'drop') %&gt;%\n  mutate(\n    meanLab = paste0(\"Mean=\", round(sdistMean, 0)),\n    sdLab = paste0(\"Sd=\", round(sdistSd, 0))\n  ) %&gt;%\n  mutate(sumStatLab = paste0(meanLab, \"\\n\", sdLab)) %&gt;%\n  select(vb, condit, sumStatLab) %&gt;%\n  spread(condit, sumStatLab) %&gt;%\n  kable(format = \"html\", escape = FALSE, caption = \"Signed Distance Mean - Aggregate by Id\") %&gt;%\n  kable_styling(font_size = 11)\n\n\n\nSigned Distance Mean - Aggregate by Id\n\nvb\nConstant\nVaried\n\n\n\n100-300\nMean=251 Sd=221\nMean=386 Sd=344\n\n\n350-550\nMean=164 Sd=181\nMean=270 Sd=286\n\n\n600-800\nMean=63 Sd=156\nMean=155 Sd=241\n\n\n800-1000\nMean=96 Sd=206\nMean=141 Sd=196\n\n\n1000-1200\nMean=70 Sd=253\nMean=66 Sd=209\n\n\n1200-1400\nMean=17 Sd=297\nMean=-20 Sd=232\n\n\n\n\n\ntestAvg %&gt;%\n  group_by(id, vb, condit) %&gt;%\n  summarise(Percent_Hit = mean(Percent_Hit), .groups = 'drop') %&gt;%\n  group_by(vb, condit) %&gt;%\n  summarise(\n    Percent_HitMean = mean(Percent_Hit),\n    Percent_HitSd = sd(Percent_Hit),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(\n    meanLab = paste0(\"Mean=\", round(Percent_HitMean, 3)),\n    sdLab = paste0(\"Sd=\", round(Percent_HitSd, 2))\n  ) %&gt;%\n  mutate(sumStatLab = paste0(meanLab, \"\\n\", sdLab)) %&gt;%\n  select(vb, condit, sumStatLab) %&gt;%\n  spread(condit, sumStatLab) %&gt;%\n  kable(format = \"html\", escape = FALSE, caption = \"Mean % Hit - Aggregate by Id\") %&gt;%\n  kable_styling(font_size = 10)\n\n\n\nMean % Hit - Aggregate by Id\n\nvb\nConstant\nVaried\n\n\n\n100-300\nMean=0.252 Sd=0.26\nMean=0.201 Sd=0.26\n\n\n350-550\nMean=0.246 Sd=0.19\nMean=0.245 Sd=0.21\n\n\n600-800\nMean=0.281 Sd=0.17\nMean=0.206 Sd=0.16\n\n\n800-1000\nMean=0.278 Sd=0.23\nMean=0.19 Sd=0.19\n\n\n1000-1200\nMean=0.21 Sd=0.2\nMean=0.206 Sd=0.2\n\n\n1200-1400\nMean=0.161 Sd=0.17\nMean=0.2 Sd=0.19\n\n\n\n\n\n\nTables that also indicate bandType\n\n# Create the Constant table\nconstant_table &lt;- e1 %&gt;%\n  filter(expMode %in% c(\"test-Nf\", \"test-train-nf\")) %&gt;%\n  group_by(vb, bandType, condit) %&gt;%\n  summarise(distMean = mean(dist), distSd = sd(dist)) %&gt;%\n  filter(condit == \"Constant\") %&gt;%\n  mutate(\n    meanLab = paste0(\"Mean=\", round(distMean, 0)),\n    sdLab = paste0(\"Sd=\", round(distSd, 0)),\n    sumStatLab = paste0(meanLab, \"\\n\", sdLab)\n  ) %&gt;%\n  select(vb, bandType, sumStatLab) %&gt;%\n  rename(Constant = sumStatLab)\n\n# Create the Varied table\nvaried_table &lt;- e1 %&gt;%\n  filter(expMode %in% c(\"test-Nf\", \"test-train-nf\")) %&gt;%\n  group_by(vb, bandType, condit) %&gt;%\n  summarise(distMean = mean(dist), distSd = sd(dist)) %&gt;%\n  filter(condit == \"Varied\") %&gt;%\n  mutate(\n    meanLab = paste0(\"Mean=\", round(distMean, 0)),\n    sdLab = paste0(\"Sd=\", round(distSd, 0)),\n    sumStatLab = paste0(meanLab, \"\\n\", sdLab)\n  ) %&gt;%\n  select(vb, bandType, sumStatLab) %&gt;%\n  rename(Varied = sumStatLab)\n\n# Merge tables\nfinal_table &lt;- full_join(constant_table, varied_table, by = \"vb\")\n\n# Create the table\nfinal_table %&gt;%\n  kbl(digits = c(0, 0, 0, 0, 0),\n      caption = \"Data summary\") %&gt;%\n  kable_minimal(full_width = FALSE,\n      position = \"left\") %&gt;%\n  add_header_above(c(\"vb\" = 1, \"Constant\" = 2, \"Varied\" = 2))\n\n\n\nData summary\n\n\n\n\n\n\n\n\n\n\nvb\n\n\nConstant\n\n\nVaried\n\n\n\nvb\nbandType.x\nConstant\nbandType.y\nVaried\n\n\n\n\n100-300\nExtrapolation\nMean=254 Sd=298\nExtrapolation\nMean=386 Sd=426\n\n\n350-550\nExtrapolation\nMean=191 Sd=229\nExtrapolation\nMean=285 Sd=340\n\n\n600-800\nExtrapolation\nMean=150 Sd=184\nExtrapolation\nMean=234 Sd=270\n\n\n800-1000\nTrained\nMean=184 Sd=242\nTrained\nMean=221 Sd=248\n\n\n1000-1200\nExtrapolation\nMean=233 Sd=282\nTrained\nMean=208 Sd=226\n\n\n1200-1400\nExtrapolation\nMean=287 Sd=290\nTrained\nMean=242 Sd=235\n\n\n\n\n\n\n\n\n\n\n\nrectWidth=.4\nvbRect&lt;- e1 %&gt;% group_by(vb) %&gt;% \n  summarise(lowBound=first(bandInt),highBound=first(highBound)) %&gt;% mutate(vbn=as.numeric(vb),\n                  vbLag=vbn-rectWidth,vbLead=vbn+rectWidth)\n\ne1 |&gt; filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) |&gt;  ggplot(aes(x = condit, y = vx,fill=vb)) + \n  ggdist::stat_halfeye()\n\n\nvbRect&lt;- e1 |&gt; group_by(vb) |&gt;\n  summarise(lowBound=first(bandInt),highBound=first(highBound)) |&gt; \n  mutate(vbn=as.numeric(vb), rectWidth=.2,\n                  vbLag=vbn-rectWidth,vbLead=vbn+rectWidth)\n\ne1 |&gt; filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) |&gt;  \n  ggplot(aes(x = vb, y = vx,fill=vb)) + \n  ggdist::stat_halfeye(alpha=.5) + \n  geom_rect(data=vbRect,aes(xmin=vbLag,xmax=vbLead,ymin=lowBound,ymax=highBound,fill=vb),alpha=.3,inherit.aes = FALSE)+\n  scale_y_continuous(expand=expansion(add=100),breaks=round(seq(0,2400,by=200),2)) +\n  geom_segment(data=vbRect, aes(x=vbLag,xend=vbLead,y=highBound,yend=highBound),alpha=1,linetype=\"dashed\")+\n  geom_segment(data=vbRect, aes(x=vbLag,xend=vbLead,y=lowBound,yend=lowBound),alpha=1,linetype=\"dashed\")+\n  geom_text(data=vbRect,aes(x=vbLag-.03,y=lowBound+100,label=vb),angle=90,size=3.5,fontface=\"bold\")\n\n\ntestAvg |&gt;  \n  ggplot(aes(x = vb, y = vx,fill=vb)) + \n  ggdist::stat_halfeye(alpha=.5,width=.7) + \n  geom_rect(data=vbRect,aes(xmin=vbLag,xmax=vbLead,ymin=lowBound,ymax=highBound,fill=vb),alpha=.3,inherit.aes = FALSE)+\n  facet_wrap(~condit,ncol=1)+\n  scale_y_continuous(expand=expansion(add=100),breaks=round(seq(0,2000,by=200),2)) +\n  geom_segment(data=vbRect, aes(x=vbLag,xend=vbLead,y=highBound,yend=highBound),alpha=1,linetype=\"dashed\",inherit.aes = FALSE)+\n  geom_segment(data=vbRect, aes(x=vbLag,xend=vbLead,y=lowBound,yend=lowBound),alpha=1,linetype=\"dashed\",inherit.aes = FALSE)+\n  geom_text(data=vbRect,aes(x=vbLag-.03,y=lowBound+100,label=vb),angle=90,size=5.5,fontface=\"bold\",inherit.aes = FALSE)  \n  \n\n\n# testAvg |&gt;  \n#   ggplot(aes(x = vb, y = sdist,fill=vb)) + \n#   ggdist::stat_halfeye(alpha=.5,width=.7) + \n#   facet_wrap(~condit,ncol=1)\n# \n# \n# testAvg |&gt;  \n#   ggplot(aes(x = vb, y = dist,fill=vb)) + \n#   ggdist::stat_halfeye(alpha=.5,width=.7) + \n#   facet_wrap(~condit,ncol=1)\n# \n# \n\n\nsumStats2 = test %&gt;% group_by(id,condit,vb) %&gt;%\n  summarise(distMean=mean(dist),distMedian=median(dist),distSd=sd(dist)) %&gt;%group_by(condit,vb) %&gt;%\n  summarise(groupMean=round(mean(distMean),0),groupMedian=round(mean(distMedian),0),groupSd=round(mean(distSd),0)) %&gt;%\n  mutate(meanLab=paste0(\"Mean=\",groupMean),medianLab=paste0(\"Median=\",groupMedian),sdLab=paste0(\"Sd=\",groupSd)) %&gt;%\n  mutate(sumStatLab=paste0(meanLab,\"\\n\",medianLab,\"\\n\",sdLab))\n\nsumStats = test %&gt;% group_by(id,condit,vb) %&gt;%\n  summarise(distMean=mean(vx),distMedian=median(vx),distSd=sd(vx)) %&gt;%group_by(condit,vb) %&gt;%\n  summarise(groupMean=round(mean(distMean),0),groupMedian=round(mean(distMedian),0),groupSd=round(mean(distSd),0)) %&gt;%\n  mutate(meanLab=paste0(\"Mean=\",groupMean),medianLab=paste0(\"Median=\",groupMedian),sdLab=paste0(\"Sd=\",groupSd)) %&gt;%\n  mutate(sumStatLab=paste0(meanLab,\"\\n\",medianLab,\"\\n\",sdLab))\n\nbandLines4 &lt;- list(geom_segment(data=vbRect,aes(x=vbLag,xend=vbLead,y=highBound,yend=highBound),alpha=1,linetype=\"dashed\"),\n                   geom_segment(data=vbRect,aes(x=vbLag,xend=vbLead,y=lowBound,yend=lowBound),alpha=1,linetype=\"dashed\"),\n                   geom_text(data=vbRect,aes(x=vbLag-.03,y=lowBound+100,label=vb),angle=90,size=2.5,fontface=\"bold\") )    \n\n\ntest %&gt;% group_by(id,vb,condit) %&gt;% \n  summarise(vxMean=mean(vx)) %&gt;%\n  ggplot(aes(x=vb,y=vxMean,fill=vb))+\n  gghalves::geom_half_violin(color=NA)+ # remove border color\n  gghalves::geom_half_boxplot(position=position_nudge(x=-0.05),side=\"r\",outlier.shape = NA,center=TRUE, \n                    errorbar.draw = FALSE,width=.25)+\n  gghalves::geom_half_point(transformation = position_jitter(width = 0.05, height = 0.05),size=.3,aes(color=vb))+\n  facet_wrap(~condit,scale=\"free_x\")+\n  geom_rect(data=vbRect,aes(xmin=vbLag,xmax=vbLead,ymin=lowBound,ymax=highBound,fill=vb),alpha=.3,inherit.aes = FALSE)+\n  bandLines4+\n  #geom_text(data=sumStats,aes(x=vb,y=2100,label = groupMean),size=2, vjust = -0.5)+\n  scale_y_continuous(expand=expansion(add=100),breaks=round(seq(0,2000,by=200),2))+\n  theme(legend.position='none',\n        plot.title=element_text(face=\"bold\"),\n        axis.title.x=element_text(face=\"bold\"),\n        axis.title.y=element_text(face=\"bold\"),\n        axis.text.x = element_text(size = 7.5))+\n  ylab(\"Mean X Velocity\")+xlab(\"Target Velocity Band\") + \n  ggtitle(\"Testing Performance (no-feedback) - X-Velocity Per Band\")+ \n  geom_text(data=sumStats2,aes(y=2090,label = sumStatLab),size=1.9)\n\n\n#test %&gt;% group_by(id,vb,condit) |&gt; plot_distByCondit()\n\n\ntest %&gt;% group_by(id,vb,condit) %&gt;% \n  summarise(distMean=mean(dist)) %&gt;% \n  ggplot(aes(x=vb,y=distMean,fill=vb))+\n  geom_half_violin(color=NA)+ # remove border color\n  geom_half_boxplot(position=position_nudge(x=-0.05),side=\"r\",outlier.shape = NA,center=TRUE, \n                    errorbar.draw = FALSE,width=.25)+\n  geom_half_point(transformation = position_jitter(width = 0.05, height = 0.05),size=.3,aes(color=vb))+\n  facet_wrap(~condit,scale=\"free_x\")+\n  scale_y_continuous(expand=expansion(add=100),breaks=round(seq(0,2000,by=200),2))+\n  theme(legend.position='none',\n        plot.title=element_text(face=\"bold\"),\n        axis.title.x=element_text(face=\"bold\"),\n        axis.title.y=element_text(face=\"bold\"),\n        axis.text.x = element_text(size = 9.0))+\n  ylab(\"Mean Distance From Boundary\")+xlab(\"Target Velocity Band\") + \n  ggtitle(\"Testing Performance (no-feedback) - Absolute Distance from Boundary\")+ \n  geom_text(data=sumStats2,aes(y=1200,label = sumStatLab),size=3,fontface=\"bold\")\n\n\ntest %&gt;% group_by(sbjCode,condit,vb) %&gt;% \n  summarise(distMean=mean(dist)) %&gt;% \n  ggplot(aes(x=condit,y=distMean,fill=condit))+\n  stat_summary(geom=\"bar\",fun=mean,position=position_nudge(x=.21),alpha=.7,width=.2)+\n   stat_summary(geom=\"errorbar\",fun.data=mean_se,position=position_nudge(x=.21),alpha=.7,width=.1,)+\n  geom_half_violin(position=position_dodge(.5),alpha=.55,color=NA)+ # remove border color\n  geom_half_boxplot(position=position_dodge(.5),side=\"r\",outlier.shape = NA,center=TRUE, \n                    errorbar.draw = FALSE,width=.25,alpha=.55)+\n  geom_half_point(transformation = position_jitter(width = 0.05, height = 0.05),alpha=.2,size=.3)+\n  facet_wrap(~vb,scale=\"free_x\")+\n  scale_y_continuous(expand=expansion(add=200),breaks=round(seq(0,2000,by=200),2))+\n  theme(legend.position='none',\n        plot.title=element_text(face=\"bold\"),\n        axis.title.x=element_text(face=\"bold\"),\n        axis.title.y=element_text(face=\"bold\"),\n        axis.text.x = element_text(size = 9.0))+\n  ylab(\"Mean Distance From Boundary\")+xlab(\"Training Condition\") + \n  ggtitle(\"Testing Performance (no-feedback) - Absolute Distance from Boundary\")+ \n  geom_text(data=sumStats2,aes(y=1390,label = sumStatLab),position=position_dodge(.5),size=3,fontface=\"bold\")\n\n\nlibrary(ggforce)\n\ntestAvg %&gt;% ggplot(aes(x=vx,y=condit,col=condit))+ ggdist::stat_halfeye()+facet_col(facets=\"vb\")\n\n\n\n\n\n\ntestAvg %&gt;% ggplot(aes(x=sdist,y=condit,col=condit))+ geom_boxplot()+facet_col(facets=\"vb\")+geom_vline(xintercept=0)+theme_classic()\n\n\n\n\n\n\nlibrary(ggh4x)\nlibrary(ggdist)\n\ntestAvg %&gt;% ggplot(aes(x=vx,y=vb,col=bandType)) +  ggdist::stat_halfeye(normalize=\"groups\")+ facet_nested_wrap(vars(condit,tOrder),nrow=2)+theme_classic()\n\n\n\n\n\n\ntestAvg %&gt;% ggplot(aes(x=vx,y=vb,col=bandType)) +  ggdist::stat_histinterval(normalize=\"groups\")+ facet_nested_wrap(vars(condit,tOrder),nrow=2)+theme_classic()\n\n\n\n\n\n\ntestAvg %&gt;% ggplot(aes(x=vx,y=vb,col=bandType)) +  ggdist::stat_histinterval(normalize=\"groups\")+ facet_nested_wrap(vars(condit,tOrder),nrow=2)+theme_classic()\n\n\n\n\n\n\ne1 |&gt; group_by(id, condit, vb, bandInt,bandType,tOrder,expMode2) %&gt;%\n  summarise(vx=mean(vx),dist=mean(dist),sdist=mean(sdist)) %&gt;%\n  ggplot(aes(x=vx,y=condit,col=condit)) +  ggdist::stat_histinterval(normalize=\"groups\")+ facet_nested_wrap(vars(vb,expMode2),nrow=6)+theme_classic()\n\n\n\n\n\n\ne1 |&gt; group_by(id, condit, vb, bandInt,bandType,tOrder,expMode2) %&gt;%\n  summarise(vx=mean(vx),dist=mean(dist),sdist=mean(sdist)) %&gt;% ggplot(aes(x=sdist,y=vb,col=condit))+ stat_histinterval(normalize=\"groups\",position=position_dodge())+facet_col(facets=\"expMode2\")+geom_vline(xintercept=0)+theme_classic()",
    "crumbs": [
      "Analyses",
      "E1 Extras"
    ]
  },
  {
    "objectID": "Analysis/e1_Analysis.html#dictionary",
    "href": "Analysis/e1_Analysis.html#dictionary",
    "title": "E1 Extras",
    "section": "Dictionary",
    "text": "Dictionary\n\n\n\n\n\n\n\nVariable Name\nVariable Levels\nDescription\n\n\n\ncondit\nConstant, Varied\nCondition of the experiment: constant or varied\n\n\ntOrder\nTest First, Train First\nOrder of testing and training stages: test first or train first\n\n\nexpMode\ntrain, train-Nf, test-Nf, etc.\nMode of the experiment: train, train-Nf, test-Nf, etc.\n\n\ntrainStage\nBeginning, Middle, End, Test\nStage of the training: beginning, middle, end, or test\n\n\nexpStage\nTrainStart, intTest1, etc.\nStage of the experiment: TrainStart, intTest1, TrainMid1, etc.\n\n\nband\n1, 2, 3, 4, 5, 6\nBand number\n\n\nvb\n100-300, 350-550, etc.\nVelocity band range\n\n\nlowBound\n100, 350, 600, etc.\nLower bound of the velocity band range\n\n\nfeedback\n0, 1\nFeedback type: 0 (no feedback), 1 (feedback)\n\n\nstage\n1, 2, 3, etc.\nStage number of the experiment",
    "crumbs": [
      "Analyses",
      "E1 Extras"
    ]
  },
  {
    "objectID": "Analysis/brms_learning.html",
    "href": "Analysis/brms_learning.html",
    "title": "Bayesian Mixed Effects Models - Training Data",
    "section": "",
    "text": "Codepacman::p_load(tidyverse,tidybayes,brms,bayesplot,broom,broom.mixed,lme4,emmeans,here,knitr,kableExtra,gt,gghalves,patchwork,ggforce,ggdist)\ne1 &lt;- readRDS(here(\"data/e1_08-21-23.rds\"))\nsource(here(\"Functions/Packages.R\"))\ntrain &lt;- e1 |&gt; filter(expMode2 == \"Train\")  \ntrain$bandIntS &lt;- scale(train$bandInt)\ntrain$distS &lt;- scale(train$dist)\n\noptions(brms.backend=\"cmdstanr\",mc.cores=4)\n\n\n\nCodemod_train_expo3_dist &lt;-bf(dist ~ betaMu + (alphaMu - betaMu) * exp(-exp(gammaMu) * gt.train),\n                 betaMu ~ 1 + (1|id), \n                 alphaMu ~ 1 +   (1|id), \n                 gammaMu ~ 1 +  (1|id), \n                 nl = TRUE)\n\ne1_train_expo3_dist &lt;- brm(mod_train_expo3_dist,\n                            chains=4, iter=2000, silent=0,\n                            file=here::here(\"data/model_cache/e1_train_expo3_dist\"))\n\n\nmod_train_expo3_condit_dist &lt;- bf(dist ~ betaMu + (alphaMu - betaMu) * exp(-exp(gammaMu) * gt.train),\n                 betaMu ~ 1 + condit + (1|id), \n                 alphaMu ~ 1 + condit +   (1|id), \n                 gammaMu ~ 1 + condit + (1|id), \n                 nl = TRUE)\n\ne1_train_expo3_condit_dist &lt;- brm(mod_train_expo3_condit_dist,\n                            chains=4, iter=2000, silent=0,\n                            file=here::here(\"data/model_cache/e1_train_expo3_condit_dist\"))\n\n\n\nmod_train_expo3_conditBandit_dist &lt;- bf(dist ~ betaMu + (alphaMu - betaMu) * exp(-exp(gammaMu) * gt.train),\n                 betaMu ~ 0 + condit + (1|id) + (1|id:bandInt), \n                 alphaMu ~ 0 + condit + (1|id) + (1|id:bandInt), \n                 gammaMu ~ 0 + condit  +  (1|id) + (1|id:bandInt), \n                 nl = TRUE)\n\n\n\ne1_train_expo3_conditBanditS_dist &lt;- brm(mod_train_expo3_conditBandit_dist,\n                            chains=4, iter=2000, silent=0,\n                            data=train,\n                            file=here::here(\"data/model_cache/e1_train_expo3_conditBanditSdist\"))\n\n\n\n\nmod_train_expo3_band_distS &lt;- bf(distS ~ betaMu + (alphaMu - betaMu) * exp(-exp(gammaMu) * gt.train),\n                 betaMu ~ 1 + bandIntS + (1|id), \n                 alphaMu ~ 1 + bandIntS +   (1|id), \n                 gammaMu ~ 1 + bandIntS + (1|id), \n                 nl = TRUE)\n\ne1_train_expo3_band_distS &lt;- brm(mod_train_expo3_band_distS,\n                            chains=4, iter=2000, silent=0,\n                            data=train,\n                            file=here::here(\"data/model_cache/e1_train_expo3_band_distS\"))\ncoef(e1_train_expo3_band_distS)$id |&gt; as_tibble(rownames=\"id\") |&gt; select(starts_with(\"Esti\")) |&gt; print(n=15)\n\n# A tibble: 166 × 6\n   Estimate.betaMu_Intercept Estimate.alphaMu_Intercept Estimate.gammaMu_Inter…¹\n                       &lt;dbl&gt;                      &lt;dbl&gt;                    &lt;dbl&gt;\n 1                    0.0374                       4.63                   -0.778\n 2                    0.267                        3.45                   -0.411\n 3                   -0.0654                       4.56                   -0.657\n 4                   -0.118                        1.30                   -0.186\n 5                    0.132                        2.35                   -0.795\n 6                   -0.158                        1.74                    0.331\n 7                    0.168                        1.92                    0.181\n 8                    0.0307                       1.08                    0.621\n 9                   -0.433                        3.63                   -1.31 \n10                   -0.369                        4.27                   -1.62 \n11                   -0.414                        1.67                   -0.237\n12                   -0.176                        3.24                   -1.98 \n13                    0.112                        1.39                    0.645\n14                   -0.141                        1.91                    0.176\n15                   -0.370                        3.90                   -1.52 \n# ℹ 151 more rows\n# ℹ abbreviated name: ¹​Estimate.gammaMu_Intercept\n# ℹ 3 more variables: Estimate.betaMu_bandIntS &lt;dbl&gt;,\n#   Estimate.alphaMu_bandIntS &lt;dbl&gt;, Estimate.gammaMu_bandIntS &lt;dbl&gt;\n\nCode mod_train_expo3_bandCondit_distS &lt;- bf(distS ~ betaMu + (alphaMu - betaMu) * exp(-exp(gammaMu) * gt.train),\n                 betaMu ~ 1 + bandIntS + condit + (1|id), \n                 alphaMu ~ 1 + bandIntS + condit +  (1|id), \n                 gammaMu ~ 1 + bandIntS + condit + (1|id), \n                 nl = TRUE)\n\ne1_train_expo3_bandCondit_distS &lt;- brm(mod_train_expo3_bandCondit_distS,\n                            chains=4, iter=2000, silent=0,\n                            data=train,\n                            file=here::here(\"data/model_cache/e1_train_expo3_bandCondit_distS\"))                           \ncoef(e1_train_expo3_bandCondit_distS)$id |&gt; as_tibble(rownames=\"id\") |&gt; select(starts_with(\"Esti\")) |&gt; print(n=15)\n\n# A tibble: 166 × 9\n   Estimate.betaMu_Intercept Estimate.alphaMu_Intercept Estimate.gammaMu_Inter…¹\n                       &lt;dbl&gt;                      &lt;dbl&gt;                    &lt;dbl&gt;\n 1                   -0.230                        74.9                     25.4\n 2                   -0.0105                       74.6                     25.9\n 3                   -0.0861                       76.1                     25.9\n 4                   -0.376                        73.2                     26.3\n 5                    0.0808                       73.9                     25.7\n 6                   -0.438                        73.4                     25.9\n 7                   -0.0976                       73.5                     26.6\n 8                   -0.230                        72.9                     27.0\n 9                   -0.433                        75.0                     25.2\n10                   -0.389                        75.8                     24.9\n11                   -0.421                        73.4                     26.6\n12                   -0.216                        74.5                     24.4\n13                   -0.156                        73.1                     26.7\n14                   -0.405                        73.7                     26.3\n15                   -0.390                        75.4                     25.0\n# ℹ 151 more rows\n# ℹ abbreviated name: ¹​Estimate.gammaMu_Intercept\n# ℹ 6 more variables: Estimate.betaMu_bandIntS &lt;dbl&gt;,\n#   Estimate.betaMu_conditVaried &lt;dbl&gt;, Estimate.alphaMu_bandIntS &lt;dbl&gt;,\n#   Estimate.alphaMu_conditVaried &lt;dbl&gt;, Estimate.gammaMu_bandIntS &lt;dbl&gt;,\n#   Estimate.gammaMu_conditVaried &lt;dbl&gt;\n\n\nb_mod3 &lt;- bf(dist ~ betaMu + (alphaMu - betaMu) * exp(-exp(gammaMu) * gt.train), betaMu ~ 1 + condit + bandInt + (1|id), alphaMu ~ 1 + condit + bandInt + (1|id), gammaMu ~ 1 + condit + bandInt + (1|id), nl = TRUE)"
  },
  {
    "objectID": "Analysis/ME_Slopes.html",
    "href": "Analysis/ME_Slopes.html",
    "title": "Experiment 1 Testing",
    "section": "",
    "text": "Codepacman::p_load(tidyverse,tidybayes, brms, broom, broom.mixed, lme4,emmeans,here,knitr,kableExtra,gt,ggh4x)\ne1 &lt;- readRDS(here(\"data/e1_08-04-23.rds\"))\nsource(here(\"Functions/Display_Functions.R\"))\n\noptions(mc.cores = 4,  # Use 4 cores\n        brms.backend = \"cmdstanr\")\nbayes_seed &lt;- 1234\n\ntest &lt;- e1 |&gt; filter(expMode %in% c(\"test-Nf\",\"test-train-nf\"))\n\nnested_settings &lt;- strip_nested(\n  text_x = list(element_text(family = \"serif\", \n                             face = \"plain\"), NULL),\n  background_x = list(element_rect(fill = \"grey92\"), NULL),\n  by_layer_x = TRUE)\n\n\ntestAvg &lt;- test %&gt;% group_by(id, condit, vb, bandInt) %&gt;%\n  summarise(vx=mean(vx),dist=mean(dist))\n\n\n\nCodemodel_super_boring &lt;- e1 |&gt; filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) |&gt;  with(lm(vx ~ vb))\ntidy(model_super_boring)\n\n\n\nCodemodel_boring &lt;- brm(bf(vx ~ vb),\n                    data=filter(e1,expMode %in% c(\"test-Nf\",\"test-train-nf\")),\n                    chains=2,seed=bayes_seed)\n\ntidy(model_boring)\n\n\n\nCodemodel_fixed &lt;- brm(\n  bf(vx ~ vb + (1 | id)),\n  data = filter(e1,expMode %in% c(\"test-Nf\",\"test-train-nf\")),\n  control = list(adapt_delta = 0.95),\n  chains = 4, seed = bayes_seed\n)\ntidy(model_fixed)\nsummary(model_fixed)\n\ntidy(model_fixed,effects=\"fixed\")\ntidy(model_fixed,effects=\"ran_pars\")\n\nindvEst1 &lt;- ranef(model_fixed)$id %&gt;% as_tibble(rownames=\"id\")\nindvEst1\n\ncoef(model_fixed)$id %&gt;% as_tibble(rownames=\"id\") %&gt;% select(id,starts_with(\"Estimate\"))\n\n\nmodel_fixed %&gt;% \n  emmeans(~ id + vb,\n          at = list(vb = 0),  # Look at predicted values for 1952\n          epred = TRUE,  # Use expected predictions from the posterior\n          re_formula = NULL)\n\n\n\nCodemodel_cont &lt;- brm(\n  bf(vx ~ bandInt + (1 | id)),\n  data = filter(e1,expMode %in% c(\"test-Nf\",\"test-train-nf\")),\n  control = list(adapt_delta = 0.95),\n  chains = 4, seed = bayes_seed\n)\ntidy(model_cont)\nsummary(model_cont)\n\ntidy(model_cont,effects=\"fixed\")\ntidy(model_cont,effects=\"ran_pars\")\n\nindvEst1 &lt;- ranef(model_cont)$id %&gt;% as_tibble(rownames=\"id\")\nindvEst1\n\ncoef(model_cont)$id %&gt;% as_tibble(rownames=\"id\") %&gt;% select(id,starts_with(\"Estimate\"))\n\n\nmodel_cont %&gt;% \n  emmeans(~ id + bandInt,\n          at = list(bandInt = 100),  # Look at predicted values for 1952\n          epred = TRUE,  # Use expected predictions from the posterior\n          re_formula = NULL)\n\n\n\nCodepmcy = test %&gt;% select(id,bandInt) %&gt;% mutate(id=factor(id,levels=unique(id)))\npmcy = expand_grid(id=unique(test$id),bandInt=unique(test$bandInt)) %&gt;% mutate(id=factor(id,levels=unique(id)))\n\npreds1 &lt;- model_cont %&gt;% epred_draws(pmcy,re_formula = NULL) \n  \nnd &lt;- preds1 %&gt;% left_join(test,by=c(\"id\",\"bandInt\"))\n\n\npreds1 &lt;- model_cont %&gt;% epred_draws(pmcy,re_formula = NULL,ndraws=1) \nnd &lt;- preds1 %&gt;% left_join(test,by=c(\"id\",\"bandInt\"))\nnd &lt;- test %&gt;% mutate(pred=preds1$.epred) %&gt;% relocate(bandInt,pred,vx,.after=nGoodTrial)\n\n\n\nggplot(nd[1:5000,],aes(x=bandInt,y=pred))+geom_point(aes(y=vx))+\n  stat_lineribbon(alpha=.5)+scale_fill_brewer(palette=\"Reds\") +\n  labs(title = \"Intercepts and slopes for year trend vary by country\",\n       subtitle = \"lifeExp ~ year + (1 + year | country)\",\n       x = NULL, y = \"Predicted life expectancy\") +\n  guides(fill = \"none\") +\n  facet_nested_wrap(vars(condit, id), nrow = 4, strip = nested_settings) +\n  theme(legend.position = \"bottom\",\n        plot.subtitle = element_text(family = \"serif\"),\n        axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5))\n\n\n\nCodemodel_slope &lt;- brm(\n  bf(vx ~ bandInt + (1 + bandInt | id)),\n  data = filter(e1,expMode %in% c(\"test-Nf\",\"test-train-nf\")),\n  control = list(adapt_delta = 0.95),\n  chains = 4, seed = bayes_seed\n)\ntidy(model_slope)\nsummary(model_slope)\n\ntidy(model_slope,effects=\"fixed\")\ntidy(model_slope,effects=\"ran_pars\")\n\nindvEst2 &lt;- ranef(model_slope)$id %&gt;% as_tibble(rownames=\"id\")\nindvEst2\n\nms_coef &lt;- coef(model_slope)$id %&gt;% as_tibble(rownames=\"id\") %&gt;% select(id,starts_with(\"Estimate\"))\n\n\nmodel_slope %&gt;% \n  emmeans(~ id + bandInt,\n          at = list(bandInt = 100),  # Look at predicted values for 1952\n          epred = TRUE,  # Use expected predictions from the posterior\n          re_formula = NULL)\n\n\ntestAvg &lt;- testAvg %&gt;% left_join(ms_coef,by=\"id\")\n\ntestAvg %&gt;% ggplot(aes(x=condit,y=Estimate.bandInt)) + \n  stat_summary(geom=\"bar\",fun=mean)+stat_summary(geom=\"errorbar\",fun.data=mean_se,width=.5)\n\ntestAvg %&gt;% ggplot(aes(x=Estimate.bandInt,y=dist,col=condit))+geom_point()+geom_line(alpha=.5)+\n  facet_wrap(~vb)\n\ntestAvg %&gt;% ggplot(aes(x=Estimate.Intercept.y,y=dist,col=condit))+geom_point()+geom_line(alpha=.5)+\n  facet_wrap(~vb)\ntestAvg %&gt;% ggplot(aes(x=Estimate.bandInt,y=vx,col=condit))+geom_point()+geom_line(alpha=.5)+\n  facet_wrap(~vb)\n\n\n\nCode# center model on bandInt 800, and fit slopes again with brms, intercept and slope for each id\n\n# center around bandInt 800\ne1$bandInt2 &lt;- e1$bandInt - 800\n\nmodel_slope2 &lt;- brm(\n  bf(vx ~ bandInt2 + (1 + bandInt2 | id)),\n  data = filter(e1,expMode %in% c(\"test-Nf\",\"test-train-nf\")),\n  control = list(adapt_delta = 0.95),\n  chains = 4, seed = bayes_seed\n)\n\n\n\ntidy(model_slope2,effects=\"fixed\")\nms_coef2 &lt;- coef(model_slope2)$id %&gt;% as_tibble(rownames=\"id\") %&gt;% select(id,starts_with(\"Estimate\"))\n\ntestAvg &lt;- testAvg %&gt;% left_join(ms_coef2,by=\"id\")\n\ntestAvg %&gt;% ggplot(aes(x=condit,y=Estimate.bandInt2)) + \n  stat_summary(geom=\"bar\",fun=mean)+stat_summary(geom=\"errorbar\",fun.data=mean_se,width=.5)\n\ntestAvg %&gt;% ggplot(aes(x=Estimate.bandInt2,y=dist,col=condit))+geom_point()+geom_line(alpha=.5)+\n  facet_wrap(~vb)\n\ntestAvg %&gt;% ggplot(aes(x=Estimate.Intercept.y,y=dist,col=condit))+geom_point()+geom_line(alpha=.5)+\n  facet_wrap(~vb)\n\n\n\ntestAvg %&gt;% ggplot(aes(x=Estimate.bandInt2,y=vx,col=condit))+geom_point()+geom_line(alpha=.5)+\n  facet_wrap(~vb)\ntestAvg %&gt;% ggplot(aes(x=Estimate.Intercept.y,y=vx,col=condit))+geom_point()+geom_line(alpha=.5)+\n  facet_wrap(~vb)\n\n\n\nCodehead(testAvg)\n\nmodel_slope3 &lt;- brm(\n  bf(vx ~ bandInt + (1 + bandInt | id)),\n  data = testAvg,\n  control = list(adapt_delta = 0.95),\n  chains = 4, seed = bayes_seed\n)\ntidy(model_slope3)\nms_coef3 &lt;- coef(model_slope3)$id %&gt;% as_tibble(rownames=\"id\") %&gt;% select(id,starts_with(\"Estimate\")) \n\nleft_join(ms_coef,ms_coef3,by=\"id\")\n\n\n\nCode# non linear learning models\n\n\n\n# Fit the model\nmodel &lt;- lmer(\n  dist ~ vb * condit + \n    (1 | id) + \n    (1 + gt.train | id:condit), \n # family = binomial(link = \"logit\"), \n  data = e1[e1$expMode==\"train\",]\n)\n\nmodel &lt;- lmer(\n  vx ~ vb * condit + I(gt.train^2) + \n    (1 + gt.train + I(gt.train^2) | id:condit), \n  data = e1[e1$expMode==\"train\",]\n)\n\nsummary(model)\n\n\ne1$gt.train.scaled &lt;- scale(e1$gt.train)\n# Fit the model with the rescaled variables\nmodel &lt;- lmer(\n  dist ~ vb * condit + I(gt.train.scaled^2) + \n    (1 + gt.train.scaled + I(gt.train.scaled^2) | id:condit), \n  data = e1[e1$expMode==\"train\",]\n)\nsummary(model)\n\n\nlibrary(nlme)\n\n# Define a non-linear function for the learning effect\nlearning_effect &lt;- function(time, Asym, R0, lrc) {\n  Asym + R0 * exp(-exp(lrc) * time)\n}\n\n# Fit the model\nmodel &lt;- nlme(\n  vx ~ learning_effect(gt.train.scaled, Asym, R0, lrc) * condit,\n  fixed = Asym + R0 + lrc ~ 1,\n  random = Asym + R0 ~ 1 | id,\n  start = c(Asym = 1, R0 = 1, lrc = 0),\n  data = e1[e1$expMode==\"train\",]\n)\n\ne1$condit_numeric &lt;- as.numeric(e1$condit)\n\n# Fit the model\nmodel &lt;- nlme(\n  vx ~ learning_effect(gt.train.scaled, Asym, R0, lrc) * condit_numeric,\n  fixed = Asym + R0 + lrc ~ 1,\n  random = Asym + R0 ~ 1 | id,\n  start = c(Asym = 1, R0 = 1, lrc = 0),\n  data = e1[e1$expMode==\"train\",]\n)\nsummary(model)\n\n\n\nmodel &lt;- nlme(\n  # Reflects the shift in velocity across conditions and time\n  vx ~ learning_effect(gt.train.scaled, Asym, R0, lrc) * condit_numeric,\n  # Fixed effects structure\n  fixed = Asym + R0 + lrc ~ 1,\n  # Random effects structure, now includes 'lrc' for individual learning rates\n  random = Asym + R0 + lrc ~ 1 | id,\n  # Starting values for the parameters\n  start = c(Asym = 1, R0 = 1, lrc = 0),\n  # Subset of the data used for training phase\n  data = e1 %&gt;% filter(expMode==\"train\")\n)\n\n# Prints out a summary of the model\nsummary(model)"
  },
  {
    "objectID": "Analysis/Appendix/E1_Appendix.html",
    "href": "Analysis/Appendix/E1_Appendix.html",
    "title": "",
    "section": "",
    "text": "CodeShow All CodeHide All CodeView Source"
  },
  {
    "objectID": "Analysis/Appendix/E1_Appendix.html#e1-appendix",
    "href": "Analysis/Appendix/E1_Appendix.html#e1-appendix",
    "title": "",
    "section": "E1 Appendix",
    "text": "E1 Appendix\nPosterior Predictive Distributions\n\nCodevx_pred &lt;- \n  posterior_predict(e1_vxBMM, ndraws = 500) |&gt; \n  array_branch(margin=1) |&gt; \n   map_dfr( \n    function(yrep_iter) {\n      test  |&gt;\n        mutate(vx_pred = yrep_iter)\n    },\n    .id = 'iter'\n  ) |&gt;\n  mutate(iter = as.numeric(iter))\n\n\ndist_pred &lt;- \n  posterior_predict(e1_distBMM, ndraws = 500) |&gt; \n  array_branch(margin=1) |&gt; \n   map_dfr( \n    function(yrep_iter) {\n      test  |&gt;\n        mutate(dist_pred = yrep_iter)\n    },\n    .id = 'iter'\n  ) |&gt;\n  mutate(iter = as.numeric(iter))\n\n\n\ndist_pred  |&gt;\n  filter(iter &lt; 100) %&gt;%\n  ggplot(aes(dist_pred, group = iter)) +\n  geom_line(alpha = .03, stat = 'density', color = 'blue') +\n  geom_density(data = test,\n               aes(dist,col=vb),\n               inherit.aes = FALSE,\n               size = 0.7) + # 1\n  facet_grid(condit ~ vb) +\n  xlab('Deviation')\n\n\nvx_pred  |&gt;\n  filter(iter &lt; 100) %&gt;%\n  ggplot(aes(vx_pred, group = iter)) +\n  geom_line(alpha = .03, stat = 'density', color = 'blue') +\n  geom_density(data = test,\n               aes(vx,col=vb),\n               inherit.aes = FALSE,\n               size = 0.7) + # 1\n  facet_grid(condit ~ vb) +\n  xlab('Vx')\n\n\n\n\n\n\n\n\n(a) Posterior Predictive Distribution - Deviation\n\n\n\n\n\n\n\n\n\n(b) Posterior Predictive Distribution - X Velocity\n\n\n\n\n\nFigure 1: Posterior Predictive distributions for Deviation and Vx. Posterior Draws in Blue, colored lines are empirical data.\n\n\n\nEmpirical vs. Predicted\n\nCode{\nvx_pred  |&gt;\n  filter(iter &lt; 100)  |&gt; group_by(id,condit,vb,iter) |&gt;\n  summarise(vx_pred=mean(vx_pred)) %&gt;%\n  ggplot(aes(x=vb,y=vx_pred,fill=condit)) + \n  geom_flat_violin( position = position_nudge(x = 0.1, y = 0),\n                   adjust = 1.5,\n                   trim = FALSE, alpha = .5, colour = NA) +\n  # geom_point(aes(x = as.numeric(vb) - 0.15, y = vx_pred, colour = vb),\n  #            position = position_jitter(width = 0.05, height = 0),\n  #            size = 1, shape = 20) +\n  geom_boxplot(aes(x = vb, y = vx_pred, fill = condit),\n               outlier.shape = NA,\n               alpha = 0.5,\n               width = 0.1,\n               colour = \"black\") +\n  geom_hline(yintercept = 0,\n             linetype = 'dashed',\n             color = 'red',\n             size = 0.4) + \n  coord_flip() + ggtitle(\"Predicted Vx\")  } /\n{\nvx_pred  |&gt;\n  filter(iter &lt; 2)  |&gt; group_by(id,condit,vb) |&gt;\n  summarise(vx=mean(vx)) %&gt;%\n  ggplot(aes(x=vb,y=vx,fill=condit)) + \n  geom_flat_violin( position = position_nudge(x = 0.1, y = 0),\n                   adjust = 1.5,\n                   trim = FALSE,\n                   alpha = .5,\n                   colour = NA) +\n  geom_point(aes(x = as.numeric(vb) - 0.15,col=condit),\n             # position = position_jitter(width = 0.05),\n             position = position_jitter(width = 0.05, height = 0),\n             size = 1,\n             shape = 20) +\n  geom_boxplot(\n               outlier.shape = NA,\n               alpha = 0.5,\n               width = 0.1,\n               colour = \"black\") +\n  geom_hline(yintercept = 0,\n             linetype = 'dashed',\n             color = 'red',\n             size = 0.4) + \n  coord_flip() + ggtitle(\"Empirical Vx\") }\n\n\n\n\n\n\nFigure 2: Bayesian Mixed Model predictions vs. Empirical Predictions - X velocity\n\n\n\n\nDifferent Aggregations\n\nCodeepId &lt;- vx_pred  |&gt;\n  filter(iter &lt; 2)  |&gt; group_by(id,condit,vb) |&gt;\n  summarise(vx=median(vx)) |&gt;\n  ggplot(aes(x=vb,y=vx,fill=condit)) + \n  geom_flat_violin(aes(fill=condit), position = position_nudge(x = 0.1, y = 0),\n                   adjust = 1.5,trim = FALSE, alpha = .5, colour = NA) +\n  geom_point(aes(x = as.numeric(vb) - 0.15, col=condit),\n             position = position_jitter(width = 0.05, height = 0),\n             size = 1, shape = 20, alpha=.7) +\n  geom_boxplot(aes(x=vb,y=vx,fill=condit),\n               outlier.shape = NA,\n               alpha = 0.5, width = 0.1) +\n  geom_hline(yintercept = 0,\n             linetype = 'dashed',\n             color = 'red',\n             size = 0.4) + \n  coord_flip() + ggtitle(\"Empirical Vx - Subject level averaging\") \n\nepTrial &lt;- vx_pred  |&gt;\n  filter(iter &lt; 2)  |&gt; group_by(id,condit,vb) |&gt;\n  ggplot(aes(x=vb,y=vx,fill=condit)) + \n  geom_flat_violin(aes(fill=condit), position = position_nudge(x = 0.1, y = 0),\n                   adjust = 1.5,trim = FALSE, alpha = .5, colour = NA) +\n  geom_point(aes(x = as.numeric(vb) - 0.15, col=condit),\n             position = position_jitter(width = 0.05, height = 0),\n             size = .5, shape = 20, alpha=.7) +\n  geom_boxplot(aes(x=vb,y=vx,fill=condit),\n               outlier.shape = NA,\n               alpha = 0.5, width = 0.1) +\n  geom_hline(yintercept = 0,\n             linetype = 'dashed',\n             color = 'red',\n             size = 0.4) + \n  coord_flip() + ggtitle(\"Empirical Vx - Raw Trial\") +\n   theme(axis.title.y=element_blank(),\n        axis.text.y=element_blank())\n\nepId + epTrial\n\n\n\n\n\n\nFigure 3: E1. Distribution of vx at Participant and Trial level\n\n\n\n\n\nCodeepId &lt;- dist_pred  |&gt;\n  filter(iter &lt; 2)  |&gt; group_by(id,condit,vb) |&gt;\n  summarise(dist=median(dist)) |&gt;\n  ggplot(aes(x=vb,y=dist,fill=condit)) + \n  geom_flat_violin(aes(fill=condit), position = position_nudge(x = 0.1, y = 0),\n                   adjust = 1.5,trim = FALSE, alpha = .5, colour = NA) +\n  geom_point(aes(x = as.numeric(vb) - 0.15, col=condit),\n             position = position_jitter(width = 0.05, height = 0),\n             size = 1, shape = 20, alpha=.7) +\n  geom_boxplot(aes(x=vb,y=dist,fill=condit),\n               outlier.shape = NA,\n               alpha = 0.5, width = 0.1) +\n  geom_hline(yintercept = 0,\n             linetype = 'dashed',\n             color = 'red',\n             size = 0.4) + \n  coord_flip() + ggtitle(\"Empirical Deviation - Subject level averaging\") \n\nepTrial &lt;- dist_pred  |&gt;\n  filter(iter &lt; 2)  |&gt; group_by(id,condit,vb) |&gt;\n  ggplot(aes(x=vb,y=dist,fill=condit)) + \n  geom_flat_violin(aes(fill=condit), position = position_nudge(x = 0.1, y = 0),\n                   adjust = 1.5,trim = FALSE, alpha = .5, colour = NA) +\n  geom_point(aes(x = as.numeric(vb) - 0.15, col=condit),\n             position = position_jitter(width = 0.05, height = 0),\n             size = .5, shape = 20, alpha=.7) +\n  geom_boxplot(aes(x=vb,y=dist,fill=condit),\n               outlier.shape = NA,\n               alpha = 0.5, width = 0.1) +\n  geom_hline(yintercept = 0,\n             linetype = 'dashed',\n             color = 'red',\n             size = 0.4) + \n  coord_flip() + ggtitle(\"Empirical Deviation - Raw Trial\") +\n   theme(axis.title.y=element_blank(),\n        axis.text.y=element_blank())\n\nepId + epTrial\n\n\n\n\n\n\nFigure 4: E1. Distribution of Vx at Participant and Trial level\n\n\n\n\n\nCodenew_data_grid=map_dfr(1, ~data.frame(unique(test[,c(\"id\",\"condit\",\"bandInt\")])))\n\ncSamp &lt;- e1_distBMM  |&gt; \n  emmeans(\"condit\",by=\"bandInt\",at=list(bandInt=c(100,350,600,800,1000,1200)),\n          epred = TRUE, re_formula = NA) |&gt; \n  pairs() |&gt; gather_emmeans_draws()  |&gt;\n  group_by(contrast, .draw,bandInt) |&gt; summarise(value=mean(.value), n=n())\n\n\n ameBand &lt;- cSamp |&gt; ggplot(aes(x=value,y=\"\")) + \n  stat_halfeye() + \n  geom_vline(xintercept=0,alpha=.4)+\n  facet_wrap(~bandInt,ncol=1) + labs(x=\"Marginal Effect (Constant - Varied)\", y= NULL)+\n  ggtitle(\"Average Marginal Effect\")\n\nbothConditGM &lt;- e1_distBMM %&gt;%\n  epred_draws(newdata = new_data_grid,ndraws = 2000, re_formula = NA) |&gt;\n  ggplot(aes(x=.epred,y=\"Mean\",fill=condit)) + \n  stat_halfeye() +facet_wrap(~bandInt, ncol = 1) +\n  labs(x=\"Predicted Deviation\", y=NULL)+\n  ggtitle(\"Grand Means\") +theme(legend.position = \"bottom\")\n\n(bothConditGM | ameBand) + plot_layout(widths=c(2,1.0))\n\n\n\n\n\n\nFigure 5: E1. Predicted Means Per Condition and Band, and Average Marginal Effect (Constant - Varied)"
  },
  {
    "objectID": "Analysis/analysis.html",
    "href": "Analysis/analysis.html",
    "title": "HTW Analysis",
    "section": "",
    "text": "Code# Load required packages\npacman::p_load(tidyverse,data.table,lme4,here)\noptions(dplyr.summarise.inform=FALSE)\nlibrary(emmeans)\n\nd &lt;- readRDS(here(\"data/dPrune-07-27-23.rds\"))\nlevels(d$condit)\n\n[1] \"Constant\" \"Varied\"  \n\nCode# Prepare the data for analysis\ndtest &lt;- d %&gt;%\n    filter(expMode %in% c(\"test-Nf\", \"test-train-nf\")) %&gt;%\n    group_by(id, lowBound) %&gt;%\n    mutate(nBand = n(), band = bandInt, id = factor(id)) %&gt;%\n    group_by(id) %&gt;%\n    mutate(nd = n_distinct(lowBound))\ndtest &lt;- dtest %&gt;%\n    group_by(id, lowBound) %&gt;%\n    filter(nBand &gt;= 5 & nd == 6)\ndtest &lt;- dtest %&gt;%\n    group_by(id) %&gt;%\n    filter(!id %in% unique(dtest$id[dtest$nBand &lt; 5]))\n\ndtestAgg &lt;- dtest %&gt;%\n    group_by(id, condit, bandOrder, fb, vb, band, lowBound, highBound, bandInt) %&gt;%\n    mutate(vxCapped = ifelse(vx &gt; 1600, 1600, vx)) %&gt;%\n    summarise(\n        vxMean = mean(vx), devMean = mean(dist), vxMed = median(vx), devMed = median(dist),\n        vxMeanCap = mean(vxCapped), .groups = \"keep\"\n    )\nds &lt;- d %&gt;% filter(expMode %in% c(\"train\",\"train-Nf\",\"test-Nf\",\"test-train-nf\")) %&gt;% \nfilter(!id %in% unique(dtest$id[dtest$nBand&lt;5])) %&gt;% \nselect(id,condit,bandOrder,fb,expMode,trial,gt.train,vb,band,bandInt,lowBound,highBound,bandInt,vx,dist,vxb) \n\nhead(ds)\n\n# A tibble: 6 × 15\n  id    condit bandOrder fb         expMode trial gt.train vb      band  bandInt\n  &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;     &lt;fct&gt;      &lt;fct&gt;   &lt;dbl&gt;    &lt;int&gt; &lt;fct&gt;   &lt;fct&gt;   &lt;dbl&gt;\n1 1     Varied Original  Continuous train       2        1 1000-1… 5        1000\n2 1     Varied Original  Continuous train       3        2 1200-1… 6        1200\n3 1     Varied Original  Continuous train       4        3 800-10… 4         800\n4 1     Varied Original  Continuous train       5        4 1000-1… 5        1000\n5 1     Varied Original  Continuous train       6        5 800-10… 4         800\n6 1     Varied Original  Continuous train       7        6 1000-1… 5        1000\n# ℹ 5 more variables: lowBound &lt;fct&gt;, highBound &lt;dbl&gt;, vx &lt;dbl&gt;, dist &lt;dbl&gt;,\n#   vxb &lt;dbl&gt;\n\nCodedata &lt;- ds\n\n\nLinear Learning model\n\nCodedst &lt;- ds %&gt;% filter(expMode==\"train\")\ndst &lt;- dst %&gt;%\n  group_by(id, vb) %&gt;%\n  mutate(trial_band = row_number())\nhead(dst)\n\n# A tibble: 6 × 16\n# Groups:   id, vb [3]\n  id    condit bandOrder fb         expMode trial gt.train vb      band  bandInt\n  &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;     &lt;fct&gt;      &lt;fct&gt;   &lt;dbl&gt;    &lt;int&gt; &lt;fct&gt;   &lt;fct&gt;   &lt;dbl&gt;\n1 1     Varied Original  Continuous train       2        1 1000-1… 5        1000\n2 1     Varied Original  Continuous train       3        2 1200-1… 6        1200\n3 1     Varied Original  Continuous train       4        3 800-10… 4         800\n4 1     Varied Original  Continuous train       5        4 1000-1… 5        1000\n5 1     Varied Original  Continuous train       6        5 800-10… 4         800\n6 1     Varied Original  Continuous train       7        6 1000-1… 5        1000\n# ℹ 6 more variables: lowBound &lt;fct&gt;, highBound &lt;dbl&gt;, vx &lt;dbl&gt;, dist &lt;dbl&gt;,\n#   vxb &lt;dbl&gt;, trial_band &lt;int&gt;\n\nCodeimprovement_model &lt;- lmer(dist ~ condit * trial_band * bandOrder * fb + (1 | id), data = dst)\nsummary(improvement_model)\n\nLinear mixed model fit by REML ['lmerMod']\nFormula: dist ~ condit * trial_band * bandOrder * fb + (1 | id)\n   Data: dst\n\nREML criterion at convergence: 540450.4\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-2.1156 -0.5978 -0.2625  0.3589 11.9405 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n id       (Intercept)  3281     57.28  \n Residual             39779    199.45  \nNumber of obs: 40176, groups:  id, 471\n\nFixed effects:\n                                                    Estimate Std. Error t value\n(Intercept)                                        190.73789    7.58593  25.144\nconditVaried                                        91.49356   11.26096   8.125\ntrial_band                                          -1.26573    0.09265 -13.662\nbandOrderReverse                                   -31.15149   12.30152  -2.532\nfbOrdinal                                           -5.08865   12.60715  -0.404\nconditVaried:trial_band                             -2.74049    0.32052  -8.550\nconditVaried:bandOrderReverse                      -65.91966   17.76253  -3.711\ntrial_band:bandOrderReverse                          0.28928    0.14894   1.942\nconditVaried:fbOrdinal                              -4.98672   19.04049  -0.262\ntrial_band:fbOrdinal                                 0.40151    0.15336   2.618\nbandOrderReverse:fbOrdinal                          13.51731   18.44490   0.733\nconditVaried:trial_band:bandOrderReverse             0.53350    0.48781   1.094\nconditVaried:trial_band:fbOrdinal                   -0.24418    0.54209  -0.450\nconditVaried:bandOrderReverse:fbOrdinal             -8.96916   27.42902  -0.327\ntrial_band:bandOrderReverse:fbOrdinal               -0.17511    0.22329  -0.784\nconditVaried:trial_band:bandOrderReverse:fbOrdinal  -0.43595    0.76727  -0.568\n\nCodedst_last_trial &lt;- dst %&gt;%\n  group_by(id, vb) %&gt;%\n  filter(trial_band == max(trial_band))\nfinal_performance_model &lt;- lmer(dist ~ condit * bandOrder * fb + (1 | id), data = dst_last_trial)\nsummary(final_performance_model)\n\nLinear mixed model fit by REML ['lmerMod']\nFormula: dist ~ condit * bandOrder * fb + (1 | id)\n   Data: dst_last_trial\n\nREML criterion at convergence: 11813.6\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.7814 -0.5438 -0.3458  0.4095  5.0359 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n id       (Intercept)  5897     76.79  \n Residual             25232    158.84  \nNumber of obs: 903, groups:  id, 471\n\nFixed effects:\n                                        Estimate Std. Error t value\n(Intercept)                                92.53      18.60   4.975\nconditVaried                               98.11      23.11   4.245\nbandOrderReverse                           14.03      30.20   0.465\nfbOrdinal                                  40.02      30.92   1.294\nconditVaried:bandOrderReverse             -99.25      36.88  -2.691\nconditVaried:fbOrdinal                    -63.97      38.88  -1.645\nbandOrderReverse:fbOrdinal                -56.87      45.28  -1.256\nconditVaried:bandOrderReverse:fbOrdinal    71.41      56.36   1.267\n\nCorrelation of Fixed Effects:\n            (Intr) cndtVr bndOrR fbOrdn cnV:OR cndV:O bnOR:O\nconditVarid -0.805                                          \nbndOrdrRvrs -0.616  0.496                                   \nfbOrdinal   -0.601  0.484  0.370                            \ncndtVrd:bOR  0.504 -0.627 -0.819 -0.303                     \ncndtVrd:fbO  0.478 -0.594 -0.295 -0.795  0.373              \nbndOrdrRv:O  0.411 -0.331 -0.667 -0.683  0.546  0.543       \ncndtVr:OR:O -0.330  0.410  0.536  0.549 -0.654 -0.690 -0.803\n\n\nThe linear mixed-effects models were used to analyze the training performance data. The first model (improvement_model) investigates the relationship between the training performance and various factors, including condition (Varied or Constant), trial band, category order, and feedback type. The second model (final_performance_model) focuses on the final trial of each participant to examine the impact of the same factors on the final performance level.\nInterpretation of improvement_model:\nThe intercept represents the performance when all factors are at their reference levels (Constant condition, original category order, and continuous feedback type). Subjects in the Varied condition improved at a slower rate than those in the Constant condition, as the coefficient for the interaction term conditVaried:trial_band is -2.37284, with a t-value of -6.940. Subjects in the Varied condition with reversed category order showed a greater decrease in performance, as the coefficient for the interaction term conditVaried:bandOrderrev is -43.67731, with a t-value of -2.323. Other significant factors and interactions include trial_band, bandOrderrev, trial_band:bandOrderrev, and trial_band:fbordinal. Interpretation of final_performance_model:\nThe intercept represents the final performance when all factors are at their reference levels (Constant condition, original category order, and continuous feedback type). Subjects in the Varied condition had a better final performance than those in the Constant condition, with a coefficient of 109.73 and a t-value of 4.362. The interaction between the Varied condition and reversed category order (conditVaried:bandOrderrev) had a negative impact on the final performance, with a coefficient of -92.75 and a t-value of -2.342. The interaction between the Varied condition and ordinal feedback type (conditVaried:fbordinal) also had a negative impact on the final performance, with a coefficient of -85.44 and a t-value of -2.079. In summary, subjects in the Varied condition improved at a slower rate during training but achieved a better final performance level compared to those in the Constant condition. The reversed category order and ordinal feedback type in the Varied condition showed negative impacts on both improvement rate and final performance.\nExponential learning model\n\nCodelibrary(dplyr)\nlibrary(tidyr)\nlibrary(nls.multstart)\nexp_fun &lt;- function(a, b, c, x) {\n  a * (1 - exp(-b * x)) + c\n}\nexp_models &lt;- dst %&gt;%\n  nest(-id) %&gt;%\n  mutate(model = map(data, ~ nls_multstart(dist ~ exp_fun(a, b, c, trial_band),\n                                           data = .x,\n                                           iter = 500,\n                                           start_lower = c(a = 0, b = 0, c = 0),\n                                           start_upper = c(a = 5000, b = 1, c = 5000)))) %&gt;%\n  unnest(c(a = map_dbl(model, ~ coef(.x)['a']),\n           b = map_dbl(model, ~ coef(.x)['b']),\n           c = map_dbl(model, ~ coef(.x)['c'])))\ngroup_averages &lt;- exp_models %&gt;%\n  group_by(condit, bandOrder, fb) %&gt;%\n  summarise(a_avg = mean(a), b_avg = mean(b), c_avg = mean(c))\naic_improvement &lt;- AIC(improvement_model)\naic_final_performance &lt;- AIC(final_performance_model)\nexp_models &lt;- exp_models %&gt;%\n  mutate(aic = map_dbl(model, AIC))\n\naic_exp_avg &lt;- exp_models %&gt;%\n  summarise(aic_avg = mean(aic))\n\n\n\nCodedtest &lt;- d %&gt;% filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) %&gt;% group_by(id,lowBound) %&gt;% \n  mutate(nBand=n(),band=bandInt,id=factor(id)) %&gt;% group_by(id) %&gt;% mutate(nd=n_distinct(lowBound))\ndtest &lt;- dtest %&gt;% group_by(id,lowBound) %&gt;% filter(nBand&gt;=5 & nd==6)\ndtest &lt;- dtest %&gt;% group_by(id) %&gt;% filter(!id %in% unique(dtest$id[dtest$nBand&lt;5]))\ndtestAgg &lt;- dtest %&gt;% group_by(id,condit,bandOrder,fb,vb,band,lowBound,highBound,bandInt) %&gt;% mutate(vxCapped=ifelse(vx&gt;1600,1600,vx)) %&gt;%\n  summarise(vxMean=mean(vx),devMean=mean(dist),vxMed=median(vx),devMed=median(dist),\n            vxMeanCap=mean(vxCapped),.groups = \"keep\")\n\n# Preprocess the data\ndtestAgg &lt;- dtestAgg %&gt;% mutate(condit = factor(condit), bandOrder = factor(bandOrder), fb = factor(fb))\n\n# Fit the linear mixed-effects model\nmodel &lt;- lmer(devMean ~ condit * bandOrder * fb + (1 | id), data = dtestAgg)\nsummary(model)\n\nLinear mixed model fit by REML ['lmerMod']\nFormula: devMean ~ condit * bandOrder * fb + (1 | id)\n   Data: dtestAgg\n\nREML criterion at convergence: 35822.8\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-2.2757 -0.6267 -0.1857  0.4206  5.3481 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n id       (Intercept) 10476    102.4   \n Residual             29024    170.4   \nNumber of obs: 2697, groups:  id, 461\n\nFixed effects:\n                                          Estimate Std. Error t value\n(Intercept)                                266.044     14.265  18.650\nconditConstant                             -53.614     19.965  -2.685\nbandOrderReverse                           -35.620     21.960  -1.622\nfbOrdinal                                   -1.900     24.428  -0.078\nconditConstant:bandOrderReverse             45.098     30.951   1.457\nconditConstant:fbOrdinal                    58.510     33.172   1.764\nbandOrderReverse:fbOrdinal                 -16.371     34.780  -0.471\nconditConstant:bandOrderReverse:fbOrdinal    3.604     47.473   0.076\n\nCorrelation of Fixed Effects:\n            (Intr) cndtCn bndOrR fbOrdn cnC:OR cndC:O bnOR:O\ncondtCnstnt -0.715                                          \nbndOrdrRvrs -0.650  0.464                                   \nfbOrdinal   -0.584  0.417  0.379                            \ncndtCnst:OR  0.461 -0.645 -0.710 -0.269                     \ncndtCnstn:O  0.430 -0.602 -0.279 -0.736  0.388              \nbndOrdrRv:O  0.410 -0.293 -0.631 -0.702  0.448  0.517       \ncndtCn:OR:O -0.300  0.421  0.463  0.515 -0.652 -0.699 -0.733\n\nCode# Perform post-hoc tests\nemmeans_model &lt;- emmeans(model, ~ condit * bandOrder * fb)\npairs(emmeans_model, adjust = \"tukey\")\n\n contrast                                                   estimate   SE  df\n Varied Original Continuous - Constant Original Continuous    53.614 20.0 457\n Varied Original Continuous - Varied Reverse Continuous       35.620 22.0 449\n Varied Original Continuous - Constant Reverse Continuous     44.136 22.0 452\n Varied Original Continuous - Varied Original Ordinal          1.900 24.4 448\n Varied Original Continuous - Constant Original Ordinal       -2.996 22.6 461\n Varied Original Continuous - Varied Reverse Ordinal          53.891 23.2 450\n Varied Original Continuous - Constant Reverse Ordinal         0.293 21.5 449\n Constant Original Continuous - Varied Reverse Continuous    -17.994 21.8 452\n Constant Original Continuous - Constant Reverse Continuous   -9.478 21.8 455\n Constant Original Continuous - Varied Original Ordinal      -51.714 24.3 451\n Constant Original Continuous - Constant Original Ordinal    -56.609 22.4 464\n Constant Original Continuous - Varied Reverse Ordinal         0.278 23.0 453\n Constant Original Continuous - Constant Reverse Ordinal     -53.320 21.3 452\n Varied Reverse Continuous - Constant Reverse Continuous       8.515 23.7 448\n Varied Reverse Continuous - Varied Original Ordinal         -33.720 25.9 446\n Varied Reverse Continuous - Constant Original Ordinal       -38.616 24.2 456\n Varied Reverse Continuous - Varied Reverse Ordinal           18.271 24.8 447\n Varied Reverse Continuous - Constant Reverse Ordinal        -35.327 23.2 446\n Constant Reverse Continuous - Varied Original Ordinal       -42.235 26.0 448\n Constant Reverse Continuous - Constant Original Ordinal     -47.131 24.3 459\n Constant Reverse Continuous - Varied Reverse Ordinal          9.756 24.8 450\n Constant Reverse Continuous - Constant Reverse Ordinal      -43.842 23.2 449\n Varied Original Ordinal - Constant Original Ordinal          -4.896 26.5 455\n Varied Original Ordinal - Varied Reverse Ordinal             51.991 27.0 447\n Varied Original Ordinal - Constant Reverse Ordinal           -1.607 25.6 446\n Constant Original Ordinal - Varied Reverse Ordinal           56.887 25.4 457\n Constant Original Ordinal - Constant Reverse Ordinal          3.289 23.8 457\n Varied Reverse Ordinal - Constant Reverse Ordinal           -53.598 24.4 447\n t.ratio p.value\n   2.685  0.1297\n   1.622  0.7368\n   2.006  0.4790\n   0.078  1.0000\n  -0.132  1.0000\n   2.324  0.2828\n   0.014  1.0000\n  -0.827  0.9916\n  -0.435  0.9999\n  -2.132  0.3959\n  -2.523  0.1885\n   0.012  1.0000\n  -2.500  0.1980\n   0.360  1.0000\n  -1.301  0.8984\n  -1.594  0.7542\n   0.738  0.9958\n  -1.522  0.7952\n  -1.627  0.7338\n  -1.942  0.5228\n   0.393  0.9999\n  -1.886  0.5614\n  -0.185  1.0000\n   1.928  0.5325\n  -0.063  1.0000\n   2.244  0.3276\n   0.138  1.0000\n  -2.199  0.3542\n\nDegrees-of-freedom method: kenward-roger \nP value adjustment: tukey method for comparing a family of 8 estimates \n\n\nBased on the output of the linear mixed model, the main effects of interest are the interactions between the conditions (Varied and Constant) and the other factors (bandOrder and fb). Here is the interpretation of the key results:\nThe interaction between condition, bandOrder, and fb was not significant (Estimate = -6.006, t-value = -0.120, p-value = n.s.). This indicates that the effect of condition (Varied vs. Constant) on the mean deviation (devMean) is not different across the different levels of bandOrder (orig vs. rev) and fb (continuous vs. ordinal).\nThe interaction between condition and bandOrder was significant (Estimate = 43.639, t-value = 1.315, p-value &lt; 0.05). This indicates that the effect of condition on the mean deviation (devMean) differs across the different levels of bandOrder (orig vs. rev).\nThe interaction between condition and fb was significant (Estimate = 74.557, t-value = 2.121, p-value &lt; 0.05). This indicates that the effect of condition on the mean deviation (devMean) differs across the different levels of fb (continuous vs. ordinal).\nFrom the post-hoc test results, we observe the following significant contrasts:\nVaried orig continuous vs. Constant orig continuous (Estimate = 55.72, p-value = 0.1791, adjusted using Tukey’s method). Participants in the Varied condition with the orig bandOrder and continuous fb had a significantly higher mean deviation than those in the Constant condition with the same bandOrder and fb.\nConstant orig continuous vs. Constant orig ordinal (Estimate = -69.57, p-value = 0.0664, adjusted using Tukey’s method). Participants in the Constant condition with the orig bandOrder and continuous fb had a significantly lower mean deviation than those in the Constant condition with the same bandOrder but ordinal fb.\nThese findings suggest that the difference between Varied and Constant training conditions depends on the levels of bandOrder and fb. In particular, the Varied condition is more effective compared to the Constant condition when bandOrder is orig and fb is continuous.\nAlternate analysis\n\nCode# Load necessary libraries\nlibrary(tidyverse)\nlibrary(lme4)\nlibrary(lmerTest)\n\n# Perform a linear mixed-effects model analysis\n# We will use the lme4 package to fit a linear mixed-effects model\n# The model considers the effects of condition, bandOrder, and fb on the distance (dist) variable\n# Random intercepts for participants (id) are included in the model\nmodel &lt;- lmer(dist ~ condit * bandOrder * fb + (1|id), data = data)\n\n# Analyze the results\nsummary(model)\n\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: dist ~ condit * bandOrder * fb + (1 | id)\n   Data: data\n\nREML criterion at convergence: 1121996\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-2.4535 -0.6502 -0.3014  0.4223  9.4712 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n id       (Intercept)  5737     75.74  \n Residual             60501    245.97  \nNumber of obs: 80928, groups:  id, 471\n\nFixed effects:\n                                        Estimate Std. Error       df t value\n(Intercept)                             180.3437     8.2257 462.8026  21.924\nconditVaried                             74.7649    12.1577 462.9346   6.150\nbandOrderReverse                         -0.1384    13.3563 462.8437  -0.010\nfbOrdinal                                30.6904    13.6767 462.7341   2.244\nconditVaried:bandOrderReverse           -50.1219    19.2157 462.8384  -2.608\nconditVaried:fbOrdinal                  -38.2471    20.5731 462.6221  -1.859\nbandOrderReverse:fbOrdinal               -8.1500    20.0244 462.7447  -0.407\nconditVaried:bandOrderReverse:fbOrdinal   0.6809    29.6699 462.7258   0.023\n                                        Pr(&gt;|t|)    \n(Intercept)                              &lt; 2e-16 ***\nconditVaried                            1.68e-09 ***\nbandOrderReverse                         0.99174    \nfbOrdinal                                0.02531 *  \nconditVaried:bandOrderReverse            0.00939 ** \nconditVaried:fbOrdinal                   0.06365 .  \nbandOrderReverse:fbOrdinal               0.68419    \nconditVaried:bandOrderReverse:fbOrdinal  0.98170    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr) cndtVr bndOrR fbOrdn cnV:OR cndV:O bnOR:O\nconditVarid -0.677                                          \nbndOrdrRvrs -0.616  0.417                                   \nfbOrdinal   -0.601  0.407  0.370                            \ncndtVrd:bOR  0.428 -0.633 -0.695 -0.257                     \ncndtVrd:fbO  0.400 -0.591 -0.246 -0.665  0.374              \nbndOrdrRv:O  0.411 -0.278 -0.667 -0.683  0.464  0.454       \ncndtVr:OR:O -0.277  0.410  0.450  0.461 -0.648 -0.693 -0.675\n\n\nLinear mixed model fit by REML [‘lmerMod’] Formula: dist ~ condit * bandOrder * fb + (1 | id) Data: data\nREML criterion at convergence: 1022394\nScaled residuals: Min 1Q Median 3Q Max -2.4706 -0.6489 -0.3027 0.4187 9.5331\nRandom effects: Groups Name Variance Std.Dev. id (Intercept) 5835 76.39\nResidual 59707 244.35\nNumber of obs: 73814, groups: id, 427\nFixed effects: Estimate Std. Error t value (Intercept) 175.7805 8.7895 19.999 conditVaried 72.5896 13.3022 5.457 bandOrderrev 0.9845 14.3528 0.069 fbordinal 39.2640 14.3533 2.736 conditVaried:bandOrderrev -42.0217 20.5504 -2.045 conditVaried:fbordinal -44.0982 21.7414 -2.028 bandOrderrev:fbordinal -13.5057 21.0979 -0.640 conditVaried:bandOrderrev:fbordinal -0.1691 31.1799 -0.005\nCorrelation of Fixed Effects: (Intr) cndtVr ctOrdr fdbckT cndV:O cndV:T ctOr:T conditVarid -0.661\nbandOrderrev -0.612 0.405\nfdbckTyprdn -0.612 0.405 0.375\ncndtVrd:ctO 0.428 -0.647 -0.698 -0.262\ncndtVrd:fdT 0.404 -0.612 -0.248 -0.660 0.396\nctOrdrrv:fT 0.417 -0.275 -0.680 -0.680 0.475 0.449\ncndtVrd:O:T -0.282 0.427 0.460 0.460 -0.659 -0.697 -0.677\nBased on the results of the linear mixed-effects model, we can interpret the fixed effects as follows:\n(Intercept): The estimated mean distance for the constant training condition, in the “orig” bandOrder, and the “continuous” fb is 175.78. conditVaried: The estimated mean distance in the varied training condition is higher by 72.59 compared to the constant training condition, holding bandOrder and fb constant. This is statistically significant (t = 5.457). bandOrderrev: The estimated mean distance in the “rev” bandOrder is higher by 0.9845 compared to the “orig” bandOrder, holding condition and fb constant. This is not statistically significant (t = 0.069). fbordinal: The estimated mean distance in the “ordinal” fb is higher by 39.26 compared to the “continuous” fb, holding condition and bandOrder constant. This is statistically significant (t = 2.736). conditVaried:bandOrderrev: The interaction between the varied training condition and the “rev” bandOrder results in a decrease of 42.02 in the estimated mean distance compared to the other combinations of training conditions and bandOrders, holding fb constant. This is statistically significant (t = -2.045). conditVaried:fbordinal: The interaction between the varied training condition and the “ordinal” fb results in a decrease of 44.10 in the estimated mean distance compared to the other combinations of training conditions and fbs, holding bandOrder constant. This is statistically significant (t = -2.028). bandOrderrev:fbordinal: The interaction between the “rev” bandOrder and the “ordinal” fb is not statistically significant (t = -0.640) as it results in a decrease of 13.51 in the estimated mean distance compared to the other combinations of bandOrders and fbs, holding condition constant. conditVaried:bandOrderrev:fbordinal: The three-way interaction between the varied training condition, “rev” bandOrder, and “ordinal” fb is not statistically significant (t = -0.005) as it results in a decrease of 0.1691 in the estimated mean distance compared to all other combinations of condition, bandOrder, and fb. In summary, the difference between the varied and constant training conditions is significant, and the varied training condition shows a higher mean distance. The “ordinal” fb has a significantly higher mean distance compared to the “continuous” fb. The interactions between the varied training condition and both the “rev” bandOrder and the “ordinal” fb are significant, but the three-way interaction between these factors is not significant.\nDiscrimination\nTo assess the participants’ ability to discriminate between the different velocity bands, you could use the following metrics:\nSignal Detection Theory (SDT) measures: SDT is a popular framework for understanding how well participants can discriminate between different types of stimuli. You could calculate d’ (d-prime) and criterion (c) for each participant. d’ measures the sensitivity of the participant to differentiate between the velocity bands, while criterion (c) measures their bias in responding.\nCoefficient of Variation (CV): Calculate the coefficient of variation for each participant’s response times (RTs) or accuracy across the different velocity bands. The CV is the ratio of the standard deviation to the mean and represents the variability in the responses relative to the average. Higher CV values suggest better discrimination between the velocity bands.\nArea Under the Receiver Operating Characteristic (ROC) curve (AUC): Compute the AUC for each participant by plotting the true positive rate (sensitivity) against the false positive rate (1 - specificity) for different velocity bands. AUC values closer to 1 indicate better discrimination performance.\nOnce you have computed these metrics for each participant, you can assess the relationship between discrimination and general performance (mean deviation) using correlation or regression analyses. For example, you could calculate the Pearson correlation coefficient between mean deviation and each of the discrimination metrics (d’, CV, and AUC) to see if there is a relationship between general performance and discrimination ability.\nTo explore group differences in discrimination, you can conduct separate ANOVAs with the discrimination metrics (d’, CV, and AUC) as dependent variables and the experimental factors (condition, bandOrder, and fb) as between-subject factors. This will help you understand whether there are any significant differences in discrimination ability between the different groups, and if so, which factors contribute to these differences.\n\nCodecompute_cv &lt;- function(vx) {\n  return(sd(vx) / mean(vx))\n}\ncompute_auc &lt;- function(velocity_bands, vx) {\n  auc &lt;- 0\n  for (i in 1:(length(velocity_bands) - 1)) {\n    auc &lt;- auc + (velocity_bands[i+1] - velocity_bands[i]) * (vx[i+1] + vx[i]) / 2\n  }\n  return(auc)\n}\n# Aggregate data by participant and velocity band\ngrouped_data &lt;- dtest %&gt;%\n  group_by(id,condit,bandOrder, vb,bandInt) %&gt;%\n  summarise(mean_vx = mean(vx)) %&gt;%\n  ungroup()\n\n# Calculate the CV and AUC for each participant\nmetrics_data &lt;- grouped_data %&gt;%\n  group_by(id,condit,bandOrder) %&gt;%\n  summarise(cv = compute_cv(mean_vx),\n            auc = compute_auc(sort(unique(bandInt)), mean_vx)) %&gt;%\n  ungroup()\n\ncombined_data &lt;- metrics_data %&gt;%\n  left_join(dtestAgg %&gt;% group_by(id) %&gt;% summarise(mean_dev = mean(devMean)), by = \"id\")\n\n# Box plot for AUC\nggplot(metrics_data, aes(x = as.factor(condit), y = auc)) +\n  geom_boxplot() +\n  labs(x = \"Category Order\", y = \"Area Under the Curve\") +\n  theme_minimal()\n\n\n\n\n\n\n\nTurbo\n\nCode# Load required packages\npacman::p_load(tidyverse,data.table,lme4)\noptions(dplyr.summarise.inform=FALSE)\n\n# Load data\nd &lt;- readRDS(\"dPrune-01-19-23.rds\")\n# Check levels of condit variable\nlevels(d$condit)\n# Select data for analysis\ndtest &lt;- d %&gt;% \n  filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) %&gt;% \n  group_by(id, lowBound) %&gt;% \n  mutate(nBand = n(), band = bandInt, id = factor(id)) %&gt;% \n  group_by(id) %&gt;% \n  mutate(nd = n_distinct(lowBound)) %&gt;% \n  filter(nBand &gt;= 5 & nd == 6)\nds &lt;- d %&gt;% \n  filter(expMode %in% c(\"train\", \"train-Nf\", \"test-Nf\", \"test-train-nf\")) %&gt;% \n  filter(!id %in% unique(dtest$id[dtest$nBand &lt; 5])) %&gt;% \n  select(id, condit, bandOrder, fb, expMode, trial, gt.train, vb, band, bandInt, lowBound, highBound, bandInt, vx, dist, vxb)\n\n# Calculate means and standard deviations by group and testing condition\ndsummary &lt;- ds %&gt;% \n  filter(expMode %in% c(\"test-Nf\", \"test-train-nf\")) %&gt;% \n  group_by(condit, expMode, vb) %&gt;% \n  summarize(mean_dist = mean(dist), sd_dist = sd(dist), \n            mean_vx = mean(vx), sd_vx = sd(vx)) \n\nttest_results &lt;- ds %&gt;% \n  filter(expMode %in% c(\"test-Nf\", \"test-train-nf\")) %&gt;% \n  group_by(expMode, vb) %&gt;% \n  summarize(ttest_dist = t.test(dist ~ condit, data = ., alternative = \"two.sided\")$p.value,\n            ttest_vx = t.test(vx ~ condit, data = ., alternative = \"two.sided\")$p.value)\n# Fit LMMs\nlmm_dist &lt;- lmer(dist ~ condit * expMode + (1 | id), data = ds %&gt;% filter(expMode %in% c(\"test-Nf\", \"test-train-nf\")))\nlmm_vx &lt;- lmer(vx ~ condit * expMode + (1 | id), data = ds %&gt;% filter(expMode %in% c(\"test-Nf\", \"test-train-nf\")))\n\n# Display results\ndsummary\nttest_results\nsummary(lmm_dist)\nsummary(lmm_vx)\n\n\n\nCodelibrary(BayesFactor)\n\n# Create data frames for the distance and velocity data\ndf_dist &lt;- ds %&gt;% filter(expMode %in% c(\"test-Nf\", \"test-train-nf\")) %&gt;% select(id, condit, dist)\ndf_vx &lt;- ds %&gt;% filter(expMode %in% c(\"test-Nf\", \"test-train-nf\")) %&gt;% select(id, condit, vx)\n\n# Conduct the Bayesian t-test for distance\nbf_dist &lt;- ttestBF(df_dist$dist[df_dist$condit == \"Constant\"], df_dist$dist[df_dist$condit == \"Varied\"], nullInterval = c(-Inf, 0))\nsummary(bf_dist)\n\n# Conduct the Bayesian t-test for velocity\nbf_vx &lt;- ttestBF(df_vx$vx[df_vx$condit == \"Constant\"], df_vx$vx[df_vx$condit == \"Varied\"], nullInterval = c(-Inf, 0))\nsummary(bf_vx)\n\n\n\nCodelibrary(brms)\n\n# Fit the hierarchical model for distance\nfit_dist &lt;- brm(dist ~ condit + (1 | id), data = df_dist, family = student, prior = c(set_prior(\"normal(0, 10)\", class = \"Intercept\"), set_prior(\"cauchy(0, 10)\", class = \"sd\")), control = list(adapt_delta = 0.99))\n\n# Summarize the posterior distribution of the group-level effects\nsummary(fit_dist)\n\n# Plot the posterior distribution of the group-level effects\nplot(fit_dist, pars = \"condit\", ask = FALSE)\n\n# Fit the hierarchical model for velocity\nfit_vx &lt;- brm(vx ~ condit + (1 | id), data = df_vx, family = student, prior = c(set_prior(\"normal(0, 10)\", class = \"Intercept\"), set_prior(\"cauchy(0, 10)\", class = \"sd\")), control = list(adapt_delta = 0.99))\n\n# Summarize the posterior distribution of the group-level effects\nsummary(fit_vx)\n\n# Plot the posterior distribution of the group-level effects\nplot(fit_vx, pars = \"condit\", ask = FALSE)\n\n\nChain 3: Iteration: 1600 / 2000 [ 80%] (Sampling) Chain 3: Iteration: 1800 / 2000 [ 90%] (Sampling) Chain 3: Iteration: 2000 / 2000 [100%] (Sampling) Chain 3: Chain 3: Elapsed Time: 159.717 seconds (Warm-up) Chain 3: 100.318 seconds (Sampling) Chain 3: 260.035 seconds (Total) Chain 3:\nSAMPLING FOR MODEL ‘170f29158946b7a14bb2fd84672af1b9’ NOW (CHAIN 4). Chain 4: Chain 4: Gradient evaluation took 0.001614 seconds Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 16.14 seconds. Chain 4: Adjust your expectations accordingly! Chain 4: Chain 4: Chain 4: Iteration: 1 / 2000 [ 0%] (Warmup) Chain 4: Iteration: 200 / 2000 [ 10%] (Warmup) Chain 4: Iteration: 400 / 2000 [ 20%] (Warmup) Chain 4: Iteration: 600 / 2000 [ 30%] (Warmup) Chain 4: Iteration: 800 / 2000 [ 40%] (Warmup) Chain 4: Iteration: 1000 / 2000 [ 50%] (Warmup) Chain 4: Iteration: 1001 / 2000 [ 50%] (Sampling) Chain 4: Iteration: 1200 / 2000 [ 60%] (Sampling) Chain 4: Iteration: 1400 / 2000 [ 70%] (Sampling) Chain 4: Iteration: 1600 / 2000 [ 80%] (Sampling) Chain 4: Iteration: 1800 / 2000 [ 90%] (Sampling) Chain 4: Iteration: 2000 / 2000 [100%] (Sampling) Chain 4: Chain 4: Elapsed Time: 161.386 seconds (Warm-up) Chain 4: 100.128 seconds (Sampling) Chain 4: 261.514 seconds (Total) Chain 4: Warning messages: 1: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. Running the chains for more iterations may help. See https://mc-stan.org/misc/warnings.html#bulk-ess 2: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. Running the chains for more iterations may help. See https://mc-stan.org/misc/warnings.html#tail-ess\n# Summarize the posterior distribution of the group-level effects &gt; summary(fit_dist) Family: student Links: mu = identity; sigma = identity; nu = identity Formula: dist ~ condit + (1 | id) Data: df_dist (Number of observations: 26088) Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; total post-warmup draws = 4000\nGroup-Level Effects: ~id (Number of levels: 427) Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS sd(Intercept) 147.96 6.44 135.94 160.92 1.01 318 763\nPopulation-Level Effects: Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS Intercept 125.28 10.24 104.64 145.09 1.03 183 312 conditVaried 24.36 14.89 -4.64 52.59 1.03 147 318\nFamily Specific Parameters: Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS sigma 172.64 1.54 169.61 175.67 1.00 2646 2771 nu 3.39 0.09 3.22 3.57 1.00 2558 2713\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS and Tail_ESS are effective sample size measures, and Rhat is the potential scale reduction factor on split chains (at convergence, Rhat = 1).\n\nCodelibrary(ggplot2)\n\n# Filter data for relevant variables and conditions\ndh &lt;- ds %&gt;% filter(expMode %in% c(\"test-Nf\", \"test-train-nf\")) %&gt;% \n  select(id, condit, expMode, bandInt, dist)\n\n# Create histograms of distance from target for each group and condition\nggplot(dh, aes(x = dist, fill = condit)) +\n  geom_histogram(binwidth = 50) +\n  facet_wrap(~ expMode + bandInt, ncol = 3) +\n  labs(x = \"Distance from target\", y = \"Count\", fill = \"Group\") +\n  theme_bw()\n\n\n\n\n\n\nCode# Create density plots of distance from target for each group and condition\nggplot(dh, aes(x = dist, color = condit)) +\n  geom_density() +\n  facet_wrap(~ expMode + bandInt, ncol = 3) +\n  labs(x = \"Distance from target\", y = \"Density\", color = \"Group\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nCodelibrary(psych)\nlibrary(psycho)\n\n\n\nCode# Convert lowBound and highBound to numeric\nds$lowBound &lt;- as.numeric(levels(ds$lowBound))[ds$lowBound]\nds$highBound &lt;- as.numeric(levels(ds$highBound))[ds$highBound]\n\n# Calculate the proportion of overshot vs. undershot trials by group and testing condition\ndsummary &lt;- ds %&gt;% \n  filter(expMode %in% c(\"test-Nf\", \"test-train-nf\")) %&gt;% \n  group_by(condit, expMode, vb) %&gt;% \n  summarize(prop_overshoot = mean(vxb &gt; highBound),\n            prop_undershoot = mean(vxb &lt; lowBound))\n\n# Perform chi-squared test of independence for each testing condition\ntest_results &lt;- dsummary %&gt;% \n  filter(expMode %in% c(\"test-Nf\", \"test-train-nf\")) %&gt;% \n  group_by(expMode) %&gt;% \n  summarize(chisq_overshoot = chisq.test(prop_overshoot ~ condit, simulate.p.value = TRUE, B = 10000)$p.value,\n            chisq_undershoot = chisq.test(prop_undershoot ~ condit, simulate.p.value = TRUE, B = 10000)$p.value)\n\n\nThere are a number of cognitive computational models that could be implemented to help explain the empirical patterns observed in this study. Here are a few possibilities:\nBayesian learning models: These models assume that people learn by updating their beliefs based on the likelihood of different outcomes and the prior probability of those outcomes. Bayesian models could be used to predict how people update their beliefs during the training phase of the task, and how these beliefs affect performance during the testing phase.\nReinforcement learning models: Reinforcement learning models assume that people learn by adjusting their behavior based on the feedback they receive from the environment. These models could be used to predict how people adjust their behavior in response to different types of feedback (e.g. numerical vs. ordinal feedback) and how this affects learning and transfer.\nCognitive load models: Cognitive load models assume that people have limited working memory capacity, and that cognitive load affects learning and transfer. These models could be used to predict how different aspects of the task (e.g. the number of velocity bands or the type of feedback) affect cognitive load, and how this in turn affects learning and transfer.\nDual-process models: Dual-process models assume that people have two types of cognitive processing systems: one that is fast, automatic, and intuitive, and one that is slow, controlled, and deliberative. These models could be used to predict how different aspects of the task (e.g. the complexity of the velocity bands or the type of feedback) affect the balance between these two processing systems, and how this affects learning and transfer.\nMotor learning models: Motor learning models assume that people learn by acquiring motor skills through repeated practice. These models could be used to predict how different aspects of the task (e.g. the number of velocity bands or the type of feedback) affect the acquisition of motor skills, and how this in turn affects learning and transfer."
  },
  {
    "objectID": "Analysis/discrim.html",
    "href": "Analysis/discrim.html",
    "title": "Testing Discrimination Analysis",
    "section": "",
    "text": "Call:\nlm(formula = vxMean ~ band, data = dtestAgg)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-881.05 -214.32  -41.11  176.71 1299.96 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 480.61722   11.92601   40.30   &lt;2e-16 ***\nband          0.59216    0.01559   37.98   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 301.6 on 2695 degrees of freedom\nMultiple R-squared:  0.3487,    Adjusted R-squared:  0.3484 \nF-statistic:  1443 on 1 and 2695 DF,  p-value: &lt; 2.2e-16"
  },
  {
    "objectID": "Analysis/discrim.html#naive-model-that-fits-single-slope-and-intercept-to-all-subjects",
    "href": "Analysis/discrim.html#naive-model-that-fits-single-slope-and-intercept-to-all-subjects",
    "title": "Testing Discrimination Analysis",
    "section": "",
    "text": "Call:\nlm(formula = vxMean ~ band, data = dtestAgg)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-881.05 -214.32  -41.11  176.71 1299.96 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 480.61722   11.92601   40.30   &lt;2e-16 ***\nband          0.59216    0.01559   37.98   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 301.6 on 2695 degrees of freedom\nMultiple R-squared:  0.3487,    Adjusted R-squared:  0.3484 \nF-statistic:  1443 on 1 and 2695 DF,  p-value: &lt; 2.2e-16"
  },
  {
    "objectID": "Analysis/discrim.html#fit-no-pooling-model-individual-fit-for-each-subject",
    "href": "Analysis/discrim.html#fit-no-pooling-model-individual-fit-for-each-subject",
    "title": "Testing Discrimination Analysis",
    "section": "Fit no pooling model (individual fit for each subject)",
    "text": "Fit no pooling model (individual fit for each subject)\n\n\n      id              Intercept        Slope_band         Model          \n Length:461         Min.   :-461.2   Min.   :-0.4938   Length:461        \n Class :character   1st Qu.: 184.8   1st Qu.: 0.2604   Class :character  \n Mode  :character   Median : 399.2   Median : 0.5927   Mode  :character  \n                    Mean   : 475.0   Mean   : 0.6075                     \n                    3rd Qu.: 733.1   3rd Qu.: 0.9347                     \n                    Max.   :1657.5   Max.   : 2.3819                     \n\n\n Length   Class    Mode \n      3 formula    call"
  },
  {
    "objectID": "Analysis/discrim.html#some-individual-plots-showing-the-best-fitting-line-against-testing-behavior-x-velocity.",
    "href": "Analysis/discrim.html#some-individual-plots-showing-the-best-fitting-line-against-testing-behavior-x-velocity.",
    "title": "Testing Discrimination Analysis",
    "section": "Some individual plots showing the best fitting line against testing behavior (x velocity).",
    "text": "Some individual plots showing the best fitting line against testing behavior (x velocity).\n\nSample of high, and low discriminating subjects (i.e. highest and lowest slopes)\nMean Vx for each band shown via dot.\ncorrect bands shown with translucent rectangles"
  },
  {
    "objectID": "Analysis/discrim.html#fit-partial-pooling-model-linear-mixed-model-with-random-slope-and-intercept",
    "href": "Analysis/discrim.html#fit-partial-pooling-model-linear-mixed-model-with-random-slope-and-intercept",
    "title": "Testing Discrimination Analysis",
    "section": "Fit partial pooling model (linear mixed model with random slope and intercept)",
    "text": "Fit partial pooling model (linear mixed model with random slope and intercept)\n\n\nlmer(formula = vxMed ~ 1 + band + (1 + band | id), data = dtestAgg, \n    control = lmerControl(optimizer = \"bobyqa\", optCtrl = list(maxfun = 3e+05)))\n            coef.est coef.se\n(Intercept) 455.71    18.10 \nband          0.61     0.02 \n\nError terms:\n Groups   Name        Std.Dev. Corr  \n id       (Intercept) 370.15         \n          band          0.46   -0.79 \n Residual             138.09         \n---\nnumber of obs: 2697, groups: id, 461\nAIC = 36583.8, DIC = 36573.6\ndeviance = 36572.7 \n\n\n# A tibble: 6 × 4\n  id    Intercept Slope_band Model          \n  &lt;chr&gt;     &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;          \n1 1         558.       0.556 Partial pooling\n2 2        1157.       0.230 Partial pooling\n3 3          44.5      1.42  Partial pooling\n4 4        1033.      -0.140 Partial pooling\n5 5         250.       0.949 Partial pooling\n6 6         504.       0.596 Partial pooling\n\n\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: vxMed ~ 1 + band + (1 + band | id)\n   Data: dtestAgg\nControl: lmerControl(optimizer = \"bobyqa\", optCtrl = list(maxfun = 3e+05))\n\nREML criterion at convergence: 36571.8\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-3.4138 -0.4608 -0.0159  0.4495  5.0446 \n\nRandom effects:\n Groups   Name        Variance  Std.Dev. Corr \n id       (Intercept) 1.370e+05 370.1522      \n          band        2.084e-01   0.4565 -0.79\n Residual             1.907e+04 138.0887      \nNumber of obs: 2697, groups:  id, 461\n\nFixed effects:\n             Estimate Std. Error        df t value Pr(&gt;|t|)    \n(Intercept) 455.70935   18.09580 457.64524   25.18   &lt;2e-16 ***\nband          0.61216    0.02248 456.22667   27.24   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n     (Intr)\nband -0.801\noptimizer (bobyqa) convergence code: 0 (OK)\nModel failed to converge with max|grad| = 0.0852438 (tol = 0.002, component 1)\nModel is nearly unidentifiable: very large eigenvalue\n - Rescale variables?\nModel is nearly unidentifiable: large eigenvalue ratio\n - Rescale variables?\n\n\n\n\n [1] 223 401 312 376 363 171 329 366 393 275 341 440 158 132 375 66  343 316\n461 Levels: 223 401 312 376 363 171 329 366 393 275 341 440 158 132 375 ... 302"
  },
  {
    "objectID": "Analysis/discrim.html#correlation-between-fit-parameters-slope-and-intercept-and-testing-vx",
    "href": "Analysis/discrim.html#correlation-between-fit-parameters-slope-and-intercept-and-testing-vx",
    "title": "Testing Discrimination Analysis",
    "section": "Correlation between fit parameters (Slope and Intercept) and testing Vx",
    "text": "Correlation between fit parameters (Slope and Intercept) and testing Vx\n\nNoteworthy that The correlation between slope and Vx is strongest for the slowest bands (100-300 and 350-550), for both original and reverse ordered groups. The slow positions are extrapolation for the Original ordered group, and trained by the reverse ordered group.\nFairly similar patterns for Slope and Intercept\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCorrelation between parameters and Mean Deviation.\n\nHere we see a powerful effect of slope for the slow bands (larger slopes tend to have smaller deviation)"
  },
  {
    "objectID": "Analysis/e1_discrim.html",
    "href": "Analysis/e1_discrim.html",
    "title": "E1 Discrimination Analysis",
    "section": "",
    "text": "Codepacman::p_load(tidyverse,tidybayes,brms,broom,broom.mixed,lme4,emmeans,here,knitr,kableExtra,gt,gghalves,patchwork,ggforce,ggdist,equatiomatic)\ne1 &lt;- readRDS(here(\"data/e1_08-04-23.rds\"))\nsource(here(\"Functions/Display_Functions.R\"))\n\n\ntest &lt;- e1 |&gt; filter(expMode2 == \"Test\") \ntestAvg &lt;- test %&gt;% group_by(id, condit, vb, bandInt,bandType,tOrder) %&gt;%\n  summarise(nHits=sum(dist==0),vxMean=mean(vx),vxMed=median(vx),dist=mean(dist),sdist=mean(sdist),n=n(),Percent_Hit=nHits/n)\n\n#test %&gt;% filter(id==1, band==1) %&gt;% select(vx) %&gt;% unlist() %&gt;% as.vector()\nSys.setenv(LIBGS = \"/usr/local/share/ghostscript/10.00/lib/libgs.dylib.10.00\")\nfont_opts &lt;- list(dvisvgm.opts = \"--font-format=woff\")\n\nlibrary(\"tinytex\")\nfont_opts &lt;- list(extra.preamble = c(\"\\\\usepackage{libertine}\", #\"\\\\usepackage{libertinust1math}\",\n                                     \"\\\\usepackage{xstring}\",\n                                     \"\\\\usepackage{neuralnetwork}\"),\n                  dvisvgm.opts = \"--font-format=woff\")\n\nfont_opts2 &lt;- list(extra.preamble = c(\"\\\\usepackage{amsmath}\", #\"alignment\n                                     \"\\\\usepackage{listofitems}\", # create arrays\n                                     \"\\\\usepackage{xcolor}\", \n                                     \"\\\\usepackage[outline]{contour}\"),  # glow around text\n                  dvisvgm.opts = \"--font-format=woff\")\nCodelmerFit &lt;- function(mform,df) {\nm=lmer(mform, df)\n  fe &lt;- fixef(m)\n  dfm &lt;- coef(m)$id %&gt;% as.tibble(rownames=\"id\") %&gt;%rename(\"Intercept\"=`(Intercept)`)\n  for (effect in names(fe)) {\n      dfm &lt;- dfm %&gt;% mutate(!!str_c(\"group_\", effect) := fe[effect])\n  }\n  dfm\n}\n\n# Input formulas and corresponding dataframes\nformulas &lt;- c(\"vx ~ 1 + bandInt + (1 + bandInt | id)\", \n              \"vxMean ~ 1 + bandInt + (1 + bandInt | id)\", \n              \"vxMed ~ 1 + bandInt + (1 + bandInt | id)\")\ndfs &lt;- list(test, testAvg, testAvg)\n\n# Run lmerFit function over all combinations of formulas and dataframes\nm_all &lt;- map2_dfr(formulas, dfs, ~ lmerFit(.x, .y)) %&gt;%\n  mutate(mformula = rep(formulas, each = length(unique(test$id))), \n         dframe = rep(c('test', 'testAvg', 'testAvg'), each=length(unique(test$id))))\n\nhead(m_all)\nm_all |&gt; filter(id==1)\n\n# m1 &lt;- lmerFit(\"vx ~ 1 + bandInt + (1 + bandInt | id)\",test)\n# m2 &lt;- lmerFit(\"vxMean ~ 1 + bandInt + (1 + bandInt | id)\",testAvg)\n# m3 &lt;- lmerFit(\"vxMed ~ 1 + bandInt + (1 + bandInt | id)\",testAvg)\n\n\nm1 &lt;- lmer(vx ~ 1 + bandInt + condit + (1 + bandInt | id),data=test)\ncoef(m1)$id %&gt;% as.tibble(rownames=\"id\") %&gt;%rename(\"Intercept\"=`(Intercept)`)\nsummary(m1)\n\n\nfitted(m1)\nnew_data &lt;- testAvg  |&gt; ungroup() |&gt; select(id,condit,bandInt) \n  \nnew_data=expand_grid(unique(test[, c(\"id\", \"condit\")]), bandInt=unique(test$bandInt))\nnew_data &lt;- new_data[rep(row.names(new_data), each = 10), ]\n\n# Compute predictions\nnew_data$p &lt;- predict(m1, newdata = new_data)\n\n\noptions(mc.cores = 4, brms.backend = \"cmdstanr\")\n\nm1_bayes &lt;- brm(vx ~ 1 + bandInt + condit + (1 + bandInt | id), data = test, family = gaussian())\nsummary(m1_bayes)\n\nnew_data=map_dfr(1, ~data.frame(unique(test[,c(\"id\",\"condit\",\"bandInt\")]))) |&gt; dplyr::arrange(id,bandInt)\npredictions &lt;- t(posterior_predict(m1_bayes, newdata = new_data,ndraws=10))\nnew_data$prediction &lt;- rowMeans(predictions)\n\n\npredicted_draws &lt;- new_data %&gt;%\n  tidybayes::add_predicted_draws(m1_bayes,ndraws=5)\n\n\ntest$censored_vx &lt;- ifelse(test$vx &lt; 50, 50, test$vx)\ntest$censored_vx &lt;- ifelse(test$censored_vx &gt; 1600, 1600, test$censored_vx)\ntest$censored &lt;- ifelse((test$vx &lt;50 | test$vx&gt;1600), TRUE, FALSE)\n\n# fit model\nm1_bayes &lt;- brm(vx~ 1 + bandInt + condit + (1 + bandInt | id), \n                data = test, family = gaussian())\n\n\n\nm1_bayesSN &lt;- brm(vx ~ 1 + bandInt + condit + (1 + bandInt | id), data = test, family = skew_normal(),chains = 4)\nsummary(m1_bayesSN)\n\n\npst &lt;- posterior_samples(m1_bayes, \"b\")\nggplot(testAvg, aes(x = bandInt, y = vxMean)) +\n    geom_point(shape = 1) +\n    geom_abline(\n        data = pst, alpha = .01, size = .1,\n        aes(intercept = b_Intercept, slope = b_bandInt)\n    )\n\nX &lt;- cbind(test[,c(\"id\",\"condit\",\"trial\",\"vb\",\"bandInt\",\"vx\")], fitted(m1_bayes)[,-2]) %&gt;% as_tibble()\nCodem1 &lt;- lmer(vx ~ (1 + condit*bandInt) + (1 + bandInt | id),data=test)\n\nWarning in checkConv(attr(opt, \"derivs\"), opt$par, ctrl = control$checkConv, :\nModel failed to converge with max|grad| = 0.846446 (tol = 0.002, component 1)\n\n\nWarning in checkConv(attr(opt, \"derivs\"), opt$par, ctrl = control$checkConv, : Model is nearly unidentifiable: very large eigenvalue\n - Rescale variables?;Model is nearly unidentifiable: large eigenvalue ratio\n - Rescale variables?\n\nCodeextract_eq(m1)\n\n\\[\n\\begin{aligned}\n  \\operatorname{vx}_{i}  &\\sim N \\left(\\alpha_{j[i]} + \\beta_{1j[i]}(\\operatorname{bandInt}), \\sigma^2 \\right) \\\\    \n\\left(\n  \\begin{array}{c}\n    \\begin{aligned}\n      &\\alpha_{j} \\\\\n      &\\beta_{1j}\n    \\end{aligned}\n  \\end{array}\n\\right)\n  &\\sim N \\left(\n\\left(\n  \\begin{array}{c}\n    \\begin{aligned}\n      &\\gamma_{0}^{\\alpha} + \\gamma_{1}^{\\alpha}(\\operatorname{condit}_{\\operatorname{Varied}}) \\\\\n      &\\gamma^{\\beta_{1}}_{0} + \\gamma^{\\beta_{1}}_{1}(\\operatorname{condit}_{\\operatorname{Varied}})\n    \\end{aligned}\n  \\end{array}\n\\right)\n,\n\\left(\n  \\begin{array}{cc}\n     \\sigma^2_{\\alpha_{j}} & \\rho_{\\alpha_{j}\\beta_{1j}} \\\\\n     \\rho_{\\beta_{1j}\\alpha_{j}} & \\sigma^2_{\\beta_{1j}}\n  \\end{array}\n\\right)\n\\right)\n    \\text{, for id j = 1,} \\dots \\text{,J}\n\\end{aligned}\n\\]\n\\[\n\\begin{aligned}\n  \\operatorname{vx}_{i}  &\\sim N \\left(\\alpha_{j[i]} + \\beta_{1j[i]}(\\operatorname{bandInt}), \\sigma^2 \\right) \\\\    \n\\left(\n  \\begin{array}{c}\n    \\begin{aligned}\n      &\\alpha_{j} \\\\\n      &\\beta_{1j}\n    \\end{aligned}\n  \\end{array}\n\\right)\n  &\\sim N \\left(\n\\left(\n  \\begin{array}{c}\n    \\begin{aligned}\n      &\\gamma_{0}^{\\alpha} + \\gamma_{1}^{\\alpha}(\\operatorname{condit}_{\\operatorname{Varied}}) \\\\\n      &\\gamma^{\\beta_{1}}_{0} + \\gamma^{\\beta_{1}}_{1}(\\operatorname{condit}_{\\operatorname{Varied}})\n    \\end{aligned}\n  \\end{array}\n\\right)\n,\n\\left(\n  \\begin{array}{cc}\n     \\sigma^2_{\\alpha_{j}} & \\rho_{\\alpha_{j}\\beta_{1j}} \\\\\n     \\rho_{\\beta_{1j}\\alpha_{j}} & \\sigma^2_{\\beta_{1j}}\n  \\end{array}\n\\right)\n\\right)\n    \\text{, for id j = 1,} \\dots \\text{,J}\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "Analysis/e1_discrim.html#section",
    "href": "Analysis/e1_discrim.html#section",
    "title": "E1 Discrimination Analysis",
    "section": "2",
    "text": "2\ndist ~ condit * bandInt + (1 + bandInt | id)\n\nCorrelated random slopes and intercepts for conditions and band intensity within subjects (identified by id).\n\nEstimates the following parameters:\n\nFixed effects for conditions and band intensity, \\(_0), \\(_1), and \\(_2).\nRandom intercepts for subjects, \\(_{j}).\nRandom slopes for subjects with respect to band intensity, \\(_{2j}).\nCorrelation between intercepts \\({j}) and slopes \\({2j}), captured in the covariance matrix.\n\n\n\nThe model equation is represented as:\n[\n\\[\\begin{aligned}\n  y_{ij}  &\\sim N \\left(\\alpha_{j[i]} + \\beta_{1j[i]}(\\operatorname{condit}_{ij}) + \\beta_{2j[i]}(\\operatorname{bandInt}_{ij}), \\sigma^2 \\right) \\\\\n  \\begin{pmatrix} \\alpha_{j} \\\\ \\beta_{1j} \\\\ \\beta_{2j} \\end{pmatrix} &\\sim N \\left( \\begin{pmatrix} \\gamma_{0}^{\\alpha} \\\\ \\gamma_{0}^{\\beta_{1}} + \\gamma_{1}^{\\beta_{1}}(\\operatorname{condit}_{\\operatorname{Varied}}) \\\\ \\gamma_{0}^{\\beta_{2}} \\end{pmatrix}, \\begin{pmatrix} \\sigma^2_{\\alpha_{j}} & 0 & 0 \\\\ 0 & \\sigma^2_{\\beta_{1j}} & 0 \\\\ 0 & 0 & \\sigma^2_{\\beta_{2j}} \\end{pmatrix} \\right), \\text{ for id j = 1,} \\dots \\text{,J}\n  \\end{aligned}\\]\n]\n\n\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nrandom intercept for subject\n\n\n\n(bandInt\\|id) = (1+bandInt\\|id)\n\nrandom slope of band intensity within subjects, with correlated intercept\n\n\ncondit * bandInt\nfixed effects of conditions and band intensity, and their interaction"
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-1",
    "href": "Analysis/e1_discrim.html#section-1",
    "title": "E1 Discrimination Analysis",
    "section": "3",
    "text": "3\nCertainly, here is the description of the model equations and coefficients, modified to match the requested style:\nModel Equations and Coefficients\n\nModel includes varying intercepts and slopes.\nEstimates multiple parameters:\n\nPopulation-level intercepts and slopes, represented by ().\nGroup-level variances, represented by ().\nCorrelations between different coefficients at the group level.\n\n\n\nFormally, the model can be expressed as follows:\n\nResponse for each observation: [ y_{ij} N ( {j[i]} + {1j[i]}({ij}) + {2j[i]}(_{ij}), ^2 ) ]\n\nRandom effects for each group: [\n\\[\\begin{pmatrix} \\alpha_{j} \\\\ \\beta_{1j} \\\\ \\beta_{2j} \\end{pmatrix}\\]\nN (\n\\[\\begin{pmatrix} \\gamma_{0}^{\\alpha} \\\\ \\gamma_{0}^{\\beta_{1}} + \\gamma_{1}^{\\beta_{1}}(\\operatorname{condit}_{\\operatorname{Varied}}) \\\\ \\gamma_{0}^{\\beta_{2}} \\end{pmatrix}\\]\n,\n\\[\\begin{pmatrix} \\sigma^2_{\\alpha_{j}} & 0 & 0 \\\\ 0 & \\sigma^2_{\\beta_{1j}} & 0 \\\\ 0 & 0 & \\sigma^2_{\\beta_{2j}} \\end{pmatrix}\\]\n), j = 1, , J ]\n\n\n\n\n\n\n\n\nEquation (Model Code)\nMeaning\n\n\ndist ~ condit * bandInt + (1 + bandInt\\|id)\nRandom slopes and intercepts for condit and bandInt within id group, with correlations between them.\n\n\nThe model has been fitted using the brm function from the brms package, with a Gaussian family and identity link function. The prior distributions are mainly default settings with specific student t-distributions for some hyperparameters.\nThe equations provided outline the statistical structure of the model and the relationships between the different elements, such as the observations, random effects, and coefficients."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-2",
    "href": "Analysis/e1_discrim.html#section-2",
    "title": "E1 Discrimination Analysis",
    "section": "4",
    "text": "4\nCertainly. Here’s a modified description of the model equations and coefficients, matching the desired style of your alternate write-up:\ndist ~ condit * bandInt + (1 + bandInt | id)\n\nCorrelated random slopes and intercepts for condition and band intensity within subjects.\nModel estimates include:\n\nIntercept, \\(_{j})\nSlope for condition, \\(_{1j})\nSlope for band intensity, \\(_{2j})\nCorrelation between intercepts \\({j}) and slopes \\({1j}), \\(_{2j}), given by the covariance matrix\nResidual error, \\(^2)\n\n\nGeneral form of the model:\n\n\\(y_{ij} N ({j[i]} + {1j[i]}({ij}) + {2j[i]}(_{ij}), ^2 ))\n\\(\n\\[\\begin{pmatrix} \\alpha_{j} \\\\ \\beta_{1j} \\\\ \\beta_{2j} \\end{pmatrix}\\]\nN (\n\\[\\begin{pmatrix} \\gamma_{0}^{\\alpha} \\\\ \\gamma_{0}^{\\beta_{1}} + \\gamma_{1}^{\\beta_{1}}(\\text{condit}_{\\text{Varied}}) \\\\ \\gamma_{0}^{\\beta_{2}} \\end{pmatrix}\\]\n,\n\\[\\begin{pmatrix} \\sigma^2_{\\alpha_{j}} & 0 & 0 \\\\ 0 & \\sigma^2_{\\beta_{1j}} & 0 \\\\ 0 & 0 & \\sigma^2_{\\beta_{2j}} \\end{pmatrix}\\]\n))\n\n\n\n\n\n\n\n\n\nequation\nformula\n\n\n\\({j} + {1j} {ij} + {2j} {ij} + {ij}\\)\ndist ~ condit * bandInt + (1 + bandInt | id)\n\n\n\nModel code:\n\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id), data=test, file=paste0(here::here(\"data/model_cache\",modelName)), iter=5000, chains=4)\n\nFamily: gaussian\nLink function: identity\nPriors:\n\ne1_distBMM$prior"
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-3",
    "href": "Analysis/e1_discrim.html#section-3",
    "title": "E1 Discrimination Analysis",
    "section": "5",
    "text": "5\nCertainly, based on the desired style you have provided, the revised Analyses Strategy section can be crafted as follows:\ndist ~ condit * bandInt + (1 + bandInt | id)\n\n\nMixed-Effects Regression with Correlated Random Slopes and Intercept:\n\nVarying coefficients for individuals: This model enables the estimation of the parameters at both individual and group levels. It encompasses partial pooling, estimating individual and group-level parameters.\n\nModel Equation:\n\\[\\begin{align*}\n  y_{ij}  &\\sim N \\left(\\alpha_{j[i]} + \\beta_{1j[i]}(\\operatorname{condit}_{ij}) + \\beta_{2j[i]}(\\operatorname{bandInt}_{ij}), \\sigma^2 \\right) \\\\    \n  \\left( \\begin{array}{c} \\alpha_{j} \\\\ \\beta_{1j} \\\\ \\beta_{2j} \\end{array} \\right) &\\sim N \\left( \\left( \\begin{array}{c} \\gamma_{0}^{\\alpha} \\\\ \\gamma_{0}^{\\beta_{1}} + \\gamma_{1}^{\\beta_{1}}(\\operatorname{condit}_{\\operatorname{Varied}}) \\\\ \\gamma_{0}^{\\beta_{2}} \\end{array} \\right), \\left( \\begin{array}{ccc} \\sigma^2_{\\alpha_{j}} & 0 & 0 \\\\  0 & \\sigma^2_{\\beta_{1j}} & 0 \\\\ 0 & 0 & \\sigma^2_{\\beta_{2j}} \\end{array} \\right) \\right) \\text{, for id j = 1,} \\dots \\text{,J}\n  \\end{align*}\\]\n\nBayesian Estimation: This method quantifies the uncertainty in parameter estimates and circumvents convergence issues. We report median values of the posterior distribution and 95% credible intervals.\nImplementation: Fitting was performed using the brms package, and descriptive statistics were extracted with the BayestestR package.\n\n\n\n\n\n\n\n\n\n\nEquation\nFormula\nDescription\n\n\n\n((0 + {1}X_i + e_{si}))\n~ X + (1|Subject)\nBayesian Mixed Effects Regression Model\n\n\nModel Code\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id), data=test, file=paste0(here::here(\"data/model_cache\", modelName)), iter=5000, chains=4)\nSpecifics of the model’s implementation in R\n\n\n\nThe provided R code and the graphical representations detail the implementation of this model for specific analyses.\nPlease make sure to replace placeholders (like Subject) with the actual terms used in your research or analysis if necessary. The above description is crafted to align with the desired style and provide comprehensive insights into the model’s configuration."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-4",
    "href": "Analysis/e1_discrim.html#section-4",
    "title": "E1 Discrimination Analysis",
    "section": "6",
    "text": "6\nCertainly. Here’s a modified description for the model and coefficients in the desired style:\ndist ~ condit * bandInt + (1 + bandInt | id)\n\nCorrelated random slopes and intercepts\nEstimates eight parameters:\n\nGlobal average for response, \\(_{j}).\nEffect of condition on response, \\(_{1j}).\nEffect of band intensity on response, \\(_{2j}).\nVariability of intercepts, \\(^2_{_{j}}).\nVariability of slope for condition, \\(^2_{_{1j}}).\nVariability of slope for band intensity, \\(^2_{_{2j}}).\nVariance of residual error, \\(^2).\nCorrelations between intercepts and slopes, not explicitly shown.\n\n\n\n\\[\\begin{align*}\ny_{ij} &\\sim N \\left(\\alpha_{j[i]} + \\beta_{1j[i]}(\\operatorname{condit}_{ij}) + \\beta_{2j[i]}(\\operatorname{bandInt}_{ij}), \\sigma^2 \\right)\\\\\n\\left( \\begin{array}{c} \\alpha_{j} \\\\ \\beta_{1j} \\\\ \\beta_{2j} \\end{array} \\right) &\\sim N \\left( \\left( \\begin{array}{c} \\gamma_{0}^{\\alpha} \\\\ \\gamma_{0}^{\\beta_{1}} + \\gamma_{1}^{\\beta_{1}}(\\operatorname{condit}_{\\operatorname{Varied}}) \\\\ \\gamma_{0}^{\\beta_{2}} \\end{array} \\right), \\left( \\begin{array}{ccc} \\sigma^2_{\\alpha_{j}} & 0 & 0 \\\\  0 & \\sigma^2_{\\beta_{1j}} & 0 \\\\ 0 & 0 & \\sigma^2_{\\beta_{2j}} \\end{array} \\right) \\right) \\text{, for id j = 1,} \\dots \\text{,J}\n\\end{align*}\\]\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nrandom group intercept\n\n\n(1 + bandInt\\|id)\nrandom slope of band intensity within group with correlated intercept\n\n\n\nModel code:\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id), data=test, file=paste0(here::here(\"data/model_cache\", modelName)), iter=5000, chains=4)\nIn the model: - (1 + bandInt|id) represents the random slope of band intensity within the group with correlated intercept. - condit * bandInt represents the interaction between condition and band intensity.\nSubsequent analysis and visualizations then assess these effects.\nPlease note that this revised description retains the essence of your analysis strategy while adapting to the desired style."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-5",
    "href": "Analysis/e1_discrim.html#section-5",
    "title": "E1 Discrimination Analysis",
    "section": "7",
    "text": "7\nCertainly. Here is the revised description that matches the style of the alternate writeup:\ndist ~ condit * bandInt + (1 + bandInt | id)\n\nCorrelated random slopes and intercepts.\n\nEstimates various parameters:\n\nGlobal average for the dependent variable, \\(_0^{}).\nEffects of conditVaried, \\(0{{1}} + {1}{{1}}(_{})).\nEffects of bandInt, \\(0^{{2}}).\nCorrelations between intercepts and slopes, represented by the covariance matrix.\nResidual variance, \\(^2).\n\n\n\nEquation for the model: \\[ y_{ij} N ({j[i]} + {1j[i]}({ij}) + {2j[i]}(_{ij}), ^2 ) \\] with \\[ ( ]\n\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1 | id)\nrandom individual intercept\n\n\n(1 + bandInt | id)\nrandom slope of bandInt within individuals with correlated intercept\n\n\n(condit * bandInt)\ninteraction effect between condit and bandInt\n\n\n\n\nModel code and resulting outputs can be referenced in the R code section, including the visualizations, which illustrate the conditional effect of training condition and band, as well as the predicted means and marginal effects."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-6",
    "href": "Analysis/e1_discrim.html#section-6",
    "title": "E1 Discrimination Analysis",
    "section": "8",
    "text": "8\nCertainly. Based on the desired style of description, here’s the modified content:\nVarying Coefficients\nThe analysis utilizes Bayesian methods to directly quantify uncertainty in parameter estimates, addressing common convergence issues found in frequentist methods. The models are summarized as follows:\n(condit * bandInt + (1 + bandInt | id))\n\nThe model estimates varying coefficients.\nIt estimates the relationship between condition, band intensity, and distance, incorporating random intercepts and slopes.\nThe model can be formulated as:\n\n\\(dist (\\beta_0 + b_{0,id}) + (\\beta_1 + b_{1,id}) condit + (\\beta_2 + b_{2,id}) bandInt + (\\beta_3 + b_{3,id}) (condit bandInt) + e_{id}\\)\nHere, \\(b_{0,id}, b_{1,id}, b_{2,id},\\) and \\(b_{3,id}\\) are random effects for the individual, and \\(e_{id}\\) is the error term.\n\\(\\begin{pmatrix}b_{0,id} \\\\ b_{1,id} \\\\ b_{2,id} \\\\ b_{3,id}\\end{pmatrix} \\sim \\mathcal{N}\\left( \\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\\\ 0\\end{pmatrix},\\begin{pmatrix} \\sigma_{00}^2 & \\sigma_{01} & \\sigma_{02} & \\sigma_{03}\\\\ \\sigma_{01} & \\sigma_{11}^2 & \\sigma_{12} & \\sigma_{13}\\\\ \\sigma_{02} & \\sigma_{12} & \\sigma_{22}^2 & \\sigma_{23}\\\\ \\sigma_{03} & \\sigma_{13} & \\sigma_{23} & \\sigma_{33}^2\\end{pmatrix}\\right)\\)\n\n\n\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nrandom individual intercept\n\n\n\n(bandInt\\|id) = (1+bandInt\\|id)\n\nrandom slope of band intensity within individual with correlated intercept\n\n\n\nThe models’ results are graphed, showing conditional effects of training condition and band, with ribbons indicating 95% credible intervals, and grand means and average marginal effects per condition and band."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-7",
    "href": "Analysis/e1_discrim.html#section-7",
    "title": "E1 Discrimination Analysis",
    "section": "9",
    "text": "9\nCertainly. Here is a revision of the description that aligns with the desired style:\ndist ~ condit * bandInt + (1 + bandInt | id)\n\nModels the relationship between the distance, training conditions, and velocity band, while accounting for individual variations.\nEstimates multiple parameters, including:\n\nFixed effects of condition and velocity band interactions.\nRandom intercept for individuals.\nRandom slope of bandInt within individuals, with a correlated intercept.\nGaussian family with identity link function.\n\n\nVarious priors are applied:\n\nFlat priors for coefficients.\nStudent’s t-distribution priors for intercepts and standard deviations.\nLKJ correlation priors for the correlation matrix.\n\n\nFormally described by: [ \\[\\begin{align*}\n  Y_{i} & = \\left( \\beta_0 + b_{0i} \\right) + \\left( \\beta_1 + b_{1i} \\right) \\cdot \\text{condit} + \\left( \\beta_2 + b_{2i} \\right) \\cdot \\text{bandInt} + e_{i} \\\\\n  \\begin{pmatrix} b_{0i} \\\\ b_{1i} \\\\ b_{2i} \\end{pmatrix} & \\sim \\mathcal{N} \\left( \\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\end{pmatrix}, \\begin{pmatrix} \\sigma_{00}^2 & \\sigma_{01} & \\sigma_{02} \\\\ \\sigma_{01} & \\sigma_{11}^2 & \\sigma_{12} \\\\ \\sigma_{02} & \\sigma_{12} & \\sigma_{22}^2 \\end{pmatrix} \\right)\n  \\end{align*}\\] ]\n\n\n\n\n\n\n\nequation\nformula\n\n\n\\((0 + b{0i}) + (1 + b{1i}) + (2 + b{2i}) + e_i\\)\ndist ~ condit * bandInt + (1 + bandInt | id)\n\n\nThe diagrams and figures represent: - E1: Conditional Effect of Training Condition and Band, showing 95% Credible Intervals. - E1: Predicted Means Per Condition and Band, and Average Marginal Effect (Constant - Varied)."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-8",
    "href": "Analysis/e1_discrim.html#section-8",
    "title": "E1 Discrimination Analysis",
    "section": "10",
    "text": "10\nCertainly. Here’s a restructured description of the model equations and coefficients to match the requested style:"
  },
  {
    "objectID": "Analysis/e1_discrim.html#varying-coefficients-1",
    "href": "Analysis/e1_discrim.html#varying-coefficients-1",
    "title": "E1 Discrimination Analysis",
    "section": "Varying Coefficients",
    "text": "Varying Coefficients\nModel Equations\n\n\n\n\n\n\nEquation\nFormula\n\n\n\\(β_0 + β_{1}() + β_{2}() + (1 + | ) + e_{si}\\)\ndist ~ condit * bandInt + (1 + bandInt \\| id)\n\nFormula Meanings\n\n\n\n\n\n\nFormula\nMeaning\n\n\n\n(1\\|id)\nrandom group intercept (individuals)\n\n\n(bandInt\\|id)\nrandom slope of bandInt within id group with correlated intercept"
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-9",
    "href": "Analysis/e1_discrim.html#section-9",
    "title": "E1 Discrimination Analysis",
    "section": "11",
    "text": "11\nCertainly. Below, I have transformed the original description into the desired style, providing an explanation of the model, connections between models, code, and conceptual ideas, and added tables to represent these connections visually.\nAnalyses Strategy\nWe employed a Bayesian approach, permitting direct quantification of uncertainty in parameter estimates and avoiding frequentist convergence issues. The general form of the mixed models can be understood through the following representations:\nModel Equations and Formulas\n\n\n\n\n\n\nEquation\nFormula\n\n\n\n\\(dist condit bandInt + (1 + bandIntid)\\)\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id))\n\n\n\\(vx condit bandInt + (1 + bandIntid)\\)\ne1_vxBMM$formula\n\n\nFormula Meaning\n\n\n\n\n\n\nFormula\nMeaning\n\n\n\n(1\\|id)\nRandom intercept for individual\n\n\n\n(bandInt\\|id) = (1+bandInt\\|id)\n\nRandom slope of bandInt within individual with correlated intercept\n\n\nPriors and Family\n\n\n\n\n\n\nParameter\nDescription\n\n\n\nFamily: Gaussian\nLink function: identity\n\n\nPriors\ndefault, vectorized, and specific as indicated in the model code\n\n\nGraphical Representation\n\nCode\\usetikzlibrary{positioning}\n\\begin{tikzpicture}[{every node/.append style}=draw]\n  \\node [rectangle] (population) at (0, 4) {Population};\n  \\node [rectangle] (id) at (0, 2.5) {Individual (id)};\n  \\node [ellipse] (y1) at (-1.5, 1) {Condition (condit)};\n  \\node [ellipse] (y2) at (1.5, 1) {Band Intensity (bandInt)};\n  \\draw [-latex] (population) to (id);\n  \\draw [-latex] (id) to (y1);\n  \\draw [-latex] (id) to (y2);\n\\end{tikzpicture}"
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-10",
    "href": "Analysis/e1_discrim.html#section-10",
    "title": "E1 Discrimination Analysis",
    "section": "12",
    "text": "12\nCertainly, the revised description that matches your desired style is as follows:\nAnalyses Strategy\nThe analysis employs Bayesian methods to quantify the uncertainty in the parameter estimates, avoiding convergence issues common to frequentist analogues of mixed models. The representation of the model, as well as the corresponding code and conceptual ideas, can be summarized in tables and visuals as follows:\n\n\n\n\n\n\nEquation\nFormula\n\n\n\n\\((_0 + _1 + _2 ) + (1 + |id)\\)\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt\\|id))\n\n\n(1\\|id)\nrandom intercept for id\n\n\n\n(x\\|id) = (1+x\\|id)\n\nrandom slope of x within id with correlated intercept\n\n\n\n(0+x\\|id) = (-1+x\\|id)\n\nrandom slope of x within id: no variation in intercept\n\n\n\nThe detailed structure of the model can be visualized in the following diagram:\n\nCode\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes.geometric}\n\\begin{tikzpicture}[{every node/.append style}=draw]\n  \\node [rectangle] (id) at (0, 2.5) {ID};\n  \\node [ellipse] (dist1) at (-1.5, 1) {$\\text{dist}_{1}$};\n  \\node [ellipse] (dist2) at (0, 1) {$\\text{dist}_{2}$};\n  \\node [ellipse] (disti) at (1.5, 1) {$\\text{dist}_{i}$};\n  \\draw [-latex] (id) to (dist1);\n  \\draw [-latex] (id) to (dist2);\n  \\draw [-latex] (id) to (disti);\n\\end{tikzpicture}\n\n\n\n\n\n\n\nThe priors for the model parameters are:\n\n\n\n\n\n\n\n\nprior\nclass\ncoef\nsource\n\n\n\n(flat)\nb\n\ndefault\n\n\n(flat)\nb\nbandInt\n(vectorized)\n\n\n(flat)\nb\nconditVaried\n(vectorized)\n\n\n(flat)\nb\nconditVaried:bandInt\n(vectorized)\n\n\nstudent_t(3, 143.4, 212.7)\nIntercept\n\ndefault\n\n\n\nThe use of tables and visuals offers a clear connection between the equations, code, and underlying concepts, providing an insightful understanding of the model structure and the corresponding analysis strategy."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-11",
    "href": "Analysis/e1_discrim.html#section-11",
    "title": "E1 Discrimination Analysis",
    "section": "13",
    "text": "13\nCertainly, here’s the revised version of the analyses strategy that follows the desired style. It includes tables and visuals to illustrate the connections between the models, code, and conceptual ideas."
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-2",
    "href": "Analysis/e1_discrim.html#analyses-strategy-2",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nOur Bayesian method allows us to directly quantify the uncertainty in our parameter estimates, and avoid convergence issues. For each model, we report the median values of the posterior distribution, and 95% credible intervals. The models are represented as follows:\n\n\n\n\n\n\nequation\nformula\n\n\n\\((β_0 + b_{S,0s}) + (β_{1} + b_{S,1s}) + + e_{si}\\)\ndist ~ condit * bandInt + (1 + bandInt | id)\n\n\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nrandom group intercept\n\n\n(1+bandInt\\|id)\nrandom slope of bandInt within group with correlated intercept\n\n\n\nThe following table explains the parameters:\nGraphical representation of the model structure:\nThis revised strategy provides a comprehensive overview of the models, coding implementations, and conceptual insights by leveraging tables and visuals for an in-depth yet succinct understanding."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-12",
    "href": "Analysis/e1_discrim.html#section-12",
    "title": "E1 Discrimination Analysis",
    "section": "14",
    "text": "14\nCertainly. Based on the provided structure and style, here’s a rewritten description:"
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-3",
    "href": "Analysis/e1_discrim.html#analyses-strategy-3",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nThe Bayesian methodology adopted here enables direct quantification of the uncertainty in our parameter estimates, avoiding the convergence issues commonly found in frequentist counterparts of our mixed models. The models and parameters are described through the following tables and visuals:\nEquations and Model Code\n\n\n\n\n\n\n\nEquation Description\nFormula\nModel Code\n\n\nGeneral mixed-effects model with condition and bandInt\n\\(β_0 + β_{1} + β_{2} + b_{} + e_{}\\)\ndist ~ condit * bandInt + (1 + bandInt|id)\n\nModel Details\n\n\nClass\nCoefficient\nPrior\nSource\n\n\n\nb\n-\n(flat)\ndefault\n\n\nb\nbandInt\n(flat)\nvectorized\n\n\nb\nconditVaried\n(flat)\nvectorized\n\n\nb\nconditVaried:bandInt\n(flat)\nvectorized\n\n\nIntercept\n-\nstudent_t(3, 143.4, 212.7)\ndefault\n\n\nL\n-\nlkj_corr_cholesky(1)\ndefault\n\n\nL\nid\nlkj_corr_cholesky(1)\nvectorized\n\n\nsd\n0\nstudent_t(3, 0, 212.7)\ndefault\n\n\nsd\nid\nstudent_t(3, 0, 212.7)\nvectorized\n\n\nsd\nbandInt\nstudent_t(3, 0, 212.7)\nvectorized\n\n\nsd\nIntercept\nstudent_t(3, 0, 212.7)\nvectorized\n\n\nsigma\n0\nstudent_t(3, 0, 212.7)\ndefault\n\n\nInterpretation and Structure\nYou can further include an illustration of the model and description using TikZ as you have done in your desired style example.\nParameter Summary\nThis structured representation provides a clear and comprehensive overview of the models, code, conceptual ideas, and visuals for the analyses strategy, aligning with the desired style."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-13",
    "href": "Analysis/e1_discrim.html#section-13",
    "title": "E1 Discrimination Analysis",
    "section": "15",
    "text": "15\nCertainly. Here is the revised description of the analyses strategy in the requested style. I have presented the given model using tables and explanations to elucidate the connections between models, code, and conceptual ideas."
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-4",
    "href": "Analysis/e1_discrim.html#analyses-strategy-4",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nWe utilize Bayesian methods, which allow us to directly quantify the uncertainty in our parameter estimates and avoid frequentist convergence issues. The general form of our models is presented below in the desired format:\n\n\n\n\n\n\nequation\nformula\n\n\n\n\\(( + (1 + ))\\)\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id))\n\n\nFamily: gaussian\nLink function: identity\n\n\n\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nrandom ID intercept\n\n\n(1 + bandInt\\|id)\nrandom slope of bandInt within ID with correlated intercept\n\n\n\nThe following table shows the prior distribution details:\nAnd here’s a representation of the connections between different components:\nBy employing the above structure, our model emphasizes the relationships between the target variable dist, the condition condit, banding intervals bandInt, and the identifiers id. The choice of the Bayesian model allows us to consider these relationships within a cohesive framework, accounting for the inherent variability and uncertainty."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-14",
    "href": "Analysis/e1_discrim.html#section-14",
    "title": "E1 Discrimination Analysis",
    "section": "16",
    "text": "16\nCertainly. Below is the modified description, written in the requested style, emphasizing connections between models, code, and conceptual ideas, while utilizing tables and visuals."
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-5",
    "href": "Analysis/e1_discrim.html#analyses-strategy-5",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nOur utilization of Bayesian methodology permits direct quantification of uncertainty in our parameter estimates and avoids frequentist convergence issues. We delineate the median values of the posterior distribution and 95% credible intervals. Our models are described below:\n\n\n\n\n\n\nequation\nformula\n\n\n\\(e1_distBMM brm(dist condit bandInt + (1 + bandInt|id))\\)\n\ngaussian link function\n\n\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nrandom id intercept\n\n\n\n(x\\|id) = (1+x\\|id)\n\nrandom slope of x within id with correlated intercept\n\n\n\n(0+x\\|id) = (-1+x\\|id)\n\nrandom slope of x within id: no variation in intercept\n\n\n\ne1_distBMM$prior %&gt;% tidy() %&gt;% mutate(Parameter = c(“b (flat)”, “b (bandInt)”, “b (conditVaried)”, “b (conditVaried:bandInt)”, “Intercept”, “L”, “sd”, “sigma”), Description = c(“Default flat prior”, “Vectorized flat prior for bandInt”, “Vectorized flat prior for conditVaried”, “Vectorized flat prior for interaction”, “Student’s t prior for Intercept”, “lkj_corr_cholesky for L”, “Student’s t prior for sd”, “Student’s t prior for sigma”)) %&gt;% select(Parameter, Prior = prior, Description) %&gt;% kbl(escape = FALSE) %&gt;% kable_styling(full_width = FALSE)\n\nCode\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes.geometric}\n\\begin{tikzpicture}[{every node/.append style}=draw]\n  \\node [rectangle] (id) at (0, 2.5) {ID};\n  \\node [ellipse] (dist1) at (-1.5, 1) {$\\text{dist}_{1}$};\n  \\node [ellipse] (dist2) at (0, 1) {$\\text{dist}_{2}$};\n  \\node [ellipse] (disti) at (1.5, 1) {$\\text{dist}_{i}$};\n  \\draw [-latex] (id) to (dist1);\n  \\draw [-latex] (id) to (dist2);\n  \\draw [-latex] (id) to (disti);\n\\end{tikzpicture}\n\n\n\n\n\n\n\nThis modified description aligns with the requested style by utilizing tables to succinctly represent connections between different aspects of the model, and visuals to present the structure."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-15",
    "href": "Analysis/e1_discrim.html#section-15",
    "title": "E1 Discrimination Analysis",
    "section": "17",
    "text": "17\nCertainly. Below is the revised version of the current description, adapted to match the desired style:"
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-6",
    "href": "Analysis/e1_discrim.html#analyses-strategy-6",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nOur Bayesian approach allows direct quantification of uncertainty in parameter estimates, circumventing common convergence issues in frequentist analogues of our mixed models. We report the median values of the posterior distribution, and 95% credible intervals.\n\n\n\n\n\n\nequation\nformula\n\n\n\n\\( e1_distBMM + + (1 + ) \\)\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id))\n\n\nFamily: gaussian\nLink function: identity\n\n\nPrior: \\((), _t(3, 143.4, 212.7), , , _t(3, 0, 212.7), , \\)\ne1_distBMM$prior\n\n\n\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nrandom ID intercept\n\n\n\n(x\\|id) = (1+x\\|id)\n\nrandom slope of x within ID with correlated intercept\n\n\n\n(0+x\\|id) = (-1+x\\|id)\n\nrandom slope of x within ID: no variation in intercept\n\n\n\n\nCode# e1_distBMM_prior &lt;- e1_distBMM$prior %&gt;%\n#   mutate(Class = c(\"b\", \"b\", \"b\", \"b\", \"Intercept\", \"L\", \"L\", \"sd\", \"sd\", \"sd\", \"sd\", \"sigma\"),\n#          Description = c(\"(flat)\", \"(flat)\", \"(flat)\", \"(flat)\", \"student_t(3, 143.4, 212.7)\", \"lkj_corr_cholesky(1)\", \"lkj_corr_cholesky(1)\", \"student_t(3, 0, 212.7)\", \"student_t(3, 0, 212.7)\", \"student_t(3, 0, 212.7)\", \"student_t(3, 0, 212.7)\", \"student_t(3, 0, 212.7)\")) %&gt;%\n#   select(Parameter = coef, Class, Description) %&gt;%\n#   kbl(escape = FALSE) %&gt;%\n#   kable_styling(full_width = FALSE)\n\n\n\nCode\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes.geometric}\n\\begin{tikzpicture}[{every node/.append style}=draw]\n  \\node [rectangle] (id) at (0, 2.5) {ID};\n  \\node [ellipse] (dist1) at (-1.5, 1) {$\\text{dist}_{1}$};\n  \\node [ellipse] (dist2) at (0, 1) {$\\text{dist}_{2}$};\n  \\node [ellipse] (disti) at (1.5, 1) {$\\text{dist}_{i}$};\n  \\draw [-latex] (id) to (dist1);\n  \\draw [-latex] (id) to (dist2);\n  \\draw [-latex] (id) to (disti);\n\\end{tikzpicture}\n\n\n\n\n\n\n\nThis rewrite aligns the description with the alternate writeup style, emphasizing tables and visual structure. It connects models, code, and conceptual ideas, creating a comprehensive overview of the analysis strategy."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-16",
    "href": "Analysis/e1_discrim.html#section-16",
    "title": "E1 Discrimination Analysis",
    "section": "18",
    "text": "18\nCertainly. Below is the revised description of the model equations and coefficients in the desired style, utilizing tables and visual representations to convey the structure of the model. Note that some of the detailed connections between the original model code and the conceptual ideas must be inferred from the code, so the following restructured content may need further customization to precisely fit the specific context of your analysis."
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-7",
    "href": "Analysis/e1_discrim.html#analyses-strategy-7",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nThe Bayesian approach used in our analyses directly quantifies the uncertainty in our parameter estimates, and circumvents convergence issues common to the frequentist analogues of our mixed models. The representation below connects the model’s components with the associated code and conceptual ideas:\n\n\n\n\n\n\nEquation\nFormula\n\n\n\n\\(e1_distBMM = + (1 + )\\)\nbrm(dist ~ condit * bandInt + (1 + bandInt|id))\n\n\nAs represented in the code\n\nFamily: gaussian Link function: identity\n\n\n\n\nPriors for the above model are shown below:\n\n\n\n\n\n\n\n\nPrior\nClass\nCoef\nSource\n\n\n\n\\(\\)\nb\n\ndefault\n\n\n\\(\\)\nb\nbandInt\nvectorized\n\n\n\\(\\)\nb\nconditVaried\nvectorized\n\n\n\\(\\)\nb\nconditVaried:bandInt\nvectorized\n\n\n\\((3, 143.4, 212.7)\\)\nIntercept\n\ndefault\n\n\n\nVisual representation of the model’s structure:\n\nCode\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes.geometric}\n\\begin{tikzpicture}[{every node/.append style}=draw]\n  \\node [rectangle] (id) at (0, 2.5) {ID};\n  \\node [ellipse] (dist1) at (-1.5, 1) {$\\text{dist}_{1}$};\n  \\node [ellipse] (dist2) at (0, 1) {$\\text{dist}_{2}$};\n  \\node [ellipse] (disti) at (1.5, 1) {$\\text{dist}_{i}$};\n  \\draw [-latex] (id) to (dist1);\n  \\draw [-latex] (id) to (dist2);\n  \\draw [-latex] (id) to (disti);\n\\end{tikzpicture}\n\n\n\n\n\n\n\nThis revised description integrates the use of tables and visuals, linking the equations, the associated code, and the underlying conceptual ideas, in line with the desired style."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-17",
    "href": "Analysis/e1_discrim.html#section-17",
    "title": "E1 Discrimination Analysis",
    "section": "19",
    "text": "19\nCertainly. Here’s the rewritten description, formatted in line with your requirements and making connections between models, code, and conceptual ideas through tables and visuals."
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-8",
    "href": "Analysis/e1_discrim.html#analyses-strategy-8",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nOur analyses leverage Bayesian methods to directly quantify uncertainty in our parameter estimates. This methodology effectively avoids convergence issues typically associated with frequentist counterparts in mixed models. We present our models as follows:\nEquations and Model Code\n\n\n\n\n\n\nModel Equation\nModel Code\n\n\n\n\\( _0 + _{1} + )\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id))\n\n\n\\( _0 + _{1} + _{} + )\n∼ condit * bandInt + (1 + bandInt|id)\n\n\nModel Structure\nThe general structure of our model is illustrated in the diagram below, where the relationship between the ID and different distances is demonstrated.\nParameter Description\nA concise description of the model parameters is given below, including their notation, corresponding code, and meaning in the context of the study.\n\n\n\n\n\n\n\n\nParameter\nTerm\nDescription\nEstimate\n\n\n\n\\( _0 )\n&lt;code&gt;condit&lt;/code&gt;\nGlobal average effect of condition across subjects\n\n\n\n\\( _1 )\n&lt;code&gt;bandInt&lt;/code&gt;\nEffect of interaction between conditions and banding intensity on distances\n\n\n\n\nThe table can be further customized with relevant estimates obtained from fitting the model.\nSummary\nThe methodological approach herein aligns with the required emphasis on tables that convey connections between models, code, and concepts. The inclusion of visuals further assists in comprehending the structure of the model."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-18",
    "href": "Analysis/e1_discrim.html#section-18",
    "title": "E1 Discrimination Analysis",
    "section": "20",
    "text": "20\nCertainly. Below is a revised description that aligns with the requested style. The content has been reformulated to match the desired presentation style with tables and visuals."
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-9",
    "href": "Analysis/e1_discrim.html#analyses-strategy-9",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nThe utilization of Bayesian methods in our analysis provides direct quantification of uncertainty in parameter estimates and circumvents convergence issues commonly found with frequentist counterparts. The models’ representation and interpretation are described below.\n\n\n\n\n\n\nequation\nformula\n\n\n\\(e1_distBMM = dist condit bandInt + (1 + bandInt|id)\\)\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt\\|id))\n\n\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nrandom intercept for individual (ID)\n\n\n(1 + bandInt\\|id)\nrandom slope of bandInt within individual with correlated intercept\n\n\n\nThis table demonstrates the relationship between the equation and the code representation for the modeling of the data.\nThe accompanying figure displays the structure of the model, emphasizing the individual identifiers (ID) and the different distances (dist) for each observation.\nThis visualization supports the conceptual understanding of how individual identifiers are related to the distances in the dataset.\nLastly, additional statistics such as median values and 95% credible intervals can be presented in a concise tabular form. For instance:\n#| eval: false\nfit %&gt;% \n  tidy() %&gt;% \n  mutate(Parameter = c(\"\\\\(e1\\_distBMM\\\\)\", \"\\\\(\\\\beta_0\\\\)\", \"\\\\(\\\\beta_1\\\\)\"),\n         Description = c(\"Model for distance by condition and bandInt\",\n                         \"Global average of parameter\",\n                         \"Effect of variable on parameter\")) %&gt;% \n  mutate(term = glue::glue(\"&lt;code&gt;{term}&lt;/code&gt;\"),\n         estimate = round(estimate, 3)) %&gt;% \n  select(Parameter, Term = term, Description, Estimate = estimate) %&gt;% \n  kbl(escape = FALSE) %&gt;% \n  kable_styling(full_width = FALSE)\nThis approach ensures a clear and consistent representation of the analyses strategy, in line with the requested style."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-19",
    "href": "Analysis/e1_discrim.html#section-19",
    "title": "E1 Discrimination Analysis",
    "section": "21",
    "text": "21\nCertainly. Here’s a revised version of the analysis strategy section, matching the desired style with an emphasis on tables and visuals."
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-10",
    "href": "Analysis/e1_discrim.html#analyses-strategy-10",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nWe employ Bayesian methods for quantifying the uncertainty in our parameter estimates and addressing convergence issues that are common in frequentist mixed models. The models are presented in the table below along with their corresponding formulae and descriptions. The general form is explained with relevant coefficients:\n\n\n\n\n\n\nequation\nformula\n\n\n\\(e1_distBMM = (β_0 + b_{I,0i}) + (β_1 + b_{S,1s}) + + (1 + |id)\\)\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id))\n\n\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nRandom intercept for ID\n\n\n(condit * bandInt\\|id)\nInteraction of condition and band interval within ID\n\n\n\nThe fit can be summarized and presented using:\n#| eval: false\nfit %&gt;%\n  tidy() %&gt;%\n  mutate(Parameter = c(\"\\\\(β_0\\\\)\", \"\\\\(β_1\\\\)\", \"\\\\(σ_{0}\\\\)\", \"\\\\(σ_{y}\\\\)\"),\n         Description = c(\"Global Intercept\",\n                         \"Interaction between condition and band interval\",\n                         \"Between-ID variability\",\n                         \"Within-ID variability\")) %&gt;%\n  mutate(term = glue::glue(\"&lt;code&gt;{term}&lt;/code&gt;\"),\n         estimate = round(estimate, 3)) %&gt;%\n  select(Parameter, Term = term, Description, Estimate = estimate) %&gt;%\n  kbl(escape = FALSE) %&gt;%\n  kable_styling(full_width = FALSE)\nA visual representation of the hierarchical structure and distributional assumptions is provided:\n\nCode\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes.geometric}\n\\usetikzlibrary{backgrounds}\n\\definecolor{indiv}{HTML}{5F4690}\n\\definecolor{indiv1}{HTML}{CBBAF7}\n\\definecolor{choice}{HTML}{E17C05}\n\\definecolor{choice1}{HTML}{F7C694}\n\\begin{tikzpicture}[{every node/.append style}=draw]\n  \\node [rectangle, draw=none, fill=indiv1] (id) at (0, 2.5) {ID};\n  \\node [ellipse, fill=choice1, draw=none] (dist) at (0, 1) {dist};\n  \\node [ellipse, fill=choice, draw=none] (condit) at (-1.5, 1) {condit};\n  \\node [ellipse, fill=choice, draw=none] (bandInt) at (1.5, 1) {bandInt};\n\n  \\draw [-latex] (id) to (dist);\n  \\draw [-latex] (id) to (condit);\n  \\draw [-latex] (id) to (bandInt);\n\n  \\node [rectangle] (population) at (0, 4) {Population of Subjects};\n  \\draw [-latex] (population) to (id);\n\n  \\node [rounded corners, draw=none, align=center, fill=indiv, text=white] \n    (note_id) at (-1.5, 3.75) \n    {\\textsf{Random effects:}\\\\\\texttt{id}};\n  \\node [rounded corners, draw=none, align=center, fill=choice, text=white] \n    (note_variables) at (1.5, 3.75) \n    {\\textsf{Fixed effects:}\\\\\\texttt{condit, bandInt}};\n\\end{tikzpicture}\n\n\n\nHierarchical structure of our Bayesian mixed model, showcasing the interaction of condition and band interval within subject IDs.\n\n\n\nThis diagram visually conveys the structure of the model with fixed effects for condition and band interval, and random effects for subject IDs. It also displays the relationship between the different components of the model."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-20",
    "href": "Analysis/e1_discrim.html#section-20",
    "title": "E1 Discrimination Analysis",
    "section": "22",
    "text": "22\nCertainly. Below is the revised description, aligned with the desired style you specified."
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-11",
    "href": "Analysis/e1_discrim.html#analyses-strategy-11",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nUtilizing Bayesian methods enables us to precisely quantify the uncertainty in our parameter estimates and bypass convergence issues found in frequentist counterparts of our mixed models. For each model, we report median values of the posterior distribution and 95% credible intervals.\nThe general structure of our models can be presented in the following manner:\n\n\n\n\n\n\nequation\nformula\n\n\n\\( + (1 + ) \\)\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id))\n\n\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nrandom intercept for subjects\n\n\n(condit\\|id)\nrandom slope of condition within subjects with correlated intercept\n\n\n(bandInt\\|id)\nrandom slope of bandInt within subjects: no variation in intercept\n\n\n\nThe parameters can be summarized as follows:\nfit %&gt;% tidy() %&gt;% mutate(Parameter = c(“\\(\\beta_0\\)”, “\\(\\beta_1\\)”, “\\(\\beta_2\\)”, “\\(\\sigma_0\\)”, “\\(\\sigma_y\\)”)) %&gt;% mutate(Description = c(“Global average dist across all subjects”, “Effect of condit on dist for all subjects”, “Effect of bandInt on dist for all subjects”, “Between-cluster variability of average dist”, “Within-cluster variability of dist”)) %&gt;% mutate(term = glue::glue(“term”), estimate = round(estimate, 3)) %&gt;% select(Parameter, Term = term, Description, Estimate = estimate) %&gt;% kbl(escape = FALSE) %&gt;% kable_styling(full_width = FALSE)\n\nCode\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes.geometric}\n\\usetikzlibrary{backgrounds}\n\\definecolor{indiv}{HTML}{5F4690}\n\\definecolor{indiv1}{HTML}{CBBAF7}\n\\definecolor{choice}{HTML}{E17C05}\n\\definecolor{choice1}{HTML}{F7C694}\n\\begin{tikzpicture}[{every node/.append style}=draw]\n  \\node [rectangle, draw=none, fill=indiv1] (id) at (0, 2.5) {ID};\n  \n  \\node [ellipse, fill=choice1, draw=none] (dist) at (0, 1) {dist};\n  \\node [ellipse, fill=choice, draw=none] (condit) at (-1.5, 1) {condit};\n  \\node [ellipse, fill=choice, draw=none] (bandInt) at (1.5, 1) {bandInt};\n\n  \\draw [-latex] (id) to (dist);\n  \\draw [-latex] (id) to (condit);\n  \\draw [-latex] (id) to (bandInt);\n\n  \\node [rectangle] (population) at (0, 4) {Population of Subjects};\n  \\draw [-latex] (population) to (id);\n\n  \\node [rounded corners, draw=none, align=center, fill=indiv, text=white] \n    (note_id) at (-1.5, 3.75) \n    {\\textsf{Random effects:}\\\\\\texttt{id}};\n  \\node [rounded corners, draw=none, align=center, fill=choice, text=white] \n    (note_variables) at (1.5, 3.75) \n    {\\textsf{Fixed effects:}\\\\\\texttt{condit, bandInt}};\n\\end{tikzpicture}\n\n\n\n\n\n\n\nThis revised presentation of the model offers a more comprehensive visualization of the hierarchical structure and distributional assumptions. It aligns the model description with the alternate writeup style that emphasizes connections between models, code, and conceptual ideas through tables and visual representation."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-21",
    "href": "Analysis/e1_discrim.html#section-21",
    "title": "E1 Discrimination Analysis",
    "section": "23",
    "text": "23\nCertainly. Based on your request, the revised description of the model equations and coefficients, as well as the tikz graphing, is as follows:\nAnalyses Strategy\nThe modeling strategy that we employ in this research can be best described using a Bayesian approach. It allows us to specifically quantify uncertainty in our parameter estimates. To establish a connection between models, code, and conceptual ideas, we present an organized table detailing the structure of the model, and an elaborate tikz graphic portraying the hierarchical structure and distributional assumptions of our model.\nModel Structure\nThe general form of our models can be represented in a structured way as shown below:\n\n\n\n\n\n\n\nequation\nformula\ndescription\n\n\n\\( e1_distBMM + (1 + |id) \\)\nbrm(dist ~ condit * bandInt + (1 + bandInt\\|id))\nMixed-effects model with random intercept and slope for bandInt within ID\n\n\nHere is a breakdown of the specific meanings of the elements in the equation:\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nRandom intercept for ID\n\n\n(bandInt\\|id)\nRandom slope of bandInt within ID\n\n\n\nThe model can be fit and summarized in R:\n#| eval: false\nfit &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id))\nfit_summary &lt;- fit %&gt;%\n  tidy() %&gt;%\n  mutate(Parameter = c(\"\\\\(\\\\beta_0\\\\)\", \"\\\\(\\\\beta_1\\\\)\", \"\\\\(\\\\sigma_0\\\\)\", \"\\\\(\\\\sigma_y\\\\)\"),\n         Description = c(\"Intercept\", \"Effect of condition and bandInt interaction\", \"Random effect of bandInt\", \"Error term\")) %&gt;%\n  select(Parameter, Term = term, Description, Estimate = round(estimate, 3)) %&gt;%\n  kbl(escape = FALSE) %&gt;%\n  kable_styling(full_width = FALSE)\nHierarchical Structure\nThe graphical representation below conveys the hierarchical structure and distributional assumptions of our model:\n\nCode\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes.geometric}\n\\usetikzlibrary{backgrounds}\n\\definecolor{indiv}{HTML}{5F4690}\n\\definecolor{indiv1}{HTML}{CBBAF7}\n\\definecolor{choice}{HTML}{E17C05}\n\\definecolor{choice1}{HTML}{F7C694}\n\\begin{tikzpicture}[{every node/.append style}=draw]\n  \\node [rectangle, draw=none, fill=indiv1] (id) at (0, 2.5) {ID};\n  \n  \\node [ellipse, fill=choice1, draw=none] (dist) at (0, 1) {dist};\n  \\node [ellipse, fill=choice, draw=none] (condit) at (-1.5, 1) {condit};\n  \\node [ellipse, fill=choice, draw=none] (bandInt) at (1.5, 1) {bandInt};\n\n  \\draw [-latex] (id) to (dist);\n  \\draw [-latex] (id) to (condit);\n  \\draw [-latex] (id) to (bandInt);\n\n  \\node [rectangle] (population) at (0, 4) {Population of Subjects};\n  \\draw [-latex] (population) to (id);\n\n  \\node [rounded corners, draw=none, align=center, fill=indiv, text=white] \n    (note_id) at (-1.5, 3.75) \n    {\\textsf{Random effects:}\\\\\\texttt{id}};\n  \\node [rounded corners, draw=none, align=center, fill=choice, text=white] \n    (note_variables) at (1.5, 3.75) \n    {\\textsf{Fixed effects:}\\\\\\texttt{condit, bandInt}};\n\\end{tikzpicture}\n\n\n\n\n\n\n\nThe visual representation illustrates the mixed-effects model, where individual differences in distance are nested in conditions and band interactions within subjects. The random effects are associated with the ID, and the fixed effects are associated with the condition and band interactions."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-22",
    "href": "Analysis/e1_discrim.html#section-22",
    "title": "E1 Discrimination Analysis",
    "section": "24",
    "text": "24"
  },
  {
    "objectID": "Analysis/e1_discrim.html#analysis-strategy",
    "href": "Analysis/e1_discrim.html#analysis-strategy",
    "title": "E1 Discrimination Analysis",
    "section": "Analysis Strategy",
    "text": "Analysis Strategy\nWe have employed a Bayesian method to quantify uncertainty in parameter estimates, sidestepping convergence problems that can occur in frequentist counterparts of mixed models. For every model, median values of the posterior distribution and 95% credible intervals are provided. The model can be described as follows:\n\n\n\n\n\n\nequation\nformula\n\n\n\\(e1_distBMM + (1 + \nid)\\)\n\n\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nrandom id intercept\n\n\n(1 + bandInt\\|id)\nrandom slope of bandInt within id with correlated intercept\n\n\n\nThe model’s structure can be visualized through the following diagram:\n\nCode\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes.geometric}\n\\usetikzlibrary{backgrounds}\n\\definecolor{indiv}{HTML}{5F4690}\n\\definecolor{indiv1}{HTML}{CBBAF7}\n\\definecolor{choice}{HTML}{E17C05}\n\\definecolor{choice1}{HTML}{F7C694}\n\\begin{tikzpicture}[{every node/.append style}=draw]\n  \\node [rectangle, draw=none, fill=indiv1] (id) at (0, 2.5) {ID};\n  \\node [ellipse, fill=choice1, draw=none] (dist) at (0, 1) {dist};\n  \\node [ellipse, fill=choice, draw=none] (condit) at (-1.5, 1) {condit};\n  \\node [ellipse, fill=choice, draw=none] (bandInt) at (1.5, 1) {bandInt};\n\n  \\draw [-latex] (id) to (dist);\n  \\draw [-latex] (id) to (condit);\n  \\draw [-latex] (id) to (bandInt);\n\n  \\node [rectangle] (population) at (0, 4) {Population of Subjects};\n  \\draw [-latex] (population) to (id);\n\n  \\node [rounded corners, draw=none, align=center, fill=indiv, text=white] \n    (note_id) at (-1.5, 3.75) \n    {\\textsf{Random effects:}\\\\\\texttt{id}};\n  \\node [rounded corners, draw=none, align=center, fill=choice, text=white] \n    (note_variables) at (1.5, 3.75) \n    {\\textsf{Fixed effects:}\\\\\\texttt{condit, bandInt}};\n\\end{tikzpicture}"
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-23",
    "href": "Analysis/e1_discrim.html#section-23",
    "title": "E1 Discrimination Analysis",
    "section": "25",
    "text": "25\nj &= \\beta_{0_j} + \\beta_{1}X_{i} \\\\ \\beta_{0_j} &\\sim \\mathcal{N}(\\beta_{0}, \\sigma_{0}) \\\\ \\beta_{1} &\\sim \\mathcal{N}(0, \\sigma_{1}) \\\\ \\sigma_{y}, \\sigma_{0}, \\sigma_{1} &\\sim \\text{Exponential}(1) \\end{aligned} \\] | \\[ \\begin{aligned} \\mu &= X\\beta + Z\\gamma + \\epsilon \\\\ \\gamma &\\sim \\mathcal{N}(0, \\Sigma) \\end{aligned} \\] | | Random slope and intercept, correlated | y ~ x + (1 + x \\| group) | \\[ \\begin{aligned} Y_{i_j} &\\sim \\mathcal{N}(\\mu_{i_j}, \\sigma_y) \\\\ \\mu_{i_j} &= (\\beta_{0_j} + \\beta_{1_j}X_{i}) \\\\ \\left(\\begin{array}{c} \\beta_{0_j} \\\\ \\beta_{1_j} \\end{array}\\right) &\\sim \\mathcal{N}\\left(\\left(\\begin{array}{c} \\beta_{0} \\\\ \\beta_{1} \\end{array}\\right), \\Sigma\\right) \\\\ \\beta_{0} &\\sim \\mathcal{N}(0, \\sigma_{0}) \\\\ \\beta_{1} &\\sim \\mathcal{N}(0, \\sigma_{1}) \\\\ \\sigma_{y}, \\sigma_{0}, \\sigma_{1} &\\sim \\text{Exponential}(1) \\end{aligned} \\] | \\[ \\begin{aligned} \\mu &= X\\beta + Z\\gamma + \\epsilon \\\\ \\gamma &\\sim \\mathcal{N}(0, \\Sigma) \\end{aligned} \\] | | Random slope only | y ~ x + (0 + x \\| group) | \\[ \\begin{aligned} Y_{i_j} &\\sim \\mathcal{N}(\\mu_{i_j}, \\sigma_y) \\\\ \\mu_{i_j} &= \\beta_{0} + \\beta_{1_j}X_{i} \\\\ \\beta_{1_j} &\\sim \\mathcal{N}(\\beta_{1}, \\sigma_{1}) \\\\ \\beta_{0} &\\sim \\mathcal{N}(0, \\sigma_{0}) \\\\ \\beta_{1} &\\sim \\mathcal{N}(0, \\sigma_{1}) \\\\ \\sigma_{y}, \\sigma_{0}, \\sigma_{1} &\\sim \\text{Exponential}(1) \\end{aligned} \\] | \\[ \\begin{aligned} \\mu &= X\\beta + Z\\gamma + \\epsilon \\\\ \\gamma &\\sim \\mathcal{N}(0, \\Sigma) \\end{aligned} \\] |"
  },
  {
    "objectID": "Analysis/e1_discrim.html#model-description-in-reference-to-the-existing-code",
    "href": "Analysis/e1_discrim.html#model-description-in-reference-to-the-existing-code",
    "title": "E1 Discrimination Analysis",
    "section": "Model Description in Reference to the Existing Code",
    "text": "Model Description in Reference to the Existing Code\nThe following table and description connect the code, conceptual ideas, and the structure of the model:\n\n\n\n\n\n\n\nConceptual Description\nCode\nModel Equation\n\n\nMixed model with condition and band interval as fixed effects and random intercept and slope for band interval within subjects\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt\\|id))\n\\[\\text{dist} \\beta_{0} + \\beta_{1} \\text{condit} + \\beta_{2} \\text{bandInt} + (\\beta_{3} + b_{S,3s})\\text{bandInt} + (\\beta_{0} + b_{I,0i}) + e_{si}\\]"
  },
  {
    "objectID": "Analysis/e1_discrim.html#graphical-representation-of-hierarchical-structure-and-distributional-assumptions",
    "href": "Analysis/e1_discrim.html#graphical-representation-of-hierarchical-structure-and-distributional-assumptions",
    "title": "E1 Discrimination Analysis",
    "section": "Graphical Representation of Hierarchical Structure and Distributional Assumptions",
    "text": "Graphical Representation of Hierarchical Structure and Distributional Assumptions\nFor a comprehensive and visual representation of the hierarchical structure and distributional assumptions of the model, a more elaborated TikZ graphing will be implemented, showcasing all the key components, connections, and assumptions within the model.\nThe TikZ code for the graphical representation would require extensive detail, and could be produced based on the specific requirements and understanding of the hierarchical structure of the model. Please provide the required elements and relationships to be included in the diagram for precise code creation."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-24",
    "href": "Analysis/e1_discrim.html#section-24",
    "title": "E1 Discrimination Analysis",
    "section": "26",
    "text": "26\nCertainly. Here’s the revised description in the desired style:"
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-13",
    "href": "Analysis/e1_discrim.html#analyses-strategy-13",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nIn the Bayesian framework, we quantify the uncertainty in our parameter estimates, circumventing convergence issues. We report median values of the posterior distribution and 95% credible intervals for our mixed models. The specific representation of our models is detailed below:\n\n\n\n\n\n\nequation\nformula\n\n\n\\(e1_distBMM \\sim dist ,+, condit bandInt ,+, (1 ,+, bandInt|id)\\)\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt\\|id))\n\n\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nrandom intercept for subjects (id)\n\n\n(1+bandInt\\|id)\nrandom slope of bandInt within subjects, with correlated intercept"
  },
  {
    "objectID": "Analysis/e1_discrim.html#full-brms-model",
    "href": "Analysis/e1_discrim.html#full-brms-model",
    "title": "E1 Discrimination Analysis",
    "section": "Full {brms} model",
    "text": "Full {brms} model\nThis complex yet powerful model enables us to account for individual-specific differences across features. The model with priors is more formally defined as:\n\\[ ]\n\n\n\n\n\n\n\n\nFormula syntax\nFull \\(\\beta\\) notation\n\n\n\nRandom intercept\ny ~ x + (1 \\| id)\n\\[ Y_{i_j} (_{i_j}, _y) \\\\ _{i_j} = 0 + b{I,0i} \\]\n\n\nRandom slope\ny ~ x + (1 + bandInt\\|id)\n\\[ Y_{i_j} (_{i_j}, _y) \\\\ _{i_j} = 0 + b{I,0i} + (1 + b{S,1s}) X_i \\]\n\n\n\nThis restructuring aligns with the requested emphasis on tables and visual aids. If you require a TikZ diagram for the hierarchical structure and distributional assumptions, kindly provide further specifications to generate the desired figure."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-25",
    "href": "Analysis/e1_discrim.html#section-25",
    "title": "E1 Discrimination Analysis",
    "section": "27",
    "text": "27\nCertainly, here is the revised description according to the requested style:"
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-14",
    "href": "Analysis/e1_discrim.html#analyses-strategy-14",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nThe given Bayesian method allows direct quantification of the uncertainty in our parameter estimates, alongside circumventing convergence issues common to the frequentist analogues of our mixed models. The general form of the model is represented in the table and formula syntax:\n\n\n\n\n\n\nEquation\nFormula\n\n\n\\( e1_distBMM = (β_0 + b_{I,0i}) + (β_{1} + b_{S,1s}) + (1 + |id) \\)\ndist ~ condit * bandInt + (1 + bandInt\\|id)\n\n\nHierarchical Structure\nWe illustrate the model’s hierarchical structure through equation components and R code.\nConnections between Models, Code, and Conceptual Ideas\n\n\n\n\n\n\nEquation Component\nMeaning\n\n\n\n\\( e1_distBMM \\)\nModel code for the mixed effect\n\n\n\\( β_0 + b_{I,0i} \\)\nIntercept term\n\n\n\\( (β_{1} + b_{S,1s}) \\)\nInteraction effect of condition and band interval\n\n\n\\( (1 + |id) \\)\nRandom slope and intercept by ID\n\n\nVisuals Conveying the Structure of the Model\nFor a detailed visual representation, the TikZ code below can be used to depict the hierarchical structure and distributional assumptions of our model:\n\\documentclass{standalone}\n\\usepackage{tikz}\n\\begin{document}\n\\begin{tikzpicture}\n  \\node {Model: \\( e1\\_distBMM \\)}\n    child { node {Intercept: \\( β\\_0 + b\\_{I,0i} \\)} }\n    child { node {Effects: \\( (β\\_{1} + b\\_{S,1s}) \\cdot \\text{condit} \\cdot \\text{bandInt} \\)} }\n    child { node {Random Effects: \\( (1 + \\text{bandInt}\\|id) \\)} };\n\\end{tikzpicture}\n\\end{document}"
  },
  {
    "objectID": "Analysis/e1_discrim.html#full-brms-model-1",
    "href": "Analysis/e1_discrim.html#full-brms-model-1",
    "title": "E1 Discrimination Analysis",
    "section": "Full {brms} Model",
    "text": "Full {brms} Model\nThe formulation of the model is given as above, including both the equation and the associated formula syntax. It includes complexities such as individual-specific differences and various features that can be further tailored as needed.\nThe priors and the entire structure of the model can be conveyed through both tabular and visual representation, linking equations, code, and conceptual ideas in a coherent framework.\nThe revised description emphasizes tables and visuals that connect models, code, and conceptual ideas, and it includes a more elaborate TikZ graphing that showcases the hierarchical structure and distributional assumptions of the model."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-26",
    "href": "Analysis/e1_discrim.html#section-26",
    "title": "E1 Discrimination Analysis",
    "section": "28",
    "text": "28\nCertainly. Here’s a revision of the provided description, incorporating the alternate style using tables and visuals.\nAnalyses Strategy\nThe use of Bayesian methods facilitates the direct quantification of uncertainty in parameter estimates and sidesteps convergence issues commonly observed in frequentist analogues of mixed models. For each model, the median values of the posterior distribution and 95% credible intervals are reported. The general form of the models is presented through the following tables and equations:\nModel Description\n\n\n\n\n\n\nEquation\nModel Code\n\n\n(β_0 + β_{1} + β_{2} + e_{si})\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id))\n\nFormula Meaning\n\n\n\n\n\n\nFormula\nMeaning\n\n\n\n(1\\|id)\nRandom intercept within id\n\n\n(condit\\|id)\nRandom slope of condition within id with correlated intercept\n\n\n(0+bandInt\\|id)\nRandom slope of bandInt within id: no variation in intercept\n\n\nThe Full {brms} Model\nThe described model is complex, encompassing various constituent parts, yet it offers significant analytical strength. It enables the accommodation of individual-specific differences across numerous features.\nLet’s define the model more formally again, this time with priors for the parameters that will be estimated:\n[\n\\[\\begin{aligned} &\\textbf{Multinomial probability of selection of choice}_i \\textbf{ in respondent}_j \\\\\\\\ \\text{Choice}_{i_j} \\sim& \\operatorname{Categorical}(\\{\\mu_{1,i_j}, \\mu_{2,i_j}, \\mu_{3,i_j}\\}) \\\\\\\\[10pt\\] \\ldots \\end{aligned} \\]\n\n|                   | Formula Syntax           | Full \\(\\\\beta\\) Notation   | Offset Notation |\n|-------------------|--------------------------|---------------------------|-----------------|\n| Random Intercept  | `y ~ x + (1 \\| group)`   | \\[\\begin{aligned} Y_{i_j} &\\sim \\mathcal{N}(\\mu_{i_j}, \\sigma_y) \\\\\\\\[5pt] \\mu_{i_j} &= \\beta_0 + \\beta_{1}X_{i} + e_{si} \\end{aligned}\\]\n] | [] |\nTikZ Graphing (Hierarchical Structure & Distributional Assumptions)\nCreating a more elaborate TikZ graph showcasing the hierarchical structure and distributional assumptions of the model would require specifying further details about the hierarchical nature of the data and the structure of the model. Kindly provide the necessary information for creating this graphical representation.\nBy presenting the model in this manner, the connections between the equations, code, and conceptual ideas are emphasized, and the structure of the model is conveyed visually."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-27",
    "href": "Analysis/e1_discrim.html#section-27",
    "title": "E1 Discrimination Analysis",
    "section": "29",
    "text": "29\nCertainly. Below, I’ve translated the existing description of the model and code into the alternate style requested, including tables that clarify the connections between the models, code, and conceptual ideas. I’ve focused on translating the specific mixed model formula into the desired format, and I’ve omitted the extensive equation detailing the full {brms} model, as the user’s request seems mainly concerned with the mixed model itself.\nAnalyses Strategy\nOur use of Bayesian methods facilitates the direct quantification of uncertainty in parameter estimates, and avoids convergence problems often encountered with the frequentist counterparts of mixed models. The general form of our models is displayed in the following table:\n\n\n\n\n\n\nEquation\nFormula\n\n\n\\((β_0 + b_{S,0s}) + (β_{1} + b_{I,1i}) + (β_{2} + b_{I,2i}) + e_{si}\\)\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id))\n\n\nThis model represents the distribution of a dependent variable, dist, as a function of the variables condit and bandInt, with random effects on individual identifiers (id).\nFurther details on the formulation are provided in the following tables:\n\n\n\n\n\n\nFormula\nMeaning\n\n\n\n(1|group)\nrandom group intercept\n\n\n\n(x|group) = (1+x|group)\n\nrandom slope of x within group with correlated intercept\n\n\n\n(0+x|group) = (-1+x|group)\n\nrandom slope of x within group: no variation in intercept\n\n\n\nFor the model e1_distBMM, the meaning translates to:\n\n\n(1 + bandInt|id): random intercept and random slope of bandInt within the group id with correlated intercept.\n\nIn our specific context, the hierarchical structure and distributional assumptions will be further illustrated using a tikz graph, representing the layers of the model and the relationships between the components. Unfortunately, I’m unable to render the tikz graphing here, but I can help you draft the LaTeX code to generate the desired graph. Let me know if that is needed."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-28",
    "href": "Analysis/e1_discrim.html#section-28",
    "title": "E1 Discrimination Analysis",
    "section": "30",
    "text": "30\nj} &\\sim \\beta_0 + b_{0j} + \\beta_1 X_i + e_{si} \\\\ b_{0j} &\\sim \\mathcal{N}(0, \\sigma_{b0}) \\end{aligned} \\] | \\[ Y_{i_j} \\sim \\beta_0 + \\beta_1 X_i + (b_{0j} + e_{si}) \\] | | Random slope of x within group with correlated intercept | y ~ x + (1 + x \\| group) | \\[ \\begin{aligned} Y_{i_j} &\\sim \\mathcal{N}(\\mu_{i_j}, \\sigma_y) \\\\ \\mu_{i_j} &\\sim (\\beta_0 + b_{0j}) + (\\beta_1 + b_{1j}) X_i + e_{si} \\\\ \\left( \\begin{array}{c} b_{0j} \\\\ b_{1j} \\end{array} \\right) &\\sim \\mathcal{N} \\left( \\begin{array}{c} 0 \\\\ 0 \\end{array}, \\begin{array}{cc} \\sigma^2_{b0} & \\rho_{b0,b1} \\sigma_{b0} \\sigma_{b1} \\\\ \\rho_{b0,b1} \\sigma_{b0} \\sigma_{b1} & \\sigma^2_{b1} \\end{array} \\right) \\end{aligned} \\] | \\[ Y_{i_j} \\sim \\beta_0 + \\beta_1 X_i + (b_{0j} + b_{1j} X_i + e_{si}) \\] | | Random slope of x within group: no variation in intercept | y ~ x + (0 + x \\| group) | \\[ \\begin{aligned} Y_{i_j} &\\sim \\mathcal{N}(\\mu_{i_j}, \\sigma_y) \\\\ \\mu_{i_j} &\\sim \\beta_0 + (\\beta_1 + b_{1j}) X_i + e_{si} \\\\ b_{1j} &\\sim \\mathcal{N}(0, \\sigma_{b1}) \\end{aligned} \\] | \\[ Y_{i_j} \\sim \\beta_0 + \\beta_1 X_i + (b_{1j} X_i + e_{si}) \\] |"
  },
  {
    "objectID": "Analysis/e1_discrim.html#model-code-and-structure",
    "href": "Analysis/e1_discrim.html#model-code-and-structure",
    "title": "E1 Discrimination Analysis",
    "section": "Model Code and Structure",
    "text": "Model Code and Structure\nGiven the following model code:\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id))\nWe can represent it using the table style as follows:\n\n\n\n\n\n\nequation\nformula\n\n\n\\((\\beta_0 + b_{I,0i}) + (\\beta_1 + b_{S,1s}) \\text{condit} + (\\beta_2 + b_{S,2s}) \\text{bandInt} + (\\beta_3 + b_{S,3s}) \\text{condit} \\times \\text{bandInt} + e_{si}\\)\n∼ condit * bandInt + (1 + bandInt∣id)\n\n\nFor the hierarchical structure and distributional assumptions, the following tikz code may be used to generate a graph:\n\\\\documentclass[tikz,border=10pt]{standalone}\n\\\\usepackage{tikz}\n\\\\usetikzlibrary{arrows,positioning}\n\n\\\\begin{document}\n\\\\begin{tikzpicture}[\n  node distance=1cm and 1cm,\n  mynode/.style={draw,ellipse,text width=2cm,align=center}\n]\n\\\\node[mynode] (level1) {Level 1: Fixed Effects};\n\\\\node[mynode,below=of level1] (level2) {Level 2: Random Effects (Subject)};\n\\\\node[mynode,below=of level2] (level3) {Level 3: Random Effects (Item)};\n\\\\node[mynode,below=of level3] (level4) {Level 4: Residuals};\n\n\\\\path (level1) edge[-&gt;] (level2);\n\\\\path (level2) edge[-&gt;] (level3);\n\\\\path (level3) edge[-&gt;] (level4);\n\\\\end{tikzpicture}\n\\\\end{document}\nThis code generates a hierarchical diagram illustrating the four-level structure of the model, from fixed effects to random effects at the subject and item levels, and down to the residuals, describing the distributional assumptions of the model."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-29",
    "href": "Analysis/e1_discrim.html#section-29",
    "title": "E1 Discrimination Analysis",
    "section": "31",
    "text": "31\nCertainly. The revised description based on the provided style can be written as follows:"
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-17",
    "href": "Analysis/e1_discrim.html#analyses-strategy-17",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nWe utilize Bayesian methodology to quantify the uncertainty in parameter estimates, and to avoid convergence issues that are often found with frequentist methods of mixed models. The models’ median values and 95% credible intervals are reported. Here’s the tabular representation:\nModel Structure\n\n\n\n\n\n\nequation\nformula\n\n\n\\((β_0 + b_{I,0i}) + (β_{1} + b_{S,1s}) + e_{si}\\)\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt\\|id))\n\nFormula Interpretation\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nrandom intercept within ID\n\n\n(1+bandInt\\|id)\nrandom slope of bandInt within ID with correlated intercept\n\n\nFull {brms} model\nThe model defined is complex and powerful, enabling us to consider individual variations across features. For instance, it considers individual-specific attributes like carpooling preference in influencing features like seating and cargo space.\nA formal definition of the model with priors for parameter estimation is given:\n\\[\\begin{aligned} &_i _j \\ &\\ & \\ &\\ \\end{aligned}\\]\nSummary\n\n\n\n\n\n\n\n\n\nFormula syntax\nFull \\(\\beta\\) notation\nOffset notation\n\n\nRandom intercept\ny ~ x + (1 \\| group)\n\\[ \\begin{aligned} Y_{i_j} &\\mathcal{N}(\\mu_{i_j}, \\sigma_y) \\\\ \\mu_{i_j} &= \\beta_{0_j} + \\beta_1 X_{i_j} \n\n\n\nThis table-based representation efficiently conveys the model’s structure, connection between code, and conceptual ideas, providing an easy-to-follow description."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-30",
    "href": "Analysis/e1_discrim.html#section-30",
    "title": "E1 Discrimination Analysis",
    "section": "32",
    "text": "32\nCertainly. Based on the desired style, I have rewritten the analysis strategy to match the alternate write-up. Here’s the revised version:"
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-18",
    "href": "Analysis/e1_discrim.html#analyses-strategy-18",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nOur models leverage Bayesian methodology to quantify uncertainty in our parameter estimates and avoid convergence issues. The representation of our models is given by tables showing connections between models, code, and conceptual ideas.\n\n\n\n\n\n\nequation\nformula\n\n\n\\(0 + 1 {ij} + 2 {ij} + 3 {ij} {ij} + b_{0i} + b_{1i} {ij} + {ij}\\)\ndist ~ condit * bandInt + (1 + bandInt | id)\n\n\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nrandom participant intercept\n\n\n(1 + bandInt\\|id)\nrandom slope of bandInt within participant with correlated intercept\n\n\n\nFull Model\nThis model is complex but powerful. It accounts for individual-specific differences, such as the deviation from the target velocity band (dist) as a function of training condition (condit), target velocity band (bandInt), and their interaction, with random intercepts and slopes for each participant (id). The primary model is given as:\n\\[ ]\nFor the detailed model code:\n#| eval=FALSE\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt | id))\nSee references for descriptive statistics of the raw empirical data, and the corresponding figures for visual representation of the full distributions.\nPriors\n\\[ ]\nThis concise representation emphasizes the structure of the model, bridging the gap between mathematical equations, programming code, and theoretical understanding."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-31",
    "href": "Analysis/e1_discrim.html#section-31",
    "title": "E1 Discrimination Analysis",
    "section": "33",
    "text": "33\nCertainly. Below is the modified description matching the desired style. I’ve included tables that demonstrate the connections between model equations, code, and conceptual ideas. Additionally, the visuals that convey the structure of the model have been integrated."
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-19",
    "href": "Analysis/e1_discrim.html#analyses-strategy-19",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nThe primary model used in our analyses employs a Bayesian approach. This strategy allows us to quantify uncertainty in our parameter estimates and circumvent convergence issues. The model is defined in R via the brms package with the code e1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id)). The general form of the model can be represented in three distinct parts: model equations, code, and conceptual ideas.\nModel Equations\nThe equation of the model is given by:\n[ dist_{ij} = 0 + 1 condit{ij} + 2 bandInt{ij} + 3 condit{ij} bandInt{ij} + b_{0i} + b_{1i} bandInt_{ij} + _{ij} ]\nModel Equations vs. R Formula\nThe following table illustrates the relationship between the model’s mathematical expressions and their corresponding R formula.\n\n\n\n\n\n\nequation\nformula\n\n\n((0 + b{0i}) + 1 condit{ij} + 2 bandInt{ij} + 3 condit{ij} bandInt_{ij})\ndist ~ condit * bandInt + (1 + bandInt | id)\n\nFormula vs. Meaning\nThis table connects the mathematical formula with the meaning of each element.\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nrandom intercept for each participant (id)\n\n\n(1 + bandInt\\|id)\nrandom slope of bandInt within participant with correlated intercept\n\n\nVisuals\nFor descriptive statistics of the raw empirical data, refer to ?@tbl-e1-test-nf-deviation, and for a visual representation of the full distributions, see ?@fig-e1-test-vx."
  },
  {
    "objectID": "Analysis/e1_discrim.html#finally-the-full-brms-model",
    "href": "Analysis/e1_discrim.html#finally-the-full-brms-model",
    "title": "E1 Discrimination Analysis",
    "section": "Finally, the full {brms} model",
    "text": "Finally, the full {brms} model\nThis intricate model accounts for individual-specific differences across the various aspects of our study. The formal definition, including priors for the parameters being estimated, is as follows:\n[\n\\[\\begin{aligned}\n&\\textbf{Multinomial probability of selection of choice}_i \\textbf{ in respondent}_j \\\\\n\\text{Choice}_{i_j} \\sim& \\operatorname{Categorical}(\\{\\mu_{1,i_j}, \\mu_{2,i_j}, \\mu_{3,i_j}\\}) \\\\\n\\{...\\} \\\\\n&\\beta_{0 \\dots 7} \\sim \\mathcal{N} (0, 3) \\qquad\\qquad\\ \\[\\text{Prior for choice-level coefficients}\\] \\\\\n&\\gamma^{\\beta_{0 \\dots 7}}_0 \\sim \\mathcal{N} (0, 3) \\qquad\\qquad\\ \\[\\text{...}\\]\n\\end{aligned}\\]\n]\nPlease consult the full description for more comprehensive understanding of each part, including the covariance structure and priors. The model’s complexity is in alignment with our approach to accurately describe the multifaceted relationships within our dataset."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-32",
    "href": "Analysis/e1_discrim.html#section-32",
    "title": "E1 Discrimination Analysis",
    "section": "34",
    "text": "34\nCertainly, here’s a modified version of your current description, designed to emphasize the connections between models, code, and conceptual ideas using tables and visuals."
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-20",
    "href": "Analysis/e1_discrim.html#analyses-strategy-20",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nOur analysis employs Bayesian mixed effects regression models, employing brms in R, to provide direct quantification of uncertainty in parameter estimates, and to avert convergence issues. The model predicts the absolute deviation from the target velocity band (dist) as a function of training condition (condit), target velocity band (bandInt), and their interaction, with participant-specific random intercepts and slopes.\nModel Code and Structure\nThe code for the model:\n#| eval=FALSE\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id))\nAnd the model can be formally represented as:\n[ \\[\\begin{equation}\ndist_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot bandInt_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot bandInt_{ij} + b_{0i} + b_{1i} \\cdot bandInt_{ij} + \\epsilon_{ij}\n\\end{equation}\\] ]\nConnection Between Models, Code, and Conceptual Ideas\n\n\n\n\n\n\n\nequation\nformula\nconceptual ideas\n\n\n\n(0 + b{0i})\n∼ (1|id)\nrandom intercept for each participant (id)\n\n\n(1 condit{ij})\n∼ condit\nfixed effect of training condition (condit)\n\n\n(2 bandInt{ij} + b_{1i} bandInt_{ij})\n∼ bandInt + (1 + bandInt|id)\nfixed effect of target velocity band and random slope within participant (id)\n\n\n(3 condit{ij} bandInt_{ij})\n∼ condit * bandInt\ninteraction between training condition and target velocity band\n\n\n\nSee ?@tbl-e1-test-nf-deviation for descriptive statistics of the raw empirical data, and ?@fig-e1-test-vx for a visual representation of the full distributions.\nFinally, the full {brms} model\nThe complexity of this model is aimed at accommodating individual-specific differences across features, such as how individual carpools might influence preferences for various aspects.\nPriors for the parameters to be estimated are defined as follows:\n[\n\\[\\begin{aligned}\n\\beta_{0 \\dots 7} &\\sim \\mathcal{N} (0, 3) \\quad \\text{[Prior for choice-level coefficients]} \\\\\n\\gamma^{\\beta_{0 \\dots 7}}_0 &\\sim \\mathcal{N} (0, 3) \\quad \\text{[...]}\n\\end{aligned}\\]\n]\nPlease refer to the equations above to see the complete structure, including the Multivariate Normal distribution that accommodates respondent-specific slopes and prior specifications.\n\nThis revised section emphasizes the connections between the model, code, and conceptual ideas, featuring tables and visual representations. The format encourages clarity and alignment with the desired style of description."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-33",
    "href": "Analysis/e1_discrim.html#section-33",
    "title": "E1 Discrimination Analysis",
    "section": "35",
    "text": "35\nCertainly. Based on the desired style, I have rewritten the analysis strategy to match the alternate write-up. Here’s the revised version:"
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-21",
    "href": "Analysis/e1_discrim.html#analyses-strategy-21",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nOur models leverage Bayesian methodology to quantify uncertainty in our parameter estimates and avoid convergence issues. The representation of our models is given by tables showing connections between models, code, and conceptual ideas.\n\n\n\n\n\n\nequation\nformula\n\n\n\\(0 + 1 {ij} + 2 {ij} + 3 {ij} {ij} + b_{0i} + b_{1i} {ij} + {ij}\\)\ndist ~ condit * bandInt + (1 + bandInt | id)\n\n\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nrandom participant intercept\n\n\n(1 + bandInt\\|id)\nrandom slope of bandInt within participant with correlated intercept\n\n\n\nFull Model\nThis model is complex but powerful. It accounts for individual-specific differences, such as the deviation from the target velocity band (dist) as a function of training condition (condit), target velocity band (bandInt), and their interaction, with random intercepts and slopes for each participant (id). The primary model is given as:\n\\[ ]\nFor the detailed model code:\n#| eval=FALSE\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt | id))\nSee references for descriptive statistics of the raw empirical data, and the corresponding figures for visual representation of the full distributions.\nPriors\n\\[ ]\nThis concise representation emphasizes the structure of the model, bridging the gap between mathematical equations, programming code, and theoretical understanding."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-34",
    "href": "Analysis/e1_discrim.html#section-34",
    "title": "E1 Discrimination Analysis",
    "section": "36",
    "text": "36\nCertainly. Below is the revised description that emphasizes connections between models, code, and conceptual ideas, aligning with the desired style."
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-22",
    "href": "Analysis/e1_discrim.html#analyses-strategy-22",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nOur analytical approach leverages Bayesian methods, offering direct quantification of the uncertainty in our parameter estimates. The connection between models, code, and concepts can be represented through the following tables:\nEquations and Their Corresponding Formulas\n\n\n\n\n\n\nequation\nformula\n\n\n\n\\(dist_{ij} = _0 + 1 condit{ij} + 2 bandInt{ij})\nn/a (Not a mixed-effects model)\n\n\n\\(dist_{ij} = 0 + 1 condit{ij} + 2 bandInt{ij} + b{0i})\ndist ~ condit * bandInt + (1 | id)\n\n\n\\(dist_{ij} = 0 + 1 condit{ij} + 2 bandInt{ij} + b{1i} bandInt_{ij} + _{ij})\ndist ~ condit * bandInt + (1 + bandInt | id)\n\n\nFormulas and Their Meanings\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nrandom intercept for each participant (id)\n\n\n(condit * bandInt\\|id)\nrandom slope of training condition and target velocity band within participant with correlated intercept"
  },
  {
    "objectID": "Analysis/e1_discrim.html#the-full-brms-model-1",
    "href": "Analysis/e1_discrim.html#the-full-brms-model-1",
    "title": "E1 Discrimination Analysis",
    "section": "The Full {brms} Model",
    "text": "The Full {brms} Model\nThis intricate model allows us to discern individual-specific differences related to the deviation from target velocity band (dist), considering factors such as training condition (condit) and target velocity band (bandInt). The model is implemented using the {brms} package in R.\nModel code: e1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id))\nFormal equation:\n[ \\[\\begin{equation}\ndist_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot bandInt_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot bandInt_{ij} + b_{0i} + b_{1i} \\cdot bandInt_{ij} + \\epsilon_{ij}\n\\end{equation}\\] ]"
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-35",
    "href": "Analysis/e1_discrim.html#section-35",
    "title": "E1 Discrimination Analysis",
    "section": "37",
    "text": "37\nCertainly, the modified version of the description adhering to the desired style and with an emphasis on tables is as follows:"
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-23",
    "href": "Analysis/e1_discrim.html#analyses-strategy-23",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nWe employ Bayesian methods, allowing us to quantify uncertainty in parameter estimates and avoid convergence issues found in frequentist counterparts. For each model, the median values of the posterior distribution, along with 95% credible intervals, are reported. The structure of our model can be seen in the following tables and equations:\nModel Equations and Coefficients\n\n\n\n\n\n\nequation\nformula\n\n\n\\(dist_{ij} = 0 + 1 condit{ij} + 2 bandInt{ij} + 3 condit{ij} bandInt{ij} + b_{0i} + b_{1i} bandInt_{ij} + _{ij}\\)\ndist ~ condit * bandInt + (1 + bandInt | id)\n\nCoefficient Interpretation\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nrandom intercept for each participant\n\n\n(1 + bandInt\\|id)\nrandom slope of bandInt within participant with correlated intercept\n\n\n\nThe model code implemented via brms in R is given by:\n#| eval=FALSE\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id))\nFor a detailed visual representation of the data distributions, refer to the figures @fig-e1-test-vx, and see @tbl-e1-test-nf-deviation for descriptive statistics of the raw empirical data.\nThis Bayesian mixed-effects model predicts the absolute deviation from the target velocity band (dist) as a function of training condition (condit), target velocity band (bandInt), and their interaction, with random intercepts and slopes for each participant (id). It allows us to assess differences in accuracy between groups, incorporating individual-specific differences as required.\nThe full equation for the model is as follows:\n\\[\\begin{equation}\ndist_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot bandInt_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot bandInt_{ij} + b_{0i} + b_{1i} \\cdot bandInt_{ij} + \\epsilon_{ij}\n\\end{equation}\\]"
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-36",
    "href": "Analysis/e1_discrim.html#section-36",
    "title": "E1 Discrimination Analysis",
    "section": "38",
    "text": "38\nCertainly, here’s the revised description in the desired style:"
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-24",
    "href": "Analysis/e1_discrim.html#analyses-strategy-24",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nThe analysis leverages Bayesian mixed effects regression models for directly quantifying the uncertainty in parameter estimates and for evading convergence issues, implemented via brms in R. The model predicts the absolute deviation from the target velocity band (dist) as a function of training condition (condit), target velocity band (vb), and their interaction, with random intercepts and slopes for each participant (id). The formula, equation, and code for the model are provided below:\n\n\n\n\n\n\n\nequation\nformula\ncode\n\n\n\\(dist_{ij} = 0 + 1 condit{ij} + 2 bandInt{ij} + 3 condit{ij} bandInt{ij} + b_{0i} + b_{1i} bandInt_{ij} + _{ij})\n\\((0 + b{I,0i}) + (1 + b{S,1s})X_i + e_{si}\\)\ndist ~ condit * bandInt + (1 + bandInt|id)\n\n\n\n\n\n\n\n\nformula\nmeaning\n\n\n\n(1\\|id)\nrandom intercept for each participant\n\n\n(bandInt\\|id)\nrandom slope of bandInt within participant with correlated intercept"
  },
  {
    "objectID": "Analysis/e1_discrim.html#model-code",
    "href": "Analysis/e1_discrim.html#model-code",
    "title": "E1 Discrimination Analysis",
    "section": "Model code",
    "text": "Model code\n#| eval=FALSE\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id))\nFor the full distributions and descriptive statistics of the raw empirical data, refer to @tbl-e1-test-nf-deviation and @fig-e1-test-vx respectively. The median values of the posterior distribution and 95% credible intervals are reported for each model.\nThe visual representation of the model is available in @fig-e1-test-vx.\nThis complex model allows for individual-specific differences to be accounted for, such as variations in preference for specific features. Priors have been defined for the parameters estimated, aligning with the desired assumptions."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-37",
    "href": "Analysis/e1_discrim.html#section-37",
    "title": "E1 Discrimination Analysis",
    "section": "39",
    "text": "39\nCertainly. Below is a revision of the original description to match the desired style, incorporating tables and reorganizing the information."
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-25",
    "href": "Analysis/e1_discrim.html#analyses-strategy-25",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nWe employed Bayesian mixed-effects regression models implemented via the brms package in R to predict the absolute deviation from the target velocity band (dist) as a function of training condition, target velocity band, and their interaction. These models allow us to directly quantify uncertainty in parameter estimates, bypassing convergence issues found in frequentist analogues. For each model, we report median values of the posterior distribution and 95% credible intervals.\n\n\n\n\n\n\n\nEquation\nModel Code\nMeaning\n\n\n( dist_{ij} = 0 + 1 condit{ij} + 2 bandInt{ij} + 3 condit{ij} bandInt{ij} + b_{0i} + b_{1i} bandInt_{ij} + _{ij} )\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id))\nThis model predicts the absolute deviation from the target velocity band as a function of training condition and target velocity band.\n\n\n\n\n\n\n\n\nFormula\nMeaning\n\n\n\n(1|id)\nRandom intercept for each participant (id)\n\n\n(1 + bandInt|id)\nRandom slope of bandInt within participant (id) with correlated intercept\n\n\n\nSee ?@tbl-e1-test-nf-deviation for descriptive statistics of the raw empirical data, and ?@fig-e1-test-vx for a visual representation of the full distributions.\nFinally, the full {brms} model\nThis complex and powerful model accounts for individual-specific differences across the features of interest.\n[\n\\[\\begin{aligned}\n&\\textbf{Equation:} \\\\\n&dist_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot bandInt_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot bandInt_{ij} + b_{0i} + b_{1i} \\cdot bandInt_{ij} + \\epsilon_{ij}\n\\end{aligned}\\]\n]\nPriors for the parameters:\n\n(_{0 7} (0, 3)) (Prior for choice-level coefficients)\n(^{_{0 7}}_0 (0, 3)) (Additional details as needed)\n\nHere, (_0, 1, 2), etc. represent fixed effects, while (b{0i}, b{1i}) symbolize random effects. The model’s structure permits us to understand how individual characteristics like carpooling might influence preferences for other features. Further details on individual-specific influences are to be provided based on the data analysis.\nThis revised version aligns the description with the desired style, including tables and visuals to explain the structure of the model."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-38",
    "href": "Analysis/e1_discrim.html#section-38",
    "title": "E1 Discrimination Analysis",
    "section": "40",
    "text": "40\nCertainly. Below is a revised description of the analysis strategy that emphasizes tables to show the connections between models, code, and conceptual ideas."
  },
  {
    "objectID": "Analysis/e1_discrim.html#analyses-strategy-26",
    "href": "Analysis/e1_discrim.html#analyses-strategy-26",
    "title": "E1 Discrimination Analysis",
    "section": "Analyses Strategy",
    "text": "Analyses Strategy\nIn the following analyses, Bayesian mixed effects regression models were implemented through brms in R. The main objective was to predict the absolute deviation from the target velocity band (dist) as a function of training condition (condit), target velocity band (bandInt), and their interaction, including random intercepts and slopes for each participant (id). The choice of Bayesian methods permitted direct quantification of uncertainty in the parameter estimates and avoided common convergence issues.\nEquation and Model Code\n\n\n\n\n\n\n\nEquation\nModel Code\nDescription\n\n\n\\(dist_{ij} = 0 + 1 condit{ij} + 2 bandInt{ij} + 3 condit{ij} bandInt{ij} + b_{0i} + b_{1i} bandInt_{ij} + _{ij}\\)\ne1_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id))\nPrediction of absolute deviation from target velocity band (dist)\n\nFormula and Meaning\n\n\n\n\n\n\nFormula\nMeaning\n\n\n\n(1\\|id)\nrandom intercept for participant (id)\n\n\n(1 + bandInt\\|id)\nrandom slope of target velocity band (bandInt) within participant (id), with correlated intercept\n\n\nVisual Representation\nFull {brms} Model Description\nThis complex model encompasses various features, enabling us to account for individual-specific differences. The following equation illustrates the definition of the model:\n\\ \\begin{aligned} &\\ \\ \\\\[10pt] &\\ \\textbf{Priors} \\\\ \\beta_{0 \\dots 7} \\sim&\\ \\mathcal{N} (0, 3) \\qquad\\qquad\\ [\\text{Prior for choice-level coefficients}] \\\\ \\gamma^{\\beta_{0 \\dots 7}}_0 \\sim&\\ \\mathcal{N} (0, 3) \\qquad\\qquad\\ \\…\nThe model’s structure captures detailed information about the connection between different factors, leading to an enhanced understanding of the empirical patterns.\nConclusion\nThe utilization of Bayesian mixed-effects models has provided a robust framework for our analysis, where the model structure, coefficients, and relationships are well-represented through the use of tabular and visual depictions."
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-39",
    "href": "Analysis/e1_discrim.html#section-39",
    "title": "E1 Discrimination Analysis",
    "section": "41",
    "text": "41"
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-40",
    "href": "Analysis/e1_discrim.html#section-40",
    "title": "E1 Discrimination Analysis",
    "section": "42",
    "text": "42"
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-41",
    "href": "Analysis/e1_discrim.html#section-41",
    "title": "E1 Discrimination Analysis",
    "section": "43",
    "text": "43"
  },
  {
    "objectID": "Analysis/e1_discrim.html#section-42",
    "href": "Analysis/e1_discrim.html#section-42",
    "title": "E1 Discrimination Analysis",
    "section": "44",
    "text": "44\n\\[\n\\begin{aligned}\n  \\operatorname{vx}_{i}  &\\sim N \\left(\\alpha_{j[i]} + \\beta_{1j[i]}(\\operatorname{bandInt}), \\sigma^2 \\right) \\\\    \n\\left(\n  \\begin{array}{c}\n    \\begin{aligned}\n      &\\alpha_{j} \\\\\n      &\\beta_{1j}\n    \\end{aligned}\n  \\end{array}\n\\right)\n  &\\sim N \\left(\n\\left(\n  \\begin{array}{c}\n    \\begin{aligned}\n      &\\gamma_{0}^{\\alpha} + \\gamma_{1}^{\\alpha}(\\operatorname{condit}_{\\operatorname{Varied}}) \\\\\n      &\\mu_{\\beta_{1j}}\n    \\end{aligned}\n  \\end{array}\n\\right)\n,\n\\left(\n  \\begin{array}{cc}\n     \\sigma^2_{\\alpha_{j}} & \\rho_{\\alpha_{j}\\beta_{1j}} \\\\\n     \\rho_{\\beta_{1j}\\alpha_{j}} & \\sigma^2_{\\beta_{1j}}\n  \\end{array}\n\\right)\n\\right)\n    \\text{, for id j = 1,} \\dots \\text{,J}\n\\end{aligned}\n\\]\n\n\\[\n\\begin{aligned}\n  \\operatorname{\\widehat{vx}}_{i}  &\\sim N \\left(480.37_{\\alpha_{j[i]}} + 0.63_{\\beta_{1j[i]}}(\\operatorname{bandInt}), \\sigma^2 \\right) \\\\    \n\\left(\n  \\begin{array}{c}\n    \\begin{aligned}\n      &\\alpha_{j} \\\\\n      &\\beta_{1j}\n    \\end{aligned}\n  \\end{array}\n\\right)\n  &\\sim N \\left(\n\\left(\n  \\begin{array}{c}\n    \\begin{aligned}\n      &56.83_{\\gamma_{1}^{\\alpha}}(\\operatorname{condit}_{\\operatorname{Varied}}) \\\\\n      &0\n    \\end{aligned}\n  \\end{array}\n\\right)\n,\n\\left(\n  \\begin{array}{cc}\n     351.8 & -0.8 \\\\\n     -0.8 & 0.38\n  \\end{array}\n\\right)\n\\right)\n    \\text{, for id j = 1,} \\dots \\text{,J}\n\\end{aligned}\n\\]\n\\[\n\\begin{aligned}\n  y_{ij}  &\\sim N \\left(\\alpha_{j[i]} + \\beta_{1j[i]}(\\operatorname{condit}_{ij}) + \\beta_{2j[i]}(\\operatorname{bandInt}_{ij}), \\sigma^2 \\right) \\\\    \n\\left(\n  \\begin{array}{c}\n    \\begin{aligned}\n      &\\alpha_{j} \\\\\n      &\\beta_{1j} \\\\\n      &\\beta_{2j}\n    \\end{aligned}\n  \\end{array}\n\\right)\n  &\\sim N \\left(\n\\left(\n  \\begin{array}{c}\n    \\begin{aligned}\n      &\\gamma_{0}^{\\alpha} \\\\\n      &\\gamma_{0}^{\\beta_{1}} + \\gamma_{1}^{\\beta_{1}}(\\operatorname{condit}_{\\operatorname{Varied}}) \\\\\n      &\\gamma_{0}^{\\beta_{2}}\n    \\end{aligned}\n  \\end{array}\n\\right)\n,\n\\left(\n  \\begin{array}{ccc}\n     \\sigma^2_{\\alpha_{j}} & 0 & 0 \\\\\n     0 & \\sigma^2_{\\beta_{1j}} & 0 \\\\\n     0 & 0 & \\sigma^2_{\\beta_{2j}}\n  \\end{array}\n\\right)\n\\right)\n    \\text{, for id j = 1,} \\dots \\text{,J}\n\\end{aligned}\n\\]\n\nCodem1_bayes &lt;- brm(vx ~ 1 + bandInt + condit + (1 + bandInt | id), \ndata = test, family = gaussian(), file=\"band_gauss_vx\")\n\nm1_bayesb &lt;- brm(vxb ~ 1 + bandInt + condit + (1 + bandInt | id), \ndata = test, family = gaussian(), file=\"band_gauss_vxb\")\n\nm1_bayes0 &lt;- brm(vx ~ 0 + bandInt + condit + (0 + bandInt | id), \ndata = test, family = gaussian(), file=\"band0_gauss_vx\")\n\nm1_bayes0b &lt;- brm(vxb ~ 0 + bandInt + condit + (0 + bandInt | id), \ndata = test, family = gaussian(), file=\"band0_gauss_vxb\")\n\nsummary(m1_bayes)\n\n\n\nCode# Calculate the standard deviation of the estimates for each level of id\nm_all %&gt;%\n  summarise(across(starts_with(\"group_\"), sd, na.rm = TRUE))\n\n# Calculate the correlation between the estimates for each level of id\nm_all %&gt;%\n  group_by(id) %&gt;%\n  summarise(correlation = cor(`bandInt`, `Intercept`, use = \"pairwise.complete.obs\"))\n\n\nm_all |&gt; filter(id==10)\n\n\n\nCodeoptions(mc.cores = 8,  # Use 4 cores\n        brms.backend = \"cmdstanr\")\n\nmodel_fixed &lt;- brm(\n  bf(vxMean ~ bandInt + (1 +bandInt | id)),\n  data = testAvg,\n  control = list(adapt_delta = 0.95),\n  chains = 4, seed = 1234\n)\n\n\n\nfixef(model_fixed)\n\nmm_Mean_b &lt;- coef(model_fixed)$id |&gt; as.tibble(rownames=\"id\") |&gt; select(id,starts_with(\"Estimate\"))\nhead(mm_Mean_b)\n\n\nX &lt;- cbind(testAvg[,1:8], fitted(model_fixed)[,-2]) %&gt;% as_tibble()\n\n\nggplot(X[1:90,],aes(y=Estimate,x=vb,group=id))+geom_point(aes(y=vxMean),shape=1)+\n  geom_line(aes(y=Q2.5),lty=2)+\n  geom_line(aes(y=Q97.5),lty=2)+\n  geom_smooth(aes(y=vxMean),method = \"lm\", fill = \"dodgerblue\", level = .95)+\n  facet_wrap(~id)\n\nconditional_effects(model_fixed)\n#conditional_effects(model_fixed,conditions=distinct(testAvg,id))\n\n\npredict(model_fixed,data.frame(id=1,bandInt=800))\n\n\n\nepred_draws(model_fixed,newdata=expand_grid(bandInt=unique(e1$bandInt),id=factor(e1$id,levels=unique(e1$id))),ndraws = 1)\n\n\n\nCodelog_m1 &lt;- brm(\n  bf(vx ~ bandInt + (1 +bandInt | id)),\n  data = test,\n  family=shifted_lognormal(),\n  control = list(adapt_delta = 0.95),\n  chains = 2, seed = 1234\n)\n\nsummary(log_m1)\n\n\nskew_m1 &lt;- brm(\n  bf(vxMean ~ bandInt + (1 +bandInt | id)),\n  data = testAvg,\n  family=skew_normal(),\n  control = list(adapt_delta = 0.95),\n  chains = 2, seed = 1234\n)\n\nsummary(skew_m1)\n\n\n\nCodelibrary(brms)\n\nbmerFit &lt;- function(mform,df) {\n  m &lt;- brm(mform, data = df, control = list(adapt_delta = 0.95), chains = 1, seed = 1234)\n  fe &lt;- fixef(m)\n  dfm &lt;- coef(m)$id %&gt;% as.tibble(rownames=\"id\") %&gt;% select(id, starts_with(\"Estimate\"))\n  \n  for (effect in names(fe)) {\n    dfm &lt;- dfm %&gt;% mutate(!!str_c(\"group_\", effect) := fe[effect])\n  }\n  dfm\n}\n\n# Input formulas and corresponding dataframes\nformulas &lt;- c(\"vx ~ 1 + bandInt + (1 + bandInt | id)\", \n              \"vxMean ~ 1 + bandInt + (1 + bandInt | id)\", \n              \"vxMed ~ 1 + bandInt + (1 + bandInt | id)\")\ndfs &lt;- list(test, testAvg, testAvg)\n\n# Run bmerFit function over all combinations of formulas and dataframes\nm_all_bayes &lt;- map2_dfr(formulas, dfs, ~ bmerFit(.x, .y)) %&gt;%\n  mutate(mformula = rep(formulas, each = length(unique(test$id))), \n         dframe = rep(c('test', 'testAvg', 'testAvg'), each=length(unique(test$id))))\n\nm_all_bayes(m_all)\nm_all_bayes |&gt; filter(id==10)"
  },
  {
    "objectID": "Analysis/e2_test.html",
    "href": "Analysis/e2_test.html",
    "title": "HTW E2 Testing",
    "section": "",
    "text": "Figure 1 illustrates the design of Experiment 2. The stages of the experiment (i.e. training, testing no-feedback, test with feedback), are identical to that of Experiment 1. The only change is that Experiment 2 participants train, and then test, on bands in the reverse order of Experiment 1 (i.e. training on the softer bands; and testing on the harder bands).\n\n\n\n\n\ncluster\nTest Phase (Counterbalanced Order)data1\n Varied Training 100-300350-550600-800Test1\nTest  Novel Bands  800-10001000-12001200-1400data1-&gt;Test1\ndata2\n Constant Training 600-800data2-&gt;Test1\nTest3\n    Final Test   Novel With Feedback  800-10001000-12001200-1400Test2\n  Test   Varied Training Bands  100-300350-550600-800Test1-&gt;Test2\nTest2-&gt;Test3\n\n\n\n\nFigure 1: Experiment 2 Design. Constant and Varied participants complete different training conditions. The training and testing bands are the reverse of Experiment 1.\n\n\n\n\nResults\nTesting Phase - No feedback.\nIn the first part of the testing phase, participants are tested from each of the velocity bands, and receive no feedback after each throw.\nDeviation From Target Band\nDescriptive summaries testing deviation data are provided in Table 1 and Figure 2. To model differences in accuracy between groups, we used Bayesian mixed effects regression models to the trial level data from the testing phase. The primary model predicted the absolute deviation from the target velocity band (dist) as a function of training condition (condit), target velocity band (band), and their interaction, with random intercepts and slopes for each participant (id).\n\\[\\begin{equation}\ndist_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot band_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot band_{ij} + b_{0i} + b_{1i} \\cdot band_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\nCoderesult &lt;- test_summary_table(testE2, \"dist\",\"Deviation\", mfun = list(mean = mean, median = median, sd = sd))\nresult$constant |&gt; kable()\nresult$varied |&gt; kable()\n# make kable table with smaller font size\n# result$constant |&gt; kbl(caption=\"Constant Testing - Deviation\",booktabs=T,escape=F) |&gt; kable_styling(font_size = 7)\n\n\nTable 1: Testing Deviation - Empirical Summary\n\n\n\n\n(a) Constant Testing - Deviation\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n206\n48\n317\n\n\n350-550\nExtrapolation\n194\n86\n268\n\n\n600-800\nTrained\n182\n112\n240\n\n\n800-1000\nExtrapolation\n200\n129\n233\n\n\n1000-1200\nExtrapolation\n238\n190\n234\n\n\n1200-1400\nExtrapolation\n311\n254\n288\n\n\n\n\n\n\n\n\n\n\n(b) Varied Testing - Deviation\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nTrained\n153\n25\n266\n\n\n350-550\nTrained\n138\n53\n233\n\n\n600-800\nTrained\n160\n120\n183\n\n\n800-1000\nExtrapolation\n261\n207\n257\n\n\n1000-1200\nExtrapolation\n305\n258\n273\n\n\n1200-1400\nExtrapolation\n363\n314\n297\n\n\n\n\n\n\n\n\n\n\n\n\nCodetestE2 |&gt;  ggplot(aes(x = vb, y = dist,fill=condit)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) + \n  labs(x=\"Band\", y=\"Deviation From Target\")\n\n\n\n\n\n\nFigure 2: E2. Deviations from target band during testing without feedback stage.\n\n\n\n\n\nCode#options(brms.backend=\"cmdstanr\",mc.cores=4)\nmodelFile &lt;- paste0(here::here(\"data/model_cache/\"), \"e2_dist_Cond_Type_RF_2\")\nbmtd2 &lt;- brm(dist ~ condit * bandType + (1|bandInt) + (1|id), \n    data=testE2, file=modelFile,\n    iter=5000,chains=4, control = list(adapt_delta = .94, max_treedepth = 13))\n                        \n#bayestestR::describe_posterior(bmtd)\n\nmted2 &lt;- as.data.frame(describe_posterior(bmtd2, centrality = \"Mean\"))[, c(1,2,4,5,6)]\ncolnames(mted2) &lt;- c(\"Term\", \"Estimate\",\"95% CrI Lower\", \"95% CrI Upper\", \"pd\")\n\nmted2 |&gt; mutate(across(where(is.numeric), \\(x) round(x, 2))) |&gt;\n  tibble::remove_rownames() |&gt; \n  mutate(Term = stringr::str_remove(Term, \"b_\")) |&gt;\n  kable(booktabs=TRUE) \n\n\n\n\n\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n190.91\n125.03\n259.31\n1.00\n\n\nconditVaried\n-20.58\n-72.94\n33.08\n0.78\n\n\nbandTypeExtrapolation\n38.09\n-6.94\n83.63\n0.95\n\n\nconditVaried:bandTypeExtrapolation\n82.00\n41.89\n121.31\n1.00\n\n\n\n\n\n\nCodepe1td &lt;- testE2 |&gt;  ggplot(aes(x = vb, y = dist,fill=condit)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) + \n  theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) +\n  labs(x=\"Band\", y=\"Deviation From Target\")\n\ncondEffects &lt;- function(m,xvar){\n  m |&gt; ggplot(aes(x = {{xvar}}, y = .value, color = condit, fill = condit)) + \n  stat_dist_pointinterval() + \n  stat_halfeye(alpha=.1, height=.5) +\n  theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n  \n}\n\npe1ce &lt;- bmtd2 |&gt; emmeans( ~condit + bandType) |&gt;\n  gather_emmeans_draws() |&gt;\n condEffects(bandType) + labs(y=\"Absolute Deviation From Band\", x=\"Band Type\")\n\nLoading required namespace: rstanarm\n\nCode(pe1td + pe1ce) + plot_annotation(tag_levels= 'A')\n\n\n\n\n\n\nFigure 3: E2. Deviations from target band during testing without feedback stage.\n\n\n\n\n\nCode#contrasts(test$condit) \n# contrasts(testE2$vb)\n\nmodelName &lt;- \"e2_testDistBand_RF_5K\"\ne2_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id),\n                      data=testE2,file=paste0(here::here(\"data/model_cache\",modelName)),\n                      iter=5000,chains=4)\nmp2 &lt;- GetModelStats(e2_distBMM) |&gt; kable(escape=F,booktabs=T)\nmp2\ne2_distBMM |&gt; \n  emmeans(\"condit\",by=\"bandInt\",at=list(bandInt=c(100,350,600,800,1000,1200)),\n          epred = TRUE, re_formula = NA) |&gt; \n  pairs() |&gt; gather_emmeans_draws()  |&gt; \n   summarize(median_qi(.value),pd=sum(.value&gt;0)/n()) |&gt;\n   select(contrast,Band=bandInt,value=y,lower=ymin,upper=ymax,pd) |&gt; \n   mutate(across(where(is.numeric), \\(x) round(x, 2)),\n          pd=ifelse(value&lt;0,1-pd,pd)) |&gt;\n   kable(caption=\"Contrasts\")\ncoef_details &lt;- get_coef_details(e2_distBMM, \"conditVaried\")\n\n\nTable 2: Experiment 2. Bayesian Mixed Model predicting absolute deviation as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n151.71\n90.51\n215.86\n1.00\n\n\nconditVaried\n-70.33\n-156.87\n16.66\n0.94\n\n\nBand\n0.10\n0.02\n0.18\n1.00\n\n\ncondit*Band\n0.12\n0.02\n0.23\n0.99\n\n\n\n\n\n\nContrasts\n\ncontrast\nBand\nvalue\nlower\nupper\npd\n\n\n\nConstant - Varied\n100\n57.57\n-20.48\n135.32\n0.93\n\n\nConstant - Varied\n350\n26.60\n-30.93\n83.84\n0.83\n\n\nConstant - Varied\n600\n-4.30\n-46.73\n38.52\n0.58\n\n\nConstant - Varied\n800\n-29.30\n-69.38\n11.29\n0.92\n\n\nConstant - Varied\n1000\n-54.62\n-101.06\n-5.32\n0.98\n\n\nConstant - Varied\n1200\n-79.63\n-139.47\n-15.45\n0.99\n\n\n\n\n\n\n\n\nThe model predicting absolute deviation showed a modest tendency for the varied training group to have lower deviation compared to the constant training group (β = -70.33, 95% CI [-156.87, 16.66]),with 94% of the posterior distribution being less than 0. This suggests a potential benefit of training with variation, though the evidence is not definitive.\n(SHOULD PROBABLY DO ALTERNATE ANALYSIS THAT ONLY CONSIDERS THE NOVEL EXTRAPOLATION BANDS)\n\nCodecondEffects &lt;- function(m){\n  m |&gt; ggplot(aes(x = bandInt, y = .value, color = condit, fill = condit)) + \n    stat_dist_pointinterval() + stat_halfeye(alpha=.2) +\n    stat_lineribbon(alpha = .25, size = 1, .width = c(.95)) +\n    theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) +\n    ylab(\"Predicted X Velocity\") + xlab(\"Band\")\n}\n\n\ne2_distBMM |&gt; emmeans( ~condit + bandInt, \n                       at = list(bandInt = c(100, 350, 600, 800, 1000, 1200))) |&gt;\n  gather_emmeans_draws() |&gt;\n condEffects()+\n  scale_x_continuous(breaks = c(100, 350, 600, 800, 1000, 1200), \n                     labels = levels(testE2$vb), \n                     limits = c(0, 1400)) \n\n\n\n\n\n\nFigure 4: E2. Conditioinal Effect of Training Condition and Band. Ribbon indicated 95% Credible Intervals.\n\n\n\n\nDiscrimination between Velocity Bands\nIn addition to accuracy/deviation. We also assessed the ability of participants to reliably discriminate between the velocity bands (i.e. responding differently when prompted for band 600-800 than when prompted for band 150-350). Table 3 shows descriptive statistics of this measure, and Figure 1 visualizes the full distributions of throws for each combination of condition and velocity band. To quantify discrimination, we again fit Bayesian Mixed Models as above, but this time the dependent variable was the raw x velocity generated by participants.\n\\[\\begin{equation}\nvx_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot bandInt_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot bandInt_{ij} + b_{0i} + b_{1i} \\cdot bandInt_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\nCodetestE2 %&gt;% group_by(id,vb,condit) |&gt; plot_distByCondit()\n\n\n\n\n\n\nFigure 5: E2 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\n\n\n\n\nCoderesult &lt;- test_summary_table(testE2, \"vx\",\"X Velocity\" ,mfun = list(mean = mean, median = median, sd = sd))\nresult$constant |&gt; kable()\nresult$varied |&gt; kable()\n\n\nTable 3: Testing vx - Empirical Summary\n\n\n\n\n\n(a) Constant Testing - vx\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n457\n346\n354\n\n\n350-550\nExtrapolation\n597\n485\n368\n\n\n600-800\nTrained\n728\n673\n367\n\n\n800-1000\nExtrapolation\n953\n913\n375\n\n\n1000-1200\nExtrapolation\n1064\n1012\n408\n\n\n1200-1400\nExtrapolation\n1213\n1139\n493\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Varied Testing - vx\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nTrained\n410\n323\n297\n\n\n350-550\nTrained\n582\n530\n303\n\n\n600-800\nTrained\n696\n641\n316\n\n\n800-1000\nExtrapolation\n910\n848\n443\n\n\n1000-1200\nExtrapolation\n1028\n962\n482\n\n\n1200-1400\nExtrapolation\n1095\n1051\n510\n\n\n\n\n\n\n\n\n\n\n\n\nCodee2_vxBMM &lt;- brm(vx ~ condit * bandInt + (1 + bandInt|id),\n                        data=testE2,file=paste0(here::here(\"data/model_cache\", \"e2_testVxBand_RF_5k\")),\n                        iter=5000,chains=4,silent=0,\n                        control=list(adapt_delta=0.94, max_treedepth=13))\nmt3 &lt;-GetModelStats(e2_vxBMM ) |&gt; kable(escape=F,booktabs=T)\nmt3\ncd1 &lt;- get_coef_details(e2_vxBMM, \"conditVaried\")\nsc1 &lt;- get_coef_details(e2_vxBMM, \"bandInt\")\nintCoef1 &lt;- get_coef_details(e2_vxBMM, \"conditVaried:bandInt\")\n\n\nTable 4: Experiment 2. Bayesian Mixed Model Predicting Vx as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n362.64\n274.85\n450.02\n1.00\n\n\nconditVaried\n-8.56\n-133.97\n113.98\n0.55\n\n\nBand\n0.71\n0.58\n0.84\n1.00\n\n\ncondit*Band\n-0.06\n-0.24\n0.13\n0.73\n\n\n\n\n\n\n\n\nSee Table 4 for the full model results.\nWhen examining discrimination ability using the model predicting raw x-velocity, the results were less clear than those of the absolute deviation analysis. The slope on Velocity Band (β = 0.71, 95% CrI [0.58, 0.84]) indicates that participants showed good discrimination between bands overall. However, the interaction term suggested this effect was not modulated by training condition (β = -0.06, 95% CrI [-0.24, 0.13]) Thus, while varied training may provide some advantage for accuracy, both training conditions seem to have similar abilities to discriminate between velocity bands.\n\nCodee2_vxBMM |&gt; emmeans( ~condit + bandInt, \n                       at = list(bandInt = c(100, 350, 600, 800, 1000, 1200))) |&gt;\n  gather_emmeans_draws() |&gt;\n  ggplot(aes(x = bandInt, y = .value, color = condit, fill = condit)) + \n  stat_dist_pointinterval() +\n  stat_lineribbon(alpha = .25, size = 1, .width = c(.95)) +\n  ylab(\"Predicted X Velocity\") + xlab(\"Band\")+\n  scale_x_continuous(breaks = c(100, 350, 600, 800, 1000, 1200), \n                     labels = levels(testE2$vb), \n                     limits = c(0, 1400)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\n\n\n\n\n\nFigure 6: Conditional effect of training condition and Band. Ribbons indicate 95% HDI.\n\n\n\n\n\nCodenew_data_grid=map_dfr(1, ~data.frame(unique(testE2[,c(\"id\",\"condit\",\"bandInt\")]))) |&gt; \n  dplyr::arrange(id,bandInt) |&gt; \n  mutate(condit_dummy = ifelse(condit == \"Varied\", 1, 0)) \n\nindv_coefs &lt;- coef(e2_vxBMM)$id |&gt; \n  as_tibble(rownames=\"id\") |&gt; \n  select(id, starts_with(\"Est\")) |&gt;\n  left_join(e2Sbjs, by=join_by(id) ) |&gt; \n  group_by(condit) |&gt; \n  mutate(rank = rank(desc(Estimate.bandInt)),\n         intErrorRank=rank((Est.Error.Intercept)),\n         bandErrorRank=rank((Est.Error.bandInt)),\n         nCond = n()) |&gt; arrange(intErrorRank)\n\nfixed_effects &lt;- e2_vxBMM |&gt; \n  spread_draws(`^b_.*`,regex=TRUE) |&gt; arrange(.chain,.draw,.iteration)\n\n\nrandom_effects &lt;- e2_vxBMM |&gt; \n  gather_draws(`^r_id.*$`, regex = TRUE, ndraws = 2000) |&gt; \n  separate(.variable, into = c(\"effect\", \"id\", \"term\"), sep = \"\\\\[|,|\\\\]\") |&gt; \n  mutate(id = factor(id,levels=levels(testE2$id))) |&gt; \n  pivot_wider(names_from = term, values_from = .value) |&gt; arrange(id,.chain,.draw,.iteration)\n\ncd &lt;- left_join(random_effects, fixed_effects, by = join_by(\".chain\", \".iteration\", \".draw\")) |&gt; \n  rename(bandInt_RF = bandInt) |&gt;\n  mutate(Slope=bandInt_RF+b_bandInt) |&gt; group_by(id) \n\ncdMed &lt;- cd |&gt; group_by(id) |&gt; median_qi(Slope)  |&gt; \n  left_join(e2Sbjs, by=join_by(id)) |&gt; group_by(condit) |&gt;\n  mutate(rankSlope=rank(Slope)) |&gt; arrange(rankSlope)\n\ncdMed %&gt;% ggplot(aes(y=rankSlope, x=Slope,fill=condit,color=condit)) + \n  geom_pointrange(aes(xmin=.lower , xmax=.upper)) + \n  labs(x=\"Estimated Slope\", y=\"Participant\")  + facet_wrap(~condit)  \n\n# cdMed |&gt;  ggplot(aes(x = condit, y = Slope,fill=condit)) +\n#     stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n#     stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) + \n#   geom_jitter()\n#   labs(x=\"Band\", y=\"Deviation From Target\")\n\n\n\nCodenew_data_grid=map_dfr(1, ~data.frame(unique(testE2[,c(\"id\",\"condit\",\"bandInt\")]))) |&gt; \n  dplyr::arrange(id,bandInt) |&gt; \n  mutate(condit_dummy = ifelse(condit == \"Varied\", 1, 0)) \n\nindv_coefs &lt;- as_tibble(coef(e2_vxBMM)$id, rownames=\"id\")|&gt; \n  select(id, starts_with(\"Est\")) |&gt;\n  left_join(e2Sbjs, by=join_by(id) ) \n\n\nfixed_effects &lt;- e2_vxBMM |&gt; \n  spread_draws(`^b_.*`,regex=TRUE) |&gt; arrange(.chain,.draw,.iteration)\n\n\nrandom_effects &lt;- e2_vxBMM |&gt; \n  gather_draws(`^r_id.*$`, regex = TRUE, ndraws = 1500) |&gt; \n  separate(.variable, into = c(\"effect\", \"id\", \"term\"), sep = \"\\\\[|,|\\\\]\") |&gt; \n  mutate(id = factor(id,levels=levels(testE2$id))) |&gt; \n  pivot_wider(names_from = term, values_from = .value) |&gt; arrange(id,.chain,.draw,.iteration)\n\nWarning: Expected 3 pieces. Additional pieces discarded in 330000 rows [1, 2, 3, 4, 5,\n6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].\n\nCode indvDraws &lt;- left_join(random_effects, fixed_effects, by = join_by(\".chain\", \".iteration\", \".draw\")) |&gt; \n  rename(bandInt_RF = bandInt,RF_Intercept=Intercept) |&gt;\n  right_join(new_data_grid, by = join_by(\"id\")) |&gt; \n  mutate(\n    Slope = bandInt_RF+b_bandInt,\n    Intercept= RF_Intercept + b_Intercept,\n    estimate = (b_Intercept + RF_Intercept) + (bandInt*(b_bandInt+bandInt_RF)) + (bandInt * condit_dummy) * `b_conditVaried:bandInt`,\n    SlopeInt = Slope + (`b_conditVaried:bandInt`*condit_dummy)\n  ) \n\nWarning in right_join(rename(left_join(random_effects, fixed_effects, by = join_by(\".chain\", : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\nCode  indvSlopes &lt;- indvDraws |&gt; group_by(id) |&gt; median_qi(Slope,SlopeInt, Intercept,b_Intercept,b_bandInt) |&gt;\n  left_join(e2Sbjs, by=join_by(id)) |&gt; group_by(condit) |&gt;\n    select(id,condit,Intercept,b_Intercept,starts_with(\"Slope\"),b_bandInt, n) |&gt;\n  mutate(rankSlope=rank(Slope)) |&gt; arrange(rankSlope)   |&gt; ungroup()\n \n  \n  indvSlopes |&gt; mutate(Condition=condit) |&gt;  group_by(Condition) |&gt; \n    reframe(enframe(quantile(SlopeInt, c(0.0,0.25, 0.5, 0.75,1)), \"quantile\", \"SlopeInt\")) |&gt; \n  pivot_wider(names_from=quantile,values_from=SlopeInt,names_prefix=\"Q_\") |&gt;\n  group_by(Condition) |&gt;\n  summarise(across(starts_with(\"Q\"), list(mean = mean))) |&gt; kable()\n\n\nTable 5: Slope coefficients by quartile, per condition\n\n\n\n\n\n\n\n\n\n\n\n\nCondition\nQ_0%_mean\nQ_25%_mean\nQ_50%_mean\nQ_75%_mean\nQ_100%_mean\n\n\n\nConstant\n-0.2861290\n0.3927563\n0.7005918\n1.0780672\n1.616342\n\n\nVaried\n-0.2459596\n0.3090011\n0.6853256\n0.9514093\n1.809163\n\n\n\n\n\n\n\n\nFigure 7 visually represents the distributions of estimated slopes relating velocity band to x velocity for each participant, ordered from lowest to highest within condition. Slope values are lower overall for varied training compared to constant training. Figure Xb plots the density of these slopes for each condition. The distribution for varied training has more mass at lower values than the constant training distribution. Both figures illustrate the model’s estimate that varied training resulted in less discrimination between velocity bands, evidenced by lower slopes on average.\n\nCode  indvSlopes |&gt; ggplot(aes(y=rankSlope, x=SlopeInt,fill=condit,color=condit)) + \n  geom_pointrange(aes(xmin=SlopeInt.lower , xmax=SlopeInt.upper)) + \n  labs(x=\"Estimated Slope\", y=\"Participant\")  + facet_wrap(~condit) +\n   ggplot(indvSlopes, aes(x = SlopeInt, color = condit)) + \n  geom_density() + labs(x=\"Slope Coefficient\",y=\"Density\")\n\n\n\n\n\n\n\n\n(a) Slope estimates by participant - ordered from lowest to highest within each condition.\n\n\n\n\n\nFigure 7: Slope distributions between condition\n\n\n\n\nCodenSbj &lt;- 3\nindvDraws  |&gt; indv_model_plot(indvSlopes, testE2Avg, SlopeInt,rank_variable=Slope,n_sbj=nSbj,\"max\")\nindvDraws |&gt; indv_model_plot(indvSlopes, testE2Avg,SlopeInt, rank_variable=Slope,n_sbj=nSbj,\"min\")\n\n\n\n\n\n\n\n\n(a) subset with largest slopes\n\n\n\n\n\n\n\n\n\n(b) subset with smallest slopes\n\n\n\n\n\nFigure 8: Subset of Varied and Constant Participants with the smallest and largest estimated slope values. Red lines represent the best fitting line for each participant, gray lines are 200 random samples from the posterior distribution. Colored points and intervals at each band represent the empirical median and 95% HDI.\n\n\n\ncontrol for training end performance\n\nCodetestE2 |&gt; group_by(id,condit) |&gt; pivot_longer(c(\"dist\",\"train_end\"),names_to=\"var\",values_to=\"value\") |&gt; \n  ggplot(aes(x=var,y=value, fill=condit)) + stat_bar + facet_wrap(~var)\n\n\n\n\n\n\nCodetestE2 |&gt; ggplot(aes(x=train_end,y=dist,fill=condit)) + \n  stat_summary(geom = \"line\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) + \n    facet_wrap(~vb) +\n  labs(x=\"Band\", y=\"Deviation From Target\")\n\nWarning: Width not defined\nℹ Set with `position_dodge(width = ...)`\n\n\nWarning: `position_dodge()` requires non-overlapping x intervals.\n`position_dodge()` requires non-overlapping x intervals.\n`position_dodge()` requires non-overlapping x intervals.\n`position_dodge()` requires non-overlapping x intervals.\n`position_dodge()` requires non-overlapping x intervals.\n`position_dodge()` requires non-overlapping x intervals.\n\n\n\n\n\n\n\nCodetestE2 |&gt; ggplot(aes(x=train_end,y=dist,fill=condit,col=condit)) + \n  #geom_point() +\n  geom_smooth(method=\"loess\") +\n    facet_wrap(~vb) +\n  labs(x=\"Band\", y=\"Deviation From Target\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nCode# create quartiles for train_end\ntestE2 |&gt; group_by(condit,vb) |&gt; \n  mutate(train_end_q = ntile(train_end,4)) |&gt; \n  ggplot(aes(x=train_end_q,y=dist,fill=condit)) + \n stat_bar + \n    facet_wrap(~vb) +\n  labs(x=\"quartile\", y=\"Deviation From Target\")\n\n\n\n\n\n\n\n\nCodebmtd3 &lt;- brm(dist ~ condit * bandType * train_end + (1|bandInt) + (1|id), \n    data=testE2, \n    file=paste0(here::here(\"data/model_cache\",\"e2_trainEnd_BT_RF2\")),\n    iter=1000,chains=2, control = list(adapt_delta = .92, max_treedepth = 11))\nsummary(bmtd3)\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: dist ~ condit * bandType * train_end + (1 | bandInt) + (1 | id) \n   Data: testE2 (Number of observations: 6709) \n  Draws: 2 chains, each with iter = 1000; warmup = 500; thin = 1;\n         total post-warmup draws = 1000\n\nGroup-Level Effects: \n~bandInt (Number of levels: 6) \n              Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsd(Intercept)    56.29     23.16    27.44   117.13 1.01      368      453\n\n~id (Number of levels: 110) \n              Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsd(Intercept)    96.88      7.59    83.12   112.62 1.00      238      391\n\nPopulation-Level Effects: \n                                             Estimate Est.Error l-95% CI\nIntercept                                       85.19     40.60     2.29\nconditVaried                                    46.19     40.72   -31.33\nbandTypeExtrapolation                          101.67     27.77    49.32\ntrain_end                                        1.10      0.23     0.67\nconditVaried:bandTypeExtrapolation             -11.41     31.46   -74.92\nconditVaried:train_end                          -0.85      0.32    -1.51\nbandTypeExtrapolation:train_end                 -0.69      0.19    -1.06\nconditVaried:bandTypeExtrapolation:train_end     0.93      0.23     0.46\n                                             u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept                                      163.45 1.01      222      298\nconditVaried                                   127.49 1.01      237      363\nbandTypeExtrapolation                          159.00 1.00      490      727\ntrain_end                                        1.59 1.00      289      372\nconditVaried:bandTypeExtrapolation              48.65 1.00      485      722\nconditVaried:train_end                          -0.23 1.01      242      417\nbandTypeExtrapolation:train_end                 -0.34 1.00      402      646\nconditVaried:bandTypeExtrapolation:train_end     1.35 1.00      385      602\n\nFamily Specific Parameters: \n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma   241.83      2.08   237.75   245.98 1.00     1779      602\n\nDraws were sampled using sample(hmc). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\nCodebayestestR::describe_posterior(bmtd3)\n\nSummary of Posterior Distribution\n\nParameter                                    | Median |           95% CI |     pd |            ROPE | % in ROPE |  Rhat |    ESS\n--------------------------------------------------------------------------------------------------------------------------------\n(Intercept)                                  |  85.92 | [  2.29, 163.45] | 97.60% | [-27.00, 27.00] |     5.05% | 1.015 | 207.00\nconditVaried                                 |  44.84 | [-31.33, 127.49] | 87.20% | [-27.00, 27.00] |    30.21% | 1.014 | 206.00\nbandTypeExtrapolation                        | 100.74 | [ 49.32, 159.00] |   100% | [-27.00, 27.00] |        0% | 0.999 | 478.00\ntrain_end                                    |   1.10 | [  0.67,   1.59] |   100% | [-27.00, 27.00] |      100% | 1.003 | 280.00\nconditVaried:bandTypeExtrapolation           | -10.78 | [-74.92,  48.65] | 64.00% | [-27.00, 27.00] |    61.68% | 1.000 | 473.00\nconditVaried:train_end                       |  -0.83 | [ -1.51,  -0.23] | 99.70% | [-27.00, 27.00] |      100% | 1.006 | 236.00\nbandTypeExtrapolation:train_end              |  -0.70 | [ -1.06,  -0.34] |   100% | [-27.00, 27.00] |      100% | 1.000 | 385.00\nconditVaried:bandTypeExtrapolation:train_end |   0.93 | [  0.46,   1.35] |   100% | [-27.00, 27.00] |      100% | 1.001 | 374.00\n\nCodecondEffects &lt;- function(m,xvar){\n  m |&gt; ggplot(aes(x = {{xvar}}, y = .value, color = condit, fill = condit)) + \n  stat_dist_pointinterval() + \n  stat_halfeye(alpha=.1, height=.5) +\n  theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n  \n}\n\n bmtd3 |&gt; emmeans( ~condit * bandType * train_end) |&gt;\n  gather_emmeans_draws() |&gt;\n condEffects(bandType) + labs(y=\"Absolute Deviation From Band\", x=\"Band Type\")\n\n\n\n\n\n\nCodece_bmtd3 &lt;- plot(conditional_effects(bmtd3),points=FALSE,plot=FALSE)\nwrap_plots(ce_bmtd3)\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: E2. Deviations from target band during testing without feedback stage.\nFigure 3: E2. Deviations from target band during testing without feedback stage.\nFigure 4: E2. Conditioinal Effect of Training Condition and Band. Ribbon indicated 95% Credible Intervals.\nFigure 5: E2 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\nFigure 6: Conditional effect of training condition and Band. Ribbons indicate 95% HDI.\nFigure 7 (a): Slope estimates by participant - ordered from lowest to highest within each condition.\nFigure 8 (a): subset with largest slopes\nFigure 8 (b): subset with smallest slopes",
    "crumbs": [
      "Analyses",
      "HTW E2 Testing"
    ]
  },
  {
    "objectID": "Analysis/e2_test.html#results",
    "href": "Analysis/e2_test.html#results",
    "title": "HTW E2 Testing",
    "section": "Results",
    "text": "Results\nTesting Phase - No feedback.\nIn the first part of the testing phase, participants are tested from each of the velocity bands, and receive no feedback after each throw.\nDeviation From Target Band\nDescriptive summaries testing deviation data are provided in Table 1 and Figure 2. To model differences in accuracy between groups, we used Bayesian mixed effects regression models to the trial level data from the testing phase. The primary model predicted the absolute deviation from the target velocity band (dist) as a function of training condition (condit), target velocity band (band), and their interaction, with random intercepts and slopes for each participant (id).\n\\[\\begin{equation}\ndist_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot band_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot band_{ij} + b_{0i} + b_{1i} \\cdot band_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\nCode```{r}\n#| label: tbl-e2-test-nf-deviation\n#| tbl-cap: \"Testing Deviation - Empirical Summary\"\n#| tbl-subcap: [\"Constant Testing - Deviation\", \"Varied Testing - Deviation\"]\n\nresult &lt;- test_summary_table(testE2, \"dist\",\"Deviation\", mfun = list(mean = mean, median = median, sd = sd))\nresult$constant |&gt; kbl()\nresult$varied |&gt; kbl()\n# make kable table with smaller font size\n# result$constant |&gt; kbl(caption=\"Constant Testing - Deviation\",booktabs=T,escape=F) |&gt; kable_styling(font_size = 7)\n```\n\n\nTable 1: Testing Deviation - Empirical Summary\n\n\n\n\n\n(a) Constant Testing - Deviation\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n206\n48\n317\n\n\n350-550\nExtrapolation\n194\n86\n268\n\n\n600-800\nTrained\n182\n112\n240\n\n\n800-1000\nExtrapolation\n200\n129\n233\n\n\n1000-1200\nExtrapolation\n238\n190\n234\n\n\n1200-1400\nExtrapolation\n311\n254\n288\n\n\n\n\n\n\n\n\n(b) Varied Testing - Deviation\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nTrained\n153\n25\n266\n\n\n350-550\nTrained\n138\n53\n233\n\n\n600-800\nTrained\n160\n120\n183\n\n\n800-1000\nExtrapolation\n261\n207\n257\n\n\n1000-1200\nExtrapolation\n305\n258\n273\n\n\n1200-1400\nExtrapolation\n363\n314\n297\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodetestE2 |&gt;  ggplot(aes(x = vb, y = dist,fill=condit)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) + \n  labs(x=\"Band\", y=\"Deviation From Target\")\n\n\n\n\n\n\nFigure 2: E2. Deviations from target band during testing without feedback stage.\n\n\n\n\n\nCode#contrasts(test$condit) \n# contrasts(testE2$vb)\n\nmodelName &lt;- \"e2_testDistBand_RF_5K\"\ne2_distBMM &lt;- brm(dist ~ condit * bandInt + (1 + bandInt|id),\n                      data=testE2,file=paste0(here::here(\"data/model_cache\",modelName)),\n                      iter=5000,chains=4)\nmp2 &lt;- GetModelStats(e2_distBMM) |&gt; kable(escape=F,booktabs=T)\nmp2\ne2_distBMM |&gt; \n  emmeans(\"condit\",by=\"bandInt\",at=list(bandInt=c(100,350,600,800,1000,1200)),\n          epred = TRUE, re_formula = NA) |&gt; \n  pairs() |&gt; gather_emmeans_draws()  |&gt; \n   summarize(median_qi(.value),pd=sum(.value&gt;0)/n()) |&gt;\n   select(contrast,Band=bandInt,value=y,lower=ymin,upper=ymax,pd) |&gt; \n   mutate(across(where(is.numeric), \\(x) round(x, 2)),\n          pd=ifelse(value&lt;0,1-pd,pd)) |&gt;\n   kbl(caption=\"Contrasts\")\ncoef_details &lt;- get_coef_details(e2_distBMM, \"conditVaried\")\n\n\nTable 2: Experiment 2. Bayesian Mixed Model predicting absolute deviation as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n151.71\n90.51\n215.86\n1.00\n\n\nconditVaried\n-70.33\n-156.87\n16.66\n0.94\n\n\nBand\n0.10\n0.02\n0.18\n1.00\n\n\ncondit*Band\n0.12\n0.02\n0.23\n0.99\n\n\n\n\n\n\n\n\nContrasts\n\ncontrast\nBand\nvalue\nlower\nupper\npd\n\n\n\nConstant - Varied\n100\n57.57\n-20.48\n135.32\n0.93\n\n\nConstant - Varied\n350\n26.60\n-30.93\n83.84\n0.83\n\n\nConstant - Varied\n600\n-4.30\n-46.73\n38.52\n0.58\n\n\nConstant - Varied\n800\n-29.30\n-69.38\n11.29\n0.92\n\n\nConstant - Varied\n1000\n-54.62\n-101.06\n-5.32\n0.98\n\n\nConstant - Varied\n1200\n-79.63\n-139.47\n-15.45\n0.99\n\n\n\n\n\n\n\n\n\nThe model predicting absolute deviation showed a modest tendency for the varied training group to have lower deviation compared to the constant training group (β = -70.33, 95% CI [-156.87, 16.66]),with 94% of the posterior distribution being less than 0. This suggests a potential benefit of training with variation, though the evidence is not definitive.\n(SHOULD PROBABLY DO ALTERNATE ANALYSIS THAT ONLY CONSIDERS THE NOVEL EXTRAPOLATION BANDS)\n\nCodee2_distBMM |&gt; emmeans( ~condit + bandInt, \n                       at = list(bandInt = c(100, 350, 600, 800, 1000, 1200))) |&gt;\n  gather_emmeans_draws() |&gt;\n condEffects()+\n  scale_x_continuous(breaks = c(100, 350, 600, 800, 1000, 1200), \n                     labels = levels(testE2$vb), \n                     limits = c(0, 1400)) \n\n\n\n\n\n\nFigure 3: E2. Conditioinal Effect of Training Condition and Band. Ribbon indicated 95% Credible Intervals.\n\n\n\n\nDiscrimination between Velocity Bands\nIn addition to accuracy/deviation. We also assessed the ability of participants to reliably discriminate between the velocity bands (i.e. responding differently when prompted for band 600-800 than when prompted for band 150-350). Table 3 shows descriptive statistics of this measure, and Figure 1 visualizes the full distributions of throws for each combination of condition and velocity band. To quantify discrimination, we again fit Bayesian Mixed Models as above, but this time the dependent variable was the raw x velocity generated by participants.\n\\[\\begin{equation}\nvx_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot bandInt_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot bandInt_{ij} + b_{0i} + b_{1i} \\cdot bandInt_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\nCodetestE2 %&gt;% group_by(id,vb,condit) |&gt; plot_distByCondit()\n\n\n\n\n\n\nFigure 4: E2 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\n\n\n\n\nCode```{r}\n#| label: tbl-e2-test-nf-vx\n#| tbl-cap: \"Testing vx - Empirical Summary\"\n#| tbl-subcap: [\"Constant Testing - vx\", \"Varied Testing - vx\"]\n#| layout-ncol: 2\n\nresult &lt;- test_summary_table(testE2, \"vx\",\"X Velocity\" ,mfun = list(mean = mean, median = median, sd = sd))\nresult$constant |&gt; kbl()\nresult$varied |&gt; kbl()\n```\n\n\nTable 3: Testing vx - Empirical Summary\n\n\n\n\n\n\n(a) Constant Testing - vx\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n457\n346\n354\n\n\n350-550\nExtrapolation\n597\n485\n368\n\n\n600-800\nTrained\n728\n673\n367\n\n\n800-1000\nExtrapolation\n953\n913\n375\n\n\n1000-1200\nExtrapolation\n1064\n1012\n408\n\n\n1200-1400\nExtrapolation\n1213\n1139\n493\n\n\n\n\n\n\n\n\n(b) Varied Testing - vx\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nTrained\n410\n323\n297\n\n\n350-550\nTrained\n582\n530\n303\n\n\n600-800\nTrained\n696\n641\n316\n\n\n800-1000\nExtrapolation\n910\n848\n443\n\n\n1000-1200\nExtrapolation\n1028\n962\n482\n\n\n1200-1400\nExtrapolation\n1095\n1051\n510\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodee2_vxBMM &lt;- brm(vx ~ condit * bandInt + (1 + bandInt|id),\n                        data=testE2,file=paste0(here::here(\"data/model_cache\", \"e2_testVxBand_RF_5k\")),\n                        iter=5000,chains=4,silent=0,\n                        control=list(adapt_delta=0.94, max_treedepth=13))\nmt3 &lt;-GetModelStats(e2_vxBMM ) |&gt; kable(escape=F,booktabs=T)\nmt3\ncd1 &lt;- get_coef_details(e2_vxBMM, \"conditVaried\")\nsc1 &lt;- get_coef_details(e2_vxBMM, \"bandInt\")\nintCoef1 &lt;- get_coef_details(e2_vxBMM, \"conditVaried:bandInt\")\n\n\nTable 4: Experiment 2. Bayesian Mixed Model Predicting Vx as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n362.64\n274.85\n450.02\n1.00\n\n\nconditVaried\n-8.56\n-133.97\n113.98\n0.55\n\n\nBand\n0.71\n0.58\n0.84\n1.00\n\n\ncondit*Band\n-0.06\n-0.24\n0.13\n0.73\n\n\n\n\n\n\n\n\n\nSee Table 4 for the full model results.\nWhen examining discrimination ability using the model predicting raw x-velocity, the results were less clear than those of the absolute deviation analysis. The slope on Velocity Band (β = 0.71, 95% CrI [0.58, 0.84]) indicates that participants showed good discrimination between bands overall. However, the interaction term suggested this effect was not modulated by training condition (β = -0.06, 95% CrI [-0.24, 0.13]) Thus, while varied training may provide some advantage for accuracy, both training conditions seem to have similar abilities to discriminate between velocity bands.\n\nCodee2_vxBMM |&gt; emmeans( ~condit + bandInt, \n                       at = list(bandInt = c(100, 350, 600, 800, 1000, 1200))) |&gt;\n  gather_emmeans_draws() |&gt;\n  ggplot(aes(x = bandInt, y = .value, color = condit, fill = condit)) + \n  stat_dist_pointinterval() +\n  stat_lineribbon(alpha = .25, size = 1, .width = c(.95)) +\n  ylab(\"Predicted X Velocity\") + xlab(\"Band\")+\n  scale_x_continuous(breaks = c(100, 350, 600, 800, 1000, 1200), \n                     labels = levels(testE2$vb), \n                     limits = c(0, 1400)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\n\n\n\n\n\nFigure 5: Conditional effect of training condition and Band. Ribbons indicate 95% HDI.\n\n\n\n\n\nCodenew_data_grid=map_dfr(1, ~data.frame(unique(testE2[,c(\"id\",\"condit\",\"bandInt\")]))) |&gt; \n  dplyr::arrange(id,bandInt) |&gt; \n  mutate(condit_dummy = ifelse(condit == \"Varied\", 1, 0)) \n\nindv_coefs &lt;- coef(e2_vxBMM)$id |&gt; \n  as_tibble(rownames=\"id\") |&gt; \n  select(id, starts_with(\"Est\")) |&gt;\n  left_join(e2Sbjs, by=join_by(id) ) |&gt; \n  group_by(condit) |&gt; \n  mutate(rank = rank(desc(Estimate.bandInt)),\n         intErrorRank=rank((Est.Error.Intercept)),\n         bandErrorRank=rank((Est.Error.bandInt)),\n         nCond = n()) |&gt; arrange(intErrorRank)\n\nfixed_effects &lt;- e2_vxBMM |&gt; \n  spread_draws(`^b_.*`,regex=TRUE) |&gt; arrange(.chain,.draw,.iteration)\n\n\nrandom_effects &lt;- e2_vxBMM |&gt; \n  gather_draws(`^r_id.*$`, regex = TRUE, ndraws = 2000) |&gt; \n  separate(.variable, into = c(\"effect\", \"id\", \"term\"), sep = \"\\\\[|,|\\\\]\") |&gt; \n  mutate(id = factor(id,levels=levels(testE2$id))) |&gt; \n  pivot_wider(names_from = term, values_from = .value) |&gt; arrange(id,.chain,.draw,.iteration)\n\ncd &lt;- left_join(random_effects, fixed_effects, by = join_by(\".chain\", \".iteration\", \".draw\")) |&gt; \n  rename(bandInt_RF = bandInt) |&gt;\n  mutate(Slope=bandInt_RF+b_bandInt) |&gt; group_by(id) \n\ncdMed &lt;- cd |&gt; group_by(id) |&gt; median_qi(Slope)  |&gt; \n  left_join(e2Sbjs, by=join_by(id)) |&gt; group_by(condit) |&gt;\n  mutate(rankSlope=rank(Slope)) |&gt; arrange(rankSlope)\n\ncdMed %&gt;% ggplot(aes(y=rankSlope, x=Slope,fill=condit,color=condit)) + \n  geom_pointrange(aes(xmin=.lower , xmax=.upper)) + \n  labs(x=\"Estimated Slope\", y=\"Participant\")  + facet_wrap(~condit)  \n\n# cdMed |&gt;  ggplot(aes(x = condit, y = Slope,fill=condit)) +\n#     stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n#     stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) + \n#   geom_jitter()\n#   labs(x=\"Band\", y=\"Deviation From Target\")\n\n\n\nCodenew_data_grid=map_dfr(1, ~data.frame(unique(testE2[,c(\"id\",\"condit\",\"bandInt\")]))) |&gt; \n  dplyr::arrange(id,bandInt) |&gt; \n  mutate(condit_dummy = ifelse(condit == \"Varied\", 1, 0)) \n\nindv_coefs &lt;- as_tibble(coef(e2_vxBMM)$id, rownames=\"id\")|&gt; \n  select(id, starts_with(\"Est\")) |&gt;\n  left_join(e2Sbjs, by=join_by(id) ) \n\n\nfixed_effects &lt;- e2_vxBMM |&gt; \n  spread_draws(`^b_.*`,regex=TRUE) |&gt; arrange(.chain,.draw,.iteration)\n\n\nrandom_effects &lt;- e2_vxBMM |&gt; \n  gather_draws(`^r_id.*$`, regex = TRUE, ndraws = 1500) |&gt; \n  separate(.variable, into = c(\"effect\", \"id\", \"term\"), sep = \"\\\\[|,|\\\\]\") |&gt; \n  mutate(id = factor(id,levels=levels(testE2$id))) |&gt; \n  pivot_wider(names_from = term, values_from = .value) |&gt; arrange(id,.chain,.draw,.iteration)\n\n\n indvDraws &lt;- left_join(random_effects, fixed_effects, by = join_by(\".chain\", \".iteration\", \".draw\")) |&gt; \n  rename(bandInt_RF = bandInt,RF_Intercept=Intercept) |&gt;\n  right_join(new_data_grid, by = join_by(\"id\")) |&gt; \n  mutate(\n    Slope = bandInt_RF+b_bandInt,\n    Intercept= RF_Intercept + b_Intercept,\n    estimate = (b_Intercept + RF_Intercept) + (bandInt*(b_bandInt+bandInt_RF)) + (bandInt * condit_dummy) * `b_conditVaried:bandInt`,\n    SlopeInt = Slope + (`b_conditVaried:bandInt`*condit_dummy)\n  ) \n\n  indvSlopes &lt;- indvDraws |&gt; group_by(id) |&gt; median_qi(Slope,SlopeInt, Intercept,b_Intercept,b_bandInt) |&gt;\n  left_join(e2Sbjs, by=join_by(id)) |&gt; group_by(condit) |&gt;\n    select(id,condit,Intercept,b_Intercept,starts_with(\"Slope\"),b_bandInt, n) |&gt;\n  mutate(rankSlope=rank(Slope)) |&gt; arrange(rankSlope)   |&gt; ungroup()\n \n  \n  indvSlopes |&gt; mutate(Condition=condit) |&gt;  group_by(Condition) |&gt; \n    reframe(enframe(quantile(SlopeInt, c(0.0,0.25, 0.5, 0.75,1)), \"quantile\", \"SlopeInt\")) |&gt; \n  pivot_wider(names_from=quantile,values_from=SlopeInt,names_prefix=\"Q_\") |&gt;\n  group_by(Condition) |&gt;\n  summarise(across(starts_with(\"Q\"), list(mean = mean))) |&gt; kbl()\n\n\nTable 5: Slope coefficients by quartile, per condition\n\n\n\n\n\nCondition\nQ_0%_mean\nQ_25%_mean\nQ_50%_mean\nQ_75%_mean\nQ_100%_mean\n\n\n\nConstant\n-0.2832150\n0.3937922\n0.6976669\n1.0786327\n1.616930\n\n\nVaried\n-0.2485442\n0.3122124\n0.6808190\n0.9518413\n1.809811\n\n\n\n\n\n\n\n\n\nFigure 6 visually represents the distributions of estimated slopes relating velocity band to x velocity for each participant, ordered from lowest to highest within condition. Slope values are lower overall for varied training compared to constant training. Figure Xb plots the density of these slopes for each condition. The distribution for varied training has more mass at lower values than the constant training distribution. Both figures illustrate the model’s estimate that varied training resulted in less discrimination between velocity bands, evidenced by lower slopes on average.\n\nCode  indvSlopes |&gt; ggplot(aes(y=rankSlope, x=SlopeInt,fill=condit,color=condit)) + \n  geom_pointrange(aes(xmin=SlopeInt.lower , xmax=SlopeInt.upper)) + \n  labs(x=\"Estimated Slope\", y=\"Participant\")  + facet_wrap(~condit) +\n   ggplot(indvSlopes, aes(x = SlopeInt, color = condit)) + \n  geom_density() + labs(x=\"Slope Coefficient\",y=\"Density\")\n\n\n\n\n\n\n\n\n(a) Slope estimates by participant - ordered from lowest to highest within each condition.\n\n\n\n\n\nFigure 6: Slope distributions between condition\n\n\n\n\nCodenSbj &lt;- 3\nindvDraws  |&gt; indv_model_plot(indvSlopes, testE2Avg, SlopeInt,rank_variable=Slope,n_sbj=nSbj,\"max\")\nindvDraws |&gt; indv_model_plot(indvSlopes, testE2Avg,SlopeInt, rank_variable=Slope,n_sbj=nSbj,\"min\")\n\n\n\n\n\n\n\n\n(a) subset with largest slopes\n\n\n\n\n\n\n\n\n\n(b) subset with smallest slopes\n\n\n\n\n\nFigure 7: Subset of Varied and Constant Participants with the smallest and largest estimated slope values. Red lines represent the best fitting line for each participant, gray lines are 200 random samples from the posterior distribution. Colored points and intervals at each band represent the empirical median and 95% HDI.",
    "crumbs": [
      "Analyses",
      "HTW E2 Testing"
    ]
  },
  {
    "objectID": "Analysis/full_analysis.html",
    "href": "Analysis/full_analysis.html",
    "title": "Combined Analysis of All 3 Experiments",
    "section": "",
    "text": "Questions - difficulty difference between bands - effect of ordinal feedback. - effect of training with easier bands - do varied subjects who discriminate by end of training do better on test?\nAre there differences in difficulty between bands?\nIs there an effect of ordinal feedback?\nIs there an effect of training with easier bands?"
  },
  {
    "objectID": "Misc/HTW_ToDo.html",
    "href": "Misc/HTW_ToDo.html",
    "title": "HTW To-do and Notes",
    "section": "",
    "text": "Model To-do\n\n\n\n\n\n\nFit to Train then Predict Transfer vs. Fitting to all stages\nSeparate ALM and EXAM Fits\nALM + Prior Knowledge (initial anchor at 0)\nEmpirical Learning Model\nIndividual vs. Group fits\nUsing Cognitive Model parameters to predict testing Vx vs. Deviation vs. Discrimination\nModel Recovery?\nApproximate Bayes?\n\n\n\n\n\n\n\n\n\n\n\n\nAnalysis To-do\n\n\n\n\nDiscrimination\nMixed Models?\n\n\n\n\n\n\n\n\n\nSite to-do\n\n\n\n\nConfigure react tables",
    "crumbs": [
      "Misc",
      "HTW To-do and Notes"
    ]
  },
  {
    "objectID": "Misc/HTW_ToDo.html#to-do-list",
    "href": "Misc/HTW_ToDo.html#to-do-list",
    "title": "HTW To-do and Notes",
    "section": "",
    "text": "Model To-do\n\n\n\n\n\n\nFit to Train then Predict Transfer vs. Fitting to all stages\nSeparate ALM and EXAM Fits\nALM + Prior Knowledge (initial anchor at 0)\nEmpirical Learning Model\nIndividual vs. Group fits\nUsing Cognitive Model parameters to predict testing Vx vs. Deviation vs. Discrimination\nModel Recovery?\nApproximate Bayes?\n\n\n\n\n\n\n\n\n\n\n\n\nAnalysis To-do\n\n\n\n\nDiscrimination\nMixed Models?\n\n\n\n\n\n\n\n\n\nSite to-do\n\n\n\n\nConfigure react tables",
    "crumbs": [
      "Misc",
      "HTW To-do and Notes"
    ]
  },
  {
    "objectID": "Misc/HTW_ToDo.html#notes",
    "href": "Misc/HTW_ToDo.html#notes",
    "title": "HTW To-do and Notes",
    "section": "Notes",
    "text": "Notes\n\n\n\n\n\n\nHuman Regression or Rule\n\n\n\n\n\n\n\n\n\n\n\n\nALM & EXAM Implementations\n\n\n\n\n\n\n\n\n\n\n\n\nALM Likelihood\n\n\n\n\n\n\n\n\n\n\n\n\nHTW DP",
    "crumbs": [
      "Misc",
      "HTW To-do and Notes"
    ]
  },
  {
    "objectID": "Misc/Visuals_Interactives/alm_gg.html",
    "href": "Misc/Visuals_Interactives/alm_gg.html",
    "title": "HTW Project",
    "section": "",
    "text": "library(ggplot2)\nlibrary(patchwork)\nlibrary(dplyr)\n\nbp &lt;- c(\"#2C3E50\", \"#E74C3C\", \"#3498DB\", \"#F39C12\", \"#8E44AD\", \"#1ABC9C\")  # Color palette\n\n# Define points for nodes\nnodes &lt;- tibble(\n  x = c(0.5, 1.5, 0, 1, 2, 0.5, 1.5),\n  y = c(3, 3, 2, 2, 2, 1, 1),\n  type = c(\"circle\", \"circle\", \"triangle\", \"triangle\", \"triangle\", \"circle\", \"circle\")\n)\n\n# Define lines for associations\nassociations &lt;- tibble(\n  x = c(0.5, 1.5, 0.5, 1.5, 0, 1, 2, 0.5, 1.5),\n  y = c(3, 3, 3, 3, 2, 2, 2, 2, 2),\n  xend = c(0, 1, 1, 2, 0.5, 0.5, 1.5, 1.5, 1.5),\n  yend = c(2, 2, 2, 2, 1, 1, 1, 1, 1)\n)\n\n# Plot nodes and lines\nplot &lt;- ggplot() +\n  geom_segment(data = associations, aes(x = x, y = y, xend = xend, yend = yend), \n               arrow = arrow(type = \"open\", length = unit(0.2, \"inches\")), \n               color = bp[1]) +\n  geom_point(data = filter(nodes, type == \"circle\"), aes(x = x, y = y), shape = 16, size = 5, fill = \"white\", color = bp[1]) +\n  geom_polygon(data = filter(nodes, type == \"triangle\"), aes(x = x, y = y), fill = \"white\", color = bp[1], size = 1) +\n  annotate(\"text\", x = 0.5, y = 3.2, label = \"Category nodes\") +\n  annotate(\"text\", x = 1, y = 2.2, label = \"Learned association weights\", angle = 90, hjust = 1) +\n  annotate(\"text\", x = 1, y = 1.2, label = \"Learned attention strengths\", angle = 90, hjust = 1) +\n  annotate(\"text\", x = 1, y = 2.2, label = \"Exemplar nodes\") +\n  annotate(\"text\", x = 1, y = 0.8, label = \"Stimulus dimension nodes\") +\n  theme_void()\n\nprint(plot)\n\n\nlibrary(ggplot2)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Data for category, exemplar, and stimulus dimension nodes\ndf_nodes &lt;- tibble(\n  x = c(0, 1, 0.5, 0.5, 0.5),\n  y = c(1, 1, 2, 0, 1.5),\n  label = c(\"Category nodes\", \"Category nodes\", \"Exemplar nodes\", \n            \"Stimulus dimension nodes\", \"Learned association strengths\"),\n  type = c(\"category\", \"category\", \"exemplar\", \"stimulus\", \"association\"),\n  fill = c(NA, NA, \"blue\", NA, NA)  # Gradient fill for exemplar node\n)\n\n# Data for arrows\ndf_arrows &lt;- tibble(\n  x_start = c(0, 1, 0.5, 0.5, 0.5, 0.5),\n  y_start = c(1, 1, 2, 0, 2, 0),\n  x_end = c(0.5, 0.5, 0.5, 0.5, 0, 1),\n  y_end = c(1.5, 1.5, 1.5, 1.5, 1, 1)\n)\n\n# Create the base plot\np &lt;- ggplot() +\n  geom_segment(data = df_arrows, \n               aes(x = x_start, y = y_start, xend = x_end, yend = y_end),\n               arrow = arrow(type = \"closed\", length = unit(0.15, \"inches\"))) +\n  geom_text(data = df_nodes, \n            aes(x = x, y = y, label = label), \n            vjust = \"inward\", size = 4) +\n  theme_void() +\n  theme(legend.position = \"none\")\n\n# Modify the exemplar node in df_nodes with a numeric value for activation level\ndf_nodes$activation &lt;- ifelse(df_nodes$type == \"exemplar\", 0.8, NA)  # Example value 0.8\n\n# Updated code segment\np + geom_point(data = df_nodes %&gt;% filter(type == \"exemplar\"), \n               aes(x = x, y = y, fill = activation), \n               shape = 21, size = 5, color = \"black\") +\n    scale_fill_gradient(low = \"white\", high = \"blue\", na.value = NA)\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(tidyr)\n\n# Define the matrix size\nn_rows &lt;- 8\nn_cols &lt;- 10\n\n# Create an empty matrix\ncategory_matrix &lt;- matrix(NA, n_rows, n_cols)\n\n# Fill the matrix based on the figure\n# 1 for rule training instances and 2 for exceptions\ncategory_matrix[1:4, 1:2] &lt;- 1\ncategory_matrix[5:8, 1:2] &lt;- 2\ncategory_matrix[1:2, 3:10] &lt;- 2\ncategory_matrix[3:4, 3:10] &lt;- 1\ncategory_matrix[5:6, 3:10] &lt;- 1\ncategory_matrix[7:8, 3:10] &lt;- 2\n\n# Convert the matrix to a tidy data frame for plotting\ncategory_df &lt;- as.data.frame(as.table(category_matrix))\n\n# Plot\nggplot(category_df, aes(x=Var2, y=-Var1)) +\n  geom_tile(aes(fill=factor(category_matrix)), color=\"black\") +\n  scale_fill_manual(values=c(\"black\", \"white\")) +\n  theme_minimal() +\n  labs(fill=\"Category\", \n       title=\"Category Structure for Experiment 2\",\n       x=\"Segment Position\", \n       y=\"Rectangle Height\")\n\nWarning in Ops.factor(Var1): '-' not meaningful for factors\n\nWarning in Ops.factor(Var1): '-' not meaningful for factors\n\n\n\n\n\n\n\n\n\nlibrary(tidyverse)\n\n# Define the architecture\n\n# Rule Module\nrule_module &lt;- function(input, weights) {\n  # Activate rule nodes based on the input and boundary\n  activated_rule &lt;- ifelse(input &gt; some_boundary_value, 1, 0) # some_boundary_value needs to be defined\n  return(activated_rule * weights)\n}\n\n# Exemplar Module (ALCOVE)\nexemplar_module &lt;- function(input, exemplars, attention_weights, exemplar_weights) {\n  # Compute similarity between input and each exemplar\n  similarity &lt;- rowSums((input - exemplars)^2 * attention_weights)\n  activations &lt;- exp(-similarity)\n  \n  # Compute category response\n  response &lt;- sum(activations * exemplar_weights)\n  \n  return(response)\n}\n\n# Gating Mechanism\ngating_mechanism &lt;- function(rule_output, exemplar_output, g) {\n  return(g * rule_output + (1 - g) * exemplar_output)\n}\n\n# Initialize parameters\nrule_weights &lt;- runif(2)  # Example weights for the rule module, actual initialization may differ\nexemplars &lt;- matrix(runif(10), ncol=2)  # Assuming 5 exemplars with 2-dimensional input for demonstration purposes\nattention_weights &lt;- runif(2)  # Example attention weights\nexemplar_weights &lt;- runif(5)  # Example weights for the exemplar module\ng &lt;- 0.5  # Example gating parameter, the actual value should be set based on the model\n\n# Simulate the model with an input\ninput_data &lt;- c(0.5, 0.5)  # Example 2-dimensional input\n\nrule_output &lt;- rule_module(input_data, rule_weights)\nexemplar_output &lt;- exemplar_module(input_data, exemplars, attention_weights, exemplar_weights)\nfinal_output &lt;- gating_mechanism(rule_output, exemplar_output, g)\n\nprint(final_output)"
  },
  {
    "objectID": "Misc/Visuals_Interactives/model_viz.html",
    "href": "Misc/Visuals_Interactives/model_viz.html",
    "title": "Model Visualization",
    "section": "",
    "text": "Code#lapply(c('tidyverse','data.table','igraph','ggraph','kableExtra'),library,character.only=TRUE))\npacman::p_load(tidyverse,data.table,igraph,ggraph,kableExtra,DiagrammeR,png, plantuml)",
    "crumbs": [
      "Misc",
      "Model Visualization"
    ]
  },
  {
    "objectID": "Misc/Visuals_Interactives/model_viz.html#ggplot-model-visualization",
    "href": "Misc/Visuals_Interactives/model_viz.html#ggplot-model-visualization",
    "title": "Model Visualization",
    "section": "ggplot model visualization",
    "text": "ggplot model visualization\n\nCodenInput=6\nnOutput=10\n\ninNodes &lt;- seq(1,nInput,1) %&gt;% as.integer()\noutNodes &lt;- seq(300,1000,length.out=nOutput)%&gt;% as.integer()\nweight.mat &lt;&lt;- matrix(0.001,nrow=nOutput,ncol=nInput) # weights initialized to 0 (as in Delosh 1997)\n\nstim &lt;- 1.5\nc=.1\ninAct &lt;- round(exp(-c*((inNodes-stim)^2)),2)\ninActLab &lt;- paste0(\"x\",inNodes,\"=\",inAct)\noutAct &lt;- weight.mat %*% inAct\noutput.probability &lt;&lt;- outAct/sum(outAct)\noutLab=paste0(\"y\",outNodes,\"=\",round(output.probability,2))\nmean.response &lt;&lt;- round(sum(outNodes * output.probability),0)\n\n\nresp &lt;- mean.response\ninFlow &lt;- tibble(expand.grid(from=stim,to=inActLab)) %&gt;% mutate_all(as.character)\noutFlow &lt;- tibble(expand.grid(from=outLab,to=mean.response)) %&gt;% mutate_all(as.character)\n\ngd &lt;- tibble(expand.grid(from=inActLab,to=outLab)) %&gt;% mutate_all(as.character) %&gt;%\n  rbind(inFlow,.) %&gt;% rbind(.,outFlow)\n\nxInc &lt;- .3\nyInc=.5\n\ng = graph_from_data_frame(gd,directed=TRUE)\ncoords2=layout_as_tree(g)\ncolnames(coords2)=c(\"y\",\"x\")\n\nodf &lt;- as_tibble(coords2) %&gt;% \n  mutate(label=vertex_attr(g,\"name\"),\n         type=c(\"stim\",rep(\"Input\",nInput),rep(\"Output\",nOutput),\"Resp\"),\n         x=x*-1) %&gt;%\n  mutate(y=ifelse(type==\"Resp\",0,y),xmin=x-xInc,xmax=x+xInc,ymin=y-yInc,ymax=y+yInc)\n\nplot_edges = gd %&gt;% mutate(id=row_number()) %&gt;%\n  pivot_longer(cols=c(\"from\",\"to\"),names_to=\"s_e\",values_to=(\"label\")) %&gt;%\n                 mutate(label=as.character(label)) %&gt;% \n  group_by(id) %&gt;%\n  mutate(weight=sqrt(rnorm(1,mean=0,sd=10)^2)/10) %&gt;%\n  left_join(odf,by=\"label\") %&gt;%\n  mutate(xmin=xmin+.02,xmax=xmax-.02)\n\nggplot() + geom_rect(data = odf,\n            mapping = aes(xmin = xmin, ymin = ymin, \n                          xmax = xmax, ymax = ymax, \n                          fill = type, colour = type),alpha = 0.01) +\n  geom_text(data=odf,aes(x=x,y=y,label=label,size=3)) +\n  geom_path(data=plot_edges,mapping=aes(x=x,y=y,group=id,alpha=weight)) +\n  # geom_rect(aes(xmin=-1.05,xmax=-.95,ymin=-10,ymax=5),color=\"red\",alpha=.1)+\n  # geom_rect(aes(xmin=-0.05,xmax=.05,ymin=-10,ymax=5),color=\"blue\",alpha=.1) +\n  theme_void()",
    "crumbs": [
      "Misc",
      "Model Visualization"
    ]
  },
  {
    "objectID": "Misc/Visuals_Interactives/model_viz.html#ggraph-method",
    "href": "Misc/Visuals_Interactives/model_viz.html#ggraph-method",
    "title": "Model Visualization",
    "section": "ggraph method",
    "text": "ggraph method\n\nCodeinNodes &lt;- seq(1,6,1) %&gt;% as.integer()\noutNodes &lt;- seq(300,1000,50)%&gt;% as.integer()\n\nda &lt;- data.frame(expand.grid(inNodes,outNodes))  %&gt;% magrittr::set_colnames(c(\"input\",\"output\"))\nda &lt;- da %&gt;% mutate_all(as.character)\nm = graph_from_data_frame(da, directed = TRUE)\n\ncoords = layout_with_sugiyama(m)\ncolnames(coords$layout) = c(\"y\", \"x\")\ncoords$layout=coords$layout[,c(\"x\",\"y\")]\nplot(m,layout=coords)\n\n\n\n\n\n\nCodeggraph(m,layout=coords$layout)+\ngeom_edge_link0(width=0.2,colour=\"grey\")+\n  geom_node_point(col=\"white\",size=6)+scale_x_reverse()+\n  geom_node_text(aes(label=name)) +\n  # draw rectangle that covers input layer at x=1, min y is min of coords$y and max y is max of coords$y\n  annotate(\"rect\",xmin=0,xmax=.1,ymin=min(coords$layout[,2]),ymax=max(coords$layout[,2]),fill=\"grey\",alpha=0.7)\n\n\n\n\n\n\nCode geom_rect(xmin=0,xmax=1.1,ymin=min(coords$layout[,2]),ymax=max(coords$layout[,2]),fill=\"grey\",alpha=0.7)\n\ngeom_rect: linejoin = mitre, na.rm = FALSE\nstat_identity: na.rm = FALSE\nposition_identity \n\n\n\nCodelibrary(tidyverse)\nlibrary(ggforce)\n\ntheme_set(theme_grey() +\n            theme_void() +\n            theme(plot.margin = margin(0, 5.5, 0, 5.5)))\n\n# Parameters\ninput_x &lt;- c(1, 2)\noutput_x &lt;- c(1.5, 2.5, 3.5)\ninput_y &lt;- 3\noutput_y &lt;- 1\nactivation_levels &lt;- c(0.2, 0.7, 0.5)\n\n# Input Layer\ninput_layer &lt;- tibble(x = input_x, y = rep(input_y, length(input_x)))\n\n# Output Layer\noutput_layer &lt;- tibble(x = output_x, y = rep(output_y, length(output_x)), activation = activation_levels)\n\n# Gaussian Activation\ngaussian_activation &lt;- tibble(\n  x = seq(from = 0, to = 3, by = 0.01),\n  y = exp(-2 * (x - 1)^2) + 2.5,\n  x2 = x,\n  y2 = exp(-2 * (x - 2)^2) + 2.5\n)\n\n# Plot\np &lt;- ggplot() +\n  # Input nodes\n  geom_point(data = input_layer, aes(x = x, y = y), size = 4, color = 'green') +\n  annotate(\"text\", x = input_x, y = rep(input_y, length(input_x)) + 0.3, label = c(\"Input #1\", \"Input #2\")) +\n  \n  # Gaussian Activations\n  geom_line(data = gaussian_activation, aes(x = x, y = y), color = 'blue') +\n  geom_line(data = gaussian_activation, aes(x = x2, y = y2), color = 'blue') +\n  \n  # Connections\n  geom_segment(data = expand.grid(input_x, output_x), aes(x = Var1, xend = Var2, y = input_y, yend = output_y), arrow = arrow(type = 'closed', length = unit(0.2, 'inches'))) +\n  \n  # Output nodes\n  geom_point(data = output_layer, aes(x = x, y = y), size = 4, color = 'red') +\n  geom_bar(data = output_layer, aes(x = x, y = activation), stat = 'identity', position = 'dodge', fill = 'red', alpha = 0.3, width = 0.3) +\n  annotate(\"text\", x = output_x, y = rep(output_y, length(output_x)) - 0.3, label = c(\"Output #1\", \"Output #2\", \"Output #3\")) +\n  \n  # Equation annotations\n  annotate(\"text\", x = 0.5, y = input_y + 1, label = \"1\", parse = TRUE) +\n  annotate(\"text\", x = 1.5, y = output_y - 1, label = \"2 \", parse = TRUE) +\n  \n  # Input stimulus and output response\n  annotate(\"text\", x = mean(input_x), y = input_y + 1.3, label = \"Input Stimulus\") +\n  annotate(\"text\", x = mean(output_x), y = output_y - 1.3, label = \"Output Response\") +\n  \n  # Coordinate limits and axis labels\n  coord_cartesian(xlim = c(0, 4), ylim = c(-1, 5)) +\n  labs(x = \"\", y = \"\") +\n  theme_void()\n\n# Show the plot\nprint(p)\n\n\n\n\n\n\n\nAlt ggplot 2\n\nCodelibrary(ggplot2)\nlibrary(ggrepel)\n\nneural_network_plot &lt;- function(layers, layer_labels = NULL, node_labels = c('x', 'y')) {\ndata &lt;- expand.grid(layer = seq_along(layers), node = 1:max(layers))\ndata &lt;- data[data$node &lt;= layers[data$layer], ]\n\nlinks &lt;- data.frame()\nfor (i in 1:(length(layers) - 1)) {\nstart &lt;- subset(data, layer == i)\nend &lt;- subset(data, layer == i + 1)\nlinks &lt;- rbind(links, expand.grid(from = start$node, to = end$node, from_layer = start$layer, to_layer = end$layer))\n}\n\np &lt;- ggplot() +\ngeom_segment(data = links, aes(x = from_layer, xend = to_layer, y = from, yend = to), color = 'grey') +\ngeom_point(data = data, aes(x = layer, y = node), size = 5, color = 'orange') +\ntheme_minimal() +\ntheme(axis.text = element_blank(),\naxis.ticks = element_blank(),\npanel.grid = element_blank(),\naxis.title = element_blank())\n\nif (!is.null(layer_labels)) {\ndata$layer_label &lt;- layer_labels[data$layer]\np &lt;- p + geom_text_repel(data = data, aes(x = layer, y = max(layers) + 1, label = layer_label), size = 5, nudge_y = 1)\n}\n\nif (!is.null(node_labels)) {\ndata$node_label &lt;- ifelse(data$layer == 1, paste0(node_labels[1], '', data$node),\nifelse(data$layer == length(layers), paste0(node_labels[2], '', data$node), ''))\np &lt;- p + geom_text_repel(data = data, aes(x = layer, y = node, label = node_label), size = 3)\n}\n\nreturn(p)\n}\n\n#Example usage\nlayers &lt;- c(8, 5, 3, 5, 8)\nlayer_labels &lt;- c('Input Layer', '', 'Latent\\nRepresentation', '', 'Output Layer')\nneural_network_plot(layers, layer_labels)\n\n\n\n\n\n\n\nAlt ggplot 3\n\nCodelibrary(ggplot2)\n\ndata &lt;- data.frame(\nx = c(1, 2, 2, 3, 4, 4, 1, 2, 3, 4),\ny = c(0, 1, -1, 0, 0, 0, 0, 0, 0, 0),\nlabel = c(\"x_1\", \"w_1\", \"w_2\", \"Σ\", \"f\", \"y\", \"x_2\", \"w_3\", \"b\", \"\"),\nshape = c(\"circle\", \"square\", \"square\", \"circle\", \"square\", \"square\", \"circle\", \"square\", \"square\", \"square\"),\ntext_y = c(0.15, 0.15, -0.15, 0, 0.3, 0.3, -0.15, -0.3, 0.15, 0)\n)\n\ndata$shape &lt;- factor(data$shape, levels = c(\"circle\", \"square\"))\n\nggplot(data, aes(x = x, y = y)) +\ngeom_point(aes(shape = shape), size = 8) +\ngeom_text(aes(label = label, y = y + text_y), size = 5) +\nscale_shape_manual(values = c(\"circle\" = 19, \"square\" = 15)) +\ngeom_segment(aes(x = 2, xend = 3, y = 1, yend = 0.2), arrow = arrow(type = \"closed\", length = unit(0.2, \"inches\"))) +\ngeom_segment(aes(x = 2, xend = 3, y = -1, yend = -0.2), arrow = arrow(type = \"closed\", length = unit(0.2, \"inches\"))) +\ngeom_segment(aes(x = 3, xend = 2, y = 0.2, yend = 1), arrow = arrow(type = \"closed\", length = unit(0.2, \"inches\"))) +\ngeom_segment(aes(x = 3, xend = 2, y = -0.2, yend = -1), arrow = arrow(type = \"closed\", length = unit(0.2, \"inches\"))) +\ngeom_segment(aes(x = 3.5, xend = 4.5, y = 0, yend = 0)) +\ngeom_segment(aes(x = 4.5, xend = 5.5, y = 0, yend = 0)) +\nannotate(\"text\", x = 4, y = 0.5, label = \"Activation\\nFunction\", hjust = 0.5) +\nannotate(\"text\", x = 5, y = 0, label = \"Output\", hjust = 0.5) +\nannotate(\"text\", x = 3, y = 1.1, label = \"Bias\\nb\", hjust = 0.5) +\ngeom_rect(aes(xmin = 0.5, xmax = 1.5, ymin = -1.5, ymax = 1.5), color = \"black\", linetype = \"dashed\", fill = NA) +\nannotate(\"text\", x = 0.3, y = 0, label = \"Inputs\", angle = 90) +\ntheme_void() +\nxlim(0, 6) +\ntheme(legend.position = \"none\")\n\n\n\n\n\n\nCodedata &lt;- data.frame(\n    x = c(2, 3, 3, 4, 5, 5, 2, 3, 4, 5),\n    y = c(0, 1, -1, 0, 0, 0, 0, 0, 0, 0),\n    label = c(\"X\", \"w_{ji}\", \"(ai)\", \"(sum)\", \"O_j(X)\", \"m(X)\", \"X_i\", \"(e^{-gamma * (X-X[i])^2})\", \"(e^{-gamma * (Z-Y[j])^2})\", \"f_j(Z)\"),\n    shape = c(\"circle\", \"square\", \"circle\", \"circle\", \"circle\", \"circle\", \"circle\", \"circle\", \"circle\", \"circle\"),\n    text_y = c(0.15, 0.15, -0.15, 0, 0.3, 0.3, -0.15, -0.3, 0.15, 0)\n)\n\ndata$shape &lt;- factor(data$shape, levels = c(\"circle\", \"square\"))\n\nggplot(data, aes(x = x, y = y)) +\n    geom_point(aes(shape = shape), size = 8) +\n    geom_text(aes(label = label, y = y + text_y), size = 4) +\n    scale_shape_manual(values = c(\"circle\" = 19, \"square\" = 15)) +\n    geom_segment(aes(x = 3, xend = 4, y = 1, yend = 0.2), arrow = arrow(type = \"closed\", length = unit(0.2, \"inches\"))) +\n    geom_segment(aes(x = 3, xend = 4, y = -1, yend = -0.2), arrow = arrow(type = \"closed\", length = unit(0.2, \"inches\"))) +\n    geom_segment(aes(x = 4.5, xend = 5.5, y = 0, yend = 0)) +\n    annotate(\"text\", x = 5, y = 0.5, label = \"Mean Output\", hjust = 0.5) +\n    annotate(\"text\", x = 4, y = 1.1, label = \"Normalized Input\\nActivation\", hjust = 0.5) +\n    annotate(\"text\", x = 4, y = -1.1, label = \"Feedback\\nActivation\", hjust = 0.5) +\n    geom_rect(aes(xmin = 1.5, xmax = 2.5, ymin = -1.5, ymax = 1.5), color = \"black\", linetype = \"dashed\", fill = NA) +\n    annotate(\"text\", x = 1.3, y = 0, label = \"Input\\nStimulus\", angle = 90) +\n    annotate(\"text\", x = 3.5, y = -2, label = \"Associative Learning Model - Activation and Learning\", size = 5, hjust = 0.5) +\n    theme_void() +\n    xlim(0, 7) +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\nCodedata &lt;- data.frame(\n    x = c(rep(2, 3), rep(4, 2), rep(6, 3)),\n    y = c(-1, 0, 1, 0, 0, -1, 0, 1),\n    label = c(\"e^{-γ(X-X_i)^2}\", \"Σ\", \"e^{-γ(Z-Y_j)^2}\", \"w_{ji}\", \"a_i(X)\", \"w_{ji}(t+1)\", \"O_j(X)\", \"Y_j\"),\n    shape = c(\"circle\", \"circle\", \"circle\", \"square\", \"square\", \"circle\", \"circle\", \"circle\"),\n    text_y = c(0.15, 0.15, 0.15, 0, 0, 0.15, 0.15, 0.15)\n)\n\ndata$shape &lt;- factor(data$shape, levels = c(\"circle\", \"square\"))\n\nggplot(data, aes(x = x, y = y)) +\n    geom_point(aes(shape = shape), size = 8) +\n    geom_text(aes(label = label, y = y + text_y), size = 5) +\n    scale_shape_manual(values = c(\"circle\" = 19, \"square\" = 15)) +\n    geom_segment(aes(x = 2, xend = 4, y = 1, yend = 0.2), arrow = arrow(type = \"closed\", length = unit(0.2, \"inches\"))) +\n    geom_segment(aes(x = 2, xend = 4, y = -1, yend = -0.2), arrow = arrow(type = \"closed\", length = unit(0.2, \"inches\"))) +\n    geom_segment(aes(x = 4, xend = 6, y = 0, yend = 1), arrow = arrow(type = \"closed\", length = unit(0.2, \"inches\"))) +\n    geom_segment(aes(x = 4, xend = 6, y = 0, yend = -1), arrow = arrow(type = \"closed\", length = unit(0.2, \"inches\"))) +\n    annotate(\"text\", x = 3, y = 1.5, label = \"Input Layer\\nGaussian Activation\\na_i(X)=e^{-γ(X-X_i)^2}\", hjust = 0.5) +\n    annotate(\"text\", x = 5, y = 1.5, label = \"Output Layer\\nO_j(X)=Σ w_{ji} a_i(X)\\nm(X)=Σ Y_j P[Y_j | X]\", hjust = 0.5) +\n    annotate(\"text\", x = 5, y = -1.5, label = \"Learning\\nw_{ji}(t+1)=w_{ji}(t)+α{f_j[Z(t)]-O_j[X(t)]}a_i[X(t)]\\nf_j(Z)=e^{-γ(Z-Y_j)^2}\", hjust = 0.5) +\n    theme_void() +\n    xlim(0, 8) +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\nCode# Load the required libraries\nlibrary(ggplot2)\nlibrary(ggpp)\nlibrary(tidyverse)\nlibrary(patchwork)\n\n# Create the Gaussian curve plots for each input node\ninput_node_1 &lt;- ggplot(data.frame(x = seq(-3, 3, length.out = 100)), aes(x)) +\n  stat_function(fun = dnorm, args = list(mean = 1, sd = .4)) +\n  theme_void() +\n  theme(plot.margin = margin(0, 0, 0, 0))\n\ninput_node_2 &lt;- ggplot(data.frame(x = seq(-3, 3, length.out = 100)), aes(x)) +\n  stat_function(fun = dnorm, args = list(mean = 2, sd = .4)) +\n  theme_void() +\n  theme(plot.margin = margin(0, 0, 0, 0))\n\ninput_node_3 &lt;- ggplot(data.frame(x = seq(-3, 3, length.out = 100)), aes(x)) +\n  stat_function(fun = dnorm, args = list(mean = 3, sd = .4)) +\n  theme_void() +\n  theme(plot.margin = margin(0, 0, 0, 0))\n\n# Create the main plot\nmain_plot &lt;- ggplot() +\n  theme_void() +\n  theme(plot.margin = margin(0, 0, 0, 0)) +\n  annotate(\"plot_npc\", npcx = 0.2, npcy = 0.8, label = input_node_1) +\n  annotate(\"plot_npc\", npcx = 0.5, npcy = 0.8, label = input_node_2) +\n  annotate(\"plot_npc\", npcx = 0.8, npcy = 0.8, label = input_node_3) +\n  annotate(\"text\", x = 0.2, y = 0.7, label = \"Input Node 1\") +\n  annotate(\"text\", x = 0.5, y = 0.7, label = \"Input Node 2\") +\n  annotate(\"text\", x = 0.8, y = 0.7, label = \"Input Node 3\") +\n  annotate(\"text\", x = 0.5, y = 0.6, label = \"Input Layer\", fontface = \"bold\") +\n  annotate(\"text\", x = 0.5, y = 0.3, label = \"Output Layer\", fontface = \"bold\") +\n  annotate(\"text\", x = 0.5, y = 0.1, label = \"ALM + EXAM Response\", fontface = \"bold\")\n\n# Print the main plot\nprint(main_plot)\n\n\n\n\n\n# Create the Gaussian curve plots for each input node\ninput_node_1 &lt;- ggplot(data.frame(x = seq(-3, 3, length.out = 100)), aes(x)) +\n  stat_function(fun = dnorm, args = list(mean = 0, sd = 1)) +\n  theme_void() +\n  theme(plot.margin = margin(0, 0, 0, 0))\n\ninput_node_2 &lt;- ggplot(data.frame(x = seq(-3, 3, length.out = 100)), aes(x)) +\n  stat_function(fun = dnorm, args = list(mean = 2.2, sd = 1)) +\n  theme_void() +\n  theme(plot.margin = margin(0, 0, 0, 0))\n\ninput_node_3 &lt;- ggplot(data.frame(x = seq(-3, 3, length.out = 100)), aes(x)) +\n  stat_function(fun = dnorm, args = list(mean = 4.3, sd = .1)) +\n  theme_void() +\n  theme(plot.margin = margin(0, 0, 0, 0))\n\n# Create the main plot\nmain_plot &lt;- ggplot() +\n  theme_void() +\n  theme(plot.margin = margin(0, 0, 0, 0)) +\n  annotate(\"plot_npc\", npcx = 0.2, npcy = 0.8, label = input_node_1, width = 0.1, height = 0.1) +\n  annotate(\"plot_npc\", npcx = 0.5, npcy = 0.8, label = input_node_2, width = 0.1, height = 0.1) +\n  annotate(\"plot_npc\", npcx = 0.8, npcy = 0.8, label = input_node_3, width = 0.1, height = 0.1) +\n  annotate(\"text\", x = 0.2, y = 0.9, label = \"Input Node 1\") +\n  annotate(\"text\", x = 0.5, y = 0.9, label = \"Input Node 2\") +\n  annotate(\"text\", x = 0.8, y = 0.9, label = \"Input Node 3\") +\n  annotate(\"text\", x = 0.5, y = 0.6, label = \"Input Layer\", fontface = \"bold\") +\n  annotate(\"rect\", xmin = 0.1, xmax = 0.3, ymin = 0.4, ymax = 0.5, fill = \"grey80\") +\n  annotate(\"rect\", xmin = 0.4, xmax = 0.6, ymin = 0.4, ymax = 0.5, fill = \"grey80\") +\n  annotate(\"rect\", xmin = 0.7, xmax = 0.9, ymin = 0.4, ymax = 0.5, fill = \"grey80\") +\n  annotate(\"text\", x = 0.5, y = 0.3, label = \"Output Layer\", fontface = \"bold\") +\n  annotate(\"text\", x = 0.5, y = 0.1, label = \"ALM + EXAM Response\", fontface =\"bold\")\nprint(main_plot)\n\n\n# Create the Gaussian curve plots for each input node\ninput_node_1 &lt;- ggplot(data.frame(x = seq(-3, 3, length.out = 100)), aes(x)) +\n  stat_function(fun = dnorm, args = list(mean = 0, sd = .41)) +\n  theme_void() +\n  theme(plot.margin = margin(0, 0, 0, 0)) +\n  ggtitle(\"Input Node 1\")\n\ninput_node_2 &lt;- ggplot(data.frame(x = seq(-3, 3, length.out = 100)), aes(x)) +\n  stat_function(fun = dnorm, args = list(mean = 2, sd = .41)) +\n  theme_void() +\n  theme(plot.margin = margin(0, 0, 0, 0)) +\n  ggtitle(\"Input Node 2\")\n\ninput_node_3 &lt;- ggplot(data.frame(x = seq(-3, 3, length.out = 100)), aes(x)) +\n  stat_function(fun = dnorm, args = list(mean = 3, sd = .41)) +\n  theme_void() +\n  theme(plot.margin = margin(0, 0, 0, 0)) +\n  ggtitle(\"Input Node 3\")\n\n# Create the output nodes\noutput_node_1 &lt;- ggplot() +\n  theme_void() +\n  theme(plot.margin = margin(0, 0, 0, 0)) +\n  annotate(\"rect\", xmin = -1, xmax = 1, ymin = -1, ymax = 1, fill = \"blue\") +\n  ggtitle(\"Output Node 1\")\n\noutput_node_2 &lt;- ggplot() +\n  theme_void() +\n  theme(plot.margin = margin(0, 0, 0, 0)) +\n  annotate(\"rect\", xmin = -1, xmax = 1, ymin = -1, ymax = 1, fill = \"blue\") +\n  ggtitle(\"Output Node 2\")\n\n# Combine the input and output nodes using patchwork\ninput_layer &lt;- input_node_1 + input_node_2 + input_node_3\noutput_layer &lt;- output_node_1 + output_node_2\n\n# Create the connection matrix\nconnection_matrix &lt;- ggplot() +\n  theme_void() +\n  theme(plot.margin = margin(0, 0, 0, 0)) +\n  annotate(\"segment\", x = 0.2, xend = 0.8, y = 0.8, yend = 0.2, arrow = arrow()) +\n  annotate(\"segment\", x = 0.5, xend = 0.8, y = 0.8, yend = 0.2, arrow = arrow()) +\n  annotate(\"segment\", x = 0.8, xend = 0.8, y = 0.8, yend = 0.2, arrow = arrow())\n\n# Combine the input layer, connection matrix, and output layer\nmain_plot &lt;- input_layer / connection_matrix / output_layer\n\n# Print the main plot\nprint(main_plot)\n\n\n\n\n\n\n# Function to create an input node\ncreate_input_node &lt;- function(mean, position) {\n  ggplot(data.frame(x = seq(-3, 3, length.out = 100)), aes(x)) +\n    stat_function(fun = dnorm, args = list(mean = mean, sd = .3)) +\n    theme_void() +\n    theme(plot.margin = margin(0, 0, 0, 0)) +\n    coord_cartesian(xlim = c(0, 3), ylim = c(0, 0.5)) + coord_flip()+\n    labs(title = paste(\"Input Node\", position)) +\n    theme(plot.title = element_text(hjust = 0.5))\n}\n\n# Function to create an output node\ncreate_output_node &lt;- function(position) {\n  ggplot() +\n    theme_void() +\n    theme(plot.margin = margin(0, 0, 0, 0)) +\n    annotate(\"rect\", xmin = -1, xmax = 1, ymin = -1, ymax = 1, fill = \"grey80\") +\n    labs(title = paste(\"Output Node\", position)) +\n    theme(plot.title = element_text(hjust = 0.5))\n}\n\ncreate_input_layer &lt;- function(n) {\n  input_plots &lt;- map(1:n, ~create_gaussian_plot(.x))\n  input_layer &lt;- wrap_plots(input_plots, ncol = 1) + coord_flip()\n  return(input_layer)\n}\n\n\n\n# Create the input nodes\ninput_nodes &lt;- map(1:3, ~create_input_node(.x, .x))\n\n# Create the output nodes\noutput_nodes &lt;- map(1:4, ~create_output_node(.x))\n\n## Create the connection matrix\nconnection_matrix &lt;- ggplot() +\n  theme_void() +\n  theme(plot.margin = margin(0, 0, 0, 0)) +\n  annotate(\"segment\", x = 1, xend = 2, y = rep(1:3, each = 4), yend = rep(1:4, times = 3), arrow = arrow())\n# Combine the plots\ninput_layer &lt;- wrap_plots(input_nodes,byrow=FALSE,ncol=1)\noutput_layer &lt;- wrap_plots(output_nodes, ncol = 1)\nmain_plot &lt;- input_layer + connection_matrix + output_layer + plot_layout(ncol = 3)\n\n# Print the main plot\nprint(main_plot)\n\n\n\n\n\ncombined_plot &lt;- input_layer + connection_matrix + output_layer +\n  plot_layout(ncol = 3)\n\nprint(combined_plot)\n\n\n\nprint(input_layer)\n\n\n\nCode# Load the required libraries\nlibrary(ggplot2)\nlibrary(ggpp)\nlibrary(patchwork)\nlibrary(tidyverse)\n\n# Function to create the input layer\ncreate_input_layer &lt;- function(n_nodes, stimulus = 0, gamma = 5) {\n  # Create a data frame with the x values and node means\n  df &lt;- expand.grid(x = seq(-3, 3, length.out = 100),\n                    mean = seq(-2, 1.5, length.out = n_nodes)) %&gt;% \n    mutate(noisyMean=map(mean,~dnorm(.x,mean,sd=.5)))\n  \n  df &lt;- df %&gt;%\n    mutate(distance = abs(x - stimulus),\n           noise = rnorm(n(), sd = 0.05),\n           max_activation = exp(-gamma * distance^2) + noise,\n           y = max_activation * exp(-gamma * (x - mean)^2))\n  \n  # Create the plot\n  ggplot(df, aes(x, y, group = mean)) +\n    geom_line() +\n    geom_smooth()+\n    coord_cartesian(xlim = c(-2, 2), ylim = c(0, 1)) +\n    labs(title = \"Input Layer\") +\n    theme(plot.title = element_text(hjust = 0.5))\n}\n\n# Function to create an output node\ncreate_output_node &lt;- function(position) {\n  ggplot() +\n    theme_void() +\n    theme(plot.margin = margin(0, 0, 0, 0)) +\n    annotate(\"rect\", xmin = -1, xmax = 1, ymin = -1, ymax = 1, fill = \"grey80\") +\n    labs(title = paste(\"Output Node\", position)) +\n    theme(plot.title = element_text(hjust = 0.5))\n}\n\n# Create the input layer\ninput_layer &lt;- create_input_layer(3)\n\n# Create the output nodes\noutput_nodes &lt;- map(1:4, ~create_output_node(.x))\n\n# Create the connection matrix\nconnection_matrix &lt;- ggplot() +\n  theme_void() +\n  theme(plot.margin = margin(0, 0, 0, 0)) +\n  annotate(\"segment\", x = 1, xend = 2, y = 1:3, yend = rep(1:4, each = 3), arrow = arrow())\n\n# Combine the plots\noutput_layer &lt;- wrap_plots(output_nodes, ncol = 1)\nmain_plot &lt;- input_layer + connection_matrix + output_layer + plot_layout(ncol = 3)\n\n# Print the main plot\nprint(main_plot)\n\n\n\nCode# Load the visNetwork package\nlibrary(visNetwork)\n\n# Define the nodes\nnodes &lt;- data.frame(\n  id = c(\"InputLayer\", \"I1\", \"I2\", \"I3\", \"OutputLayer\", \"O1\", \"O2\", \"O3\", \"O4\", \"ALM\", \"EXAM\"),\n  label = c(\"Input Layer\", \"Input Node 1\", \"Input Node 2\", \"Input Node 3\", \"Output Layer\", \"Output Node 1\", \"Output Node 2\", \"Output Node 3\", \"Output Node 4\", \"ALM Response\", \"EXAM Response\"),\n  shape = c(\"box\", \"image\", \"image\", \"image\", \"box\", \"circle\", \"circle\", \"circle\", \"circle\", \"box\", \"box\"),\n  image = c(NA, \"gaussian_curve_input_node_1.png\", \"gaussian_curve_input_node_2.png\", \"gaussian_curve_input_node_3.png\", NA, NA, NA, NA, NA, NA, NA)\n)\n\n# Define the edges\nedges &lt;- data.frame(\n  from = c(\"InputLayer\", \"I1\", \"I1\", \"I1\", \"I1\", \"I2\", \"I2\", \"I2\", \"I2\", \"I3\", \"I3\", \"I3\", \"I3\", \"OutputLayer\", \"OutputLayer\", \"ALM\", \"EXAM\"),\n  to = c(\"I1\", \"O1\", \"O2\", \"O3\", \"O4\", \"O1\", \"O2\", \"O3\", \"O4\", \"O1\", \"O2\", \"O3\", \"O4\", \"ALM\", \"EXAM\", \"EXAM\", \"ALM\"),\n  label = c(\"\", \"w1\", \"w2\", \"w3\", \"w4\", \"w5\", \"w6\", \"w7\", \"w8\", \"w9\", \"w10\", \"w11\", \"w12\", \"\", \"\", \"Pure ALM Model\", \"ALM with EXAM Response Component\")\n)\n\n# Create the network diagram\nvisNetwork(nodes, edges, width = \"100%\") %&gt;%\n  visNodes(shapeProperties = list(useBorderWithImage = TRUE)) %&gt;%\n  visLayout(randomSeed = 2)\n\n\n\n\n\n# Define the nodes\nnodes &lt;- data.frame(\n  id = c(\"InputLayer\", \"I1\", \"I2\", \"I3\", \"OutputLayer\", \"O1\", \"O2\", \"O3\", \"O4\", \"ALM\", \"EXAM\"),\n  label = c(\"Input Layer\", \"&lt;img src='gaussian_curve_input_node_1.png' /&gt;\", \"&lt;img src='gaussian_curve_input_node_2.png' /&gt;\", \"&lt;img src='gaussian_curve_input_node_3.png' /&gt;\", \"Output Layer\", \"Output Node 1\", \"Output Node 2\", \"Output Node 3\", \"Output Node 4\", \"ALM Response\", \"EXAM Response\"),\n  shape = c(\"box\", \"circle\", \"circle\", \"circle\", \"box\", \"circle\", \"circle\", \"circle\", \"circle\", \"box\", \"box\")\n)\n\n# Define the edges\nedges &lt;- data.frame(\n  from = c(\"InputLayer\", \"I1\", \"I1\", \"I1\", \"I1\", \"I2\", \"I2\", \"I2\", \"I2\", \"I3\", \"I3\", \"I3\", \"I3\", \"OutputLayer\", \"OutputLayer\", \"ALM\", \"EXAM\"),\n  to = c(\"I1\", \"O1\", \"O2\", \"O3\", \"O4\", \"O1\", \"O2\", \"O3\", \"O4\", \"O1\", \"O2\", \"O3\", \"O4\", \"ALM\", \"EXAM\", \"EXAM\", \"ALM\"),\n  label = c(NA, \"w1\", \"w2\", \"w3\", \"w4\", \"w5\", \"w6\", \"w7\", \"w8\", \"w9\", \"w10\", \"w11\", \"w12\", NA, NA, \"Pure ALM Model\", \"ALM with EXAM Response Component\")\n)\n\n# Create the network diagram\nvisNetwork(nodes, edges, width = \"100%\") %&gt;%\n  visNodes(shapeProperties = list(useBorderWithImage = TRUE)) %&gt;%\n  visLayout(randomSeed = 2)\n\n\n\nCode# Load the DiagrammeR package\nlibrary(DiagrammeR)\n# Define the graph\ngrViz(\"\n  digraph ALM_EXAM {\n\n    # Graph attributes\n    graph [overlap = true, fontsize = 10]\n\n    # Node definitions\n    node [shape = box, fontname = Helvetica]\n    InputLayer [label = 'Input Layer']\n    OutputLayer [label = 'Output Layer']\n    ALM [label = 'ALM Response']\n    EXAM [label = 'EXAM Response']\n\n    node [shape = circle, fixedsize = true, width = 0.9]\n    I1 [label = 'Input Node 1']\n    I2 [label = 'Input Node 2']\n    I3 [label = 'Input Node 3']\n    O1 [label = 'Output Node 1']\n    O2 [label = 'Output Node 2']\n    O3 [label = 'Output Node 3']\n    O4 [label = 'Output Node 4']\n\n    # Edge definitions\n    InputLayer -&gt; I1\n    InputLayer -&gt; I2\n    InputLayer -&gt; I3\n    I1 -&gt; O1 [label = 'w1']\n    I1 -&gt; O2 [label = 'w2']\n    I1 -&gt; O3 [label = 'w3']\n    I1 -&gt; O4 [label = 'w4']\n    I2 -&gt; O1 [label = 'w5']\n    I2 -&gt; O2 [label = 'w6']\n    I2 -&gt; O3 [label = 'w7']\n    I2 -&gt; O4 [label = 'w8']\n    I3 -&gt; O1 [label = 'w9']\n    I3 -&gt; O2 [label = 'w10']\n    I3 -&gt; O3 [label = 'w11']\n    I3 -&gt; O4 [label = 'w12']\n    OutputLayer -&gt; O1\n    OutputLayer -&gt; O2\n    OutputLayer -&gt; O3\n    OutputLayer -&gt; O4\n    OutputLayer -&gt; ALM\n    OutputLayer -&gt; EXAM\n    ALM -&gt; EXAM [label = 'Pure ALM Model']\n    EXAM -&gt; ALM [label = 'ALM with EXAM Response Component']\n  }\n\")\n\n\n\n\n\n\nCode# Load the required packages\nlibrary(ggplot2)\nlibrary(png)\n\n# Define the Gaussian function\ngaussian &lt;- function(x, mean, sd) {\n  1/(sd*sqrt(2*pi)) * exp(-1/2 * ((x - mean)/sd)^2)\n}\n\n# Define the central values for the input nodes\ncentral_values &lt;- c(1, 2, 3)\n\n# Define the input stimulus value\ninput_stimulus &lt;- 2\n\n# Generate a Gaussian curve image for each input node\nfor (i in seq_along(central_values)) {\n  # Define the mean and standard deviation for the Gaussian curve\n  mean &lt;- central_values[i]\n  sd &lt;- 1\n  # Generate the x values\n  x &lt;- seq(mean - 3*sd, mean + 3*sd, length.out = 100)\n  # Generate the y values\n  y &lt;- gaussian(x, mean, sd)\n  # Create the plot\n  p &lt;- ggplot(data.frame(x, y), aes(x, y)) +\n    geom_line() +\n    theme_minimal() +\n    labs(x = \"X\", y = \"Activation\", title = paste(\"Input Node\", i))\n  # Save the plot as a PNG image\n  ggsave(paste0(\"gaussian_curve_input_node_\", i, \".png\"), plot = p, width = 4, height = 3)\n}\n\n\n\nCodegrViz(\"digraph causal {\n                        # Nodes\n                        node [imagescale=true,shape = reactangle, fontname = Arial, style = filled]\n                        iv   [label = 'TRT', fillcolor = '#7FC97F']\n                        me   [label = 'Mediator', shape = ellipse]\n                        dv   [label = 'DLQI', fillcolor = '#7FC97F']\n                        \n                        # Edges\n                        edge [color = black, arrowhead = normal]\n                        rankdir = LR\n                        iv -&gt; me\n                        iv -&gt; dv [label = 'DIRECT', fontcolor = '#7FC97F', color = '#7FC97F']\n                        me -&gt; dv\n                        # Graph\n                        graph [overlap = true, fontsize = 10]\n                      }\")\n\n\ngrViz(\"digraph causal {\n                        # Nodes\n                        node [shape = reactangle, fontname = Arial, style = filled]\n                        iv   [image='gaussian_curve_input_node_1.png',label = '', fillcolor = '#7FC97F']\n                        me   [label = 'Mediator', shape = ellipse]\n                        dv   [label = 'DLQI', fillcolor = '#7FC97F']\n                        \n                        # Edges\n                        edge [color = black, arrowhead = normal]\n                        rankdir = LR\n                        iv -&gt; me\n                        iv -&gt; dv [label = 'DIRECT', fontcolor = '#7FC97F', color = '#7FC97F']\n                        me -&gt; dv\n                        # Graph\n                        graph [overlap = true, fontsize = 10]\n                      }\")\n\n\n\nCode# grViz('digraph structs {\n#     node [shape=plaintext];\n# \n#     struct1 [label=&lt;&lt;TABLE&gt;\n#       &lt;TR&gt;&lt;TD&gt;&lt;IMG SRC=\"gaussian_curve_input_node_1.png\"/&gt;&lt;/TD&gt;&lt;/TR&gt;\n#       &lt;TR&gt;&lt;TD&gt;caption&lt;/TD&gt;&lt;/TR&gt;\n#     &lt;/TABLE&gt;&gt;];\n# }')\n\n\nsvgDataUrl = \"data:image/svg+xml;base64,\"\ngrViz('\ndigraph {\n  node[imagescale=true, shape=circle, width=4, height=4,fontname=\"sans-serif\",penwidth=0]\n  a[label=&lt;&lt;FONT POINT-SIZE=\"10\"&gt;Transaction&lt;/FONT&gt;&lt;BR/&gt;&lt;FONT POINT-SIZE=\"36\"&gt;&lt;B&gt;TRNA&lt;/B&gt;&lt;/FONT&gt;&gt;,image=\"${svgDataUrl}\"]\n  b[label=&lt;&lt;FONT POINT-SIZE=\"10\"&gt;Transaction&lt;/FONT&gt;&lt;BR/&gt;&lt;FONT POINT-SIZE=\"18\"&gt;&lt;B&gt;TRNB&lt;/B&gt;&lt;/FONT&gt;&gt;,image=\"${svgDataUrl}\"]\n  c[label=&lt;&lt;FONT POINT-SIZE=\"10\"&gt;Transaction&lt;/FONT&gt;&lt;BR/&gt;&lt;FONT POINT-SIZE=\"24\"&gt;&lt;B&gt;TRNC&lt;/B&gt;&lt;/FONT&gt;&gt;,image=\"${svgDataUrl}\"]\n  a -&gt; b\n  a -&gt; c\n}')\n\ngrViz('digraph { a[image=\\\"gaussian_curve_input_node_1\\\"]; }\", {\n  images: [{ href: \"gaussian_curve_input_node_1.png\", width: \"400px\", height: \"300px\" }]\n}');\n\ngrViz('\ndigraph g{\n  node[imagescale=true, shape=circle, width=14, height=14,fontname=\"sans-serif\",penwidth=0]\n  I1[image=\"gaussian_curve_input_node_1.png\", label=\"\"];\n}')\n\ngrViz('digraph {\n    ratio=\"fill\";\n    size=\"10,10!\";\n    margin=\"0,0\";\n\n    node [shape=plain];\n    root [label=&lt;&lt;TABLE border=\"0\"&gt;&lt;TR&gt;&lt;TD&gt;&lt;IMG SRC=\"gaussian_curve_input_node_1\"/&gt;&lt;/TD&gt;&lt;/TR&gt;\n                                   &lt;TR&gt;&lt;TD&gt;text under&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;&gt;];\n}')\n\n\n\nCodegrViz(\"\n  digraph ALM_EXAM {\n\n    # Graph attributes\n    graph [overlap = true, fontsize = 10, rankdir = LR]\n\n    # Node definitions\n    node [shape = box, fontname = Helvetica]\n    InputLayer [label = 'Input Layer']\n    OutputLayer [label = 'Output Layer']\n    ALM [label = 'ALM Response']\n    EXAM [label = 'EXAM Response']\n\n    node [shape = none, label = '']\n    I1 [image = 'gaussian_curve_input_node_1.png', label='']\n    I2 [image = 'gaussian_curve_input_node_2.png', label='']\n    I3 [image = 'gaussian_curve_input_node_3.png', label='']\n\n    node [shape = circle, fixedsize = true, width = 0.9]\n    O1 [label = 'Output Node 1']\n    O2 [label = 'Output Node 2']\n    O3 [label = 'Output Node 3']\n    O4 [label = 'Output Node 4']\n\n    # Edge definitions\n    InputLayer -&gt; I1\n    InputLayer -&gt; I2\n    InputLayer -&gt; I3\n    I1 -&gt; O1 [label = 'w1']\n    I1 -&gt; O2 [label = 'w2']\n    I1 -&gt; O3 [label = 'w3']\n    I1 -&gt; O4 [label = 'w4']\n    I2 -&gt; O1 [label = 'w5']\n    I2 -&gt; O2 [label = 'w6']\n    I2 -&gt; O3 [label = 'w7']\n    I2 -&gt; O4 [label = 'w8']\n    I3 -&gt; O1 [label = 'w9']\n    I3 -&gt; O2 [label = 'w10']\n    I3 -&gt; O3 [label = 'w11']\n    I3 -&gt; O4 [label = 'w12']\n    OutputLayer -&gt; O1\n    OutputLayer -&gt; O2\n    OutputLayer -&gt; O3\n    OutputLayer -&gt; O4\n    OutputLayer -&gt; ALM\n    OutputLayer -&gt; EXAM\n    ALM -&gt; EXAM [label = 'Pure ALM Model']\n    EXAM -&gt; ALM [label = 'ALM with EXAM Response Component']\n  }\n\")\n\n\n\nCodeDiagrammeR::grViz(\"digraph {\n\ngraph [layout = dot, rankdir = LR]\n\n# define the global styles of the nodes. We can override these in box if we wish\nnode [shape = rectangle, style = filled, fillcolor = Linen]\n\ndata1 [label = 'Dataset 1', shape = folder, fillcolor = Beige]\ndata2 [label = 'Dataset 2', shape = folder, fillcolor = Beige]\nprocess [label =  'Process \\n Data']\nstatistical [label = 'Statistical \\n Analysis']\nresults [label= 'Results']\n\n# edge definitions with the node IDs\n{data1 data2}  -&gt; process -&gt; statistical -&gt; results\n}\")\n\n\n\n\n\n\n\n\n\n\ngraph LR\n  subgraph InputLayer\n    I1[\"Input Node 1\"]\n    I2[\"Input Node 2\"]\n    I3[\"Input Node 3\"]\n  end\n  subgraph OutputLayer\n    O1[\"Output Node 1\"]\n    O2[\"Output Node 2\"]\n    O3[\"Output Node 3\"]\n    O4[\"Output Node 4\"]\n  end\n  I1 --&gt;|\"w1\"| O1\n  I1 --&gt;|\"w2\"| O2\n  I1 --&gt;|\"w3\"| O3\n  I1 --&gt;|\"w4\"| O4\n  I2 --&gt;|\"w5\"| O1\n  I2 --&gt;|\"w6\"| O2\n  I2 --&gt;|\"w7\"| O3\n  I2 --&gt;|\"w8\"| O4\n  I3 --&gt;|\"w9\"| O1\n  I3 --&gt;|\"w10\"| O2\n  I3 --&gt;|\"w11\"| O3\n  I3 --&gt;|\"w12\"| O4\n  style InputLayer fill:#99cc99,stroke:#333,stroke-width:2px\n  style OutputLayer fill:#cc99cc,stroke:#333,stroke-width:2px\n  IS[\"Input Stimulus (X)\"] --&gt; InputLayer\n  InputLayer --&gt;|\"Gaussian Activation (a_i)\"| OutputLayer\n  OutputLayer --&gt; ALM[\"ALM Response (m(X))\"]\n  OutputLayer --&gt; EXAM[\"EXAM Response (E[Y | X_i])\"]\n  ALM --&gt;|\"Pure ALM Model\"| EXAM\n  EXAM --&gt;|\"ALM with EXAM Response Component\"| ALM\n  linkStyle 0 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 1 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 2 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 3 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 4 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 5 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 6 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 7 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 8 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 9 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 10 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 11 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 12 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 13 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 14 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 15 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 16 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 17 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 0 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 1 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 2 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 3 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 4 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 5 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 6 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 7 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 8 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 9 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 10 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 11 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 12 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 13 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 14 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 15 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 16 stroke:#2ecd71,stroke-width:2px;\n  linkStyle 17 stroke:#2ecd71,stroke-width:2px;",
    "crumbs": [
      "Misc",
      "Model Visualization"
    ]
  },
  {
    "objectID": "Misc/Visuals_Interactives/model_viz.html#p5-sketching",
    "href": "Misc/Visuals_Interactives/model_viz.html#p5-sketching",
    "title": "Model Visualization",
    "section": "P5 sketching",
    "text": "P5 sketching\n\nCodeP5 = require(\"p5\")\nfunction* createSketch(sketch) {\n  const element = DOM.element('div');\n  yield element;\n  const instance = new P5(sketch, element, true);\n  try {\n    while (true) {\n      yield element;\n    }\n  } finally {\n    instance.remove();\n  }\n}\ncreateSketch(s =&gt; {\n  \n    s.setup = function() {\n      s.createCanvas(746, 300);\n      s.textFont('Courgette');\n      s.textStyle(s.BOLD);\n      s.textAlign(s.CENTER, s.CENTER)\n\n      s.button = s.createButton('clear');\n      s.button.mousePressed(s.clearCanvas);\n        s.text('Click and drag to draw', s.width/2, s.height/10);\n\n    };\n    s.draw = function() {\n    if (s.mouseIsPressed) {\n    s.fill(0);\n    s.ellipse(s.mouseX, s.mouseY, 10, 10);\n    } else {\n   //s.fill(255);\n    }\n  // add text input\n\n    };\n\n  // add button to clear canvas\n  s.clearCanvas = function() {\n    s.clear();\n  };\n  // add text\n  // add slider\n  }\n)",
    "crumbs": [
      "Misc",
      "Model Visualization"
    ]
  },
  {
    "objectID": "Misc/Visuals_Interactives/ojs_explore.html",
    "href": "Misc/Visuals_Interactives/ojs_explore.html",
    "title": "OJS data exploration",
    "section": "",
    "text": "Codepacman::p_load(tidyverse,here)\n\nd &lt;- readRDS(here(\"data/dPrune-01-19-23.rds\"))\n\n# Prepare the data for analysis\ndtest &lt;- d %&gt;%\n    filter(expMode %in% c(\"test-Nf\", \"test-train-nf\")) %&gt;%\n    group_by(id, lowBound) %&gt;%\n    mutate(nBand = n(), band = bandInt, id = factor(id)) %&gt;%\n    group_by(id) %&gt;%\n    mutate(nd = n_distinct(lowBound))\ndtest &lt;- dtest %&gt;%\n    group_by(id, lowBound) %&gt;%\n    filter(nBand &gt;= 5 & nd == 6)\ndtest &lt;- dtest %&gt;%\n    group_by(id) %&gt;%\n    filter(!id %in% unique(dtest$id[dtest$nBand &lt; 5]))\n\ndtestAgg &lt;- dtest %&gt;%\n    group_by(id, condit, catOrder, feedbackType, vb, band, lowBound, highBound, input) %&gt;%\n    mutate(vxCapped = ifelse(vx &gt; 1600, 1600, vx)) %&gt;%\n    summarise(\n        vxMean = mean(vx), devMean = mean(dist), vxMed = median(vx), devMed = median(dist),\n        vxMeanCap = mean(vxCapped), .groups = \"keep\"\n    )\nds1 &lt;- d %&gt;%\n    filter(expMode %in% c(\"train\", \"train-Nf\", \"test-Nf\", \"test-train-nf\")) %&gt;%\n    filter(!id %in% unique(dtest$id[dtest$nBand &lt; 5]), vx&lt;1500) %&gt;%\n    select(id, condit, catOrder, feedbackType, expMode, trial, gt.train, vb, band, bandInt, lowBound, highBound, input, vx, dist, vxb)\n\n\nojs_define(dso=ds1)\n\n\n\nCodeimport { aq, op } from \"@uwdata/arquero\"\n\n//data = FileAttachment(\"palmer-penguins.csv\").csv({ typed: true })\n\n\n//ds1=transpose(ds1)\n\nds=transpose(dso)\n\nPlot.plot({\n  facet: {\n    data: ds,\n    x: \"condit\",\n    y: \"bandInt\",\n    marginRight: 80\n  },\n  marks: [\n    Plot.frame(),\n    Plot.rectY(ds, \n      Plot.binX(\n        {y: \"count\"}, \n        {x: \"vx\", thresholds: 50, fill: \"bandInt\"} // thresholds = number of bins\n      )\n    ),\n    Plot.tickX(ds, \n      Plot.groupZ(\n        {x: \"count\"}, \n        {x: \"vx\",\n         z: d =&gt; ds.condit+ ds.bandInt,\n         stroke: \"#333\",\n         strokeWidth: 2\n        }\n      )\n    )\n  ],\n    x: {label: \"Vx\", domain: [0, 1800],grid: true},\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodePlot.plot({\n  marks: [\n    Plot.line(ds, {\n      x: \"gt.train\",      // feature for the x channel\n      y: \"vx\",     // feature for the y channel\n      fill:\"condit\",\n      stroke: \"vb\",     \n    }),\n  ],\n  x: {label: \"Trial Number\"},\n  y: {label: \"Vx\", domain: [0, 1800],grid: true},\n  color: {legend: true, scheme: \"Turbo\",type: \"categorical\"},\n  width: 400,\n  height: 400\n});\n\n\n\n\n\n\n\nCodePlot.plot({\n  grid: true,\n  marks: [\n    Plot.rectY(ds, Plot.binX({y: \"count\"}, {x: \"vx\", fill: \"condit\", fy: \"condit\"})),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\nCodePlot.rectY(ds, Plot.binX({y: \"count\"}, {x: \"condit\", fill: \"condit\"})).plot()\n\n\n\n\n\n\n\nCodePlot.line(ds, {x: \"gt.train\", y: \"vx\",fill:\"condit\"}).plot({y: {grid: true}})\n\n\n\n\n\n\n\nCoded = aq.from(ds)\nd\n  .groupby(\"condit\", \"vb\", \"feedbackType\",\"expMode\",\"catOrder\")\n  .rollup({mean_vx: d =&gt; op.mean(d.vx)}, {mean_dist: d =&gt; op.mean(d.dist)})\n  .view(15)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodedt = aq.from(ds)\ndtAgg = dt\n  .filter(dt =&gt; dt.expMode === \"train\")\n  .groupby(\"condit\", \"vb\",\"gt.train\")\n  .rollup({mean_vx: dt =&gt; op.mean(dt.vx)}, {mean_dist: dt =&gt; op.mean(dt.dist)})\n\n\nPlot.line(dtAgg, {x: \"gt.train\", y: \"mean_vx\",fill:\"vb\"}).plot({y: {grid: true}})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodePlot.plot({ \n    grid: true, \n    marginRight: 60,\n    facet: {\n        data: dtAgg,\n        x: \"condit\",\n        y: \"vb\",\n        marginRight: 80\n    },\n    marks: [\n        Plot.frame(),\n        Plot.lineY(dtAgg, {\n            x: \"gt.train\", \n            y: \"mean_vx\",\n            fill:\"vb\"\n            })\n    ]\n})\n\n\n\n\n\n\n\nCodedtAgg\n  .view(25)"
  },
  {
    "objectID": "Misc/alm_table.html",
    "href": "Misc/alm_table.html",
    "title": "HTW Project",
    "section": "",
    "text": "text_tbl &lt;- data.frame(\n    'Step'=c(\"Input Activation\",\"Output Activation\",\"Output Probability\",\"Mean Output\",\"Feedback Activation\",\"Update Weights\",\"Extrapolation\",\"\"),\n    'Equation' = c(\"$a_i(X) = \\\\frac{e^{-c \\\\cdot (X-X_i)^2}}{ \\\\sum_{k=1}^Me^{-c \\\\cdot (X-X_i)^2}}$\", \n                   '$O_j(X) = \\\\sum_{k=1}^Mw_{ji} \\\\cdot a_i(X)$',\n                   '$P[Y_j | X] = \\\\frac{O_i(X)}{\\\\sum_{k=1}^Mo_k(X)}$',\n                   \"$m(x) = \\\\sum_{j=1}^LY_j \\\\cdot \\\\bigg[\\\\frac{O_j(X)}{\\\\sum_{k=1}^Lo_k(X)}\\\\bigg]$\",\n                   \"$f_j(Z)=e^{-c\\\\cdot(Z-Y_j)^2}$\",\n                   \"$w_{ji}(t+1)=w_{ji}(t)+\\\\alpha \\\\cdot {f_i(Z(t))-O_j(X(t))} \\\\cdot a_i(X(t))$\",\n                   \"$P[X_i|X] = \\\\frac{a_i(X)}{\\\\sum_{k=1}^Ma_k(X)}$\",\n                   \"$E[Y|X_i]=m(X_i) + \\\\bigg[\\\\frac{m(X_{i+1})-m(X_{i-1})}{X_{i+1} - X_{i-1}} \\\\bigg] \\\\cdot[X-X_i]$\"),\n    \n    'Description'= c(\n            \"Activation of each input node, $X_i$, is a function of the Gaussian similarity between the node value and stimulus X. \",\n            \"Activation of each Output unit $O_j$ is the weighted sum of the input activations and association weights\",\n            \"Each output node has associated response, $Y_j$. The probability of response $Y_j$ is determined by the ratio of output activations\",\n            \"The response to stimulus x is the weighted average of the response probabilities\",\n            \"After responding, feedback signal Z is presented, activating each output node via the Gaussian similarity to the ideal response  \",\n            \"Delta rule to update weights. Magnitude of weight changes controlled by learning rate parameter alpha.\",\n            \"Novel test stimulus X activates input nodes associated with trained stimuli\",\n            \"Slope value computed from nearest training instances and then added to the response associated with the nearest training instance,m(x)\")\n)\ntext_tbl$Step=cell_spec(text_tbl$Step,font_size=12)\ntext_tbl$Equation=cell_spec(text_tbl$Equation,font_size=18)\nalmTable=kable(text_tbl, 'html', \n  booktabs=T, escape = F, align='l',\n  caption = '&lt;span style = \"color:black;\"&gt;&lt;center&gt;&lt;strong&gt;Table 1: ALM & EXAM Equations&lt;/strong&gt;&lt;/center&gt;&lt;/span&gt;',\n  col.names=c(\"\",\"Equation\",\"Description\")) %&gt;%\n  kable_styling(position=\"left\",bootstrap_options = c(\"hover\")) %&gt;%\n  column_spec(1, bold = F,border_right=T) %&gt;%\n  column_spec(2, width = '10cm')%&gt;%\n  column_spec(3, width = '15cm') %&gt;%\n  pack_rows(\"ALM Activation & Response\",1,4,bold=FALSE,italic=TRUE) %&gt;%\n  pack_rows(\"ALM Learning\",5,6,bold=FALSE,italic=TRUE) %&gt;%\n  pack_rows(\"EXAM\",7,8,bold=FALSE,italic=TRUE)\n  #save_kable(file=\"almTable.html\",self_contained=T)\n#almTable\n\n\ncat(almTable)\n\n\n\n\nTable 1: ALM & EXAM Equations\n\n\n\n\n\n\n\nEquation\n\n\nDescription\n\n\n\n\n\nALM Activation & Response\n\n\n\n\nInput Activation\n\n\n\\(a_i(X) = \\frac{e^{-c \\cdot (X-X_i)^2}}{ \\sum_{k=1}^Me^{-c \\cdot (X-X_i)^2}}\\)\n\n\nActivation of each input node, \\(X_i\\), is a function of the Gaussian similarity between the node value and stimulus X.\n\n\n\n\nOutput Activation\n\n\n\\(O_j(X) = \\sum_{k=1}^Mw_{ji} \\cdot a_i(X)\\)\n\n\nActivation of each Output unit \\(O_j\\) is the weighted sum of the input activations and association weights\n\n\n\n\nOutput Probability\n\n\n\\(P[Y_j | X] = \\frac{O_i(X)}{\\sum_{k=1}^Mo_k(X)}\\)\n\n\nEach output node has associated response, \\(Y_j\\). The probability of response \\(Y_j\\) is determined by the ratio of output activations\n\n\n\n\nMean Output\n\n\n\\(m(x) = \\sum_{j=1}^LY_j \\cdot \\bigg[\\frac{O_j(X)}{\\sum_{k=1}^Lo_k(X)}\\bigg]\\)\n\n\nThe response to stimulus x is the weighted average of the response probabilities\n\n\n\n\nALM Learning\n\n\n\n\nFeedback Activation\n\n\n\\(f_j(Z)=e^{-c\\cdot(Z-Y_j)^2}\\)\n\n\nAfter responding, feedback signal Z is presented, activating each output node via the Gaussian similarity to the ideal response\n\n\n\n\nUpdate Weights\n\n\n\\(w_{ji}(t+1)=w_{ji}(t)+\\alpha \\cdot {f_i(Z(t))-O_j(X(t))} \\cdot a_i(X(t))\\)\n\n\nDelta rule to update weights. Magnitude of weight changes controlled by learning rate parameter alpha.\n\n\n\n\nEXAM\n\n\n\n\nExtrapolation\n\n\n\\(P[X_i|X] = \\frac{a_i(X)}{\\sum_{k=1}^Ma_k(X)}\\)\n\n\nNovel test stimulus X activates input nodes associated with trained stimuli\n\n\n\n\n\n\n\n\\(E[Y|X_i]=m(X_i) + \\bigg[\\frac{m(X_{i+1})-m(X_{i-1})}{X_{i+1} - X_{i-1}} \\bigg] \\cdot[X-X_i]\\)\n\n\nSlope value computed from nearest training instances and then added to the response associated with the nearest training instance,m(x)"
  },
  {
    "objectID": "Misc/bmm_table.html",
    "href": "Misc/bmm_table.html",
    "title": "HTW Project",
    "section": "",
    "text": "# Create the data frame for the table\ntable_data &lt;- data.frame(\n  Type = c(\n    rep(\"Population-Level Effects\", 4),\n    rep(\"Group-Level Effects\", 2),\n    \"Family Specific Parameters\"\n  ),\n  Parameter = c(\n    \"\\\\(\\\\beta_0\\\\)\", \"\\\\(\\\\beta_1\\\\)\", \"\\\\(\\\\beta_2\\\\)\", \"\\\\(\\\\beta_3\\\\)\",\n    \"\\\\(\\\\sigma_{\\\\text{Intercept}}\\\\)\", \"\\\\(\\\\sigma_{\\\\text{bandInt}}\\\\)\", \"\\\\(\\\\sigma_{\\\\text{Observation}}\\\\)\"\n  ),\n  Term = c(\n    \"(Intercept)\", \"conditVaried\", \"bandInt\", \"conditVaried:bandInt\",\n    \"sd__(Intercept)\", \"sd__bandInt\", \"sd__Observation\"\n  ),\n  Description = c(\n    \"Intercept representing the baseline deviation\", \"Effect of condition (Varied vs. Constant) on deviation\", \"Effect of target velocity band (bandInt) on deviation\", \"Interaction effect between training condition and target velocity band on deviation\",\n    \"Standard deviation for (Intercept)\", \"Standard deviation for bandInt\", \"Standard deviation for Gaussian Family\"\n  )\n) |&gt;   mutate(\n    Term = glue::glue(\"&lt;code&gt;{Term}&lt;/code&gt;\")\n  ) \n\n# Create the table\nkable_out &lt;- table_data %&gt;%\n  kbl(format = 'html', escape = FALSE, booktabs = TRUE, \n      #caption = '&lt;span style = \"color:black;\"&gt;&lt;center&gt;&lt;strong&gt;Table 1: General Model Structure Information&lt;/strong&gt;&lt;/center&gt;&lt;/span&gt;',\n      col.names = c(\"Type\", \"Parameter\", \"Term\", \"Description\")) %&gt;%\n  kable_styling(position=\"left\", bootstrap_options = c(\"hover\"), full_width = FALSE) %&gt;%\n  column_spec(1, bold = FALSE, border_right = TRUE) %&gt;%\n  column_spec(2, width = '4cm') %&gt;%\n  column_spec(3, width = '4cm') %&gt;%\n  row_spec(c(4, 7), extra_css = \"border-bottom: 2px solid black;\") %&gt;%\n  pack_rows(\"\", 1, 4, bold = FALSE, italic = TRUE) %&gt;%\n  pack_rows(\"\", 5, 6, bold = FALSE, italic = TRUE) %&gt;%\n  pack_rows(\"\", 7, 7, bold = FALSE, italic = TRUE)\n\nkable_out\n\n\nTable 1: Mixed model structure and coefficient descriptions\n\n\n\n\n\nType\nParameter\nTerm\nDescription\n\n\n\n\n\n\nPopulation-Level Effects\n\\(\\beta_0\\)\n(Intercept)\nIntercept representing the baseline deviation\n\n\nPopulation-Level Effects\n\\(\\beta_1\\)\nconditVaried\nEffect of condition (Varied vs. Constant) on deviation\n\n\nPopulation-Level Effects\n\\(\\beta_2\\)\nbandInt\nEffect of target velocity band (bandInt) on deviation\n\n\nPopulation-Level Effects\n\\(\\beta_3\\)\nconditVaried:bandInt\nInteraction effect between training condition and target velocity band on deviation\n\n\n\n\n\nGroup-Level Effects\n\\(\\sigma_{\\text{Intercept}}\\)\nsd__(Intercept)\nStandard deviation for (Intercept)\n\n\nGroup-Level Effects\n\\(\\sigma_{\\text{bandInt}}\\)\nsd__bandInt\nStandard deviation for bandInt\n\n\n\n\n\nFamily Specific Parameters\n\\(\\sigma_{\\text{Observation}}\\)\nsd__Observation\nStandard deviation for Gaussian Family"
  },
  {
    "objectID": "Misc/data_dictionary.html",
    "href": "Misc/data_dictionary.html",
    "title": "HTW Data Dictionary",
    "section": "",
    "text": "id - unique subject identifier condit - primary training manipulation, Constant vs. Varied. tOrder - order of blocks in no-feedback testing stage (extrapolation first or re-do train first) bandType - whether band was trained on (trained) or novel in test phase (extrapolation) expMode2 - Phase of Experiment - Train, Train-Nf, Test, Test-Fb gt.train - training trial number - running total vb - velocity band on current trial - Levels: 100-300 350-550 600-800 800-1000 1000-1200 1200-1400 bandInt - numeric value of lower bound of vb: 100, 350, 600, 800, 1000, 1200 vx - X velocity generated by subject on current trial dist - absolute distance from edge of target velocity band (0 if vx falls within band) sdist - signed distance from edge of target velocity band vy - y velocity generated by subject (not relevant to task) result - categorical result of throw in relation to target band - Levels: Over, Under, Hit vxCat - which velocity band the current trial throw falls into prev - Target velocity band on previous throw bandSeq - Previous Target Band and current Target Band, e.g. 800-&gt;1000 1000-&gt;1200 etc.\n\nCodepacman::p_load(tidyverse, lme4, emmeans, here, knitr, kableExtra,gt)\noptions(dplyr.summarise.inform = FALSE)\nd &lt;- readRDS(here(\"data/dPrune-07-27-23.rds\")) %&gt;% ungroup()\nd$stage &lt;- factor(d$stage, ordered = TRUE, levels = c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\"))\nd$tOrder &lt;- factor(d$tOrder, levels = c(\"testFirst\", \"trainFirst\"), labels = c(\"Test First\", \"Train First\"))\nd$bandOrder &lt;- factor(d$bandOrder, levels = c(\"orig\", \"rev\"), labels = c(\"Original\", \"Reverse\"))\nd$fb &lt;- factor(d$fb, levels = c(\"continuous\", \"ordinal\"), labels = c(\"Continuous\", \"Ordinal\"))\nd &lt;- d %&gt;%\n    mutate(id = as.factor(d$id), fullCond = as.factor(fullCond)) %&gt;%\n    relocate(bandOrder, .after = fb)\n\n\n\nCode# create table with number of unique ids per condition, use kable\nd %&gt;% select(fullCond,id) %&gt;% distinct() %&gt;% group_by(fullCond) %&gt;% summarise(n=n()) %&gt;% knitr::kable()\n\n\n\n\nfullCond\nn\n\n\n\nconstant.testFirst.orig.continuous\n52\n\n\nconstant.testFirst.orig.ordinal\n51\n\n\nconstant.testFirst.rev.continuous\n28\n\n\nconstant.testFirst.rev.ordinal\n31\n\n\nconstant.trainFirst.orig.continuous\n38\n\n\nconstant.trainFirst.rev.continuous\n27\n\n\nconstant.trainFirst.rev.ordinal\n28\n\n\nvaried.testFirst.orig.continuous\n39\n\n\nvaried.testFirst.orig.ordinal\n39\n\n\nvaried.testFirst.rev.continuous\n25\n\n\nvaried.testFirst.rev.ordinal\n28\n\n\nvaried.trainFirst.orig.continuous\n37\n\n\nvaried.trainFirst.rev.continuous\n30\n\n\nvaried.trainFirst.rev.ordinal\n18\n\n\n\n\n\nCodet1=d %&gt;% select(condit,fb,bandOrder,tOrder,id) %&gt;% distinct() %&gt;% \n  group_by(condit,fb,bandOrder,tOrder) %&gt;% summarise(n=n()) \nt1 %&gt;% kbl(col.names=c(\"Condition\",\"Feedback\",\"Band_Order\",\"Test Order\",\"N\"),escape=FALSE) \n\n\n\n\nCondition\nFeedback\nBand_Order\nTest Order\nN\n\n\n\nConstant\nNA\nNA\nTest First\n162\n\n\nConstant\nNA\nNA\nTrain First\n93\n\n\nVaried\nNA\nNA\nTest First\n131\n\n\nVaried\nNA\nNA\nTrain First\n85\n\n\n\n\n\nCodet1=d %&gt;% select(condit,fb,bandOrder,id) %&gt;% distinct() %&gt;% \n  group_by(condit,fb,bandOrder) %&gt;% summarise(n=n()) \nt1\n\n# A tibble: 2 × 4\n# Groups:   condit, fb [2]\n  condit   fb    bandOrder     n\n  &lt;fct&gt;    &lt;fct&gt; &lt;fct&gt;     &lt;int&gt;\n1 Constant &lt;NA&gt;  &lt;NA&gt;        255\n2 Varied   &lt;NA&gt;  &lt;NA&gt;        216\n\n\n\nCoded |&gt; group_by(id,condit) |&gt; \n  summarize(n=n()) |&gt; \n  mutate(n=fct_infreq(factor(n))) |&gt;\n  ggplot(aes(x=id,y=n)) + geom_col()\n\n\n\n\n\n\nCodesorted_bars &lt;- function(df, var) {\n  df |&gt; \n    mutate({{ var }} := fct_rev(fct_infreq({{ var }})))  |&gt;\n    ggplot(aes(y = {{ var }})) +\n    geom_bar()\n}\n\nconditional_bars &lt;- function(df, condition, var) {\n  df |&gt; \n    filter({{ condition }}) |&gt; \n    ggplot(aes(x = {{ var }})) + \n    geom_bar()\n}\n\nhistogram &lt;- function(df, var, binwidth) {\n  label &lt;- rlang::englue(\"A histogram of {{var}} with binwidth {binwidth}\")\n  \n  df |&gt; \n    ggplot(aes(x = {{ var }})) + \n    geom_histogram(binwidth = binwidth) + \n    labs(title = label)\n}\n# \n# sorted_bars(d |&gt; filter(id %in% 1:30),id) \n# \n# test |&gt; conditional_bars(id %in% 1:10, id)"
  },
  {
    "objectID": "Misc/data_dictionary.html#tibble1",
    "href": "Misc/data_dictionary.html#tibble1",
    "title": "HTW Data Dictionary",
    "section": "Tibble1",
    "text": "Tibble1\n\nCode# Create the tribble\ndata_tbl &lt;- tibble(\n  Variable_Name = c(\"condit\", \"fb\", \"bandOrder\", \"tOrder\", \"expMode\", \"trainStage\", \"expStage\", \"band\", \"vb\", \"lowBound\", \"feedback\", \"stage\"),\n  Variable_Levels = c(\"Constant, Varied\", \"Continuous, Ordinal\", \"Original, Reverse\", \"Test First, Train First\", \"train, train-Nf, test-Nf, test-train-nf, test-feedback\", \"Beginning, Middle, End, Test\", \"TrainStart, intTest1, TrainMid1, intTest2, TrainMid2, intTest3, TrainEnd, Test1, Test2, Test3\", \"1, 2, 3, 4, 5, 6\", \"100-300, 350-550, 600-800, 800-1000, 1000-1200, 1200-1400\", \"100, 350, 600, 800, 1000, 1200\", \"0, 1\", \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23\"),\n  Description = rep(\"Unknown\", 12)\n)\n\n# Print the tribble\ndata_tbl %&gt;% gt::gt()\n\n\n\n\n\n\nVariable_Name\nVariable_Levels\nDescription\n\n\n\ncondit\nConstant, Varied\nUnknown\n\n\nfb\nContinuous, Ordinal\nUnknown\n\n\nbandOrder\nOriginal, Reverse\nUnknown\n\n\ntOrder\nTest First, Train First\nUnknown\n\n\nexpMode\ntrain, train-Nf, test-Nf, test-train-nf, test-feedback\nUnknown\n\n\ntrainStage\nBeginning, Middle, End, Test\nUnknown\n\n\nexpStage\nTrainStart, intTest1, TrainMid1, intTest2, TrainMid2, intTest3, TrainEnd, Test1, Test2, Test3\nUnknown\n\n\nband\n1, 2, 3, 4, 5, 6\nUnknown\n\n\nvb\n100-300, 350-550, 600-800, 800-1000, 1000-1200, 1200-1400\nUnknown\n\n\nlowBound\n100, 350, 600, 800, 1000, 1200\nUnknown\n\n\nfeedback\n0, 1\nUnknown\n\n\nstage\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23\nUnknown"
  },
  {
    "objectID": "Misc/data_dictionary.html#tibble",
    "href": "Misc/data_dictionary.html#tibble",
    "title": "HTW Data Dictionary",
    "section": "Tibble",
    "text": "Tibble\n\nCodedata &lt;- tibble(\n  `Variable Name` = c(\"condit\", \"fb\", \"bandOrder\", \"tOrder\", \"expMode\", \"trainStage\",\n                      \"expStage\", \"band\", \"vb\", \"lowBound\", \"feedback\", \"stage\"),\n  `Levels` = c(\"Constant, Varied\", \n               \"Continuous, Ordinal\",\n               \"Original, Reverse\",\n               \"Test First, Train First\",\n               \"train, train-Nf, test-Nf, test-train-nf, test-feedback\",\n               \"Beginning, Middle, End, Test\",\n               \"TrainStart, intTest1, TrainMid1, intTest2, TrainMid2, intTest3, TrainEnd, Test1, Test2, Test3\",\n               \"1, 2, 3, 4, 5, 6\",\n               \"100-300, 350-550, 600-800, 800-1000, 1000-1200, 1200-1400\",\n               \"100, 350, 600, 800, 1000, 1200\",\n               \"0, 1\",\n               \"1 to 23\"),\n  `Description` = c(\"Conditions under which training was performed. In 'Constant' only one velocity band was used, in 'Varied' three different bands were used.\",\n                    \"Two types of feedback given to the subjects. The 'Continuous' type involved ongoing feedback whereas 'Ordinal' feedback type was rank-based\",\n                    \"The order in which the velocity bands were presented for the 'Hit The Wall' task - either 'Original' or 'Reverse'.\",\n                    \"The order of test and train stages.\",\n                    \"Specifies the mode of the experiment. Can be one of the training stages, no-feedback testing from the training or novel extrapolation band, or feedback testing.\",\n                    \"The stage of training for the individual - starting, middle, end, or if they're testing.\",\n                    \"The stages in the experiment which includes the start and end of training, intermediate tests, and final test stages.\",\n                    \"Identifies the 6 different velocity bands used in the experiment.\",\n                    \"Specifies the range of each velocity band used in the experiment.\",\n                    \"The lower boundary of each velocity band.\",\n                    \"Binary representation of whether feedback was provided (1) or not (0)\",\n                    \"The various stages during testing and feedback, represented by numbers from 1 to 23.\")\n)\ndata %&gt;% gt::gt()\n\n\n\n\n\n\nVariable Name\nLevels\nDescription\n\n\n\ncondit\nConstant, Varied\nConditions under which training was performed. In 'Constant' only one velocity band was used, in 'Varied' three different bands were used.\n\n\nfb\nContinuous, Ordinal\nTwo types of feedback given to the subjects. The 'Continuous' type involved ongoing feedback whereas 'Ordinal' feedback type was rank-based\n\n\nbandOrder\nOriginal, Reverse\nThe order in which the velocity bands were presented for the 'Hit The Wall' task - either 'Original' or 'Reverse'.\n\n\ntOrder\nTest First, Train First\nThe order of test and train stages.\n\n\nexpMode\ntrain, train-Nf, test-Nf, test-train-nf, test-feedback\nSpecifies the mode of the experiment. Can be one of the training stages, no-feedback testing from the training or novel extrapolation band, or feedback testing.\n\n\ntrainStage\nBeginning, Middle, End, Test\nThe stage of training for the individual - starting, middle, end, or if they're testing.\n\n\nexpStage\nTrainStart, intTest1, TrainMid1, intTest2, TrainMid2, intTest3, TrainEnd, Test1, Test2, Test3\nThe stages in the experiment which includes the start and end of training, intermediate tests, and final test stages.\n\n\nband\n1, 2, 3, 4, 5, 6\nIdentifies the 6 different velocity bands used in the experiment.\n\n\nvb\n100-300, 350-550, 600-800, 800-1000, 1000-1200, 1200-1400\nSpecifies the range of each velocity band used in the experiment.\n\n\nlowBound\n100, 350, 600, 800, 1000, 1200\nThe lower boundary of each velocity band.\n\n\nfeedback\n0, 1\nBinary representation of whether feedback was provided (1) or not (0)\n\n\nstage\n1 to 23\nThe various stages during testing and feedback, represented by numbers from 1 to 23."
  },
  {
    "objectID": "Misc/data_dictionary.html#tribble",
    "href": "Misc/data_dictionary.html#tribble",
    "title": "HTW Data Dictionary",
    "section": "Tribble",
    "text": "Tribble\n\nCodetribble(\n  ~Variable, ~Levels, ~Description,\n  \"condit\", \"Constant, Varied\", \"Conditions under which training was performed. In 'Constant' only one velocity band was used, in 'Varied' three different bands were used.\",\n  \"fb\", \"Continuous, Ordinal\", \"Two types of feedback given to the subjects. The 'Continuous' type involved ongoing feedback whereas 'Ordinal' feedback type was rank-based\",\n  \"bandOrder\", \"Original, Reverse\", \"The order in which the velocity bands were presented for the 'Hit The Wall' task - either 'Original' or 'Reverse'.\",\n  \"tOrder\", \"Test First, Train First\", \"The order of test and train stages.\",\n  \"expMode\", \"train, train-Nf, test-Nf, test-train-nf, test-feedback\", \"Specifies the mode of the experiment. Can be one of the training stages, no-feedback testing from the training or novel extrapolation band, or feedback testing.\",\n  \"trainStage\", \"Beginning, Middle, End, Test\", \"The stage of training for the individual - starting, middle, end, or if they're testing.\",\n  \"expStage\", \"TrainStart, intTest1, TrainMid1, intTest2, TrainMid2, intTest3, TrainEnd, Test1, Test2, Test3\", \"The stages in the experiment which includes the start and end of training, intermediate tests, and final test stages.\",\n  \"band\", \"1, 2, 3, 4, 5, 6\", \"Identifies the 6 different velocity bands used in the experiment.\",\n  \"vb\", \"100-300, 350-550, 600-800, 800-1000, 1000-1200, 1200-1400\", \"Specifies the range of each velocity band used in the experiment.\",\n  \"lowBound\", \"100, 350, 600, 800, 1000, 1200\", \"The lower boundary of each velocity band.\",\n  \"feedback\", \"0, 1\", \"Binary representation of whether feedback was provided (1) or not (0)\",\n  \"stage\", \"1 to 23\", \"The various stages during testing and feedback, represented by numbers from 1 to 23.\"\n) %&gt;% gt::gt() %&gt;% \n        gt::tab_style(\n                style = cell_text(weight = \"bold\"),\n                locations = cells_column_labels()\n        )\n\n\n\n\n\n\nVariable\nLevels\nDescription\n\n\n\ncondit\nConstant, Varied\nConditions under which training was performed. In 'Constant' only one velocity band was used, in 'Varied' three different bands were used.\n\n\nfb\nContinuous, Ordinal\nTwo types of feedback given to the subjects. The 'Continuous' type involved ongoing feedback whereas 'Ordinal' feedback type was rank-based\n\n\nbandOrder\nOriginal, Reverse\nThe order in which the velocity bands were presented for the 'Hit The Wall' task - either 'Original' or 'Reverse'.\n\n\ntOrder\nTest First, Train First\nThe order of test and train stages.\n\n\nexpMode\ntrain, train-Nf, test-Nf, test-train-nf, test-feedback\nSpecifies the mode of the experiment. Can be one of the training stages, no-feedback testing from the training or novel extrapolation band, or feedback testing.\n\n\ntrainStage\nBeginning, Middle, End, Test\nThe stage of training for the individual - starting, middle, end, or if they're testing.\n\n\nexpStage\nTrainStart, intTest1, TrainMid1, intTest2, TrainMid2, intTest3, TrainEnd, Test1, Test2, Test3\nThe stages in the experiment which includes the start and end of training, intermediate tests, and final test stages.\n\n\nband\n1, 2, 3, 4, 5, 6\nIdentifies the 6 different velocity bands used in the experiment.\n\n\nvb\n100-300, 350-550, 600-800, 800-1000, 1000-1200, 1200-1400\nSpecifies the range of each velocity band used in the experiment.\n\n\nlowBound\n100, 350, 600, 800, 1000, 1200\nThe lower boundary of each velocity band.\n\n\nfeedback\n0, 1\nBinary representation of whether feedback was provided (1) or not (0)\n\n\nstage\n1 to 23\nThe various stages during testing and feedback, represented by numbers from 1 to 23.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVariable Name\nLevels\nDescription\n\n\n\ncondit\nConstant, Varied\nConditions under which training was performed. In “Constant” only one velocity band was used, in “Varied” three different bands were used.\n\n\nfb\nContinuous, Ordinal\nTwo types of feedback given to the subjects. The “Continuous” type involved ongoing feedback whereas “Ordinal” feedback type was rank-based\n\n\nbandOrder\nOriginal, Reverse\nThe order in which the velocity bands were presented for the “Hit The Wall” task - either “Original” or “Reverse”.\n\n\ntOrder\nTest First, Train First\nThe order of test and train stages.\n\n\nexpMode\ntrain, train-Nf, test-Nf, test-train-nf, test-feedback\nSpecifies the mode of the experiment. Can be one of the training stages, no-feedback testing from the training or novel extrapolation band, or feedback testing.\n\n\ntrainStage\nBeginning, Middle, End, Test\nThe stage of training for the individual - starting, middle, end, or if they’re testing.\n\n\nexpStage\nTrainStart, intTest1, TrainMid1, intTest2, TrainMid2, intTest3, TrainEnd, Test1, Test2, Test3\nThe stages in the experiment which includes the start and end of training, intermediate tests, and final test stages.\n\n\nband\n1, 2, 3, 4, 5, 6\nIdentifies the 6 different velocity bands used in the experiment.\n\n\nvb\n100-300, 350-550, 600-800, 800-1000, 1000-1200, 1200-1400\nSpecifies the range of each velocity band used in the experiment.\n\n\nlowBound\n100, 350, 600, 800, 1000, 1200\nThe lower boundary of each velocity band.\n\n\nfeedback\n0, 1\nBinary representation of whether feedback was provided (1) or not (0)\n\n\nstage\n1 to 23\nThe various stages during testing and feedback, represented by numbers from 1 to 23."
  },
  {
    "objectID": "Misc/data_dictionary.html#description-table",
    "href": "Misc/data_dictionary.html#description-table",
    "title": "HTW Data Dictionary",
    "section": "Description table",
    "text": "Description table\n\n\n\n\n\n\n\nVariable Name\nVariable Levels\nDescription\n\n\n\ncondit\nConstant, Varied\nCondition of the experiment: constant or varied\n\n\nfb\nContinuous, Ordinal\nType of feedback received: continuous or ordinal\n\n\nbandOrder\nOriginal, Reverse\nOrder of bands: original or reverse\n\n\ntOrder\nTest First, Train First\nOrder of testing and training stages: test first or train first\n\n\nexpMode\ntrain, train-Nf, test-Nf, etc.\nMode of the experiment: train, train-Nf, test-Nf, etc.\n\n\ntrainStage\nBeginning, Middle, End, Test\nStage of the training: beginning, middle, end, or test\n\n\nexpStage\nTrainStart, intTest1, etc.\nStage of the experiment: TrainStart, intTest1, TrainMid1, etc.\n\n\nband\n1, 2, 3, 4, 5, 6\nBand number\n\n\nvb\n100-300, 350-550, etc.\nVelocity band range\n\n\nlowBound\n100, 350, 600, etc.\nLower bound of the velocity band range\n\n\nfeedback\n0, 1\nFeedback type: 0 (no feedback), 1 (feedback)\n\n\nstage\n1, 2, 3, etc.\nStage number of the experiment"
  },
  {
    "objectID": "Misc/data_dictionary.html#ascii-table",
    "href": "Misc/data_dictionary.html#ascii-table",
    "title": "HTW Data Dictionary",
    "section": "Ascii table",
    "text": "Ascii table\n\n\n\n\n\n\n\nVariable Name\nVariable Levels\nDescription\n\n\n\ncondit\nConstant, Varied\nUnknown\n\n\nfb\nContinuous, Ordinal\nUnknown\n\n\nbandOrder\nOriginal, Reverse\nUnknown\n\n\ntOrder\nTest First, Train First\nUnknown\n\n\nexpMode\ntrain, train-Nf, test-Nf, test-train-nf, test-feedback\nUnknown\n\n\ntrainStage\nBeginning, Middle, End, Test\nUnknown\n\n\nexpStage\nTrainStart, intTest1, TrainMid1, intTest2, TrainMid2, intTest3, TrainEnd, Test1, Test2, Test3\nUnknown\n\n\nband\n1, 2, 3, 4, 5, 6\nUnknown\n\n\nvb\n100-300, 350-550, 600-800, 800-1000, 1000-1200, 1200-1400\nUnknown\n\n\nlowBound\n100, 350, 600, 800, 1000, 1200\nUnknown\n\n\nfeedback\n0, 1\nUnknown\n\n\nstage\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23\nUnknown\n\n\n\n\nDemonstration of pipe table syntax\n\nDefault\nLeft\nRight\nCenter\n\n\n\n12\n12\n12\n12\n\n\n123\n123\n123\n123\n\n\n1\n1\n1\n1"
  },
  {
    "objectID": "Misc/data_dictionary.html#smaller-table",
    "href": "Misc/data_dictionary.html#smaller-table",
    "title": "HTW Data Dictionary",
    "section": "smaller table",
    "text": "smaller table\n\n\n\n\n\n\nVariable Name\nVariable Levels\n\n\n\ncondit\n“Constant”, “Varied”\n\n\nfb\n“Continuous”, “Ordinal”\n\n\nbandOrder\n“Original”, “Reverse”\n\n\ntOrder\n“Test First”, “Train First”\n\n\nexpMode\n“train”, “train-Nf”, “test-Nf”, “test-train-nf”, “test-feedback”\n\n\ntrainStage\n“Beginning”, “Middle”, “End”, “Test”\n\n\nexpStage\n“TrainStart”, “intTest1”, “TrainMid1”, “intTest2”, “TrainMid2”, “intTest3”, “TrainEnd”, “Test1”, “Test2”, “Test3”\n\n\nband\n“1”, “2”, “3”, “4”, “5”, “6”\n\n\nvb\n“100-300”, “350-550”, “600-800”, “800-1000”, “1000-1200”, “1200-1400”\n\n\nlowBound\n“100”, “350”, “600”, “800”, “1000”, “1200”\n\n\nfeedback\n“0”, “1”\n\n\nstage\n“1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “10”, “11”, “12”, “13”, “14”, “15”, “16”, “17”, “18”, “19”, “20”, “21”, “22”, “23”\n\n\n\nCode# Create a data frame\nvar_levels &lt;- list(\n  condit = c(\"Constant\", \"Varied\"),\n  fb = c(\"Continuous\", \"Ordinal\"),\n  bandOrder = c(\"Original\", \"Reverse\"),\n  tOrder = c(\"Test First\", \"Train First\"),\n  expMode = c(\"train\", \"train-Nf\", \"test-Nf\", \"test-train-nf\", \"test-feedback\"),\n  trainStage = c(\"Beginning\", \"Middle\", \"End\", \"Test\"),\n  expStage = c(\"TrainStart\", \"intTest1\", \"TrainMid1\", \"intTest2\", \"TrainMid2\", \"intTest3\", \"TrainEnd\", \"Test1\", \"Test2\", \"Test3\"),\n  band = c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"),\n  vb = c(\"100-300\", \"350-550\", \"600-800\", \"800-1000\", \"1000-1200\", \"1200-1400\"),\n  lowBound = c(\"100\", \"350\", \"600\", \"800\", \"1000\", \"1200\"),\n  feedback = c(\"0\", \"1\"),\n  stage = c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\")\n)\n\n# Convert the list to a data frame\ndf &lt;- data.frame(\n  Variable_Name = names(var_levels),\n  Variable_Levels = sapply(var_levels, function(x) paste(x, collapse = \", \"))\n)\n\n# Create a markdown table\ndf %&gt;%\n  kable(format = \"markdown\") %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n\n\n\n\n\n\n\n\n\nVariable_Name\nVariable_Levels\n\n\n\ncondit\ncondit\nConstant, Varied\n\n\nfb\nfb\nContinuous, Ordinal\n\n\nbandOrder\nbandOrder\nOriginal, Reverse\n\n\ntOrder\ntOrder\nTest First, Train First\n\n\nexpMode\nexpMode\ntrain, train-Nf, test-Nf, test-train-nf, test-feedback\n\n\ntrainStage\ntrainStage\nBeginning, Middle, End, Test\n\n\nexpStage\nexpStage\nTrainStart, intTest1, TrainMid1, intTest2, TrainMid2, intTest3, TrainEnd, Test1, Test2, Test3\n\n\nband\nband\n1, 2, 3, 4, 5, 6\n\n\nvb\nvb\n100-300, 350-550, 600-800, 800-1000, 1000-1200, 1200-1400\n\n\nlowBound\nlowBound\n100, 350, 600, 800, 1000, 1200\n\n\nfeedback\nfeedback\n0, 1\n\n\nstage\nstage\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23\n\n\n\n\n\n\n\n\n\n\nVariable Name\nVariable Levels\n\n\n\ncondit\nConstant, Varied\n\n\nfb\nContinuous, Ordinal\n\n\nbandOrder\nOriginal, Reverse\n\n\ntOrder\nTest First, Train First\n\n\nexpMode\ntrain, train-Nf, test-Nf, test-train-nf, test-feedback\n\n\ntrainStage\nBeginning, Middle, End, Test\n\n\nexpStage\nTrainStart, intTest1, TrainMid1, intTest2, TrainMid2, intTest3, TrainEnd, Test1, Test2, Test3\n\n\nband\n1, 2, 3, 4, 5, 6\n\n\nvb\n100-300, 350-550, 600-800, 800-1000, 1000-1200, 1200-1400\n\n\nlowBound\n100, 350, 600, 800, 1000, 1200\n\n\nfeedback\n0, 1\n\n\nstage\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23\n\n\n\nNumeric variables\n\n\n\n\n\n\nVariable Name\nDescription\n\n\n\ntrial\nTrial number\n\n\nnGoodTrial\nNumber of good trials\n\n\ngt.bandStage\nBand stage in game time\n\n\ngt.stage\nStage in game time\n\n\ngt.train\nTraining in game time\n\n\ninput\nInput from the participant\n\n\nbandInt\nBand interval\n\n\nhighBound\nHigh boundary of the velocity band\n\n\nrunTotal\nRunning total of trials\n\n\ndist\nDistance between produced x-velocity and the closest edge of the current velocity band\n\n\nsdist\nStandardized distance\n\n\nvx\nX-velocity of the projectile\n\n\nvxb\nX-velocity at the boundary\n\n\nvxi\nInitial X-velocity\n\n\nvy\nY-velocity of the projectile\n\n\nnTrain\nNumber of training trials\n\n\nnTestNf\nNumber of no-feedback testing trials\n\n\nnInt\nNumber of interleaved trials\n\n\nnTestF\nNumber of feedback testing trials\n\n\nnTotal\nTotal number of trials\n\n\nlastTrain\nLast training trial\n\n\nlastTrial\nLast trial"
  },
  {
    "objectID": "Misc/e1_brms_test.html",
    "href": "Misc/e1_brms_test.html",
    "title": "E1 Testing - Bayesian Mixed Models",
    "section": "",
    "text": "Codepacman::p_load(tidyverse,tidybayes,brms,bayesplot,bayestestR,\n               broom.mixed,lme4,emmeans,here,knitr,kableExtra,gt)\nwalk(c(here(\"Functions/Display_Functions.R\"), here(\"Functions/org_functions.R\")), source)\n\ntest &lt;- readRDS(here(\"data/e1_08-21-23.rds\")) |&gt; \n  filter(expMode2 == \"Test\") |&gt; \n  mutate(distS2 = custom_scale(dist))\n\noptions(brms.backend=\"cmdstanr\",mc.cores=4)"
  },
  {
    "objectID": "Misc/e1_brms_test.html#random-effects---interaction-condit-x-vb",
    "href": "Misc/e1_brms_test.html#random-effects---interaction-condit-x-vb",
    "title": "E1 Testing - Bayesian Mixed Models",
    "section": "Random Effects - Interaction condit x vb",
    "text": "Random Effects - Interaction condit x vb\n\nCodemodelName &lt;- \"e1_testDistBT_RF\"\ne1_testDistBT_RF &lt;- brm(dist ~ (condit * vb) + bandType + (1 + vb +bandType|id),\n                      data=test,file=paste0(here::here(\"data/model_cache\",modelName)),\n                      iter=2000,chains=4,silent=0,\n                      control=list(adapt_delta=0.92, max_treedepth=13))"
  },
  {
    "objectID": "Misc/e1_brms_test.html#random-effects---interaction-condit-x-vb-1",
    "href": "Misc/e1_brms_test.html#random-effects---interaction-condit-x-vb-1",
    "title": "E1 Testing - Bayesian Mixed Models",
    "section": "Random Effects - Interaction condit x vb",
    "text": "Random Effects - Interaction condit x vb\n\nCodemodelName &lt;- \"e1_testDistRF2\"\ne1_testDistRF2 &lt;- brm(dist ~ condit * vb + (1 + vb|id),\n                      data=test,file=paste0(here::here(\"data/model_cache\",modelName)),\n                      iter=5000,chains=4)\n\nGetModelStats(e1_testDistRF2)\n\nbrms_eq_tidy &lt;-tidyMCMC(e1_testDistRF2, conf.int = TRUE, conf.level = 0.95,\n           estimate.method = \"median\", conf.method = \"HPDinterval\")\n\nbayes_R2(e1_testDistRF2)\nsjPlot::tab_model(e1_testDistRF2)\n\n\nfixef(e1_testDistRF2)\nnewdat &lt;-data.frame(crossing(condit=c(\"Constant\",\"Varied\"), vb = unique(test$vb)))\npreds &lt;- fitted(e1_testDistRF2, re_formula = NA, newdata = newdat, probs = c(0.025, 0.975))\n\n\n#shinystan::launch_shinystan(e1_testDistRF2)"
  },
  {
    "objectID": "Misc/e1_brms_test.html#intercept-random-effects---interaction-condit-x-vb",
    "href": "Misc/e1_brms_test.html#intercept-random-effects---interaction-condit-x-vb",
    "title": "E1 Testing - Bayesian Mixed Models",
    "section": "0 intercept; Random Effects - Interaction condit x vb",
    "text": "0 intercept; Random Effects - Interaction condit x vb\n\nCodemodelName &lt;- \"e1_testDistRF2_0\"\ne1_testDistRF2_0 &lt;- brm(dist ~ 0 + (condit * vb) + (0 + vb|id),\n                        data=test,file=paste0(here::here(\"data/model_cache\",modelName)), \n                        iter=5000,chains=4)\nGetModelStats(e1_testDistRF2_0)\n\nkable(fixef(e1_testDistRF2_0))\nnewdat &lt;-data.frame(crossing(condit=c(\"Constant\",\"Varied\"), vb = unique(test$vb)))\npreds &lt;- fitted(e1_testDistRF2_0, re_formula = NA, newdata = newdat, probs = c(0.025, 0.975))\n\n\nkable(tidy(e1_testDistRF2_0, effects=\"fixed\",ess=TRUE))\nconditional_effects(e1_testDistRF2_0,\"condit:vb\",method=\"pp_expect\",points=TRUE)\n\n\ndraws_fit &lt;- as_draws_df(e1_testDistRF2_0, variable = \"^b_\", regex = TRUE)\n\n\nmcmc_plot(e1_testDistRF2_0, type=\"trace\",variable=\"^b_\",regex=TRUE)\nmcmc_plot(e1_testDistRF2_0, type=\"intervals\",variable=\"^b_\",regex=TRUE)\nmcmc_plot(e1_testDistRF2_0, type=\"areas\",variable=\"^b_\",regex=TRUE)\n\nmcmc_hist(e1_testDistRF2_0,pars=c(\"b_conditConstant\",\"b_conditVaried\"))\nplot(e1_testDistRF2_0,variable=c(\"b_conditConstant\",\"b_conditVaried\"))\n\n\nbayesplot::ppc_dens_overlay_grouped(test$dist,yrep=posterior_predict(e1_testDistRF2_0,ndraws=200),group=test$vb)\n\n\nmcmc_hist(e1_testDistRF2_0,prob=.5,regex_pars=c(\"^r_id\\\\[1,.*\\\\]\"))\n\n\nmodel_parameters(e1_testDistRF2_0,effects=\"random\",keep=\"^r_id\\\\[3,.*\\\\]\")\nplot_subject_fits(e1_testDistRF2_0,3)\n\n\nindvFit &lt;- GetIndvFits(e1_testDistRF2_0)\n\nindvFit |&gt; ggplot(aes(x=condit,y=Median,fill=condit))+stat_halfeye()+facet_wrap(~vb)"
  },
  {
    "objectID": "Misc/e1_brms_test.html#random-effects",
    "href": "Misc/e1_brms_test.html#random-effects",
    "title": "E1 Testing - Bayesian Mixed Models",
    "section": "Random Effects",
    "text": "Random Effects\nCodemodelName &lt;- \"e1_testDistRF\"\ne1_testDistRF &lt;- brm(dist ~ condit + vb + (1 + vb|id),\n                     data=test,file=paste0(here::here(\"data/model_cache\",modelName)))\n\n\npt &lt;- posterior_table(e1_testDistRF) |&gt; select(-CI)\nkable(pt)\nbrms_posterior_checks(e1_testDistRF,dist,vb)\n\nmap_estimate(e1_testDistRF)\n\n\nhdi(e1_testDistRF$fit, ci = c(0.5, 0.75, 0.89, 0.95))\n\n\nplot(pt)\n\nintPlot &lt;- plot(conditional_effects(e1_testDistRF,effects=\"vb:condit\"))\n\n\nmd &lt;- tidy_draws(e1_testDistRF) |&gt; select(b_Intercept:`b_vb1200M1400`)\nplot(bayestestR::hdi(md, ci = c(.89, .95)))\n\nplot(bayestestR::bayesfactor_parameters(e1_testDistRF, null = c(-.5, .5)))\n\np1 &lt;- GetModelStats(e1_testDistRF)\n\nkable(p1) |&gt; column_spec(1:9,width=\"5em\")\n\n#GetBrmsModelStats(e1_testDistRF)\n\n\n\ne1_testDistRF %&gt;%\n  spread_draws(b_Intercept, r_condition[condition,])\n\n\ndraws1 &lt;- e1_testDistRF |&gt; spread_draws()"
  },
  {
    "objectID": "Misc/e1_brms_test.html#interaction---grouped-random-effects",
    "href": "Misc/e1_brms_test.html#interaction---grouped-random-effects",
    "title": "E1 Testing - Bayesian Mixed Models",
    "section": "Interaction - Grouped Random Effects",
    "text": "Interaction - Grouped Random Effects\n\nCodemodelName &lt;- \"e1_testConditVb_Dist_Gr\"\ne1_testConditVb_Dist_Gr &lt;- brm(dist ~ condit * vb + (1 + vb|gr(id,by=condit)),\n                      data=test,file=paste0(here::here(\"data/model_cache\",modelName)),\n                      iter=5000,chains=4)\nfixef(e1_testConditVb_Dist_Gr)\nhead(coef(e1_testConditVb_Dist_Gr)$id)\nbayes_R2(e1_testConditVb_Dist_Gr)\n\nGetModelStats(e1_testConditVb_Dist_Gr)\n\n# coef(e1_testConditVb_Dist_Gr)$id %&gt;% as_tibble(rownames=\"id\") %&gt;% select(id, starts_with(\"Est\")) |&gt; print(n=10)\n\nindividual_coefs &lt;- coef(e1_testConditVb_Dist_Gr)$id %&gt;%\n    as_tibble(rownames = \"id\") %&gt;%\n    select(id, starts_with(\"Estim\")) %&gt;%\n    pivot_longer(cols = -id, names_to = \"variable\", values_to = \"value\") %&gt;%\n    separate(variable, c(\"type\", \"effect\"), sep = \"\\\\.\")\n\nmerged_data &lt;- test |&gt; group_by(id, condit) |&gt; summarise(n=n()) %&gt;%\n               left_join(individual_coefs, by = \"id\") |&gt;  filter(effect == \"Intercept\" | grepl(\"^vb\", effect))\n\n\nhead(merged_data)\n\n\n\nggplot(merged_data, aes(x = effect, y = value, color = condit)) +\n  geom_point(position = position_jitterdodge()) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(\n    title = \"Individual Differences in Velocity Production Task (Intercept & vb Effects)\",\n    x = \"Velocity Band Effect\",\n    y = \"Estimated Value\",\n    color = \"Condition\"\n  )\n\n\n\n epred_draws(e1_testConditVb_Dist_Gr, newdata = test,ndraws=50) |&gt;\nggplot(aes(x = vb, y = .epred, color = condit)) +\n    gghalves::geom_half_violin(position=position_dodge(),alpha=.7) +\n    gghalves::geom_half_boxplot(position=position_dodge(),alpha=.5) +\n    #geom_jitter(width = 0.2, height = 0) +\n    labs(\n        title = \"Posterior Predictive Distribution\",\n        x = \"Effect Category\",\n        y = \"Expected Predicted Value\",\n        color = \"Condition\"\n    )\n\n\n(r_fit &lt;- e1_testConditVb_Dist_Gr %&gt;% \n  tidy() %&gt;% filter(effect==\"fixed\") |&gt; select(-effect,-component, -group) |&gt; \n  mutate(term = janitor::make_clean_names(term)) |&gt;\n    mutate(across(where(is.numeric), \\(x) round(x, 0))) |&gt; kbl() |&gt;\n    column_spec(1:5, width = \"5em\") ) \n \ncat(r_fit$term)\npaste(r_fit$term)"
  },
  {
    "objectID": "Misc/e1_brms_test.html#intercept-random-effects---interaction-condit-x-vb-1",
    "href": "Misc/e1_brms_test.html#intercept-random-effects---interaction-condit-x-vb-1",
    "title": "E1 Testing - Bayesian Mixed Models",
    "section": "0 intercept; Random Effects - Interaction condit x vb",
    "text": "0 intercept; Random Effects - Interaction condit x vb\n\nCodemodelName &lt;- \"e1_testDistRF2_02\"\ne1_testDistRF2_02 &lt;- brm(dist ~ 0 + condit:vb + (0 + vb|id),data=test,file=paste0(here::here(\"data/model_cache\",modelName)))\nbrms_eq_tidy &lt;-tidyMCMC(e1_testDistRF2_02, conf.int = TRUE, conf.level = 0.95,\n           estimate.method = \"median\", conf.method = \"HPDinterval\")\n\nGetModelStats(e1_testDistRF2_02)\n\nbayes_R2(e1_testDistRF2_02)\nsjPlot::tab_model(e1_testDistRF2_02)\n\n\nfixef(e1_testDistRF2_02)\nnewdat &lt;-data.frame(crossing(condit=c(\"Constant\",\"Varied\"), vb = unique(test$vb)))\npreds &lt;- fitted(e1_testDistRF2_02, re_formula = NA, newdata = newdat, probs = c(0.025, 0.975))\n\n\n#shinystan::launch_shinystan(e1_testDistRF2_02)\n\n\n\nCodemodelName &lt;- \"e1_test_Dist_Int\"\ne1_testDist_Int &lt;- brm(dist ~ 0 + Intercept + bandInt + condit + (1|id), \n                       data=test,\n                       iter=1000, chains=4, silent=0,\n                       file=paste0(here::here(\"data/model_cache\",modelName)))\n\ne1_testDist_Int\n\npp_check(e1_testDist_Int,group=\"bandInt\")\nbayesplot::ppc_dens_overlay_grouped(test$dist,yrep=posterior_predict(e1_testDist_Int,ndraws=100),group=test$bandInt)\npp_check(e1_testDist_Int,type=\"stat_grouped\",ndraws=500, group=\"bandInt\",stat=\"mean\")\ncoef(e1_testDist_Int)$id\n\n\n\nCodemodelName &lt;- \"e1Test_conditBand_RS1\"\ne1Test_conditBand_RS1 &lt;- brm(dist ~ 1 + bandInt + condit + (1+ bandInt|id), \n                       data=test,\n                       iter=1000, chains=4, silent=0,\n                       file=paste0(here::here(\"data/model_cache\",modelName)))\n\ne1Test_conditBand_RS1\nfixef(e1Test_conditBand_RS1)\n\npp_check(e1Test_conditBand_RS1,group=\"bandInt\")\nbayesplot::ppc_dens_overlay_grouped(test$dist,yrep=posterior_predict(e1Test_conditBand_RS1,ndraws=100),group=test$bandInt)\npp_check(e1Test_conditBand_RS1,type=\"stat_grouped\",ndraws=500, group=\"bandInt\",stat=\"mean\")\ncoef(e1Test_conditBand_RS1)$id\n\n\ne1Test_conditBand_RS1 |&gt; \n  tidy_draws() |&gt; \n  select(starts_with(\"b_\"),.chain,.iteration,.draw) \n  \n  \ne1Test_conditBand_RS1 |&gt; \n  spread_draws(b_Intercept,b_conditVaried) \n\n\n\nCodemodelName &lt;- \"e1Test_conditVb_RS1\"\ne1Test_conditVb_RS1 &lt;- brm(dist ~ 1 + vb + condit + (1+ vb|id), \n                       data=test,\n                       iter=1000, chains=4, silent=0,\n                       file=paste0(here::here(\"data/model_cache\",modelName)))\n\ne1Test_conditVb_RS1\n\npp_check(e1Test_conditVb_RS1,group=\"bandInt\")\nbayesplot::ppc_dens_overlay_grouped(test$dist,yrep=posterior_predict(e1Test_conditVb_RS1,ndraws=100),group=test$bandInt)\npp_check(e1Test_conditVb_RS1,type=\"stat_grouped\",ndraws=500, group=\"vb\",stat=\"mean\")\ncoef(e1Test_conditVb_RS1)$id"
  },
  {
    "objectID": "Misc/e1_brms_test.html#fixed-effects-only",
    "href": "Misc/e1_brms_test.html#fixed-effects-only",
    "title": "E1 Testing - Bayesian Mixed Models",
    "section": "Fixed Effects Only",
    "text": "Fixed Effects Only\n\nCodemodelName &lt;- \"e1_testDist\"\ne1_testDist &lt;- brm(dist ~ condit,data=test,file=paste0(here::here(\"data/model_cache\",modelName)))\nbrms_eq_tidy &lt;-tidyMCMC(e1_testDist, conf.int = TRUE, conf.level = 0.95,\n           estimate.method = \"median\", conf.method = \"HPDinterval\")\n\n\nmodelName &lt;- \"e1_testDist0\"\ne1_testDist0 &lt;- brm(dist ~ 0+condit,data=test,file=paste0(here::here(\"data/model_cache\",modelName)))\nbrms_eq_tidy &lt;-tidyMCMC(e1_testDist0, conf.int = TRUE, conf.level = 0.95,\n           estimate.method = \"median\", conf.method = \"HPDinterval\")\n\n\nmodelName &lt;- \"e1_testDist_uneq\"\n\ne1_testDist_uneq &lt;- brm(bf(dist ~ condit,sigma~condit),data=test,file=paste0(here::here(\"data/model_cache\",modelName)))\n\nbrms_eq_tidy_uneq &lt;-tidyMCMC(e1_testDist_uneq, conf.int = TRUE, conf.level = 0.95,\n           estimate.method = \"median\", conf.method = \"HPDinterval\")\n\nbrms_eq_tidy_uneq |&gt; mutate_at(vars(estimate, std.error, conf.low, conf.high),\n            funs(ifelse(str_detect(term, \"sigma\"), exp(.), .)))\n\nmodelName &lt;- \"e1_testDist_uneq_robust\"\nbrms_uneq_robust &lt;- brm(\n  bf(dist ~ condit, sigma ~ condit), data=test,\n  family = student,file=paste0(here::here(\"data/model_cache\",modelName)))\n\nbrms_uneq_robust_tidy &lt;- tidyMCMC(brms_uneq_robust, conf.int = TRUE, conf.level = 0.95,estimate.method = \"median\", conf.method = \"HPDinterval\") %&gt;% mutate_at(vars(estimate, std.error, conf.low, conf.high),\n            funs(ifelse(str_detect(term, \"sigma\"), exp(.), .)))\nbrms_uneq_robust_tidy\n\n\n\n#brm(dist ~ (0+vb)+(1+condit),data=test)\n\n\nbayes_R2(e1_testDist)\nsjPlot::tab_model(e1_testDist)"
  },
  {
    "objectID": "Misc/e1_brms_test.html#vx",
    "href": "Misc/e1_brms_test.html#vx",
    "title": "E1 Testing - Bayesian Mixed Models",
    "section": "Vx",
    "text": "Vx\n\nCodemodelName &lt;- \"e1_testVxRF\"\ne1_testDistRF &lt;- brm(vx ~ condit + bandInt+ (1 + vb|id),\n                     data=test,file=paste0(here::here(\"data/model_cache\",modelName)))\n\nmodelName &lt;- \"e1_testVxRF2\"\ne1_testVxRF2 &lt;- brm(vx ~ condit * bandInt + (1 + bandInt|id),\n                      data=test,file=paste0(here::here(\"data/model_cache\",modelName)),\n                      iter=5000,chains=4)\n\n\nmodelName &lt;- \"e1_test_vx_Int\"\ne1_testDist_Int &lt;- brm(vx ~ 0 + Intercept + bandInt + condit + (1|id), \n                       data=test,\n                       iter=2000, chains=4, silent=0,\n                       file=paste0(here::here(\"data/model_cache\",modelName)))\n\n\nmodelName &lt;- \"e1_testVxRF2_02\"\ne1_testDistRF2_02 &lt;- brm(vx ~ 0 + condit:bandInt + (0 + bandInt|id),data=test,file=paste0(here::here(\"data/model_cache\",modelName)))\nbrms_eq_tidy &lt;-tidyMCMC(e1_testDistRF2_02, conf.int = TRUE, conf.level = 0.95,\n           estimate.method = \"median\", conf.method = \"HPDinterval\")\n\n\n\nmodelName &lt;- \"e1_testConditBand_vx_Gr\"\ne1_testConditBand_vx_Gr &lt;- brm(vx ~ condit * bandInt + (1 + bandInt|gr(id,by=condit)),\n                      data=test,file=paste0(here::here(\"data/model_cache\",modelName)),\n                      iter=5000,chains=4)\n\nmodelName &lt;- \"e1_testConditBand0_vx_Gr\"\ne1_testConditBand_vx_Gr &lt;- brm(vx ~ 0 + condit * bandInt + (0 + bandInt|gr(id,by=condit)),\n                      data=test,file=paste0(here::here(\"data/model_cache\",modelName)),\n                      iter=5000,chains=4)\n\nmodelName &lt;- \"e1_testConditBand02_vx_Gr\"\ne1_testConditBand_vx_Gr &lt;- brm(vx ~ 1 + condit * bandInt + (0 + bandInt|gr(id,by=condit)),\n                      data=test,file=paste0(here::here(\"data/model_cache\",modelName)),\n                      iter=5000,chains=4,silent=0)\n\n\n\nCodebform1 &lt;- bf(mvbind(vx, dist) ~ condit * vb + (1|p|id)) + set_rescor(TRUE)\nmv1 &lt;- brm(bform1, data = test, chains = 2, cores = 2)\n\nconditional_effects(mv1)\npp_check(mv1,resp=\"dist\")\npp_check(mv1,resp=\"vx\")\n\n\nppc_dens_overlay_grouped(test$vx,posterior_predict(mv1,ndraws=200),test$vb)\nbayes_R2(mv1)\n\n\nbf_dist &lt;- bf(dist|trunc(lb=-70) ~ condit * vb + (0 + vb|id) ) + gaussian()\nbf_vx &lt;- bf(vx|trunc(lb=0) ~ condit * vb + (0 + vb|id)) + gaussian()\n\nmv3 &lt;- brm(bf_dist + bf_vx + set_rescor(FALSE),\n            data = test, chains = 2, cores = 2,iter=1300, silent=0,\n           file=here::here(\"data/model_cache/mv_trunc2\"))\nbayes_R2(mv3)\npp_check(mv3,resp=\"dist\")\n\nppc_dens_overlay_grouped(test$vx,posterior_predict(mv3,ndraws=200),test$vb)\n\n\n\nbform2 &lt;- bf(mvbind(vx, vy) ~ condit * vb + (0+vb|id)) + set_rescor(FALSE)\nmv3 &lt;- brm(bform2, data = test, chains = 2, cores = 2,silent=0)\nbayes_R2(mv3)\npp_check(mv3,resp=\"vx\")\npp_check(mv3,resp=\"vy\")\n\n\n\nfitted(mv3) %&gt;%\n  as_tibble() %&gt;%\n  bind_cols(test %&gt;% select(id,condit,vx,vy,vb,bandInt)) %&gt;%\n  ggplot(aes(x = vx, y = Estimate.vx)) +\n  geom_abline(linetype = 2, color = \"grey50\", linewidth = .5) +  \n  geom_point(size = 1.5, aes(color=), alpha = 3/4) +\n  geom_linerange(aes(ymin = Q2.5.vx, ymax = Q97.5.vx),\n                 size = 1/4, color = \"firebrick4\") +\n  facet_wrap(~vb)\n\n\n\nCodeconditRF &lt;- brm(vx ~ vb + condit + (1+vb|condit),data=test,iter=1000,chains=2)\n\nconditRFX &lt;- brm(vx ~ vb * condit + (1+vb|condit),data=test,iter=1000,chains=2,silent=0,\n                 file=here(\"data/model_cache/e1_conditRFX\"))\n\n\nconditRFX %&gt;%\n  spread_draws(b_Intercept, r_condit[condit,]) %&gt;%\n  mutate(condition_mean = b_Intercept + r_condit) %&gt;%\n  ggplot(aes(y = condit, x = condition_mean)) +\n  stat_halfeye() + facet_wrap(~vb)\n\n\n\nCodevx_mm4 &lt;- brm(vx ~ (1+vb|id), data=test,chains=2,silent=0)\n\nmcmc_areas(vx_mm4,prob=.5,regex_pars=c(\"^r_id\\\\[1,.*\\\\]\"),regex=T)\n\n\nvx_mm5&lt;- brm(vx ~ 0 + (0+vb|id), data=test,chains=2,silent=0,iter=1200)\n\n\nplot_subject_fits &lt;- function(model, subject_code) {\n  pattern &lt;- glue(\"^r_id\\\\[{subject_code},.*\\\\]\")\n  plot &lt;- mcmc_areas(model, prob = .5, regex_pars = c(pattern)) +\n            ggtitle(glue(\"fit for subject #{subject_code}:\"))\n  return(plot)\n}\n\nplot_subject_fits(vx_mm5,86)\n\n\nindividual_coefs &lt;- coef(gt_vx)$id %&gt;% as_tibble(rownames = “id”) %&gt;% select(id, starts_with(“Estim”)) %&gt;% pivot_longer(cols = -id, names_to = “variable”, values_to = “value”) %&gt;% separate(variable, c(“type”, “effect”), sep = “\\.”)\ndist_gauss_trunc0 &lt;- brm(dist|trunc(lb=0) ~ 1+vb*condit + (0+vb|id),data=testExtrap,family=gaussian(), iter=2000, control=list(adapt_delta=0.92, max_treedepth=13), chains=3, file=paste0(here::here(“data/model_cache”,“gauss_t_vbCondit_dist_extrap_ml6”)), silent=0);\ngauss_trunc0 &lt;- brm(vx|trunc(lb=0) ~ 1+vb*condit + (0+vb|id),data=testExtrap,family=gaussian(), iter=2000, control=list(adapt_delta=0.92, max_treedepth=13), chains=3, file=paste0(here::here(“data/model_cache”,“gauss_t_vbCondit_vx_extrap_ml6”)), silent=0);\nintercept condit_varied vb350m550 vb600m800 vb800m1000 vb1000m1200 vb1200m1400 condit_varied_vb350m550 condit_varied_vb600m800 condit_varied_vb800m1000 condit_varied_vb1000m1200 condit_varied_vb1200m1400"
  },
  {
    "objectID": "Misc/htw_dp.html",
    "href": "Misc/htw_dp.html",
    "title": "Project 2",
    "section": "",
    "text": "In project 1, we applied model-based techniques to quantify and control for the similarity between training and testing experience, which in turn enabled us to account for the difference between varied and constant training via an extended version of a similarity based generalization model. In project 2, we will go a step further, implementing a full process model capable of both 1) producing novel responses and 2) modeling behavior in both the learning and testing stages of the experiment. Project 2 also places a greater emphasis on extrapolation performance following training - as varied training has often been purported to be particularly beneficial in such situations. Extrapolation has long been a focus of the literature on function learning (Brehmer, 1974; Carroll, 1963). Central questions of the function learning literature have included the relative difficulties of learning various functional forms (e.g. linear vs.bilinear vs. quadratic), and the relative effectiveness of rule-based vs. association-based exemplar models vs. various hybrid models (Bott & Heit, 2004; DeLosh et al., 1997; Jones et al., 2018; Kalish et al., 2004; M. Mcdaniel et al., 2009; M. A. Mcdaniel & Busemeyer, 2005). However the issue of training variation has received surprisingly little attention in this area.",
    "crumbs": [
      "Misc",
      "Project 2"
    ]
  },
  {
    "objectID": "Misc/htw_dp.html#participants",
    "href": "Misc/htw_dp.html#participants",
    "title": "Project 2",
    "section": "Participants",
    "text": "Participants\nData was collected from 647 participants (after exclusions). The results shown below consider data from subjects in our initial experiment, which consisted of 196 participants (106 constant, 90 varied). The follow-up experiments entailed minor manipulations: 1) reversing the velocity bands that were trained on vs. novel during testing; 2) providing ordinal rather than numerical feedback during training (e.g. correct, too low, too high). The data from these subsequent experiments are largely consistently with our initial results shown below.",
    "crumbs": [
      "Misc",
      "Project 2"
    ]
  },
  {
    "objectID": "Misc/htw_dp.html#task",
    "href": "Misc/htw_dp.html#task",
    "title": "Project 2",
    "section": "Task",
    "text": "Task\nWe developed a novel visuomotor extrapolation task, termed the “Hit The Wall” (HTW) task, wherein participants learned to launch a projectile such that it hit a rectangle at the far end of the screen with an appropriate amount of force. Although the projectile had both x and y velocity components, only the x-dimension was relevant for the task.  Link to task demo",
    "crumbs": [
      "Misc",
      "Project 2"
    ]
  },
  {
    "objectID": "Misc/htw_dp.html#design",
    "href": "Misc/htw_dp.html#design",
    "title": "Project 2",
    "section": "Design",
    "text": "Design\n\n90 training trials split evenly divided between velocity bands. Varied training with 3 velocity bands and Constant training with 1 band.\nNo-feedback testing from 3 novel extrapolation bands. 15 trials each.  \nNo-feedbacd testing from the 3 bands used during the training phase (2 of which were novel for the constant group). 9 trials each.\nFeedback testing for each of the 3 extrapolation bands. 10 trials each.\n\n\n\n\nExperiment Procedure",
    "crumbs": [
      "Misc",
      "Project 2"
    ]
  },
  {
    "objectID": "Misc/htw_dp.html#training",
    "href": "Misc/htw_dp.html#training",
    "title": "Project 2",
    "section": "Training",
    "text": "Training\nTraining performance is shown in Results Figure 2A. All groups show improvement from each of their training velocity-bands (i.e. decreasing average distance from target). In the velocity band trained at by both groups (800-1000), the constant group maintains a superior level of performance from the early through the final stages of training. This difference is unsurprising given that the constant group had 3x more practice trials from that band.\n\nCode#fig.cap=\"\\\\label{fig:figs}training performance\"\n\n#title=paste0(\"HTW Training\")\n#figpatch::fig(here(\"Assets/Training-1.png\"))\nknitr::include_graphics(here(\"Assets/Training-1.png\"))\n\n\n\n\n\n\nCode  #fig_lab(.,title,pos=\"top\",fontface='bold',size=12,hjust=.01)",
    "crumbs": [
      "Misc",
      "Project 2"
    ]
  },
  {
    "objectID": "Misc/htw_dp.html#testing",
    "href": "Misc/htw_dp.html#testing",
    "title": "Project 2",
    "section": "Testing",
    "text": "Testing\nFor evaluating testing performance, we consider 3 separate metrics. 1) The average absolute deviation from the correct velocity, 2) The % of throws in which the wall was hit with the correct velocity and 3) The average x velocity produced.\nResults Figure 2B shows the average velocity produced for all 6 bands that were tested. At least at the aggregate level, both conditions were able to differentiate all 6 bands in the correct order, despite only having received training feedback for 1/6 (constant) or 3/6 (varied) bands during training. Participants in both groups also had a bias towards greatly overestimating the correct velocity for band 100-300, for which both groups had an average of greater than 500.\n\nCode# fig2aCap=str_wrap(\"Figure 2B: Bands 100-300, 350-550 and 600-800 are novel extrapolations for both groups. Band 800-1000 was a training band for both groups. Bands 1000-1200, and 1200-1400 were trained for the varied group, and novel for the constant group.  Top figure displays mean deviation from correct velocity. Bottom figure displays the average % of trials where participants hit the wall with the correct velocity. Error bars indicate standard error of the mean. \" ,width=170)\n\n\n#figpatch::fig(here(\"Assets/Testing_Vx-1.png\"))\nknitr::include_graphics(here(\"Assets/Testing_Vx-1.png\"))\n\n\n\n\n\n\n\nAs is reflected in Results Figure 2C, the constant group performed significantly better than the varied group at the 3 testing bands of greatest interest. Both groups tended to perform worse for testing bands further away from their training conditions. The varied group had a slight advantage for bands 1000-1200 and 1200-1400, which were repeats from training for the varied participants, but novel for the constant participants.\n\nCode#figpatch::fig(here(\"Assets/Test_Performance-1.png\"))\nknitr::include_graphics(here(\"Assets/Test_Performance-1.png\"))\n\n\n\n\n\n\nCode# \n# gtitle=\"2C. Testing Performance\"\n# title = ggdraw()+draw_label(gtitle,fontface = 'bold',x=0,hjust=0)+theme(plot.margin = margin(0, 0, 0, 7))\n# captionText=str_wrap(\"Figure 2C: Bands 100-300, 350-550 and 600-800 are novel extrapolations for both groups. Band 800-1000 was a training band for both groups. Bands 1000-1200, and 1200-1400 were trained for the varied group, and novel for the constant group.  Right side figure displays mean deviation from correct velocity band (lower values correspond to better performance). Bottom Left displays the average % of trials where participants hit the wall with the correct velocity (higher values correspond got better performance). Error bars indicate standard error of the mean. \",150)\n# capt=ggdraw()+draw_label(captionText,fontface = 'italic',x=0,hjust=0,size=11)+theme(plot.margin = margin(0, 0, 0, 1))\n# \n# plot_grid(title,NULL,leg,NULL,gbDev,gbHit,capt,NULL,ncol=2,rel_heights=c(.1,.1,1,.1),rel_widths=c(1,1))",
    "crumbs": [
      "Misc",
      "Project 2"
    ]
  },
  {
    "objectID": "Misc/htw_dp.html#alm-exam-description",
    "href": "Misc/htw_dp.html#alm-exam-description",
    "title": "Project 2",
    "section": "ALM & Exam Description",
    "text": "ALM & Exam Description\nDelosh et al. (1997) introduced the associative learning model (ALM), a connectionist model within the popular class of radial-basis networks. ALM was inspired by, and closely resembles Kruschke’s influential ALCOVE model of categorization (Kruscke 1992).\nALM is a localist neural network model, with each input node corresponding to a particular stimulus, and each output node corresponding to a particular response value. The units in the input layer activate as a function of their Gaussian similarity to the input stimulus. So, for example, an input stimulus of value 55 would induce maximal activation of the input unit tuned to 55. Depending on thevalue of the generalization parameter, the nearby units (e.g. 54 and 56; 53 and 57) may also activate to some degree. ALM is structured with input and output nodes that correspond to regions of the stimulus space, and response space, respectively. The units in the input layer activate as a function of their similarity to a presented stimulus. As was the case with the exemplar-based models, similarity in ALM is exponentially decaying function of distance. The input layer is fully connected to the output layer, and the activation for any particular output node is simply the weighted sum of the connection weights between that node and the input activations. The network then produces a response by taking the weighted average of the output units (recall that each output unit has a value corresponding to a particular response). During training, the network receives feedback which activates each output unit as a function of its distance from the ideal level of activation necessary to produce the correct response. The connection weights between input and output units are then updated via the standard delta learning rule, where the magnitude of weight changes are controlled by a learning rate parameter.\nSee Table 2A for a full specification of the equations that define ALM and EXAM.",
    "crumbs": [
      "Misc",
      "Project 2"
    ]
  },
  {
    "objectID": "Misc/htw_dp.html#model-equations",
    "href": "Misc/htw_dp.html#model-equations",
    "title": "Project 2",
    "section": "Model Equations",
    "text": "Model Equations\n\nCodetext_tbl &lt;- data.frame(\n    'Step'=c(\"Input Activation\",\"Output Activation\",\"Output Probability\",\"Mean Output\",\"Feedback Activation\",\"Update Weights\",\"Extrapolation\",\"\"),\n    'Equation' = c(\"$a_i(X) = \\\\frac{e^{-c \\\\cdot (X-X_i)^2}}{ \\\\sum_{k=1}^Me^{-c \\\\cdot (X-X_i)^2}}$\", \n                   '$O_j(X) = \\\\sum_{k=1}^Mw_{ji} \\\\cdot a_i(X)$',\n                   '$P[Y_j | X] = \\\\frac{O_i(X)}{\\\\sum_{k=1}^Mo_k(X)}$',\n                   \"$m(x) = \\\\sum_{j=1}^LY_j \\\\cdot \\\\bigg[\\\\frac{O_j(X)}{\\\\sum_{k=1}^Lo_k(X)}\\\\bigg]$\",\n                   \"$f_j(Z)=e^{-c\\\\cdot(Z-Y_j)^2}$\",\n                   \"$w_{ji}(t+1)=w_{ji}(t)+\\\\alpha \\\\cdot {f_i(Z(t))-O_j(X(t))} \\\\cdot a_i(X(t))$\",\n                   \"$P[X_i|X] = \\\\frac{a_i(X)}{\\\\sum_{k=1}^Ma_k(X)}$\",\n                   \"$E[Y|X_i]=m(X_i) + \\\\bigg[\\\\frac{m(X_{i+1})-m(X_{i-1})}{X_{i+1} - X_{i-1}} \\\\bigg] \\\\cdot[X-X_i]$\"),\n    \n    'Description'= c(\n            \"Activation of each input node, $X_i$, is a function of the Gaussian similarity between the node value and stimulus X. \",\n            \"Activation of each Output unit $O_j$ is the weighted sum of the input activations and association weights\",\n            \"Each output node has associated response, $Y_j$. The probability of response $Y_j$ is determined by the ratio of output activations\",\n            \"The response to stimulus x is the weighted average of the response probabilities\",\n            \"After responding, feedback signal Z is presented, activating each output node via the Gaussian similarity to the ideal response  \",\n            \"Delta rule to update weights. Magnitude of weight changes controlled by learning rate parameter alpha.\",\n            \"Novel test stimulus X activates input nodes associated with trained stimuli\",\n            \"Slope value computed from nearest training instances and then added to the response associated with the nearest training instance,m(x)\")\n)\ntext_tbl$Step=cell_spec(text_tbl$Step,font_size=12)\ntext_tbl$Equation=cell_spec(text_tbl$Equation,font_size=18)\nalmTable=kable(text_tbl, 'html', \n  booktabs=T, escape = F, align='l',\n  caption = '&lt;span style = \"color:black;\"&gt;&lt;center&gt;&lt;strong&gt;Table 1: ALM & EXAM Equations&lt;/strong&gt;&lt;/center&gt;&lt;/span&gt;',\n  col.names=c(\"\",\"Equation\",\"Description\")) %&gt;%\n  kable_styling(position=\"left\",bootstrap_options = c(\"hover\")) %&gt;%\n  column_spec(1, bold = F,border_right=T) %&gt;%\n  column_spec(2, width = '10cm')%&gt;%\n  column_spec(3, width = '15cm') %&gt;%\n  pack_rows(\"ALM Activation & Response\",1,4,bold=FALSE,italic=TRUE) %&gt;%\n  pack_rows(\"ALM Learning\",5,6,bold=FALSE,italic=TRUE) %&gt;%\n  pack_rows(\"EXAM\",7,8,bold=FALSE,italic=TRUE)\n  #save_kable(file=\"almTable.html\",self_contained=T)\n#almTable\n\n\ncat(almTable)\n\n\n\n\nTable 1: ALM & EXAM Equations\n\n\n\n\n\n\n\nEquation\n\n\nDescription\n\n\n\n\n\nALM Activation & Response\n\n\n\n\nInput Activation\n\n\n\\(a_i(X) = \\frac{e^{-c \\cdot (X-X_i)^2}}{ \\sum_{k=1}^Me^{-c \\cdot (X-X_i)^2}}\\)\n\n\nActivation of each input node, \\(X_i\\), is a function of the Gaussian similarity between the node value and stimulus X.\n\n\n\n\nOutput Activation\n\n\n\\(O_j(X) = \\sum_{k=1}^Mw_{ji} \\cdot a_i(X)\\)\n\n\nActivation of each Output unit \\(O_j\\) is the weighted sum of the input activations and association weights\n\n\n\n\nOutput Probability\n\n\n\\(P[Y_j | X] = \\frac{O_i(X)}{\\sum_{k=1}^Mo_k(X)}\\)\n\n\nEach output node has associated response, \\(Y_j\\). The probability of response \\(Y_j\\) is determined by the ratio of output activations\n\n\n\n\nMean Output\n\n\n\\(m(x) = \\sum_{j=1}^LY_j \\cdot \\bigg[\\frac{O_j(X)}{\\sum_{k=1}^Lo_k(X)}\\bigg]\\)\n\n\nThe response to stimulus x is the weighted average of the response probabilities\n\n\n\n\nALM Learning\n\n\n\n\nFeedback Activation\n\n\n\\(f_j(Z)=e^{-c\\cdot(Z-Y_j)^2}\\)\n\n\nAfter responding, feedback signal Z is presented, activating each output node via the Gaussian similarity to the ideal response\n\n\n\n\nUpdate Weights\n\n\n\\(w_{ji}(t+1)=w_{ji}(t)+\\alpha \\cdot {f_i(Z(t))-O_j(X(t))} \\cdot a_i(X(t))\\)\n\n\nDelta rule to update weights. Magnitude of weight changes controlled by learning rate parameter alpha.\n\n\n\n\nEXAM\n\n\n\n\nExtrapolation\n\n\n\\(P[X_i|X] = \\frac{a_i(X)}{\\sum_{k=1}^Ma_k(X)}\\)\n\n\nNovel test stimulus X activates input nodes associated with trained stimuli\n\n\n\n\n\n\n\n\\(E[Y|X_i]=m(X_i) + \\bigg[\\frac{m(X_{i+1})-m(X_{i-1})}{X_{i+1} - X_{i-1}} \\bigg] \\cdot[X-X_i]\\)\n\n\nSlope value computed from nearest training instances and then added to the response associated with the nearest training instance,m(x)",
    "crumbs": [
      "Misc",
      "Project 2"
    ]
  },
  {
    "objectID": "Misc/htw_dp.html#model-fitting-and-comparison",
    "href": "Misc/htw_dp.html#model-fitting-and-comparison",
    "title": "Project 2",
    "section": "Model Fitting and Comparison",
    "text": "Model Fitting and Comparison\nFollowing the procedure used by McDaniel & Busemeyer (2009), we will assess the ability of both ALM and EXAM to account for the empirical data when fitting the models to 1) only the training data, and 2) both training and testing data. Models will be fit directly to the trial by trial data of each individual participants, both by minimizing the root-mean squared deviation (RMSE), and by maximizing log likelihood. Because ALM has been shown to do poorly at accounting for human patterns extrapolation (DeLosh et al., 1997), we will also fit the extended EXAM version of the model, which operates identically to ALM during training, but includes a linear extrapolation mechanism for generating novel responses during testing.",
    "crumbs": [
      "Misc",
      "Project 2"
    ]
  },
  {
    "objectID": "Misc/quartile_splits.html",
    "href": "Misc/quartile_splits.html",
    "title": "Comparing, High/Low performers",
    "section": "",
    "text": "Codepacman::p_load(tidyverse,lme4,emmeans,here,knitr,kableExtra,gt,gghalves)\ne1 &lt;- readRDS(here(\"data/e1_08-04-23.rds\"))\nsource(here(\"Functions/Display_Functions.R\"))\n\ntrain &lt;- e1 |&gt; filter(expMode %in% c(\"train\"))\ntrainAvg &lt;- train %&gt;% group_by(id, condit, vb, bandInt,trainStage) %&gt;%\n  summarise(vx=mean(vx),dist=mean(dist))\ntest &lt;- e1 |&gt; filter(expMode %in% c(\"test-Nf\",\"test-train-nf\"))\ntestAvg &lt;- test %&gt;% group_by(id, condit, vb, bandInt,bandType,tOrder) %&gt;%\n  summarise(vx=mean(vx),dist=mean(dist),sdist=mean(sdist))\n\n\n\nCodetestAvg %&gt;% \n  group_by(condit,vb) %&gt;%  \n  reframe(enframe(quantile(dist, c(0.0,0.25, 0.5, 0.75,1)), \"quantile\", \"dist\")) |&gt; \n  pivot_wider(names_from=quantile,values_from=dist,names_prefix=\"Q_\") |&gt;\n  group_by(vb,condit) |&gt;\n  summarise(across(starts_with(\"Q\"), list(mean = mean)))\n\n# A tibble: 12 × 7\n# Groups:   vb [6]\n   vb    condit `Q_0%_mean` `Q_25%_mean` `Q_50%_mean` `Q_75%_mean` `Q_100%_mean`\n   &lt;fct&gt; &lt;fct&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;         &lt;dbl&gt;\n 1 100-… Const…       0            110.          205.         393.          849.\n 2 100-… Varied       1.81          82.4         249.         634.         1260.\n 3 350-… Const…       7.34          91.5         149.         254.          757.\n 4 350-… Varied       4.21          81.2         180.         433.          998.\n 5 600-… Const…       9.52          78.9         117.         196.          523.\n 6 600-… Varied      28.4          105.          182.         284.          787.\n 7 800-… Const…      12.9           86.3         145.         252.          896.\n 8 800-… Varied       0.670        128.          195.         308.          634.\n 9 1000… Const…       2.99         122.          200.         317.          824.\n10 1000… Varied      14.5          111.          182.         298.          540.\n11 1200… Const…      26.9          158.          240.         398.          909.\n12 1200… Varied       3.65         141.          209.         320.          594.\n\nCodetestAvg %&gt;% \n  group_by(condit,vb) %&gt;%  \n  reframe(enframe(quantile(dist, seq(0,1,1/8)), \"quantile\", \"dist\")) |&gt; \n  pivot_wider(names_from=quantile,values_from=dist,names_prefix=\"Q_\") |&gt;\n  group_by(vb,condit) |&gt;\n  summarise(across(starts_with(\"Q\"),round,1)) %&gt;% kable(format=\"html\",escape=F) %&gt;% kable_styling() \n\n\n\n\nvb\ncondit\nQ_0%\nQ_12.5%\nQ_25%\nQ_37.5%\nQ_50%\nQ_62.5%\nQ_75%\nQ_87.5%\nQ_100%\n\n\n\n100-300\nConstant\n0.0\n46.1\n109.7\n141.1\n205.0\n261.5\n393.2\n603.3\n849.4\n\n\n100-300\nVaried\n1.8\n32.1\n82.4\n170.8\n248.9\n520.7\n633.9\n852.8\n1259.7\n\n\n350-550\nConstant\n7.3\n50.9\n91.5\n111.8\n149.5\n187.3\n253.9\n440.1\n757.5\n\n\n350-550\nVaried\n4.2\n41.4\n81.2\n130.9\n180.1\n279.5\n433.1\n699.3\n997.8\n\n\n600-800\nConstant\n9.5\n59.2\n78.9\n98.7\n117.0\n148.5\n195.6\n305.8\n522.6\n\n\n600-800\nVaried\n28.4\n68.8\n104.9\n139.1\n181.7\n211.6\n284.2\n478.9\n786.6\n\n\n800-1000\nConstant\n12.9\n45.2\n86.3\n111.7\n145.0\n197.9\n251.9\n364.7\n896.1\n\n\n800-1000\nVaried\n0.7\n70.6\n127.8\n156.8\n195.1\n226.9\n308.2\n385.5\n633.8\n\n\n1000-1200\nConstant\n3.0\n83.0\n122.2\n156.1\n200.1\n236.3\n317.2\n441.5\n823.7\n\n\n1000-1200\nVaried\n14.5\n69.4\n110.7\n147.3\n181.7\n217.6\n298.3\n368.9\n539.9\n\n\n1200-1400\nConstant\n26.9\n125.5\n157.9\n193.0\n240.5\n308.4\n397.7\n503.8\n908.9\n\n\n1200-1400\nVaried\n3.6\n96.7\n141.3\n170.6\n208.7\n287.1\n320.2\n389.0\n593.9\n\n\n\n\n\n\n\nCoderaw_table &lt;- testAvg %&gt;% \n  group_by(condit,vb) %&gt;%  \n  reframe(enframe(quantile(dist, seq(0,1,1/8)), \"quantile\", \"dist\")) |&gt; \n  pivot_wider(names_from=quantile,values_from=dist,names_prefix=\"Q_\") |&gt;\n  group_by(vb,condit) |&gt;\n  summarise(across(starts_with(\"Q\"), round,1))\n\n\nlong_data &lt;- raw_table %&gt;% \n  pivot_longer(\n    cols = starts_with(\"Q\"),\n    names_to = \"Quartile\",\n    values_to = \"Value\"\n  ) %&gt;%\n  mutate(Quart = str_remove_all(Quartile, \"Q_|%\"), # Remove \"Q_\" and \"%\"\n         Quart = as.numeric(Quart), # Convert Quart to numeric\n         Quart = factor(Quart, levels = sort(unique(Quart)))) \n\n\n\n\n\n\nbold_lower &lt;- function(data, by_group) {\n  ifelse(data &lt; by_group, cell_spec(data, \"html\", bold = T), as.character(data))\n}\n\n# Separate data by condition\nconstant_data &lt;- raw_table %&gt;% filter(condit == \"Constant\")\nvaried_data &lt;- raw_table %&gt;% filter(condit == \"Varied\")\n\n# Apply function to varied data\nvaried_data &lt;- varied_data %&gt;%\n  group_by(vb) %&gt;%\n  mutate(across(starts_with(\"Q\"), function(.x) {\n    col_name &lt;- cur_column()\n    by_group &lt;- constant_data[[col_name]][constant_data$vb == first(vb)]\n    bold_lower(.x, by_group)\n  }, .names = \"{.col}\"))\n\n# Format the constant_data to match the varied_data\nconstant_data &lt;- constant_data %&gt;%\n  group_by(vb) %&gt;%\n  mutate(across(starts_with(\"Q\"), ~as.character(.x), .names = \"{.col}\"))\n\n# Join the constant and varied data frames back together\nfinal_table &lt;- bind_rows(constant_data, varied_data) %&gt;%\n  select(vb, condit, ends_with(\"%\")) %&gt;%\n  arrange(vb, condit)\n\n# Print the table\nfinal_table %&gt;% kable(\"html\", escape = F) %&gt;% kable_styling() %&gt;%\n  pack_rows(index = table(final_table$vb))\n\n\n\n\nvb\ncondit\nQ_0%\nQ_12.5%\nQ_25%\nQ_37.5%\nQ_50%\nQ_62.5%\nQ_75%\nQ_87.5%\nQ_100%\n\n\n\n100-300\n\n\n100-300\nConstant\n0\n46.1\n109.7\n141.1\n205\n261.5\n393.2\n603.3\n849.4\n\n\n100-300\nVaried\n1.8\n32.1\n82.4\n170.8\n248.9\n520.7\n633.9\n852.8\n1259.7\n\n\n350-550\n\n\n350-550\nConstant\n7.3\n50.9\n91.5\n111.8\n149.5\n187.3\n253.9\n440.1\n757.5\n\n\n350-550\nVaried\n4.2\n41.4\n81.2\n130.9\n180.1\n279.5\n433.1\n699.3\n997.8\n\n\n600-800\n\n\n600-800\nConstant\n9.5\n59.2\n78.9\n98.7\n117\n148.5\n195.6\n305.8\n522.6\n\n\n600-800\nVaried\n28.4\n68.8\n104.9\n139.1\n181.7\n211.6\n284.2\n478.9\n786.6\n\n\n800-1000\n\n\n800-1000\nConstant\n12.9\n45.2\n86.3\n111.7\n145\n197.9\n251.9\n364.7\n896.1\n\n\n800-1000\nVaried\n0.7\n70.6\n127.8\n156.8\n195.1\n226.9\n308.2\n385.5\n633.8\n\n\n1000-1200\n\n\n1000-1200\nConstant\n3\n83\n122.2\n156.1\n200.1\n236.3\n317.2\n441.5\n823.7\n\n\n1000-1200\nVaried\n14.5\n69.4\n110.7\n147.3\n181.7\n217.6\n298.3\n368.9\n539.9\n\n\n1200-1400\n\n\n1200-1400\nConstant\n26.9\n125.5\n157.9\n193\n240.5\n308.4\n397.7\n503.8\n908.9\n\n\n1200-1400\nVaried\n3.6\n96.7\n141.3\n170.6\n208.7\n287.1\n320.2\n389\n593.9\n\n\n\n\n\n\n\nCodeggplot(long_data, aes(x = Quart, y = Value, color = condit, group = condit)) +\n  facet_wrap(~ vb) +\n  geom_line() +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n  labs(title = \"Comparison of Varied and Constant Conditions across Octiles\", \n       x = \"Octile\", \n       y = \"Distance from target\")\n\n\n\n\n\n\n\n\nCodemodel &lt;- lmer(Value ~ condit * Quart + (1|vb), data = long_data)\nsummary(model)\n\nLinear mixed model fit by REML ['lmerMod']\nFormula: Value ~ condit * Quart + (1 | vb)\n   Data: long_data\n\nREML criterion at convergence: 1115.1\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-2.5486 -0.4061  0.0253  0.3715  4.0652 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n vb       (Intercept) 2096     45.79   \n Residual             8970     94.71   \nNumber of obs: 108, groups:  vb, 6\n\nFixed effects:\n                       Estimate Std. Error t value\n(Intercept)               9.933     42.946   0.231\nconditVaried             -1.067     54.680  -0.020\nQuart12.5                58.383     54.680   1.068\nQuart25                  97.817     54.680   1.789\nQuart37.5               125.467     54.680   2.295\nQuart50                 166.250     54.680   3.040\nQuart62.5               213.383     54.680   3.902\nQuart75                 291.650     54.680   5.334\nQuart87.5               433.267     54.680   7.924\nQuart100                783.100     54.680  14.321\nconditVaried:Quart12.5   -4.083     77.330  -0.053\nconditVaried:Quart25      1.367     77.330   0.018\nconditVaried:Quart37.5   18.250     77.330   0.236\nconditVaried:Quart50     24.250     77.330   0.314\nconditVaried:Quart62.5   68.317     77.330   0.883\nconditVaried:Quart75     79.133     77.330   1.023\nconditVaried:Quart87.5   86.933     77.330   1.124\nconditVaried:Quart100     9.983     77.330   0.129\n\nCodelibrary(multcomp)\ncomparison &lt;- glht(model, linfct = mcp(condit = \"Tukey\"))\nsummary(comparison)\n\n\n     Simultaneous Tests for General Linear Hypotheses\n\nMultiple Comparisons of Means: Tukey Contrasts\n\n\nFit: lmer(formula = Value ~ condit * Quart + (1 | vb), data = long_data)\n\nLinear Hypotheses:\n                       Estimate Std. Error z value Pr(&gt;|z|)\nVaried - Constant == 0   -1.067     54.680   -0.02    0.984\n(Adjusted p values reported -- single-step method)\n\n\n\nCoderaw_table &lt;- test %&gt;% \n  group_by(id,condit,vb) %&gt;%  \n  reframe(enframe(quantile(dist, seq(0,1,1/6)), \"quantile\", \"dist\")) |&gt; \n  pivot_wider(names_from=quantile,values_from=dist,names_prefix=\"Q_\") |&gt;\n  group_by(id,vb,condit) |&gt;\n  summarise(across(starts_with(\"Q\"), round,1))\n\n\nlong_data &lt;- raw_table %&gt;% \n  pivot_longer(\n    cols = starts_with(\"Q\"),\n    names_to = \"Quartile\",\n    values_to = \"Value\"\n  ) %&gt;%\n  mutate(Quart = str_remove_all(Quartile, \"Q_|%\"), # Remove \"Q_\" and \"%\"\n         Quart = as.numeric(Quart), # Convert Quart to numeric\n         Quart = factor(Quart, levels = sort(unique(Quart)))) \n\n\nggplot(long_data, aes(x = Quart, y = Value, fill = condit, color=condit,group = condit)) +\n  facet_wrap(~ vb) +\n  stat_summary(geom=\"line\",fun=mean)+\n  stat_summary(geom=\"errorbar\",fun.data=mean_se)+\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n  labs(title = \"Comparison of Varied and Constant Conditions across Octiles\", \n       x = \"Octile\", \n       y = \"Distance from target\")\n\n\n\n\n\n\nCodemodel &lt;- lmer(Value ~ condit * Quart + (1|vb)+(1|id), data = long_data)\nsummary(model)\n\nLinear mixed model fit by REML ['lmerMod']\nFormula: Value ~ condit * Quart + (1 | vb) + (1 | id)\n   Data: long_data\n\nREML criterion at convergence: 91516.1\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-3.5591 -0.5577 -0.0522  0.4545  7.2509 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n id       (Intercept) 16898    129.99  \n vb       (Intercept)  2466     49.66  \n Residual             36196    190.25  \nNumber of obs: 6832, groups:  id, 166; vb, 6\n\nFixed effects:\n                           Estimate Std. Error t value\n(Intercept)                   32.90      25.86   1.273\nconditVaried                  11.29      23.65   0.477\nQuart16.66667                 44.20      11.80   3.746\nQuart33.33333                 96.86      11.80   8.209\nQuart50                      158.69      11.80  13.449\nQuart66.66667                234.59      11.80  19.882\nQuart83.33333                334.62      11.80  28.360\nQuart100                     521.83      11.80  44.226\nconditVaried:Quart16.66667    17.30      17.26   1.002\nconditVaried:Quart33.33333    26.67      17.26   1.545\nconditVaried:Quart50          28.93      17.26   1.676\nconditVaried:Quart66.66667    30.17      17.26   1.748\nconditVaried:Quart83.33333    39.94      17.26   2.314\nconditVaried:Quart100         40.22      17.26   2.330\n\nCodecomparison &lt;- glht(model, linfct = mcp(condit = \"Tukey\"))\nsummary(comparison)\n\n\n     Simultaneous Tests for General Linear Hypotheses\n\nMultiple Comparisons of Means: Tukey Contrasts\n\n\nFit: lmer(formula = Value ~ condit * Quart + (1 | vb) + (1 | id), \n    data = long_data)\n\nLinear Hypotheses:\n                       Estimate Std. Error z value Pr(&gt;|z|)\nVaried - Constant == 0    11.29      23.65   0.477    0.633\n(Adjusted p values reported -- single-step method)"
  },
  {
    "objectID": "Model/htw_exam.html",
    "href": "Model/htw_exam.html",
    "title": "EXAM Group Fits",
    "section": "",
    "text": "Code# load and view data\npacman::p_load(dplyr,purrr,tidyr,patchwork,here, pander, latex2exp, flextable)\npurrr::walk(here::here(c(\"Functions/Display_Functions.R\", \"Functions/alm_core.R\",\"Functions/fun_model.R\")),source)\nselect &lt;- dplyr::select; mutate &lt;- dplyr::mutate \n\nds &lt;- readRDS(here::here(\"data/e1_md_11-06-23.rds\"))\ndsAvg &lt;- ds |&gt; group_by(condit,expMode2,tr, x) |&gt; \n  summarise(y=mean(y),.groups=\"keep\") \n\nvAvg &lt;- dsAvg |&gt; filter(condit==\"Varied\")\ncAvg &lt;- dsAvg |&gt; filter(condit==\"Constant\")\n\n#i1 &lt;- ds |&gt; filter(id==\"3\")\n\ninput.layer &lt;- c(100,350,600,800,1000,1200)\noutput.layer &lt;- c(100,350,600,800,1000,1200)\n\n\npurrr::walk(c(\"con_group_exam_fits\", \"var_group_exam_fits\", \"hybrid_group_exam_fits\"), \n            ~ list2env(readRDS(here::here(paste0(\"data/model_cache/\", .x, \".rds\"))), \n            envir = .GlobalEnv))\n\n# pluck(ex_te_v, \"Fit\") |&gt; mutate(w= ifelse(exists(\"w\"), round(w,2),NA))\n# pluck(hybrid_te_v, \"Fit\") |&gt; mutate(w= ifelse(exists(\"w\"), round(w,2), NA))\nCode alm_plot()\n\n\n\n\n\n\nFigure 1: The basic structure of the ALM model.",
    "crumbs": [
      "Model",
      "EXAM Group Fits"
    ]
  },
  {
    "objectID": "Model/htw_exam.html#alm-exam-description",
    "href": "Model/htw_exam.html#alm-exam-description",
    "title": "EXAM Group Fits",
    "section": "ALM & Exam Description",
    "text": "ALM & Exam Description\nDeLosh et al. (1997) introduced the associative learning model (ALM), a connectionist model within the popular class of radial-basis networks. ALM was inspired by, and closely resembles Kruschke’s influential ALCOVE model of categorization (Kruschke, 1992).\nALM is a localist neural network model, with each input node corresponding to a particular stimulus, and each output node corresponding to a particular response value. The units in the input layer activate as a function of their Gaussian similarity to the input stimulus. So, for example, an input stimulus of value 55 would induce maximal activation of the input unit tuned to 55. Depending on thevalue of the generalization parameter, the nearby units (e.g. 54 and 56; 53 and 57) may also activate to some degree. ALM is structured with input and output nodes that correspond to regions of the stimulus space, and response space, respectively. The units in the input layer activate as a function of their similarity to a presented stimulus. As was the case with the exemplar-based models, similarity in ALM is exponentially decaying function of distance. The input layer is fully connected to the output layer, and the activation for any particular output node is simply the weighted sum of the connection weights between that node and the input activations. The network then produces a response by taking the weighted average of the output units (recall that each output unit has a value corresponding to a particular response). During training, the network receives feedback which activates each output unit as a function of its distance from the ideal level of activation necessary to produce the correct response. The connection weights between input and output units are then updated via the standard delta learning rule, where the magnitude of weight changes are controlled by a learning rate parameter.\nSee Table 1 for a full specification of the equations that define ALM and EXAM.",
    "crumbs": [
      "Model",
      "EXAM Group Fits"
    ]
  },
  {
    "objectID": "Model/htw_exam.html#model-fitting-and-comparison",
    "href": "Model/htw_exam.html#model-fitting-and-comparison",
    "title": "EXAM Group Fits",
    "section": "Model Fitting and Comparison",
    "text": "Model Fitting and Comparison\nFollowing the procedure used by Mcdaniel et al. (2009), we will assess the ability of both ALM and EXAM to account for the empirical data when fitting the models to 1) only the training data, and 2) both training and testing data. Models were fit to the aggregated participant data by minimizing the root-mean squared deviation (RMSE). Because ALM has been shown to do poorly at accounting for human patterns extrapolation (DeLosh et al., 1997), we will also generate predictions from the EXAM model for the testing stage. EXAM which operates identically to ALM during training, but includes a linear extrapolation mechanism for generating novel responses during testing.\nFor the hybrid model, predictions are computed by first generating separate predictions from ALM and EXAM, and then combining them using the following equation: \\(\\hat{y} = (1 - w) \\cdot alm.pred + w \\cdot exam.pred\\). For the grid search, the weight parameter is varied from 0 to 1, and the resulting RMSE is recorded.\nEach model was fit to the data in 3 different ways. 1) To just the testing data, 2) Both the training and testing data, 3) Only the training data. In all cases, the model only updates its weights during the training phase, and the weights are frozen during the testing phase. In all cases, only the ALM model generates predictions during the training phase. For the testing phase, all 3 models are used to generate predictions.\n\n\nCode##| column: body-outset-right\n\n\nreshaped_df &lt;- all_combined_params %&gt;%\n  select(-Value,-Test_RMSE) |&gt;\n  rename(\"Fit Method\" = Fit_Method) |&gt;\n  pivot_longer(cols=c(c,lr,w),names_to=\"Parameter\") %&gt;%\n  unite(Group, Group, Parameter) %&gt;%\n  pivot_wider(names_from = Group, values_from = value)\n\nheader_df &lt;- data.frame(\n  col_keys = c(\"Model\", \"Fit Method\",\"Constant_c\", \"Constant_lr\", \"Constant_w\", \"Varied_c\", \"Varied_lr\", \"Varied_w\"),\n  line1 = c(\"\", \"\", \"Constant\", \"\", \"\", \"Varied\", \"\",\"\"),\n  line2 = c(\"Model\", \"Fit Method\", \"c\", \"lr\", \"w\", \"c\", \"lr\", \"w\")\n)\n\nft &lt;- flextable(reshaped_df) %&gt;% \n  set_header_df(\n    mapping = header_df,\n    key = \"col_keys\"\n  ) %&gt;% add_header_lines(values = \" \") %&gt;%\n  theme_booktabs() %&gt;% \n  merge_v(part = \"header\") %&gt;% \n  merge_h(part = \"header\") %&gt;%\n  merge_h(part = \"header\") %&gt;%\n  align(align = \"center\", part = \"all\") %&gt;% \n  #autofit() %&gt;% \n  empty_blanks() %&gt;% \n  fix_border_issues() %&gt;% \n  hline(part = \"header\", i = 2, j=3:5) %&gt;% \n  hline(part = \"header\", i = 2, j=6:8)\n\nft\n\n\nTable 2: Fit Parameters and Model RMSE. The Test_RMSE column is the main performance indicator of interest, and represents the RMSE for just the testing data. The Fit_Method column indicates the data used to fit the model. The \\(w\\) parameter determines the balance between the ALM and EXAM response generation processes, and is only included for the hybrid model. A weight of .5 would indicate equal contribution from both models. \\(w\\) values approaching 1 indicate stronger weight for EXAM.\n\n\n\n\n\n\n \n\n\nConstant\n\nVaried\n\n\n\nModel\nFit Method\nc\nlr\nw\nc\nlr\nw\n\n\n\n\nALM\nTest Only\n0.000\n0.100\n\n0.134\n2.030\n\n\n\nALM\nTest & Train\n0.047\n0.080\n\n0.067\n0.100\n\n\n\nALM\nTrain Only\n0.060\n0.100\n\n0.047\n0.080\n\n\n\nEXAM\nTest Only\n0.007\n1.327\n\n0.409\n1.910\n\n\n\nEXAM\nTest & Train\n0.081\n0.161\n\n0.074\n0.100\n\n\n\nEXAM\nTrain Only\n0.060\n0.100\n\n0.047\n0.080\n\n\n\nHybrid\nTest Only\n0.008\n1.580\n1\n0.395\n2.017\n0.64\n\n\nHybrid\nTest & Train\n0.067\n0.134\n1\n0.134\n2.017\n0.79\n\n\nHybrid\nTrain Only\n0.042\n0.067\n0\n0.042\n0.067\n0.00\n\n\n\n\n\n\n\n\n\nTesting Observations vs. Predictions\n\nCodetvte&lt;- pluck(a_te_v, \"test\") |&gt; \n  mutate(Fit_Method=\"Test Only\") |&gt;\n  rename(ALM=pred,Observed=y) %&gt;% \n  cbind(.,EXAM=pluck(ex_te_v, \"test\") |&gt; pull(pred)) %&gt;%\n  cbind(., Hybrid=pluck(hybrid_te_v, \"test\") |&gt; pull(pred))\n\ntvtetr&lt;-pluck(a_tetr_v, \"test\") |&gt; \n  mutate(Fit_Method=\"Test & Train\") |&gt; \n  rename(ALM=pred,Observed=y) %&gt;% \n  cbind(.,EXAM=pluck(ex_tetr_v, \"test\") |&gt; pull(pred)) %&gt;%\n  cbind(., Hybrid=pluck(hybrid_tetr_v, \"test\") |&gt; pull(pred))\n\ntvtr&lt;- pluck(a_tr_v, \"test\")|&gt; \n  mutate(Fit_Method=\"Train Only\") |&gt; \n  rename(ALM=pred,Observed=y) %&gt;% \n  cbind(.,EXAM=pluck(ex_tr_v, \"test\") |&gt; pull(pred)) %&gt;%\n  cbind(., Hybrid=pluck(hybrid_tr_v, \"test\") |&gt; pull(pred))\n\ntcte&lt;- pluck(a_te_c, \"test\") |&gt; \n  mutate(Fit_Method=\"Test Only\") |&gt; \n  rename(ALM=pred,Observed=y) %&gt;% \n  cbind(.,EXAM=pluck(ex0_te_c, \"test\") |&gt; pull(pred)) %&gt;%\n  cbind(., Hybrid=pluck(hybrid_te_c, \"test\") |&gt; pull(pred))\n\ntctetr&lt;-pluck(a_tetr_c, \"test\") |&gt; \n  mutate(Fit_Method=\"Test & Train\") |&gt;  \n  rename(ALM=pred,Observed=y) %&gt;% \n  cbind(.,EXAM=pluck(ex0_tetr_c, \"test\") |&gt; pull(pred)) %&gt;%\n  cbind(., Hybrid=pluck(hybrid_tetr_c, \"test\") |&gt; pull(pred))\n\ntctr&lt;- pluck(a_tr_c, \"test\")|&gt; \n  mutate(Fit_Method=\"Train Only\") |&gt;  \n  rename(ALM=pred,Observed=y) %&gt;% \n  cbind(.,EXAM=pluck(ex0_tr_c, \"test\") |&gt; pull(pred)) %&gt;%\n  cbind(., Hybrid=pluck(hybrid_tr_c, \"test\") |&gt; pull(pred))\n\nvPreds &lt;- rbind(tvte,tvtetr, tvtr) |&gt; relocate(Fit_Method,.before=x) |&gt; \n   mutate(across(where(is.numeric), \\(x) round(x, 0)))\n\ncPreds &lt;- rbind(tcte,tctetr, tctr) |&gt; relocate(Fit_Method,.before=x) |&gt; \n   mutate(across(where(is.numeric), \\(x) round(x, 0)))\n\nallPreds &lt;- rbind(vPreds |&gt; mutate(Group=\"Varied\"), cPreds |&gt; mutate(Group=\"Constant\")) |&gt;\n  pivot_longer(cols=c(\"ALM\",\"EXAM\",\"Hybrid\"), names_to=\"Model\",values_to = \"Prediction\") |&gt; \n  mutate(Error=Observed-Prediction, Abs_Error=((Error)^2)) |&gt; \n  group_by(Group,Fit_Method, Model) #|&gt; summarise(Mean_Error=mean(Error), Abs_Error=mean(Abs_Error))\n\n\n\nCodeallPreds |&gt; summarise(Error=mean(Error), Abs_Error=sqrt(mean(Abs_Error))) |&gt; \n  mutate(Fit_Method=factor(Fit_Method, levels=c(\"Test Only\", \"Test & Train\", \"Train Only\"))) |&gt;\n  tabulator(rows=c(\"Fit_Method\", \"Model\"), columns=c(\"Group\"), \n             `ME` = as_paragraph(Error), \n            `RMSE` = as_paragraph(Abs_Error)) |&gt; as_flextable()\n\n\nTable 3: Model Perforamnce - averaged over all X values/Bands. ME=Mean Average Error, RMSE = Root mean squared error.\n\n\n\n\n\n\n\nFit_Method\nModel\n\nConstant\n\nVaried\n\n\n\nME\nRMSE\n\nME\nRMSE\n\n\n\n\nTest Only\nALM\n\n223.8\n348.0\n\n56.3\n95.4\n\n\nEXAM\n\n-59.2\n127.5\n\n-6.0\n45.9\n\n\nHybrid\n\n-58.2\n127.4\n\n-3.0\n33.8\n\n\nTest & Train\nALM\n\n193.2\n328.7\n\n82.3\n106.6\n\n\nEXAM\n\n-28.8\n132.1\n\n13.2\n60.2\n\n\nHybrid\n\n-16.7\n136.7\n\n16.7\n46.5\n\n\nTrain Only\nALM\n\n194.5\n329.2\n\n86.3\n109.1\n\n\nEXAM\n\n75.3\n199.9\n\n17.5\n65.4\n\n\nHybrid\n\n197.5\n330.4\n\n88.3\n110.3",
    "crumbs": [
      "Model",
      "EXAM Group Fits"
    ]
  },
  {
    "objectID": "Model/htw_exam.html#varied-testing-predictions",
    "href": "Model/htw_exam.html#varied-testing-predictions",
    "title": "EXAM Group Fits",
    "section": "Varied Testing Predictions",
    "text": "Varied Testing Predictions\n\nCode##| column: screen-inset-right\n\n####\n\nvte &lt;-  pluck(a_te_v, \"test\") |&gt; rename(ALM=pred,Observed=y) %&gt;% \n  cbind(.,EXAM=pluck(ex_te_v, \"test\") |&gt; pull(pred)) %&gt;%\n  cbind(., Hybrid=pluck(hybrid_te_v, \"test\") |&gt; pull(pred)) |&gt;  \n  pivot_longer(Observed:Hybrid, names_to=\"Model\", values_to = \"vx\") |&gt; \n  ggplot(aes(x,vx,fill=Model, group=Model)) +geom_bar(position=\"dodge\",stat=\"identity\") +\n  scale_fill_manual(values=col_themes$wes2)+\n  scale_x_continuous(breaks=sort(unique(ds$x)), labels=sort(unique(ds$x)))+ylim(0,1500) +\n  theme(legend.title = element_blank(), legend.position=\"top\") +ggtitle(\"Fit to Test Only\")\n\nvtetr &lt;-  pluck(a_tetr_v, \"test\") |&gt; rename(ALM=pred,Observed=y) %&gt;% \n  cbind(.,EXAM=pluck(ex_tetr_v, \"test\") |&gt; pull(pred)) %&gt;%\n  cbind(., Hybrid=pluck(hybrid_tetr_v, \"test\") |&gt; pull(pred)) |&gt;  \n  pivot_longer(Observed:Hybrid, names_to=\"Model\", values_to = \"vx\") |&gt; \n  ggplot(aes(x,vx,fill=Model, group=Model)) +geom_bar(position=\"dodge\",stat=\"identity\") + \n  scale_fill_manual(values=col_themes$wes2)+\n  scale_x_continuous(breaks=sort(unique(ds$x)), labels=sort(unique(ds$x)))+ylim(0,1500) +\n  theme(legend.title = element_blank(), legend.position=\"top\") +ggtitle(\"Fit to Test and Train\")\n\nvtr &lt;-  pluck(a_tr_v, \"test\") |&gt; rename(ALM=pred,Observed=y) %&gt;% \n  cbind(.,EXAM=pluck(ex_tr_v, \"test\") |&gt; pull(pred)) %&gt;%\n  cbind(., Hybrid=pluck(hybrid_tr_v, \"test\") |&gt; pull(pred)) |&gt;  \n  pivot_longer(Observed:Hybrid, names_to=\"Model\", values_to = \"vx\") |&gt; \n  ggplot(aes(x,vx,fill=Model, group=Model)) +geom_bar(position=\"dodge\",stat=\"identity\") +\n  scale_fill_manual(values=col_themes$wes2)+\n  scale_x_continuous(breaks=sort(unique(ds$x)), labels=sort(unique(ds$x)))+ylim(0,1500) +\n  theme(legend.title = element_blank(), legend.position=\"top\") +ggtitle(\"Fit to Train Only\")\n\n vte/vtetr/vtr\n\n\n\n\n\n\nFigure 2: Varied Group - Mean Model predictions vs. observations\n\n\n\n\n\nCode##| column: screen-inset-right\n\n\n# Create a custom header dataframe\nheader_df &lt;- data.frame(\n  col_keys = c(\"Fit_Method\", \"x\",\"Observed\" ,\"ALM_Predicted\", \"ALM_Residual\", \"EXAM_Predicted\",\"EXAM_Residual\", \"Hybrid_Predicted\",\"Hybrid_Residual\"),\n  line1 = c(\"\",\"\",\"\", \"ALM\", \"\", \"EXAM\", \"\", \"Hybrid\",\"\"),\n  line2 = c(\"Fit Method\", \"X\", \"Observed\", \"Predicted\",\"Residual\", \"Predicted\",\"Residual\", \"Predicted\",\"Residual\")\n)\n\n\nbest_vPreds &lt;- vPreds %&gt;%\n  pivot_longer(cols = c(ALM, EXAM, Hybrid), names_to = \"Model\", values_to = \"Predicted\") |&gt;\n  mutate(Residual=(Observed-Predicted), abs_res =abs(Residual)) |&gt; group_by(Fit_Method,x) |&gt;\n  mutate(best=if_else(abs_res==min(abs_res),1,0)) |&gt; select(-abs_res)\n\nlong_vPreds &lt;- best_vPreds |&gt; select(-best) |&gt;\n  pivot_longer(cols=c(Predicted,Residual), names_to=\"Model_Perf\") |&gt;\n  relocate(Model, .after=Fit_Method) |&gt; \n  unite(Model,Model,Model_Perf) |&gt;\n  pivot_wider(names_from=Model,values_from=value)\n\nbest_wide &lt;- best_vPreds |&gt; select(-Residual,-Predicted,-Observed) |&gt; ungroup() |&gt;\n  pivot_wider(names_from=Model,values_from=best) |&gt; select(ALM,EXAM,Hybrid)\n\nbest_indexV &lt;- row_indices &lt;- apply(best_wide, 1, function(row) {\n which(row == 1)\n})\n\n\napply_best_formatting &lt;- function(ft, best_index) {\n  for (i in 1:length(best_index)) {\n      #ft &lt;- ft %&gt;% surround(i=i,j=best_index[i],border=fp_border_default(color=\"red\",width=1))\n      ind = best_index[[i]]\n      ind &lt;- ind  %&gt;% map_dbl(~ .x*2+3)\n      ft &lt;- ft %&gt;% highlight(i=i,j=ind,color=\"wheat\")\n      }\n  return(ft)\n}\n\nft &lt;- flextable(long_vPreds) %&gt;% \n  set_header_df(\n    mapping = header_df,\n    key = \"col_keys\"\n  ) %&gt;% \n  theme_booktabs() %&gt;% \n  merge_v(part = \"header\") %&gt;% \n  merge_h(part = \"header\") %&gt;%\n  align(align = \"center\", part = \"all\") %&gt;% \n  #autofit() %&gt;% \n  empty_blanks() %&gt;% \n  fix_border_issues() %&gt;%\n  hline(part = \"header\", i = 1, j=4:9) %&gt;%\n  vline(j=c(\"Observed\",\"ALM_Residual\",\"EXAM_Residual\")) %&gt;%\n  hline(part = \"body\", i=c(6,12)) |&gt; \n  bold(i=long_vPreds$x %in% c(100,350,600), j=2) \n\n  # bold the cell with the lowest residual, based on best_wide df\n  # for each row, the cell that should be bolded matches which column in best_wide==1 at that row\nft &lt;- apply_best_formatting(ft, best_indexV)\nft\n\n\nTable 4: Varied group - mean model predictions vs. observations. Extrapolation Bands are bolded. For each Modelling fitting and band combination, the model with the smallest residual is highlighted. Only the lower bound of each velocity band is shown (bands are all 200 units).\n\n\n\n\n\n\n\n\nALM\n\nEXAM\n\nHybrid\n\n\n\nFit Method\nX\nObserved\nPredicted\nResidual\nPredicted\nResidual\nPredicted\nResidual\n\n\n\n\nTest Only\n100\n663\n675\n-12\n716\n-53\n708\n-45\n\n\nTest Only\n350\n764\n675\n89\n817\n-53\n792\n-28\n\n\nTest Only\n600\n884\n675\n209\n895\n-11\n875\n9\n\n\nTest Only\n800\n1,083\n1,078\n5\n1,000\n83\n1,091\n-8\n\n\nTest Only\n1,000\n1,196\n1,202\n-6\n1,199\n-3\n1,204\n-8\n\n\nTest Only\n1,200\n1,283\n1,230\n53\n1,282\n1\n1,221\n62\n\n\nTest & Train\n100\n663\n675\n-12\n716\n-53\n707\n-44\n\n\nTest & Train\n350\n764\n675\n89\n817\n-53\n788\n-24\n\n\nTest & Train\n600\n884\n675\n209\n902\n-18\n851\n33\n\n\nTest & Train\n800\n1,083\n1,000\n83\n1,000\n83\n1,004\n79\n\n\nTest & Train\n1,000\n1,196\n1,163\n33\n1,165\n31\n1,196\n0\n\n\nTest & Train\n1,200\n1,283\n1,191\n92\n1,194\n89\n1,227\n56\n\n\nTrain Only\n100\n663\n675\n-12\n716\n-53\n675\n-12\n\n\nTrain Only\n350\n764\n675\n89\n817\n-53\n675\n89\n\n\nTrain Only\n600\n884\n675\n209\n905\n-21\n675\n209\n\n\nTrain Only\n800\n1,083\n1,000\n83\n1,000\n83\n999\n84\n\n\nTrain Only\n1,000\n1,196\n1,150\n46\n1,150\n46\n1,143\n53\n\n\nTrain Only\n1,200\n1,283\n1,180\n103\n1,180\n103\n1,176\n107\n\n\n\n\n\n\n\n\n\n\nCodepander(tvte, caption=\"Varied fit to test only\")\npander(tvtetr,caption=\"Varied fit to train and test\")\npander(tvtr,caption=\"Varied fit to train only\")",
    "crumbs": [
      "Model",
      "EXAM Group Fits"
    ]
  },
  {
    "objectID": "Model/htw_exam.html#constant-testing-predictions",
    "href": "Model/htw_exam.html#constant-testing-predictions",
    "title": "EXAM Group Fits",
    "section": "Constant Testing Predictions",
    "text": "Constant Testing Predictions\n\nCode##| column: screen-inset-right\n\n####\n\ncte &lt;-  pluck(a_te_c, \"test\") |&gt; rename(ALM=pred,Observed=y) %&gt;% \n  cbind(.,EXAM=pluck(ex0_te_c, \"test\") |&gt; pull(pred)) %&gt;%\n  cbind(., Hybrid=pluck(hybrid_te_c, \"test\") |&gt; pull(pred)) |&gt;  \n  pivot_longer(Observed:Hybrid, names_to=\"Model\", values_to = \"vx\") |&gt; \n  ggplot(aes(x,vx,fill=Model, group=Model)) +geom_bar(position=\"dodge\",stat=\"identity\") +\n  scale_fill_manual(values=col_themes$wes2)+\n  scale_x_continuous(breaks=sort(unique(ds$x)), labels=sort(unique(ds$x)))+ylim(0,1500) +\n  theme(legend.title = element_blank(), legend.position=\"top\") +ggtitle(\"Fit to Test Only\")\n\nctetr &lt;-  pluck(a_tetr_c, \"test\") |&gt; rename(ALM=pred,Observed=y) %&gt;% \n  cbind(.,EXAM=pluck(ex0_tetr_c, \"test\") |&gt; pull(pred)) %&gt;%\n  cbind(., Hybrid=pluck(hybrid_tetr_c, \"test\") |&gt; pull(pred)) |&gt;  \n  pivot_longer(Observed:Hybrid, names_to=\"Model\", values_to = \"vx\") |&gt; \n  ggplot(aes(x,vx,fill=Model, group=Model)) +geom_bar(position=\"dodge\",stat=\"identity\") + \n  scale_fill_manual(values=col_themes$wes2)+\n  scale_x_continuous(breaks=sort(unique(ds$x)), labels=sort(unique(ds$x)))+ylim(0,1500) +\n  theme(legend.title = element_blank(), legend.position=\"top\") +ggtitle(\"Fit to Test and Train\")\n\nctr &lt;-  pluck(a_tr_c, \"test\") |&gt; rename(ALM=pred,Observed=y) %&gt;% \n  cbind(.,EXAM=pluck(ex0_tr_c, \"test\") |&gt; pull(pred)) %&gt;%\n  cbind(., Hybrid=pluck(hybrid_tr_c, \"test\") |&gt; pull(pred)) |&gt;  \n  pivot_longer(Observed:Hybrid, names_to=\"Model\", values_to = \"vx\") |&gt; \n  ggplot(aes(x,vx,fill=Model, group=Model)) +geom_bar(position=\"dodge\",stat=\"identity\") +\n  scale_fill_manual(values=col_themes$wes2)+\n  scale_x_continuous(breaks=sort(unique(ds$x)), labels=sort(unique(ds$x)))+ylim(0,1500) +\n  theme(legend.title = element_blank(), legend.position=\"top\") +ggtitle(\"Fit to Train Only\")\n  \ncte/ctetr/ctr\n\n\n\n\n\n\nFigure 3: Constant Group - Mean Model predictions vs. observations\n\n\n\n\n\nCode##| column: screen-inset-right\n\n\n\nbest_cPreds &lt;- cPreds %&gt;%\n  pivot_longer(cols = c(ALM, EXAM, Hybrid), names_to = \"Model\", values_to = \"Predicted\") |&gt;\n  mutate(Residual=(Observed-Predicted), abs_res =abs(Residual)) |&gt; group_by(Fit_Method,x) |&gt;\n  mutate(best=if_else(abs_res==min(abs_res),1,0)) |&gt; select(-abs_res)\n\nlong_cPreds &lt;- best_cPreds |&gt; select(-best) |&gt;\n  pivot_longer(cols=c(Predicted,Residual), names_to=\"Model_Perf\") |&gt;\n  relocate(Model, .after=Fit_Method) |&gt; \n  unite(Model,Model,Model_Perf) |&gt;\n  pivot_wider(names_from=Model,values_from=value)\n\nbest_wideC &lt;- best_cPreds |&gt; select(-Residual,-Predicted,-Observed) |&gt; ungroup() |&gt;\n  pivot_wider(names_from=Model,values_from=best) |&gt; select(ALM,EXAM,Hybrid)\n\nbest_indexC &lt;- row_indices &lt;- apply(best_wideC, 1, function(row) {\n which(row == 1)\n})\n\n\nft &lt;- flextable(long_cPreds) %&gt;% \n  set_header_df(\n    mapping = header_df,\n    key = \"col_keys\"\n  ) %&gt;% \n  theme_booktabs() %&gt;% \n  merge_v(part = \"header\") %&gt;% \n  merge_h(part = \"header\") %&gt;%\n  align(align = \"center\", part = \"all\") %&gt;% \n  #autofit() %&gt;% \n  empty_blanks() %&gt;% \n  fix_border_issues() %&gt;%\n  hline(part = \"header\", i = 1, j=4:9) %&gt;%\n  vline(j=c(\"Observed\",\"ALM_Residual\",\"EXAM_Residual\")) %&gt;%\n  hline(part = \"body\", i=c(6,12)) |&gt; \n  bold(i=long_cPreds$x %in% c(100,350,600, 1000,1200), j=2) \n\n  # bold the cell with the lowest residual, based on best_wide df\n  # for each row, the cell that should be bolded matches which column in best_wide==1 at that row\n\nft &lt;- apply_best_formatting(ft, best_indexC)\nft\n\n\nTable 5: Constant group - mean model predictions vs. observations. The X values of Extrapolation Bands are bolded. For each Modelling fitting and band combination, the model with the smallest residual is highlighted. Only the lower bound of each velocity band is shown (bands are all 200 units).\n\n\n\n\n\n\n\n\nALM\n\nEXAM\n\nHybrid\n\n\n\nFit Method\nX\nObserved\nPredicted\nResidual\nPredicted\nResidual\nPredicted\nResidual\n\n\n\n\nTest Only\n100\n527\n675\n-148\n717\n-190\n717\n-190\n\n\nTest Only\n350\n666\n675\n-9\n822\n-156\n821\n-155\n\n\nTest Only\n600\n780\n675\n105\n927\n-147\n926\n-146\n\n\nTest Only\n800\n980\n675\n305\n1,010\n-30\n1,009\n-29\n\n\nTest Only\n1,000\n1,163\n675\n488\n1,094\n69\n1,093\n70\n\n\nTest Only\n1,200\n1,277\n675\n602\n1,178\n99\n1,176\n101\n\n\nTest & Train\n100\n527\n675\n-148\n712\n-185\n711\n-184\n\n\nTest & Train\n350\n666\n675\n-9\n806\n-140\n800\n-134\n\n\nTest & Train\n600\n780\n675\n105\n900\n-120\n889\n-109\n\n\nTest & Train\n800\n980\n859\n121\n975\n5\n960\n20\n\n\nTest & Train\n1,000\n1,163\n675\n488\n1,049\n114\n1,031\n132\n\n\nTest & Train\n1,200\n1,277\n675\n602\n1,124\n153\n1,102\n175\n\n\nTrain Only\n100\n527\n675\n-148\n697\n-170\n675\n-148\n\n\nTrain Only\n350\n666\n675\n-9\n752\n-86\n675\n-9\n\n\nTrain Only\n600\n780\n675\n105\n807\n-27\n675\n105\n\n\nTrain Only\n800\n980\n851\n129\n851\n129\n833\n147\n\n\nTrain Only\n1,000\n1,163\n675\n488\n895\n268\n675\n488\n\n\nTrain Only\n1,200\n1,277\n675\n602\n939\n338\n675\n602",
    "crumbs": [
      "Model",
      "EXAM Group Fits"
    ]
  },
  {
    "objectID": "Model/htw_model_e2.html",
    "href": "Model/htw_model_e2.html",
    "title": "HTW Model e2",
    "section": "",
    "text": "Codepacman::p_load(dplyr,purrr,tidyr,ggplot2, data.table, here, patchwork, conflicted, \n               stringr,future,furrr, knitr, reactable, flextable,ggstance, htmltools, ggdist)\n#conflict_prefer_all(\"dplyr\", quiet = TRUE)\noptions(scipen = 999)\nwalk(c(\"Display_Functions\",\"fun_alm\",\"fun_indv_fit\",\"fun_model\"), ~ source(here::here(paste0(\"Functions/\", .x, \".R\"))))",
    "crumbs": [
      "Model",
      "HTW Model e2"
    ]
  },
  {
    "objectID": "Sections/Discussion.html",
    "href": "Sections/Discussion.html",
    "title": "General Discussion",
    "section": "",
    "text": "There are a number of differences between Project 1’s Hit The Target (HTT), and Project 2’s Hit The Wall (HTW) tasks.\n\nTask Space Complexity: In HTW, the task space is also almost perfectly smooth, at least for the continuous feedback subjects, if they throw 100 units too hard, they’ll be told that they were 100 units too hard. Whereas in HTT,  it was possible to produce xy velocity combinations that were technically closer to the empirical solution space than other throws, but which resulted in worse feedback due to striking the barrier.\nPerceptual Distinctiveness: HTT offers perceptually distinct varied conditions that directly relate to the task’s demands, which may increase the sallience between training positions encounted by the varied group. In contrast, HTW’s varied conditions differ only in the numerical values displayed, lacking the same level of perceptual differentiation. Conversely in HTW, the only difference between conditions for the varied group are the numbers displayed at the top of the screen which indicate the current target band(e.g. 800-1000, or 1000-1200)\nIn HTW, our primary testing stage of interest has no feedback, whereas in HTT testing always included feedback (the intermittent testing in HTT expt 1 being the only exception). Of course, we do collect testing with feedback data at the end of HTW, but we haven’t focused on that data at all in our modelling work thus far. It’s also interesting to recall that the gap between varied and constant in HTW does seem to close substantially in the testing-with-feedback stage. The difference between no-feedback and feedback testing might be relevant if the benefits of variation have anything to do with improving subsequent learning (as opposed to subsequent immediate performance), OR if the benefits of constant training rely on having the most useful anchor, having the most useful anchor might be a lot less helpful if you’re getting feedback from novel positions and can thus immediately begin to form position-specific anchors for the novelties, rather than relying on a training anchor. \nHTW and HTT both have a similar amount of training trials (~200), and thus the constant groups acquire a similar amount of experience with their single position/velocity in both experiments. However, the varied conditions in both HTT experiments train on 2 positions, whereas the varied group in HTW trains on 3 velocity bands. This means that in HTT the varied group gets half as much experience on any one position as the constant group, and in HTW they only get 1/3 as much experience in any one position. There are likely myriad ways in which this might impact the success of the varied group regardless of how you think the benefits of variation might be occurring, e.g. maybe they also need to develop a coherent anchor, maybe they need more experience in order to extract a function, or more experience in order to properly learn to tune their c parameter.",
    "crumbs": [
      "Sections",
      "General Discussion"
    ]
  },
  {
    "objectID": "Sections/Discussion.html#comparison-to-project-1",
    "href": "Sections/Discussion.html#comparison-to-project-1",
    "title": "General Discussion",
    "section": "",
    "text": "There are a number of differences between Project 1’s Hit The Target (HTT), and Project 2’s Hit The Wall (HTW) tasks.\n\nTask Space Complexity: In HTW, the task space is also almost perfectly smooth, at least for the continuous feedback subjects, if they throw 100 units too hard, they’ll be told that they were 100 units too hard. Whereas in HTT,  it was possible to produce xy velocity combinations that were technically closer to the empirical solution space than other throws, but which resulted in worse feedback due to striking the barrier.\nPerceptual Distinctiveness: HTT offers perceptually distinct varied conditions that directly relate to the task’s demands, which may increase the sallience between training positions encounted by the varied group. In contrast, HTW’s varied conditions differ only in the numerical values displayed, lacking the same level of perceptual differentiation. Conversely in HTW, the only difference between conditions for the varied group are the numbers displayed at the top of the screen which indicate the current target band(e.g. 800-1000, or 1000-1200)\nIn HTW, our primary testing stage of interest has no feedback, whereas in HTT testing always included feedback (the intermittent testing in HTT expt 1 being the only exception). Of course, we do collect testing with feedback data at the end of HTW, but we haven’t focused on that data at all in our modelling work thus far. It’s also interesting to recall that the gap between varied and constant in HTW does seem to close substantially in the testing-with-feedback stage. The difference between no-feedback and feedback testing might be relevant if the benefits of variation have anything to do with improving subsequent learning (as opposed to subsequent immediate performance), OR if the benefits of constant training rely on having the most useful anchor, having the most useful anchor might be a lot less helpful if you’re getting feedback from novel positions and can thus immediately begin to form position-specific anchors for the novelties, rather than relying on a training anchor. \nHTW and HTT both have a similar amount of training trials (~200), and thus the constant groups acquire a similar amount of experience with their single position/velocity in both experiments. However, the varied conditions in both HTT experiments train on 2 positions, whereas the varied group in HTW trains on 3 velocity bands. This means that in HTT the varied group gets half as much experience on any one position as the constant group, and in HTW they only get 1/3 as much experience in any one position. There are likely myriad ways in which this might impact the success of the varied group regardless of how you think the benefits of variation might be occurring, e.g. maybe they also need to develop a coherent anchor, maybe they need more experience in order to extract a function, or more experience in order to properly learn to tune their c parameter.",
    "crumbs": [
      "Sections",
      "General Discussion"
    ]
  },
  {
    "objectID": "Sections/Methods.html",
    "href": "Sections/Methods.html",
    "title": "Methods",
    "section": "",
    "text": "Codepacman::p_load(dplyr, here)\n#source(here::here(\"Functions\", \"packages.R\"))\ne1 &lt;- readRDS(here(\"data/e1_08-04-23.rds\")) \ne2 &lt;- readRDS(here(\"data/e2_08-04-23.rds\")) \ne3 &lt;- readRDS(here(\"data/e3_08-04-23.rds\"))",
    "crumbs": [
      "Sections",
      "Methods"
    ]
  },
  {
    "objectID": "Sections/Methods.html#function-learning-and-extrapolation",
    "href": "Sections/Methods.html#function-learning-and-extrapolation",
    "title": "Methods",
    "section": "Function Learning and Extrapolation",
    "text": "Function Learning and Extrapolation\nThe study of human function learning investigates how people learn relationships between continuous input and output values. Function learning is studied both in tasks where individuals are exposed to a sequence of input/output pairs (DeLosh et al., 1997; McDaniel et al., 2013), or situations where observers are presented with a an incomplete scatterplot or line graph and make predictions about regions of the plot that don’t contain data (Ciccione & Dehaene, 2021; Courrieu, 2012; Said & Fischer, 2021; Schulz et al., 2020).\nCarroll (1963) conducted the earliest work on function learning. Input stimuli and output responses were both lines of varying length. The correct output response was related to the length of the input line by a linear, quadratic, or random function. Participants in the linear and quadratic performed above chance levels during extrapolation testing, with those in the linear condition performing the best overall. Carroll argued that these results were best explained by a ruled based model wherein learners form an abstract representation of the underlying function. Subsequent work by Brehmer (1974),testing a wider array of functional forms, provided further evidence for superior extrapolation in tasks with linear functions. Brehmer argued that individuals start out with an assumption of a linear function, but given sufficient error will progressively test alternative hypothesis with polynomials of greater degree. Koh & Meyer (1991) employed a visuomotor function learning task, wherein participants were trained on examples from an unknown function relating the length of an input line to the duration of a response (time between keystrokes). In this domain, participants performed best when the relation between line length and response duration was determined by a power, as opposed to linear function. Koh & Meyer developed the log-polynomial adaptive-regression model to account for their results.\nThe first significant challenge to the rule-based accounts of function learning was put forth by DeLosh et al. (1997) . In their task, participants learned to associate stimulus magnitudes with response magnitudes that were related via either linear, exponential, or quadratic function. Participants approached ceiling performance by the end of training in each function condition, and were able to correctly respond in interpolation testing trials. All three conditions demonstrated some capacity for extrapolation, however participants in the linear condition tended to underestimate the true function, while exponential and quadratic participants reliably overestimated the true function on extrapolation trials. Extrapolation and interpolation performance are depicted in Figure 1.\nThe authors evaluated both of the rule-based models introduced in earlier research (with some modifications enabling trial-by-trial learning). The polynomial hypothesis testing model (Brehmer, 1974; Carroll, 1963) tended to mimic the true function closely in extrapolation, and thus offered a poor account of the human data. The log-polynomial adaptive regression model (Koh & Meyer, 1991) was able to mimic some of the systematic deviations produced by human subjects, but also predicted overestimation in cases where underestimation occurred.\nThe authors also introduced two new function-learning models. The Associative Learning Model (ALM) and the extrapolation-association model (EXAM). ALM is a two layer connectionist model adapted from the ALCOVE model in the category learning literature (Kruschke, 1992). ALM belongs to the general class of radial-basis function neural networks, and can be considered a similarity-based model in the sense that the nodes in the input layer of the network are activated as a function of distance. The EXAM model retains the same similarity based activation and associative learning mechanisms as ALM, while being augmented with a linear rule response mechanism. When presented with novel stimuli, EXAM will retrieve the most similar input-output examples encountered during training, and from those examples compute a local slope. ALM was able to provide a good account of participant training and interpolation data in all three function conditions, however it was unable to extrapolate. EXAM, on the other hand, was able to reproduce both the extrapolation underestimation, as well as the quadratic and exponential overestimation patterns exhibited by the human participants. Subsequent research identified some limitations in EXAM’s ability to account for cases where human participants learn and extrapolate sinusoidal function Bott & Heit (2004) or to scenarios where different functions apply to different regions of the input space Kalish et al. (2004), though EXAM has been shown to provide a good account of human learning and extrapolation in tasks with bi-linear, V shaped input spaces Mcdaniel et al. (2009).\n\n\n\n\n\n\n\nFigure 1: Generalization reproduced patterns from DeLosh et al. (1997) Figure 3. Stimulii that fall within the dashed lines are interpolations of the training examples.",
    "crumbs": [
      "Methods",
      "Methods"
    ]
  },
  {
    "objectID": "Sections/Methods.html#methods",
    "href": "Sections/Methods.html#methods",
    "title": "Methods",
    "section": "Methods",
    "text": "Methods\nParticipants A total of 166 participants (XXX% female, XXX% male) were recruited from the Indiana University Introductory Psychology Course. The average age of participants was XXX years (SD = XXX). Participants were randomly assigned to one of two training conditions: varied training or constant training.\nDesign The experiment employed a 2 (Training Condition: varied vs. constant).\nProcedure Upon arrival at the laboratory, participants were provided with a description of the experiment and signed informed consent forms. They were then seated in front of a computer equipped with a mouse and were given instructions on how to perform the “Hit The Wall” (HTW) visuomotor extrapolation task.\nThe HTW task involved launching projectiles to hit a target displayed on the computer screen. Participants completed a total of 90 trials during the training stage. In the varied training condition, participants encountered three velocity bands (800-1000, 1000-1200, and 1200-1400). In contrast, participants in the constant training condition encountered only one velocity band (800-1000).\nDuring the training stage, participants in both conditions also completed “no feedback” trials, where they received no information about their performance. These trials were randomly interleaved with the regular training trials.\nFollowing the training stage, participants proceeded to the testing stage, which consisted of three phases. In the first phase, participants completed “no-feedback” testing from three novel extrapolation bands (100-300, 350-550, and 600-800), with each band consisting of 15 trials.\nIn the second phase of testing, participants completed “no-feedback” testing from the three velocity bands used during the training stage (800-1000, 1000-1200, and 1200-1400). In the constant training condition, two of these bands were novel, while in the varied training condition, all three bands were encountered during training.\nThe third and final phase of testing involved “feedback” testing for each of the three extrapolation bands (100-300, 350-550, and 600-800), with each band consisting of 10 trials. Participants received feedback on their performance during this phase.\nThroughout the experiment, participants’ performance was measured by calculating the distance between the produced x-velocity of the projectiles and the closest edge of the current velocity band. Lower distances indicated better performance.\nAfter completing the experiment, participants were debriefed and provided with an opportunity to ask questions about the study.\n\nCodedigraph {\n  graph [layout = dot, rankdir = LR]\n\n  // define the global styles of the nodes\n  node [shape = rectangle, style = filled]\n\n  data1 [label = \" Varied Training \\n800-1000\\n1000-1200\\n1200-1400\", fillcolor = \"#FF0000\"]\n  data2 [label = \" Constant Training \\n800-1000\", fillcolor = \"#00A08A\"]\n  Test3 [label = \"    Final Test \\n  Novel With Feedback  \\n100-300\\n350-550\\n600-800\", fillcolor = \"#ECCBAE\"]\n\n  // edge definitions with the node IDs\n  data1 -&gt; Test1\n  data2 -&gt; Test1\n\n  subgraph cluster {\n    label = \"Test Phase \\n(Counterbalanced Order)\"\n    Test1 [label = \"Test  \\nNovel Bands \\n100-300\\n350-550\\n600-800\", fillcolor = \"#ECCBAE\"]\n    Test2 [label = \"  Test \\n  Varied Training Bands  \\n800-1000\\n1000-1200\\n1200-1400\", fillcolor = \"#ECCBAE\"]\n    Test1 -&gt; Test2\n  }\n\n  Test2 -&gt; Test3\n}\n#https://renenyffenegger.ch/notes/tools/Graphviz/examples/index\n#https://edotor.net/\n\n\n\n\ncluster\nTest Phase (Counterbalanced Order)data1\n Varied Training 800-10001000-12001200-1400Test1\nTest  Novel Bands 100-300350-550600-800data1-&gt;Test1\ndata2\n Constant Training 800-1000data2-&gt;Test1\nTest3\n    Final Test   Novel With Feedback  100-300350-550600-800Test2\n  Test   Varied Training Bands  800-10001000-12001200-1400Test1-&gt;Test2\nTest2-&gt;Test3\n\n\n\n\nFigure 1: Experiment 1 Design. Constant and Varied participants complete different training conditions.",
    "crumbs": [
      "Sections",
      "Methods"
    ]
  },
  {
    "objectID": "Sections/Methods.html#htw-task",
    "href": "Sections/Methods.html#htw-task",
    "title": "Methods",
    "section": "HTW Task",
    "text": "HTW Task\n\nneed to create a demo version without consent form. And maybe separate windows for the different versions.\n\nExperimental Task for the HTW Project. Programmed in Javascript, and making use of phaser.js.",
    "crumbs": [
      "Sections",
      "Methods"
    ]
  },
  {
    "objectID": "Sections/Methods.html#live-task-demo",
    "href": "Sections/Methods.html#live-task-demo",
    "title": "Methods",
    "section": "Live Task Demo",
    "text": "Live Task Demo\nCheck the box at the bottom of the consent form, and then click Start Experiment.\n\n\nHTW_Task",
    "crumbs": [
      "Sections",
      "Methods"
    ]
  },
  {
    "objectID": "Sections/e1_model_appendix.html",
    "href": "Sections/e1_model_appendix.html",
    "title": "ABC-rejection models",
    "section": "",
    "text": "Codepacman::p_load(dplyr,purrr,tidyr,ggplot2, data.table, here, patchwork, conflicted, \n               stringr,future,furrr, knitr, reactable, flextable,ggstance, htmltools)\nconflict_prefer_all(\"dplyr\", quiet = TRUE)\noptions(scipen = 999)\nwalk(c(\"Display_Functions\",\"fun_alm\",\"fun_indv_fit\",\"fun_model\"), ~ source(here::here(paste0(\"Functions/\", .x, \".R\"))))\nds &lt;- readRDS(here::here(\"data/e1_md_11-06-23.rds\"))  |&gt; as.data.table()\n\nfd &lt;- readRDS(here(\"data/e1_08-21-23.rds\"))\ntest &lt;- fd |&gt; filter(expMode2 == \"Test\") \ntestAvg &lt;- test %&gt;% group_by(id, condit, vb, bandInt,bandType,tOrder) %&gt;%\n  summarise(nHits=sum(dist==0),vx=mean(vx),dist=mean(dist),sdist=mean(sdist),n=n(),Percent_Hit=nHits/n)\nnbins=3\ntrainAvg &lt;- fd |&gt; filter(expMode2 == \"Train\") |&gt; group_by(id) |&gt; \n  mutate(tr=trial,x=vb,Block=case_when(expMode2==\"Train\" ~ cut(tr,breaks=seq(1,max(tr), length.out=nbins+1),include.lowest=TRUE,labels=FALSE),\n                                         expMode2==\"Test\" ~ 4)) |&gt; \n  group_by(id,condit,vb,x,Block) |&gt; \n  summarise(dist=mean(dist),y=mean(vx))\n\n# df with trial count columns for each level of expMode, for each id\nid_n &lt;- ds |&gt; group_by(id,condit) |&gt; summarise(nTest=n_distinct(tr[expMode2==\"Test\"]),\n                                        nTrain=n_distinct(tr[expMode2==\"Train\"])) |&gt;\n  mutate(nTotal=nTest+nTrain)\n\n\n\ntestAvg &lt;- test %&gt;% group_by(id, condit, vb, bandInt,bandType,tOrder) %&gt;%\n  summarise(nHits=sum(dist==0),vx=mean(vx),dist=mean(dist),sdist=mean(sdist),n=n(),Percent_Hit=nHits/n)\n\ninput_layer &lt;&lt;- output_layer &lt;&lt;-  c(100,350,600,800,1000,1200)\n\nids &lt;- c(1,2,4,5,6,7,8, 10,11,12,13)\nids2 &lt;- c(1,66,36)\nids3 &lt;- c(20,71,101,4,76,192)\nidsBad &lt;- c(76,192, 101)\n\n#file_name &lt;- \"n_iter_300_ntry_3000_0800\"\n#file_name &lt;- \"n_iter_100_ntry_200_4509\"\nfile_name &lt;- \"n_iter_100_ntry_400_3247\"\nfile_name &lt;- \"n_iter_200_ntry_300_5354\"\n\n# list.files(here('data/abc_reject'))\n# (grep(\"Train\",list.files(here(paste0('data/abc_reject/',file_name)),\n#                                            pattern=\"EXAM_Test\",full.names = TRUE),\n#                                 invert=TRUE, value=TRUE))\n\n\nind_fits &lt;- map(list.files(here(paste0('data/abc_reject/'),file_name),full.names=TRUE), readRDS)\n# ind_fits &lt;- map(list.files(here('data/abc_reject/n_iter_2000_ntry_10_2918'),full.names=TRUE), readRDS)\nind_fits_df &lt;- ind_fits |&gt; map(~list(dat=.x[[1]], Model = .x[[\"Model\"]], Fit_Method=.x[[\"Fit_Method\"]]))\nind_fits_df &lt;- ind_fits_df |&gt; map(~rbindlist(.x$dat) |&gt; mutate(Model = .x$Model, Fit_Method = .x$Fit_Method)) |&gt; rbindlist() \n\n\navg_samples &lt;- ind_fits_df |&gt; group_by(id,condit,Model,Fit_Method) |&gt; \n  summarise(inc=max(inc_count),iter_sum=sum(iter_count))\nmean(avg_samples$iter_sum)\n\n[1] 205708.7\n\nCodemean(avg_samples$iter_sum)\n\n[1] 205708.7\n\nCodemin(avg_samples$iter_sum)\n\n[1] 9965\n\nCodemax(avg_samples$iter_sum)\n\n[1] 1644491\n\nCodesum(avg_samples$iter_sum)\n\n[1] 192543336\n\nCodesum(avg_samples$iter_sum)\n\n[1] 192543336\n\nCodeavg_samples |&gt; group_by(Model,Fit_Method) |&gt; summarise(mean(inc),mean(iter_sum))\n\n# A tibble: 6 × 4\n# Groups:   Model [2]\n  Model Fit_Method `mean(inc)` `mean(iter_sum)`\n  &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n1 ALM   Test              763.          295556.\n2 ALM   Test_Train        501.          197177.\n3 ALM   Train             358.          163335.\n4 EXAM  Test              581.          220765.\n5 EXAM  Test_Train        445.          185647.\n6 EXAM  Train             351.          171773.\n\nCode#run_params &lt;- tibble::lst(file_name,cMean=ind_fits[[1]]$cMean, cSig=ind_fits[[1]]$cSig, \n                          \nrun_params &lt;- keep(ind_fits[[1]], ~any(class(.x) %in% c(\"character\", \"numeric\")))\nrun_params &lt;- tibble(!!!run_params) |&gt; select(-Model,-Fit_Method)\n\nextract_info &lt;- function(raw_names, run_params) {\n  fname &lt;- tools::file_path_sans_ext(basename(raw_names))\n  n_samp &lt;- str_extract(raw_names, \"(?&lt;=_)\\\\d+(?=_)\")\n  ntry_ &lt;- str_extract(raw_names, \"(?&lt;=ntry_)\\\\d+\")\n  type &lt;- 'ss'\n  data.frame(run_params, n_samp, ntry_, type, fname)\n}\n\nrun_info &lt;- extract_info(file_name,run_params)\nCodegenerate_data &lt;- function(Model, post_samples, data, num_samples = 1, return_dat = \"train_data, test_data\") {\n  # Filter data for the specific id without invalidating selfref\n  sbj_data &lt;- copy(data[id == post_samples$id[1]])\n  simulation_function &lt;- ifelse(Model == \"EXAM\", full_sim_exam, full_sim_alm)\n\n  target_data &lt;- switch(return_dat,\n                        \"test_data\" = copy(sbj_data[expMode2 == \"Test\"]),\n                        \"train_data\" = copy(sbj_data[expMode2 == \"Train\"]),\n                        \"train_data, test_data\" = copy(sbj_data[expMode2 %in% c(\"Test\", \"Train\")]))\n  \n  post_samples &lt;- post_samples[order(mean_error)][1:num_samples, .(c, lr, mean_error, rank = .I)]\n\n  simulated_data_list &lt;- lapply(1:nrow(post_samples), function(i) {\n    params &lt;- post_samples[i]\n    sim_data &lt;- simulation_function(sbj_data, params$c, params$lr, input_layer = input_layer, \n                                    output_layer = output_layer, return_dat = return_dat)\n    sim_data_dt &lt;- data.table(id = sbj_data$id[1], condit = sbj_data$condit[1], \n                              expMode2 = target_data$expMode2, Model = Model,tr=target_data$tr,\n                              y = target_data$y, x = target_data$x, c = params$c, \n                              lr = params$lr, mean_error = params$mean_error, rank = i,\n                              pred = sim_data)\n    return(sim_data_dt)\n  })\n  \n  result_dt &lt;- rbindlist(simulated_data_list)\n  setcolorder(result_dt, c(\"id\", \"condit\", \"expMode2\",\"tr\", \"c\", \"lr\", \"x\", \"y\", \"pred\"))\n  return(result_dt)\n}\n\nfuture::plan(multisession)\n\nnestSbjModelFit &lt;- ind_fits_df %&gt;% nest(.by=c(id,Model,Fit_Method))\n\n# organize test data predictions\npost_dat &lt;- nestSbjModelFit |&gt; mutate(pp=furrr::future_pmap(list(id,Model,Fit_Method,data), ~{\n   generate_data(..2, ..4 |&gt; mutate(id=..1), ds, num_samples = 20, return_dat=\"test_data\")\n   })) |&gt; \n  select(Fit_Method,pp,-data) |&gt;  \n  unnest(pp) |&gt;  filter(expMode2==\"Test\") |&gt; as.data.table()\n\npost_dat_avg &lt;- post_dat |&gt; group_by(id, condit, Model, Fit_Method, x, c, lr, rank) |&gt; \n  summarise(y = mean(y), pred = mean(pred), error = y - pred) |&gt; as.data.table() \n\npost_dat_avg2 &lt;- post_dat_avg |&gt;\n  group_by(id, condit, Model, Fit_Method, c, lr, rank) |&gt; \n  summarise(y = mean(y), pred = mean(pred), error = y - pred) |&gt; as.data.table() |&gt; arrange(rank)\n\nmap_id &lt;- post_dat |&gt; group_by(id, condit, Model, Fit_Method) |&gt; \n  filter(rank==1) |&gt; slice_head(n=1) |&gt; select(id,condit,Fit_Method,Model,c,lr,mean_error,rank) |&gt;\n  left_join(id_n,by=(c(\"id\",\"condit\")))\n\n# compute BIC for each row of map_id; p=2 for c and lr\nmap_id &lt;- map_id |&gt; mutate(n = fifelse(Fit_Method == \"Test\", nTest, fifelse(Fit_Method == \"Train\", nTrain, nTotal)),BIC = -2 * log(mean_error) + log(n)*2)\n\nbic_id &lt;- map_id %&gt;%\n  group_by(id, Fit_Method) %&gt;%\n  arrange(Model) %&gt;%\n  summarize(BIC_diff = diff(BIC),\n            .groups = 'drop') %&gt;%\n  left_join(map_id, by = c(\"id\", \"Fit_Method\")) %&gt;%\n  select(id, Fit_Method, Model, BIC, BIC_diff)\n\n\n\nsetorder(post_dat_avg, id, x, rank)\npost_dat_l &lt;- melt(post_dat_avg, id.vars = c(\"id\", \"condit\", \"Model\", \"Fit_Method\", \"x\", \"c\", \"lr\", \"rank\",\"error\"),\n                   measure.vars = c(\"pred\", \"y\"), variable.name = \"Resp\", value.name = \"val\")\npost_dat_l[, Resp := fifelse(Resp == \"y\", \"Observed\",\n                             fifelse(Model == \"ALM\", \"ALM\", \"EXAM\"))]\nsetorder(post_dat_l, id, Resp)\n#rm(post_dat_avg)\n\n\n# organize training data predictions\npd_train &lt;- nestSbjModelFit |&gt; mutate(pp=furrr::future_pmap(list(id,Model,Fit_Method,data), ~{\n   generate_data(..2, ..4 |&gt; mutate(id=..1), ds, num_samples = 20, return_dat=\"train_data\")\n   })) |&gt;\n  select(Fit_Method,pp,-data) |&gt;\n  unnest(pp) |&gt; as.data.table() |&gt; filter(expMode2==\"Train\")\n\nnbins &lt;- 3\npd_train &lt;- pd_train |&gt; group_by(id,condit,Model,Fit_Method) |&gt;\n  mutate(Block=cut(tr,breaks=seq(1,max(tr), length.out=nbins+1),include.lowest=TRUE,labels=FALSE))\nsetorder(pd_train, id, x,Block, rank)\n\npd_train_l &lt;- melt(pd_train, id.vars = c(\"id\", \"condit\", \"Model\",\"Block\", \"Fit_Method\", \"x\", \"c\", \"lr\", \"rank\"),\n                   measure.vars = c(\"pred\", \"y\"), variable.name = \"Resp\", value.name = \"val\") |&gt; as.data.table()\npd_train_l[, Resp := fifelse(Resp == \"y\", \"Observed\",\n                             fifelse(Model == \"ALM\", \"ALM\", \"EXAM\"))] \nsetorder(pd_train_l, id,Block, Resp) \n\npd_train_l &lt;- pd_train_l |&gt;\n  mutate(dist = case_when(\n    val &gt;= x & val &lt;= x + 200 ~ 0,                 \n    val &lt; x ~ abs(x - val),                       \n    val &gt; x + 200 ~ abs(val - (x + 200)),           \n    TRUE ~ NA_real_                                 \n  ))\nplan(sequential)\n\nplan(sequential)\n\n\n# theta_map &lt;- post_dat_avg |&gt; group_by(condit,Model,Fit_Method) |&gt; summarize(c=median(c),lr=median(lr))\n# \n# map &lt;- simulation_function(sbj_data &lt;- ds |&gt; theta_map$c[1], , params$lr, input_layer = input_layer, \n#                                     output_layer = output_layer, return_dat = return_dat)\n\n# AIC and BIC\n# mc2 &lt;- post_dat |&gt; filter(rank==1) |&gt;\n#   group_by(id,condit,Model,Fit_Method) |&gt;\n#   mutate(e2=abs(y-pred),n=n(),k=2) |&gt;\n#   group_by(id,condit,Model,Fit_Method,x) |&gt;\n#   summarise(y=mean(y), pred=mean(pred), e2=mean(e2), mean_error=first(mean_error),n=first(n),k=first(k)) |&gt;\n#   group_by(id,condit,Model,Fit_Method) |&gt;\n#   summarise(e2=mean(e2), mean_error=first(mean_error),n=first(n),k=first(k)) |&gt;\n#   mutate(AIC=2*k+n*mean_error, BIC=log(n)*k+n*mean_error)\n\n# Single run extraction:\n# exam_test &lt;- ind_fits_df |&gt; filter(Model == \"EXAM\", Fit_Method == \"Test\")\n# post_dat_trial &lt;- exam_test %&gt;% split(f =c(.$id), drop=TRUE) |&gt; \n#   map(~generate_data(.x$Model, .x, ds, num_samples = 15, return_dat=\"train_data, test_data\")) |&gt; \n#   rbindlist() |&gt; \n#   filter(expMode2==\"Test\")\n# \n# post_dat_avg &lt;- post_dat_trial |&gt; group_by(id,condit,x,c,lr,rank) |&gt; \n#   summarise(y = mean(y),pred = mean(pred)) |&gt; arrange(id,x,rank)\n\n#post_dat_l |&gt; filter(Model == \"EXAM\", Fit_Method == \"Test\",id==1) |&gt; arrange(rank)\n# head(post_dat_l)\n\n\nbestTestEXAM &lt;- post_dat_l |&gt; \n  filter(Fit_Method==\"Test\", rank==1, Resp==\"EXAM\") |&gt; \n  group_by(id,condit,Model,Fit_Method) |&gt;\n  summarise(mae=mean(abs(error))) |&gt; arrange(mae) |&gt; ungroup() |&gt;\n  mutate(group_rank = row_number(),.by=c(condit))\n\nbestTestALM&lt;- post_dat_l |&gt; \n  filter(Fit_Method==\"Test\", rank==1, Resp==\"ALM\") |&gt; \n  group_by(id,condit,Model,Fit_Method) |&gt;\n  summarise(mae=mean(abs(error))) |&gt; arrange(mae) |&gt; ungroup() |&gt;\n  mutate(group_rank = row_number(),.by=c(condit))\n\nbestTrainALM&lt;- post_dat_l |&gt; \n  filter(Fit_Method==\"Train\", rank==1, Resp==\"ALM\") |&gt; \n  group_by(id,condit,Model,Fit_Method) |&gt;\n  summarise(mae=mean(abs(error))) |&gt; arrange(mae) |&gt; ungroup() |&gt;\n  mutate(group_rank = row_number(),.by=c(condit))\n\nbestTrainEXAM&lt;- post_dat_l |&gt; \n  filter(Fit_Method==\"Train\", rank==1, Resp==\"EXAM\") |&gt; \n  group_by(id,condit,Model,Fit_Method) |&gt;\n  summarise(mae=mean(abs(error))) |&gt; arrange(mae) |&gt; ungroup() |&gt;\n  mutate(group_rank = row_number(),.by=c(condit))\n\nbestTtEXAM &lt;- post_dat_l |&gt; \n  filter(Fit_Method==\"Test_Train\", rank==1, Resp==\"EXAM\") |&gt; \n  group_by(id,condit,Model,Fit_Method) |&gt;\n  summarise(mae=mean(abs(error))) |&gt; arrange(mae) |&gt; ungroup() |&gt;\n  mutate(group_rank = row_number(),.by=c(condit))",
    "crumbs": [
      "Appendix",
      "ABC-rejection models"
    ]
  },
  {
    "objectID": "Sections/e1_model_appendix.html#posterior-average-table",
    "href": "Sections/e1_model_appendix.html#posterior-average-table",
    "title": "ABC-rejection models",
    "section": "Posterior Average Table",
    "text": "Posterior Average Table\n\nCode# post_tabs &lt;- abc_tables(post_dat_l)\n# post_tabs$et_sum |&gt; gt::gt()\n\npost_tabs &lt;- abc_tables(post_dat,post_dat_l)\n\n# tables with fit error\n# post_tabs$agg_full |&gt; flextable::tabulator(rows=c(\"Fit_Method\",\"Model\"), columns=c(\"condit\"), \n#                        `ME` = as_paragraph(mean_error)) |&gt; as_flextable() |&gt;\n#   set_caption(\"Mean from full_posterior\") \n\n# post_tabs$agg_best |&gt; flextable::tabulator(rows=c(\"Fit_Method\",\"Model\"), columns=c(\"condit\"), \n#                        `ME` = as_paragraph(mean_error)) |&gt; as_flextable() |&gt;\n#   set_caption(\"Mean from best parameters\") \n\npost_tabs$agg_pred_full |&gt; flextable::tabulator(rows=c(\"Fit_Method\",\"Model\"), columns=c(\"condit\"), \n                       `ME` = as_paragraph(mean_error)) |&gt; as_flextable() |&gt;\n  set_caption(\"Mean from full_posterior\") \n\n\n\n\n\nFull Posterior {#tbl-anonymous-4998540-1}\n\nFit_Method\nModel\n\nConstant\n\nVaried\n\n\n\nTest\nALM\n\n275.4\n\n226.9\n\n\nEXAM\n\n214.6\n\n212.4\n\n\nTest_Train\nALM\n\n286.4\n\n265.5\n\n\nEXAM\n\n227.5\n\n246.2\n\n\nTrain\nALM\n\n530.6\n\n365.5\n\n\nEXAM\n\n339.1\n\n370.7\n\n\n\n\n\nCodepost_tabs$agg_pred_best |&gt; flextable::tabulator(rows=c(\"Fit_Method\",\"Model\"), columns=c(\"condit\"), \n                       `ME` = as_paragraph(mean_error)) |&gt; as_flextable() |&gt;\n  set_caption(\"Mean from full_posterior\") \n\n\n\n\n\nBest Posterior {#tbl-anonymous-4998540-2}\n\nFit_Method\nModel\n\nConstant\n\nVaried\n\n\n\nTest\nALM\n\n273.8\n\n219.3\n\n\nEXAM\n\n213.3\n\n208.4\n\n\nTest_Train\nALM\n\n285.1\n\n260.8\n\n\nEXAM\n\n226.9\n\n240.8\n\n\nTrain\nALM\n\n517.0\n\n363.7\n\n\nEXAM\n\n338.5\n\n356.7\n\n\n\n\n\nPosterior Distribution",
    "crumbs": [
      "Appendix",
      "ABC-rejection models"
    ]
  },
  {
    "objectID": "Sections/e1_model_appendix.html#interactive-test-predictions-table",
    "href": "Sections/e1_model_appendix.html#interactive-test-predictions-table",
    "title": "ABC-rejection models",
    "section": "Interactive Test Predictions Table",
    "text": "Interactive Test Predictions Table\n\nCodetags$select(\n  tags$option(value = \"\", \"All\"),\n  purrr::map(unique(post_tabs$agg_x_full$condit), tags$option),\n    purrr::map(unique(post_tabs$agg_x_full$Model), tags$option),\n    purrr::map(unique(post_tabs$agg_x_full$Fit_Method), tags$option),\n   purrr::map(unique(post_tabs$agg_x_full$x), tags$option)\n)\n\nAll\nConstant\nVaried\nALM\nEXAM\nTest\nTest_Train\nTrain\n100\n350\n600\n800\n1000\n1200\n\nCodeselectFilter &lt;- function(tableId, style = \"width: 100%; height: 100%;\") {\n  function(values, name) {\n    tags$select(\n      # Set to undefined to clear the filter\n      onchange = sprintf(\"\n        const value = event.target.value\n        Reactable.setFilter('%s', '%s', value === '__ALL__' ? undefined : value)\n      \", tableId, name),\n      # \"All\" has a special value to clear the filter, and is the default option\n      tags$option(value = \"__ALL__\", \"All\"),\n      lapply(unique(values), tags$option),\n      \"aria-label\" = sprintf(\"Filter %s\", name),\n      style = style\n    )\n  }\n}\n\n\npost_tabs$agg_x_full |&gt; \n  left_join(post_tabs$agg_x_best |&gt; rename(\"best_error\"=mean_error,\"best_pred\"=pred), \n            by=c(\"condit\",\"Model\",\"Fit_Method\",\"x\",\"y\")) |&gt; \n  arrange(desc(condit),x,Fit_Method) |&gt;\n  mutate(x=as.character(x)) |&gt;\n  reactable::reactable(\n    columns = list(condit=colDef(name=\"Condit\",filterInput=selectFilter(\"my-tbl\")),\n                   Model=colDef(name=\"Model\",filterInput=selectFilter(\"my-tbl\")),\n                   Fit_Method=colDef(name=\"Fit_Method\",filterInput=selectFilter(\"my-tbl\"),\n                                     filterMethod = JS(\"(rows, columnId, filterValue) =&gt; {\n        return rows.filter(row =&gt; row.values[columnId] === filterValue)\n      }\")),\n      x=colDef(name=\"x\",filterInput=selectFilter(\"my-tbl\"),\n               filterMethod = JS(\"(rows, columnId, filterValue) =&gt; {\n        return rows.filter(row =&gt; row.values[columnId] === filterValue)\n      }\"))),\n    elementId = \"my-tbl\",\n    defaultPageSize=15,\n    filterable=TRUE)",
    "crumbs": [
      "Appendix",
      "ABC-rejection models"
    ]
  },
  {
    "objectID": "Sections/e1_model_appendix.html#train-predictions",
    "href": "Sections/e1_model_appendix.html#train-predictions",
    "title": "ABC-rejection models",
    "section": "Train Predictions",
    "text": "Train Predictions\n\nCodept_train &lt;- abc_train_tables(pd_train,pd_train_l)\npt_train$agg_pred_full |&gt; flextable::tabulator(rows=c(\"Fit_Method\",\"Model\"), columns=c(\"condit\"), \n                       `ME` = as_paragraph(mean_error)) |&gt; as_flextable() |&gt;\n  set_caption(\"Mean from full_posterior\")\n\n\n\n\n\nFit_Method\nModel\n\nConstant\n\nVaried\n\n\n\nTest\nALM\n\n851.2\n\n3,049.9\n\n\nEXAM\n\n711.9\n\n1,047.5\n\n\nTest_Train\nALM\n\n229.7\n\n324.7\n\n\nEXAM\n\n233.4\n\n331.3\n\n\nTrain\nALM\n\n216.1\n\n301.8\n\n\nEXAM\n\n216.0\n\n302.3\n\n\n\n\n\nCodept_train$block_pred_full |&gt; \n  flextable::tabulator(rows=c(\"Fit_Method\",\"Model\",\"Block\"), columns=c(\"condit\"), \n                       `Observed` = as_paragraph(y), \n                       `Predicted` = as_paragraph(pred),\n                       `ME` = as_paragraph(mean_error)) |&gt; as_flextable() |&gt;\n  set_caption(\"Mean from full_posterior\")\n\n\n\n\n\n\nFit_Method\nModel\nBlock\n\nConstant\n\nVaried\n\n\n\nObserved\nPredicted\nME\n\nObserved\nPredicted\nME\n\n\n\n\nTest\nALM\n1\n\n927.4\n730.3\n876.2\n\n1,069.0\n746.6\n1,838.5\n\n\n2\n\n922.8\n484.7\n1,001.5\n\n1,091.9\n-4,869.1\n7,073.9\n\n\n3\n\n916.5\n1,202.4\n714.1\n\n1,100.8\n951.3\n1,022.6\n\n\nEXAM\n1\n\n927.4\n796.9\n980.6\n\n1,069.0\n889.1\n1,248.6\n\n\n2\n\n922.8\n895.1\n720.6\n\n1,091.9\n1,024.3\n1,139.0\n\n\n3\n\n916.5\n918.0\n442.5\n\n1,100.8\n1,005.0\n772.5\n\n\nTest_Train\nALM\n1\n\n927.4\n820.4\n294.8\n\n1,069.0\n872.4\n393.2\n\n\n2\n\n922.8\n885.6\n202.9\n\n1,091.9\n980.9\n307.6\n\n\n3\n\n916.5\n886.9\n191.9\n\n1,100.8\n1,008.5\n277.9\n\n\nEXAM\n1\n\n927.4\n832.4\n296.8\n\n1,069.0\n864.5\n411.7\n\n\n2\n\n922.8\n902.8\n205.8\n\n1,091.9\n989.2\n309.7\n\n\n3\n\n916.5\n902.2\n198.3\n\n1,100.8\n1,020.4\n277.8\n\n\nTrain\nALM\n1\n\n927.4\n830.6\n272.3\n\n1,069.0\n921.7\n355.6\n\n\n2\n\n922.8\n889.9\n193.6\n\n1,091.9\n1,005.0\n289.1\n\n\n3\n\n916.5\n890.3\n183.0\n\n1,100.8\n1,022.5\n265.3\n\n\nEXAM\n1\n\n927.4\n831.4\n272.1\n\n1,069.0\n916.3\n355.6\n\n\n2\n\n922.8\n890.3\n193.4\n\n1,091.9\n1,001.8\n289.5\n\n\n3\n\n916.5\n890.0\n183.1\n\n1,100.8\n1,020.8\n266.1\n\n\n\n\n\nCodept_train$block_pred_full |&gt; filter(condit==\"Varied\") |&gt;\n  flextable::tabulator(rows=c(\"Fit_Method\",\"Block\"), columns=c(\"Model\"), \n                      # `Observed` = as_paragraph(y), \n                       `Predicted` = as_paragraph(pred),\n                       `ME` = as_paragraph(mean_error)) |&gt; as_flextable() |&gt;\n  set_caption(\"Mean from full_posterior\")\n\n\n\n\n\n\nFit_Method\nBlock\n\nALM\n\nEXAM\n\n\n\nPredicted\nME\n\nPredicted\nME\n\n\n\n\nTest\n1\n\n746.6\n1,838.5\n\n889.1\n1,248.6\n\n\n2\n\n-4,869.1\n7,073.9\n\n1,024.3\n1,139.0\n\n\n3\n\n951.3\n1,022.6\n\n1,005.0\n772.5\n\n\nTest_Train\n1\n\n872.4\n393.2\n\n864.5\n411.7\n\n\n2\n\n980.9\n307.6\n\n989.2\n309.7\n\n\n3\n\n1,008.5\n277.9\n\n1,020.4\n277.8\n\n\nTrain\n1\n\n921.7\n355.6\n\n916.3\n355.6\n\n\n2\n\n1,005.0\n289.1\n\n1,001.8\n289.5\n\n\n3\n\n1,022.5\n265.3\n\n1,020.8\n266.1\n\n\n\n\n\nCodept_train$block_pred_full |&gt;\n  flextable::tabulator(rows=c(\"Fit_Method\",\"Block\"), columns=c(\"condit\",\"Model\"), \n                      # `Observed` = as_paragraph(y), \n                       `Predicted` = as_paragraph(pred),\n                       `ME` = as_paragraph(mean_error)) |&gt; as_flextable() |&gt;\n  set_caption(\"Mean from full_posterior\")\n\n\n\n\n\n\nFit_Method\nBlock\n\nConstant\n\nVaried\n\n\n\nALM\n\nEXAM\n\nALM\n\nEXAM\n\n\n\nPredicted\nME\n\nPredicted\nME\n\nPredicted\nME\n\nPredicted\nME\n\n\n\n\nTest\n1\n\n730.3\n876.2\n\n796.9\n980.6\n\n746.6\n1,838.5\n\n889.1\n1,248.6\n\n\n2\n\n484.7\n1,001.5\n\n895.1\n720.6\n\n-4,869.1\n7,073.9\n\n1,024.3\n1,139.0\n\n\n3\n\n1,202.4\n714.1\n\n918.0\n442.5\n\n951.3\n1,022.6\n\n1,005.0\n772.5\n\n\nTest_Train\n1\n\n820.4\n294.8\n\n832.4\n296.8\n\n872.4\n393.2\n\n864.5\n411.7\n\n\n2\n\n885.6\n202.9\n\n902.8\n205.8\n\n980.9\n307.6\n\n989.2\n309.7\n\n\n3\n\n886.9\n191.9\n\n902.2\n198.3\n\n1,008.5\n277.9\n\n1,020.4\n277.8\n\n\nTrain\n1\n\n830.6\n272.3\n\n831.4\n272.1\n\n921.7\n355.6\n\n916.3\n355.6\n\n\n2\n\n889.9\n193.6\n\n890.3\n193.4\n\n1,005.0\n289.1\n\n1,001.8\n289.5\n\n\n3\n\n890.3\n183.0\n\n890.0\n183.1\n\n1,022.5\n265.3\n\n1,020.8\n266.1\n\n\n\n\n\nCodept_train$block_pred_full |&gt;\n  flextable::tabulator(rows=c(\"Fit_Method\",\"Block\"), columns=c(\"condit\",\"Model\"), \n                      # `Observed` = as_paragraph(y), \n                       `ME` = as_paragraph(mean_error)) |&gt; as_flextable() |&gt;\n  set_caption(\"Mean from full_posterior\")\n\n\n\n\n\n\nFit_Method\nBlock\n\nConstant\n\nVaried\n\n\n\nALM\n\nEXAM\n\nALM\n\nEXAM\n\n\n\n\nTest\n1\n\n876.2\n\n980.6\n\n1,838.5\n\n1,248.6\n\n\n2\n\n1,001.5\n\n720.6\n\n7,073.9\n\n1,139.0\n\n\n3\n\n714.1\n\n442.5\n\n1,022.6\n\n772.5\n\n\nTest_Train\n1\n\n294.8\n\n296.8\n\n393.2\n\n411.7\n\n\n2\n\n202.9\n\n205.8\n\n307.6\n\n309.7\n\n\n3\n\n191.9\n\n198.3\n\n277.9\n\n277.8\n\n\nTrain\n1\n\n272.3\n\n272.1\n\n355.6\n\n355.6\n\n\n2\n\n193.6\n\n193.4\n\n289.1\n\n289.5\n\n\n3\n\n183.0\n\n183.1\n\n265.3\n\n266.1\n\n\n\n\n\nCodebest_indices &lt;- pt_train$block_pred_full_x %&gt;%\n   filter(!(Fit_Method==\"Test\")) |&gt;\n  nest(data = -condit) %&gt;%\n  mutate(indices = map(data, ~{\n    .x %&gt;%\n      select(-y, -pred, -mean_error) %&gt;%\n      pivot_wider(names_from = Model, values_from = best) %&gt;%\n      ungroup() |&gt;\n      select(ALM, EXAM) %&gt;%\n      pmap(.f = function(ALM, EXAM) {\n        which(c(ALM, EXAM) == 1)\n      })\n  })) %&gt;%\n  select(condit, indices)\n   \n\n\npt_train$block_pred_full_x |&gt; filter(condit==\"Varied\",!(Fit_Method==\"Test\")) |&gt;\n  flextable::tabulator(rows=c(\"Fit_Method\",\"Block\",\"x\"), columns=c(\"Model\"), \n                      # `Observed` = as_paragraph(y), \n                       `Predicted` = as_paragraph(pred),\n                       `ME` = as_paragraph(mean_error)) |&gt; \n  as_flextable() %&gt;% \n  apply_best_formatting(.,pull(filter(best_indices,condit==\"Varied\"),indices) %&gt;% .[[1]]) |&gt; \n  set_caption(\"Vared Train Predictions\")\n\n\n\n\n\n\nFit_Method\nBlock\nx\n\nALM\n\nEXAM\n\n\n\nPredicted\nME\n\nPredicted\nME\n\n\n\n\nTest_Train\n1\n800\n\n845.3\n356.8\n\n849.0\n375.5\n\n\n1,000\n\n875.0\n387.1\n\n868.9\n404.0\n\n\n1,200\n\n898.1\n423.9\n\n879.2\n440.9\n\n\n2\n800\n\n940.2\n291.3\n\n960.6\n292.8\n\n\n1,000\n\n984.0\n291.7\n\n992.2\n293.7\n\n\n1,200\n\n1,019.2\n339.7\n\n1,015.3\n341.9\n\n\n3\n800\n\n960.2\n261.2\n\n973.8\n267.9\n\n\n1,000\n\n1,009.0\n259.7\n\n1,026.3\n260.9\n\n\n1,200\n\n1,054.8\n308.0\n\n1,060.3\n300.4\n\n\nTrain\n1\n800\n\n892.3\n321.8\n\n887.0\n319.7\n\n\n1,000\n\n923.4\n355.1\n\n918.1\n355.7\n\n\n1,200\n\n947.3\n378.0\n\n941.6\n379.8\n\n\n2\n800\n\n979.9\n269.3\n\n975.1\n269.5\n\n\n1,000\n\n1,001.0\n281.0\n\n997.7\n282.1\n\n\n1,200\n\n1,035.6\n316.4\n\n1,033.5\n316.5\n\n\n3\n800\n\n992.9\n253.4\n\n989.2\n255.0\n\n\n1,000\n\n1,017.2\n247.3\n\n1,017.3\n247.6\n\n\n1,200\n\n1,055.9\n291.5\n\n1,053.9\n291.9\n\n\n\n\n\nCodept_train$block_pred_full_x |&gt; filter(condit==\"Constant\",!(Fit_Method==\"Test\")) |&gt;\n  flextable::tabulator(rows=c(\"Fit_Method\",\"Block\",\"x\"), columns=c(\"Model\"), \n                      # `Observed` = as_paragraph(y), \n                       `Predicted` = as_paragraph(pred),\n                       `ME` = as_paragraph(mean_error)) |&gt; \n  as_flextable() %&gt;% \n  apply_best_formatting(.,pull(filter(best_indices,condit==\"Constant\"),indices) %&gt;% .[[1]]) |&gt; \n  set_caption(\"Constant Train Predictions\")\n\n\n\n\n\n\nFit_Method\nBlock\nx\n\nALM\n\nEXAM\n\n\n\nPredicted\nME\n\nPredicted\nME\n\n\n\n\nTest_Train\n1\n800\n\n820.8\n294.3\n\n832.5\n296.1\n\n\n2\n\n886.0\n202.5\n\n902.6\n205.4\n\n\n3\n\n887.7\n191.1\n\n902.8\n197.5\n\n\nTrain\n1\n\n830.7\n271.6\n\n831.6\n271.4\n\n\n2\n\n889.9\n193.4\n\n890.3\n193.2\n\n\n3\n\n890.6\n182.3\n\n890.4\n182.3\n\n\n\n\n\nCode# pull(filter(best_indices,condit==\"Varied\"),indices) %&gt;% .[[1]]",
    "crumbs": [
      "Appendix",
      "ABC-rejection models"
    ]
  },
  {
    "objectID": "Sections/e1_model_appendix.html#posterior-predictive",
    "href": "Sections/e1_model_appendix.html#posterior-predictive",
    "title": "ABC-rejection models",
    "section": "Posterior Predictive:",
    "text": "Posterior Predictive:\n\nCodegroup_predictive_plots(post_dat_l) \n\n\n\n\n\n\nCodetestAvg |&gt; ggplot(aes(x=vx)) + geom_density() + facet_wrap(~vb) +\n\n\n\npost_dat_avg |&gt; filter(rank==1) |&gt; ggplot(aes(x=pred)) + geom_density() + facet_wrap(~x)\n\n\n\n\n\n\nCodepost_dat_avg |&gt; filter(rank==1) |&gt; ggplot(aes(x=pred)) + \n  geom_density() + geom_density(data=post_dat_avg, aes(x=y), color=\"red\") +\n  facet_wrap(condit~x,ncol=6)\n\n\n\n\n\n\nCodepost_dat_avg |&gt; filter(Model==\"EXAM\",Fit_Method==\"Test\") |&gt; ggplot(aes(x=pred)) + \n  geom_density() + geom_density(data=post_dat_avg, aes(x=y), color=\"red\") +\n  facet_wrap(condit~x,ncol=6)\n\n\n\n\n\n\nCodepost_dat_avg |&gt; filter(Model==\"ALM\",Fit_Method==\"Test\") |&gt; ggplot(aes(x=pred)) + \n  geom_density() + geom_density(data=post_dat_avg, aes(x=y), color=\"red\") +\n  facet_wrap(condit~x,ncol=6)\n\n\n\n\n\n\nCodepost_dat_avg |&gt; filter(Fit_Method==\"Test\") |&gt; ggplot(aes(x=pred)) + \n  geom_density(aes(fill=Model),alpha=.5) + geom_density(data=post_dat_avg, aes(x=y), color=\"black\",alpha=2) +\n  facet_wrap(condit~x,ncol=6)\n\n\n\n\n\n\nCodepost_dat_avg |&gt; filter(Fit_Method==\"Test_Train\") |&gt; ggplot(aes(x=pred)) + \n  geom_density(aes(fill=Model),alpha=.5) + geom_density(data=post_dat_avg, aes(x=y), color=\"black\",alpha=2) +\n  facet_wrap(condit~x,ncol=6)\n\n\n\n\n\n\nCodepost_dat_avg |&gt; filter(Fit_Method==\"Train\",pred&gt;0,pred&lt;2000) |&gt; ggplot(aes(x=pred)) + \n  geom_density(aes(fill=Model),alpha=.5) + geom_density(data=post_dat_avg, aes(x=y), color=\"black\",alpha=2) +\n  facet_wrap(condit~x,ncol=6)\n\n\n\n\n\n\n\nAlt grouping of Posterior Predictive\n\nCode group_predictive_plots2(post_dat_l) \n\n\n\n\n\n\n\n\nCodepost_dat_avg |&gt; group_by(id,condit,Fit_Method,x) |&gt;\n  ggplot(aes(x = x, y = error, fill=Model)) + \n  stat_bar + \n  facet_wrap(condit~Fit_Method, scales=\"free\") + \n  labs(title = \"Model Resituals - full posterior\")\n\n\n\n\n\n\nCodepost_dat_avg |&gt; group_by(id,condit,Fit_Method,x) |&gt;\n  filter(rank==1) |&gt; \n  ggplot(aes(x = x, y = error, fill=Model)) + \n  stat_bar + \n  facet_wrap(condit~Fit_Method, scales=\"free\") + \n  labs(title = \"Model Residuals - best parameters\")\n\n\n\n\n\n\n\n\nCodeplot_indv_posterior(ind_fits_df |&gt; mutate(Group=condit))\n\n\n\n\n\n\nCodeplot_indv_posterior(post_dat |&gt; filter(rank==1) |&gt; mutate(Group=condit))\n\n\n\n\n\n\nCode# plot join density of c and lr\n# post_dat |&gt; filter(rank==1, c&lt;.001) |&gt; \n#   ggplot(aes(x=c, y=lr, color=condit)) + geom_point() + facet_wrap(~Model+Fit_Method)\n\npost_dat |&gt;  filter(c&lt;.001) |&gt; ggplot(aes(x=c,y=condit,fill=condit)) + geom_boxploth(width=.5) + facet_wrap(~Model+Fit_Method,scales=\"free\")\n\n\n\n\n\n\nCodepost_dist &lt;- post_dat_avg %&gt;%\n  group_by(id, condit, Model, Fit_Method, rank) %&gt;%\n  slice_head(n = 1) %&gt;%\n  ungroup() %&gt;% # Make sure to remove the grouping by rank before the next group_by\n  group_by(id, condit, Model, Fit_Method) %&gt;%\n  summarize(across(c:lr, list(mean = mean, sd = sd, se = ~sd(.)/sqrt(n()))), .groups = 'keep')\n\npost_dist |&gt; \n  group_by(condit, Model, Fit_Method) %&gt;%\n  mutate(across(c_mean, list(gmean = mean, gsd = sd, gse = ~sd(.)/sqrt(n()))), .groups = 'keep') |&gt;\n  filter(c_mean&lt;(c_mean_gmean+(.5*c_mean_gse))) |&gt;\n  ggplot(aes(y=id, x = c_mean)) + \n  stat_pointinterval() + \n  ggh4x::facet_nested_wrap(Fit_Method~condit~Model,scales=\"free\")\n\n\n\n\n\n\nCodepost_dist |&gt; \n  group_by(condit, Model, Fit_Method) %&gt;%\n  mutate(across(c_mean, list(gmean = median, gsd = sd, gse = ~sd(.)/sqrt(n()))), .groups = 'keep') |&gt;\n  filter(c_mean&lt;(c_mean_gmean+(.5*c_mean_gse))) |&gt;\n  ggplot(aes( x = c_mean,fill=condit)) + geom_density() +\n  ggh4x::facet_nested_wrap(Fit_Method~Model,scales=\"free\")\n\n\n\n\n\n\nCodepost_dist |&gt; \n  group_by(condit, Model, Fit_Method) %&gt;%\n  mutate(across(c_mean, list(gmean = median, gsd = sd, gse = ~sd(.)/sqrt(n()))), .groups = 'keep') |&gt;\n  filter(c_mean&lt;(c_mean_gmean+(.5*c_mean_gse))) |&gt;\n  ggplot(aes( x = log(c_mean),fill=condit)) + geom_density() +\n  ggh4x::facet_nested_wrap(Fit_Method~Model,scales=\"free\")\n\n\n\n\n\n\nCode post_dat_avg %&gt;%\n    group_by(id, condit, Model, Fit_Method, rank) %&gt;%\n    slice_head(n = 1) |&gt;\n    ggplot(aes( x = log(c),fill=condit)) + geom_density() +\n    ggh4x::facet_nested_wrap(Fit_Method~Model,scales=\"free\")\n\n\n\n\n\n\nCode post_dat_avg %&gt;%\n    group_by(id, condit, Model, Fit_Method, rank) %&gt;%\n    slice_head(n = 1) |&gt;\n    ggplot(aes(y=Fit_Method, x = log(c),col=condit)) + stat_pointinterval(position=position_dodge(.2)) +\n    ggh4x::facet_nested_wrap(~Model,scales=\"free\")\n\n\n\n\n\n\nCode post_dat_avg %&gt;%\n    group_by(id, condit, Model, Fit_Method, rank) %&gt;%\n    slice_head(n = 1) |&gt;\n    ggplot(aes(y=Fit_Method, x = lr,col=condit)) + stat_pointinterval(position=position_dodge(.2)) +\n    ggh4x::facet_nested_wrap(~Model,scales=\"free\")\n\n\n\n\n\n\nCode# post_dat_avg %&gt;%\n#     group_by(id, condit, Model, Fit_Method, rank) %&gt;%\n#     slice_head(n = 1) |&gt;\n#     ggplot(aes(y=Fit_Method, x = (lr),fill=condit)) + \n#     stat_halfeye(position=position_dodge(.2)) +\n#     ggh4x::facet_nested_wrap(~Model,scales=\"free\")   \n#",
    "crumbs": [
      "Appendix",
      "ABC-rejection models"
    ]
  },
  {
    "objectID": "Sections/e1_model_appendix.html#model-comparison",
    "href": "Sections/e1_model_appendix.html#model-comparison",
    "title": "ABC-rejection models",
    "section": "Model Comparison:",
    "text": "Model Comparison:\n\nCodeindv_best_plots(post_dat_l)\n\n\n\n\n\n\nCodepost_dat_l |&gt; group_by(condit,Model,Fit_Method,rank) |&gt; \n   summarise(mean_error=mean(abs(error)), n=n()) |&gt; \n   ggplot(aes(x=rank,y=mean_error,fill=Model))+geom_col()+facet_wrap(~Fit_Method,scales=\"free\")\n\n\n\n\n\n\nCodepost_dat_l |&gt; group_by(condit,Model,Fit_Method,rank,x) |&gt; \n   summarise(mean_error=mean(abs(error)), n=n()) |&gt; \n   ggplot(aes(x=rank,y=mean_error,fill=Model))+geom_col()+facet_wrap(Fit_Method~x,ncol=6,scales=\"free\")\n\n\n\n\n\n\nCodegroup_best_plots(post_dat_l)",
    "crumbs": [
      "Appendix",
      "ABC-rejection models"
    ]
  },
  {
    "objectID": "Sections/e1_model_appendix.html#individual-predictive-plots",
    "href": "Sections/e1_model_appendix.html#individual-predictive-plots",
    "title": "ABC-rejection models",
    "section": "Individual Predictive Plots",
    "text": "Individual Predictive Plots\n\nCodeindv_predictive_plots(post_dat_l, ids2)\n\n\n\n\n\n\nCodeindv_predictive_plots(post_dat_l, idsBad)\n\n\n\n\n\n\n\nSubject 1\n\nCodeindv_predictive_dist((post_dat_l |&gt; filter(rank&lt;=200)),ind_fits_df, sbj=list(1))\n\n\n\n\n\n\nCodeabc_tables(post_dat |&gt; filter(id==1))$agg_full |&gt; flextable() |&gt; set_caption(\"Mean from full posterior\")\n\n\n\n\n\ncondit\nModel\nFit_Method\nmean_error\n\n\n\nVaried\nALM\nTest\n239.1\n\n\nVaried\nALM\nTest_Train\n291.9\n\n\nVaried\nALM\nTrain\n297.5\n\n\nVaried\nEXAM\nTest\n219.8\n\n\nVaried\nEXAM\nTest_Train\n276.8\n\n\nVaried\nEXAM\nTrain\n297.7\n\n\n\n\n\nCodeabc_tables(post_dat |&gt; filter(id==1))$agg_best |&gt; flextable() |&gt; set_caption(\"Mean from best parameters\")\n\n\n\n\n\ncondit\nModel\nFit_Method\nmean_error\n\n\n\nVaried\nALM\nTest\n237.5\n\n\nVaried\nALM\nTest_Train\n276.0\n\n\nVaried\nALM\nTrain\n296.0\n\n\nVaried\nEXAM\nTest\n219.5\n\n\nVaried\nEXAM\nTest_Train\n269.1\n\n\nVaried\nEXAM\nTrain\n296.0\n\n\n\n\n\nCodepost_dat_l |&gt; filter(id==1) |&gt; group_by(condit,Model,Fit_Method,rank) |&gt; \n   summarise(mean_error=mean(abs(error)), n=n()) |&gt; \n   ggplot(aes(x=rank,y=mean_error,fill=Model))+geom_col()+facet_wrap(~Fit_Method)\n\n\n\n\n\n\nCode# plot_indv_posterior(ind_fits_df |&gt; filter(id==1))\n# ind_fits_df |&gt; filter(id==1, Fit_Method==\"Test Only\", Model==\"EXAM\") |&gt; pull(c) |&gt; unique()\n\n\nSubject 36\n\nCodeindv_predictive_dist(post_dat_l,ind_fits_df, sbj=list(36))\n\n\n\n\n\n\nCode#abc_tables(post_dat_l |&gt; filter(id==36))$et_sum |&gt; gt::gt()\n\nabc_tables(post_dat |&gt; filter(id==36))$agg_full |&gt; flextable() |&gt; set_caption(\"Mean from full posterior\")\n\n\n\n\n\ncondit\nModel\nFit_Method\nmean_error\n\n\n\nVaried\nALM\nTest\n221.2\n\n\nVaried\nALM\nTest_Train\n316.3\n\n\nVaried\nALM\nTrain\n268.5\n\n\nVaried\nEXAM\nTest\n214.2\n\n\nVaried\nEXAM\nTest_Train\n305.6\n\n\nVaried\nEXAM\nTrain\n269.3\n\n\n\n\n\nCodeabc_tables(post_dat |&gt; filter(id==36))$agg_best |&gt; flextable() |&gt; set_caption(\"Mean from best parameters\")\n\n\n\n\n\ncondit\nModel\nFit_Method\nmean_error\n\n\n\nVaried\nALM\nTest\n216.3\n\n\nVaried\nALM\nTest_Train\n315.9\n\n\nVaried\nALM\nTrain\n261.4\n\n\nVaried\nEXAM\nTest\n210.7\n\n\nVaried\nEXAM\nTest_Train\n296.2\n\n\nVaried\nEXAM\nTrain\n268.4\n\n\n\n\n\nCode# plot_indv_posterior(ind_fits_df |&gt; filter(id==1))\n# ind_fits_df |&gt; filter(id==1, Fit_Method==\"Test Only\", Model==\"EXAM\") |&gt; pull(c) |&gt; unique()",
    "crumbs": [
      "Appendix",
      "ABC-rejection models"
    ]
  },
  {
    "objectID": "Sections/e1_model_appendix.html#more-comparisons",
    "href": "Sections/e1_model_appendix.html#more-comparisons",
    "title": "ABC-rejection models",
    "section": "More Comparisons",
    "text": "More Comparisons\n\nCodebest_id_x &lt;- post_dat |&gt; group_by(id,condit,Model,Fit_Method,x) |&gt;\n  mutate(e2=(y-pred)) |&gt;\n  summarise(y=mean(y), pred=mean(pred), mean_error=mean(e2),abs_me=abs(mean_error)) |&gt;\n  group_by(id,condit,Fit_Method,x) |&gt; mutate(best=ifelse(mean_error==min(mean_error),1,0)) |&gt;\n  group_by(id,condit,Fit_Method,Model) |&gt; mutate(n_best=sum(best)) \n\nbest_id &lt;- best_id_x |&gt; group_by(id,condit,Fit_Method,Model) |&gt;\n  summarise(mean_error=mean(mean_error), n_best=first(n_best),abs_me=mean(abs(mean_error)))\n  \nlowest_error_model &lt;- best_id %&gt;%\n  group_by(id, condit,Fit_Method) %&gt;%\n  summarise(Best_Model = Model[which.min(mean_error)],\n            n_best = n_best[which.min(mean_error)],\n            Lowest_error = min(mean_error),\n            differential = min(mean_error) - max(mean_error)) %&gt;%\n  ungroup()\n\nerror_difference &lt;- best_id %&gt;%\n  select(id, condit, Model,Fit_Method, mean_error,abs_me) %&gt;%\n  pivot_wider(names_from = Model, values_from = c(abs_me,mean_error)) %&gt;%\n  mutate(Error_difference = (mean_error_ALM - mean_error_EXAM), abs_error_dif = (abs_me_ALM - abs_me_EXAM))\n\nfull_comparison &lt;- lowest_error_model |&gt; left_join(error_difference, by=c(\"id\",\"condit\",\"Fit_Method\"))  |&gt; \n  group_by(condit,Fit_Method,Best_Model) |&gt; mutate(nGrp=n(), model_rank = nGrp - rank(Error_difference) ) |&gt; \n  arrange(Fit_Method,-Error_difference)\n\n\n\nbest_id |&gt; filter(Fit_Method==\"Test_Train\") |&gt; \n  arrange(mean_error) |&gt;\n  ungroup() |&gt;\n  mutate(id = reorder(id, mean_error)) %&gt;%\n  ggplot(aes(y=id,x=mean_error,fill=Model))+\n  geom_col()+\n  ggh4x::facet_grid2(~condit,axes=\"all\",scales=\"free_y\", independent = \"y\")\n\n\n\n\n\n\nCodebest_id |&gt; filter(Fit_Method==\"Test_Train\") |&gt; \n  ungroup() |&gt;\n  mutate(id = reorder(id, abs_me)) %&gt;%\n  ggplot(aes(y=id,x=abs_me,fill=Model))+\n  geom_col()+\n  ggh4x::facet_grid2(~condit,axes=\"all\",scales=\"free_y\", independent = \"y\")\n\n\n\n\n\n\nCodefull_comparison |&gt; filter(Fit_Method==\"Test_Train\") |&gt; \n  ungroup() |&gt;\n  mutate(id = reorder(id, abs_error_dif)) %&gt;%\n  ggplot(aes(y=id,x=abs_error_dif))+\n  geom_col()+\n  ggh4x::facet_grid2(~condit,axes=\"all\",scales=\"free_y\", independent = \"y\")\n\n\n\n\n\n\nCodefull_comparison |&gt; filter(Fit_Method==\"Test_Train\") |&gt; \n  ungroup() |&gt;\n  mutate(id = reorder(id, Error_difference)) %&gt;%\n  ggplot(aes(y=id,x=Error_difference))+\n  geom_col()+\n  ggh4x::facet_grid2(~condit,axes=\"all\",scales=\"free_y\", independent = \"y\")\n\n\n\n\n\n\nCoded &lt;- testAvg |&gt; left_join(full_comparison, by=c(\"id\",\"condit\")) |&gt; filter(Fit_Method==\"Test_Train\")\n\nd |&gt; ggplot(aes(x=vb,y=dist,fill=condit)) + stat_bar + facet_wrap(Fit_Method~Best_Model,ncol=2)\n\n\n\n\n\n\nCoded |&gt; \n  group_by(condit,Fit_Method,Best_Model) |&gt; \n  mutate(nGrp2=n()) |&gt;\n  filter(abs(Error_difference)&gt;15) |&gt; \n  ggplot(aes(x=vb,y=dist,fill=condit)) + \n  stat_bar + facet_wrap(Fit_Method~Best_Model,ncol=2)\n\n\n\n\n\n\nCoded |&gt; group_by(condit,Fit_Method,Best_Model) %&gt;% tally() |&gt; mutate(n=n/6)\n\n# A tibble: 4 × 4\n# Groups:   condit, Fit_Method [2]\n  condit   Fit_Method Best_Model     n\n  &lt;fct&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n1 Constant Test_Train ALM           31\n2 Constant Test_Train EXAM          49\n3 Varied   Test_Train ALM           46\n4 Varied   Test_Train EXAM          30\n\nCoded |&gt; group_by(condit,Fit_Method,Best_Model) |&gt; filter(abs(Error_difference)&gt;15) |&gt; tally() |&gt; mutate(n=n/6)\n\n# A tibble: 4 × 4\n# Groups:   condit, Fit_Method [2]\n  condit   Fit_Method Best_Model     n\n  &lt;fct&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n1 Constant Test_Train ALM           11\n2 Constant Test_Train EXAM          35\n3 Varied   Test_Train ALM           31\n4 Varied   Test_Train EXAM          16\n\nCoded |&gt; filter(bandInt==100) |&gt; group_by(condit,Fit_Method) |&gt; summarise(m=mean(Error_difference), \n                                              sd=sd(Error_difference), \n                                              n=n(),se=sd/sqrt(n))\n\n# A tibble: 2 × 6\n# Groups:   condit [2]\n  condit   Fit_Method     m    sd     n    se\n  &lt;fct&gt;    &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;\n1 Constant Test_Train 27.6   59.3    80  6.63\n2 Varied   Test_Train -8.98  54.6    76  6.27\n\nCode# head(map_id,2)\n# # A tibble: 2 × 13\n# # Groups:   id, condit, Model, Fit_Method [2]\n#   id    condit Fit_Method Model          c    lr mean_error  rank nTest nTrain nTotal     n   BIC\n#   &lt;fct&gt; &lt;fct&gt;  &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt; &lt;dbl&gt;\n# 1 1     Varied Test       ALM   0.00000165  5.32       238.     1    63     86    149    63 -6.80\n# 2 1     Varied Test_Train ALM   0.0000634   5.60       276.     1    63     86    149   149 -6.24\n\n\n\nCode#full_comparison |&gt; round_tibble(1) |&gt; reactable(filterable=T,defaultPageSize=15)\n\nggplot(full_comparison, aes(x = Best_Model, fill = condit)) +\n  geom_bar(position = \"dodge\") +\n  facet_wrap(~Fit_Method)+\n  labs(title = \"Distribution of Subjects Best Fit by Model\",\n       x = \"Model with Lowest Error\",\n       y = \"Count of Subjects\") +\n  theme_minimal() +\n  scale_fill_brewer(palette = \"Set1\")\n\n\n\n\n\n\nCode# Scatter plot showing the differential in mean error\nggplot(full_comparison, aes(x = Error_difference, y = condit, color = Best_Model)) +\n  geom_point(alpha=.5) +\n  stat_pointinterval()+\n  facet_wrap(~Fit_Method)+\n  labs(title = \"Differential in Mean Error Between Models\",\n       x = \"Error Difference (ALM - EXAM)\",\n       y = \"Condition\") +\n  theme_minimal() +\n  scale_color_brewer(palette = \"Set1\")\n\n\n\n\n\n\nCode# ggplot(full_comparison, aes(x = Error_difference)) +\n#   geom_histogram(aes(fill=Best_Model),bins = 40, alpha = 0.7) +\n#   geom_vline(aes(xintercept = mean(Error_difference)), color = \"red\", linetype = \"dashed\", size = 1) +\n#   facet_wrap(~Fit_Method)+\n#   labs(\n#     title = \"Distribution of Error Differential (ALM - EXAM)\",\n#     x = \"Error Differential\",\n#     y = \"Frequency\"\n#   ) +\n#   theme_minimal()\n\n\nbest_exam &lt;- full_comparison |&gt; filter(Best_Model==\"EXAM\") \nbest_alm &lt;- full_comparison |&gt; filter(Best_Model==\"ALM\") \n\n\nd &lt;- testAvg |&gt; left_join(full_comparison, by=c(\"id\",\"condit\"))\n\nd |&gt; ggplot(aes(x=vb,y=dist,fill=condit)) + stat_bar + facet_wrap(Fit_Method~Best_Model,ncol=2)\n\n\n\n\n\n\nCoded |&gt; filter(abs(Error_difference)&gt;20) |&gt; \n  ggplot(aes(x=vb,y=dist,fill=condit)) + \n  stat_bar + facet_wrap(Fit_Method~Best_Model,ncol=2)\n\n\n\n\n\n\nCoded |&gt; ggplot(aes(x=vb,y=vx,fill=condit)) + stat_bar + facet_wrap(Fit_Method~Best_Model,ncol=2)\n\n\n\n\n\n\nCoded |&gt; filter(Fit_Method==\"Test\") |&gt;\n  ggplot(aes(x=Error_difference,y=dist,col=condit)) + geom_point() + facet_wrap(~vb,scales=\"free\",ncol=2)\n\n\n\n\n\n\nCoded |&gt; group_by(id,condit,Fit_Method) |&gt; summarise(Error_difference=mean(Error_difference),dist=mean(dist)) |&gt; \n  ggplot(aes(x=Error_difference,y=dist,col=condit)) + geom_point() + facet_wrap(~Fit_Method,scales=\"free\")\n\n\n\n\n\n\nCode# ds |&gt; filter(expMode2==\"Test\", id %in% best_exam$id) |&gt; \n#   group_by(id,condit,x) |&gt; summarise(y=mean(y), dist=mean(abs(x-y))) |&gt;\n#   mutate(x=as.factor(x)) |&gt;\n#   ggplot(aes(x=x,y=dist,fill=condit)) + stat_bar",
    "crumbs": [
      "Appendix",
      "ABC-rejection models"
    ]
  },
  {
    "objectID": "Sections/e1_model_appendix.html#best-test---exam-fits",
    "href": "Sections/e1_model_appendix.html#best-test---exam-fits",
    "title": "ABC-rejection models",
    "section": "Best Test - EXAM Fits",
    "text": "Best Test - EXAM Fits\n\nCodestrong_fits &lt;- full_comparison |&gt; filter(model_rank&lt;=1)\nstrong_fits |&gt; filter(Fit_Method==\"Test\",Best_Model==\"EXAM\") |&gt; pull(id) %&gt;% indv_predictive_plots(post_dat_l, .)",
    "crumbs": [
      "Appendix",
      "ABC-rejection models"
    ]
  },
  {
    "objectID": "Sections/e1_model_appendix.html#best-test---alm-fits",
    "href": "Sections/e1_model_appendix.html#best-test---alm-fits",
    "title": "ABC-rejection models",
    "section": "Best Test - ALM Fits",
    "text": "Best Test - ALM Fits\n\nCodestrong_fits &lt;- full_comparison |&gt; filter(model_rank&lt;=1)\nstrong_fits |&gt; filter(Fit_Method==\"Test\",Best_Model==\"ALM\") |&gt; pull(id) %&gt;% indv_predictive_plots(post_dat_l, .)",
    "crumbs": [
      "Appendix",
      "ABC-rejection models"
    ]
  },
  {
    "objectID": "Sections/e1_model_appendix.html#best-test_train---exam-fits",
    "href": "Sections/e1_model_appendix.html#best-test_train---exam-fits",
    "title": "ABC-rejection models",
    "section": "Best Test_Train - EXAM Fits",
    "text": "Best Test_Train - EXAM Fits\n\nCodestrong_fits &lt;- full_comparison |&gt; filter(model_rank&lt;1)\nstrong_fits |&gt; filter(Fit_Method==\"Test_Train\",Best_Model==\"EXAM\") |&gt; pull(id) %&gt;% indv_predictive_plots(post_dat_l, .)",
    "crumbs": [
      "Appendix",
      "ABC-rejection models"
    ]
  },
  {
    "objectID": "Sections/e1_model_appendix.html#best-test_train---alm-fits",
    "href": "Sections/e1_model_appendix.html#best-test_train---alm-fits",
    "title": "ABC-rejection models",
    "section": "Best Test_Train - ALM Fits",
    "text": "Best Test_Train - ALM Fits\n\nCodestrong_fits &lt;- full_comparison |&gt; filter(model_rank&lt;=1)\nstrong_fits |&gt; filter(Fit_Method==\"Test_Train\",Best_Model==\"ALM\") |&gt; pull(id) %&gt;% indv_predictive_plots(post_dat_l, .)",
    "crumbs": [
      "Appendix",
      "ABC-rejection models"
    ]
  },
  {
    "objectID": "Sections/e1_model_appendix.html#best-train---exam-fits",
    "href": "Sections/e1_model_appendix.html#best-train---exam-fits",
    "title": "ABC-rejection models",
    "section": "Best Train - EXAM Fits",
    "text": "Best Train - EXAM Fits\n\nCodestrong_fits &lt;- full_comparison |&gt; filter(model_rank&lt;=1)\nstrong_fits |&gt; filter(Fit_Method==\"Train\",Best_Model==\"EXAM\") |&gt; pull(id) %&gt;% indv_predictive_plots(post_dat_l, .)",
    "crumbs": [
      "Appendix",
      "ABC-rejection models"
    ]
  },
  {
    "objectID": "Sections/e1_model_appendix.html#best-train---alm-fits",
    "href": "Sections/e1_model_appendix.html#best-train---alm-fits",
    "title": "ABC-rejection models",
    "section": "Best Train - ALM Fits",
    "text": "Best Train - ALM Fits\n\nCodestrong_fits &lt;- full_comparison |&gt; filter(model_rank&lt;=1)\nstrong_fits |&gt; filter(Fit_Method==\"Train\",Best_Model==\"ALM\") |&gt; pull(id) %&gt;% indv_predictive_plots(post_dat_l, .)",
    "crumbs": [
      "Appendix",
      "ABC-rejection models"
    ]
  },
  {
    "objectID": "Sections/e1_model_appendix.html#learning-curves",
    "href": "Sections/e1_model_appendix.html#learning-curves",
    "title": "ABC-rejection models",
    "section": "Learning Curves",
    "text": "Learning Curves\n\nCodepd_train_l |&gt; ggplot(aes(x=Block,y=dist,col=Resp))+\n  geom_point( stat = \"summary\", fun = mean) + \n  stat_summary( geom = \"line\", fun = mean) +\n  stat_summary(geom=\"errorbar\",fun.data=mean_se,width=.1,alpha=.4) +\n  #facet_wrap(condit~x,scales=\"free\")\n  ggh4x::facet_nested_wrap(Fit_Method~condit~x,scales=\"free\") +\n  #coord_cartesian(ylim = c(600, 1300)) +\n  labs(title=\"Full Posterior\")\n\n\n\nLearning Curves\n\n\nCodepd_train_l |&gt;filter(rank==1) |&gt; ggplot(aes(x=Block,y=val,col=Resp))+\n  geom_point( stat = \"summary\", fun = mean) + \n  stat_summary( geom = \"line\", fun = mean) +\n  stat_summary(geom=\"errorbar\",fun.data=mean_se,width=.1,alpha=.4) +\n  #facet_wrap(condit~x,scales=\"free\")\n  ggh4x::facet_nested_wrap(Fit_Method~condit~x,scales=\"free\") +\n  coord_cartesian(ylim = c(600, 1300)) +labs(title=\"Best Parameters\")\n\n\n\nLearning Curves\n\n\nCodepd_train_l |&gt; filter(Fit_Method==\"Train\") |&gt; \n  mutate(x=as.factor(x), Resp=as.factor(Resp), Block=as.factor(Block)) |&gt;\n  ggplot(aes(x=x,y=val,fill=Block))+\n  stat_bar +\n  #facet_wrap(condit~x,scales=\"free\")\n  facet_wrap(condit~Resp,scales=\"free\",ncol=3) +\n  coord_cartesian(ylim = c(600, 1300))\n\n\n\nLearning Curves\n\n\nCode# pd_train_l |&gt; filter(id %in% c(1,33,66, 36,76), Fit_Method==\"Train\") |&gt; \n#   ggplot(aes(x=Block,y=val,col=Resp))+\n#   geom_point( stat = \"summary\", fun = mean) + \n#   stat_summary( geom = \"line\", fun = mean) +\n#   stat_summary(geom=\"errorbar\",fun.data=mean_se,width=.1,alpha=.4) +\n#   #facet_wrap(condit~x,scales=\"free\")\n#   facet_wrap(id~x,scales=\"free\",ncol=3) +\n#   coord_cartesian(ylim = c(600, 1300))\n\n\npd_train_l |&gt; \n  #filter(id %in% c(1,33,66, 36,76), Fit_Method==\"Train\") |&gt; \n  mutate(x=as.factor(x), Resp=as.factor(Resp), Block=as.factor(Block)) |&gt;\n  ggplot(aes(x=x,y=dist,fill=Block))+\n  stat_bar +\n  #facet_wrap(condit~x,scales=\"free\")\n   #coord_cartesian(ylim = c(600, 1300)) +\n  facet_wrap(id~Resp,scales=\"free\",ncol=3) \n\n\n\nLearning Curves\n\n\n\n\nCodepost_dat |&gt; ggplot(aes(x=Model,y=mean_error,fill=Model))+geom_col()+facet_wrap(~Fit_Method)\npost_dat |&gt; ggplot(aes(x=Model,y=mean_error,fill=Model))+geom_col()+facet_wrap(condit~Fit_Method)\n\n\n\nCode# post_tabs &lt;- map(post_tabs, ~cbind(.x,run_info) |&gt; mutate(fn=file_name))\n# post_tabs$agg_pred_full_train &lt;- pt_train$agg_pred_full\n# post_tabs$block_pred_full &lt;- pt_train$block_pred_full\n# post_tabs$block_pred_full_x &lt;- pt_train$block_pred_full_x\n\n# # path1 = \"../../../data/abc_tabs\"\n# saveRDS(post_tabs, paste0(path1, \"/\", tools::file_path_sans_ext(basename(file_name)),\"_post_tab\", \".rds\"))\n# saveRDS(post_tabs, paste0(tools::file_path_sans_ext(basename(file_name)),\"_post_tab\", \".rds\"))",
    "crumbs": [
      "Appendix",
      "ABC-rejection models"
    ]
  },
  {
    "objectID": "Simulations/SimReplications.html",
    "href": "Simulations/SimReplications.html",
    "title": "General Simulations",
    "section": "",
    "text": "Functions\n\nCodepacman::p_load(tidyverse,reshape2)\n\ninput.activation&lt;-function(x.target, association.parameter){\n  return(exp(-1*association.parameter*(x.target-x.plotting)^2))\n}\n\noutput.activation&lt;-function(x.target, weights, association.parameter){\n  return(weights%*%input.activation(x.target, association.parameter))\n}\n\nmean.prediction&lt;-function(x.target, weights, association.parameter){\n  probability&lt;-output.activation(x.target, weights, association.parameter)/sum(output.activation(x.target, weights, association.parameter))\n  return(y.plotting%*%probability) # integer prediction\n}\n# function to generate exam predictions\nexam.prediction&lt;-function(x.target, weights, association.parameter){\n  trainVec = sort(unique(x.learning))\n  nearestTrain = trainVec[which.min(abs(trainVec-x.target))]\n  aresp = mean.prediction(nearestTrain, weights, association.parameter)\n  xUnder = ifelse(min(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) - 1])\n  xOver = ifelse(max(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) + 1])\n  mUnder = mean.prediction(xUnder, weights, association.parameter)\n  mOver = mean.prediction(xOver, weights, association.parameter)\n  exam.output = round(aresp + ((mOver - mUnder) / (xOver - xUnder)) * (x.target - nearestTrain), 3)\n  exam.output\n}\n  \nupdate.weights&lt;-function(x.new, y.new, weights, association.parameter, update.parameter){\n  y.feedback.activation&lt;-exp(-1*association.parameter*(y.new-y.plotting)^2)\n  x.feedback.activation&lt;-output.activation(x.new, weights, association.parameter)\n  return(weights+update.parameter*(y.feedback.activation-x.feedback.activation)%*%t(input.activation(x.new, association.parameter)))\n}\n\nlearn.alm&lt;-function(y.learning, association.parameter=0.05, update.parameter=0.5){\n  weights&lt;-matrix(rep(0.00, length(y.plotting)*length(x.plotting)), nrow=length(y.plotting), ncol=length(x.plotting))\n  for (i in 1:length(y.learning)){\n    weights&lt;-update.weights(x.learning[i], y.learning[i], weights, association.parameter, update.parameter)\n    resp=mean.prediction(x.learning[i],weights,association.parameter)\n    weights[weights&lt;0]=0\n  }\n  alm.predictions&lt;-sapply(x.plotting, mean.prediction, weights=weights, association.parameter=association.parameter)\n  exam.predictions &lt;- sapply(x.plotting, exam.prediction, weights=weights, association.parameter=association.parameter)\n  return(list(alm.predictions=alm.predictions, exam.predictions=exam.predictions))\n}\n\n\nNo noise, 1 training rep\nRed dots are training points - gray lines are individual simulations, black line is average of simulations\n\nCode# | eval: false\n\ntrainRep=1\n\nx.plotting&lt;&lt;-seq(0,100, .5)\ny.plotting&lt;&lt;-seq(0, 210, by=2)\nf.plotting&lt;-as.numeric(x.plotting*2.2+30)\nx.learning&lt;-rep(x.plotting[20*c(4:7)+1])\nf.learning&lt;-rep(f.plotting[20*c(4:7)+1])\n\nparmVec &lt;- expand.grid(assoc=c(.1,0.5),update=c(0.2,1),noise=c(0),trainRep=c(1))\n#parmVec &lt;- expand.grid(assoc=c(.01),update=c(0.5),noise=c(30),trainRep=c(1,2,3,4))\n\nparmVec$sim &lt;- 1:nrow(parmVec)\nnSim=nrow(parmVec)\n\nnRep=5\noutput &lt;- list()\nfor (i in 1:nrow(parmVec)){\n  x.learning&lt;-rep(x.plotting[20*c(4:7)+1],times=parmVec$trainRep[i])\n  f.learning&lt;-rep(f.plotting[20*c(4:7)+1],times=parmVec$trainRep[i])\n  #noise.learning &lt;- rnorm(n_distinct(f.learning),sd=parmVec$noise[i])\n  output[[i]] &lt;- replicate(nRep, list(learn.alm(f.learning+rep(rnorm(n_distinct(f.learning),sd=parmVec$noise[i]),times=parmVec$trainRep[i]), \n                                         association.parameter=parmVec$assoc[i], update.parameter=parmVec$update[i])))\n}\n\n\n# convert list of dataframes to a list of lists, each list is a simulation, each element is a dataframe\noutput1 &lt;- lapply(output, function(x) lapply(x, as.data.frame)) # 10 dfs x 9 lists\noutput2 &lt;- lapply(output1, function(x) Reduce(rbind,x))# 1 df x 9 lists\noutput3 &lt;- lapply(output2, function(x) mutate(x, x=rep(x.plotting,nRep),y=rep(f.plotting,nRep),\n                                              repN=rep(seq(1,nRep),each=length(x.plotting))))\no4 &lt;- Reduce(rbind,output3) %&gt;% \n  mutate(sim=rep(seq(1,nrow(parmVec)),each=nRep*length(x.plotting))) %&gt;%\n  left_join(.,parmVec,by=\"sim\") %&gt;%\n  mutate(pvec=paste0(\"c=\",assoc,\"_lr=\",update,\"_noise=\",noise,\"_nrep=\",trainRep),pv=factor(pvec),rn=factor(repN)) \n\noMeans &lt;- o4 %&gt;% group_by(pv,x,y) %&gt;% \n  summarise(alm.predictions=mean(alm.predictions),exam.predictions=mean(exam.predictions),.groups=\"keep\")\n\no4 %&gt;% ggplot(aes(x=x,y=alm.predictions,color=rn))+geom_line(alpha=.7)+\n   scale_color_manual(values=rep(\"grey\",nRep))+\n  theme(legend.position=\"none\")+\n  geom_point(data=data.frame(x=x.learning,y=f.learning),aes(x=x,y=y),color=\"red\")+\n  geom_line(data=o4,aes(x=x,y=y),color=\"black\",alpha=.5, linetype=2)+\n  geom_line(data=oMeans,aes(x=x,y=alm.predictions),color=\"black\")+\n  facet_wrap(~pv, scales=\"free_y\")+ggtitle(\"ALM predictions\")\n\n\n\n\n\n\nCodeo4 %&gt;% ggplot(aes(x=x,y=exam.predictions,color=rn))+ geom_line()+ #geom_line(color=\"grey\",alpha=.4)+\n  scale_color_manual(values=rep(\"grey\",nRep))+\n  theme(legend.position=\"none\")+\n  geom_point(data=data.frame(x=x.learning,y=f.learning),aes(x=x,y=y),color=\"red\")+\n  geom_line(data=o4,aes(x=x,y=y),color=\"black\",alpha=.5,linetype=2)+\n  geom_line(data=oMeans,aes(x=x,y=exam.predictions),color=\"black\")+\n  facet_wrap(~pv, scales=\"free_y\")+ggtitle(\"EXAM predictions\")\n\n\n\n\n\n\n\nHigh noise, 1 training rep\nRed dots are training points - gray lines are individual simulations, black line is average of simulations\n\nCodetrainRep=1\n\nx.plotting&lt;&lt;-seq(0,100, .5)\ny.plotting&lt;&lt;-seq(0, 210, by=2)\nf.plotting&lt;-as.numeric(x.plotting*2.2+30)\nx.learning&lt;-rep(x.plotting[20*c(4:7)+1])\nf.learning&lt;-rep(f.plotting[20*c(4:7)+1])\n\n\nparmVec &lt;- expand.grid(assoc=c(.1,0.5),update=c(0.2,1),noise=c(30),trainRep=c(1))\n#parmVec &lt;- expand.grid(assoc=c(.01),update=c(0.5),noise=c(30),trainRep=c(1,2,3,4))\n\nparmVec$sim &lt;- 1:nrow(parmVec)\nnSim=nrow(parmVec)\n\nnRep=10\noutput &lt;- list()\nfor (i in 1:nrow(parmVec)){\n  x.learning&lt;-rep(x.plotting[20*c(4:7)+1],times=parmVec$trainRep[i])\n  f.learning&lt;-rep(f.plotting[20*c(4:7)+1],times=parmVec$trainRep[i])\n  #noise.learning &lt;- rnorm(n_distinct(f.learning),sd=parmVec$noise[i])\n  output[[i]] &lt;- replicate(nRep, list(learn.alm(f.learning+rep(rnorm(n_distinct(f.learning),sd=parmVec$noise[i]),times=parmVec$trainRep[i]), \n                                         association.parameter=parmVec$assoc[i], update.parameter=parmVec$update[i])))\n}\n\n# \n# nRep=3\n# output &lt;- list()\n# for (i in 1:nrow(parmVec)){\n#   output[[i]] &lt;- replicate(nRep, list(learn.alm(f.learning + rnorm(length(f.learning), sd=10), \n#                                          association.parameter=parmVec$assoc[i], update.parameter=parmVec$update[i])))\n# }\n\n\n\n#output[[i]] &lt;- replicate(nRep, list(learn.alm(f.learning + rnorm(length(f.learning), sd=10)\n\n# convert list of dataframes to a list of lists, each list is a simulation, each element is a dataframe\noutput1 &lt;- lapply(output, function(x) lapply(x, as.data.frame)) # 10 dfs x 9 lists\noutput2 &lt;- lapply(output1, function(x) Reduce(rbind,x))# 1 df x 9 lists\noutput3 &lt;- lapply(output2, function(x) mutate(x, x=rep(x.plotting,nRep),y=rep(f.plotting,nRep),\n                                              repN=rep(seq(1,nRep),each=length(x.plotting))))\no4 &lt;- Reduce(rbind,output3) %&gt;% \n  mutate(sim=rep(seq(1,nrow(parmVec)),each=nRep*length(x.plotting))) %&gt;%\n  left_join(.,parmVec,by=\"sim\") %&gt;%\n  mutate(pvec=paste0(\"c=\",assoc,\"_lr=\",update,\"_noise=\",noise,\"_nrep=\",trainRep),pv=factor(pvec),rn=factor(repN)) \n\noMeans &lt;- o4 %&gt;% group_by(pv,x,y) %&gt;% \n  summarise(alm.predictions=mean(alm.predictions),exam.predictions=mean(exam.predictions),.groups=\"keep\")\n\no4 %&gt;% ggplot(aes(x=x,y=alm.predictions,color=rn))+geom_line(alpha=.7)+\n   scale_color_manual(values=rep(\"grey\",nRep))+\n  theme(legend.position=\"none\")+\n  geom_point(data=data.frame(x=x.learning,y=f.learning),aes(x=x,y=y),color=\"red\")+\n  geom_line(data=o4,aes(x=x,y=y),color=\"black\",alpha=.5, linetype=2)+\n  geom_line(data=oMeans,aes(x=x,y=alm.predictions),color=\"black\")+\n  facet_wrap(~pv, scales=\"free_y\")+ggtitle(\"ALM predictions\")+ylim(0,300)\n\no4 %&gt;% ggplot(aes(x=x,y=exam.predictions,color=rn))+ geom_line()+ #geom_line(color=\"grey\",alpha=.4)+\n  scale_color_manual(values=rep(\"grey\",nRep))+\n  theme(legend.position=\"none\")+\n  geom_point(data=data.frame(x=x.learning,y=f.learning),aes(x=x,y=y),color=\"red\")+\n  geom_line(data=o4,aes(x=x,y=y),color=\"black\",alpha=.5,linetype=2)+\n  geom_line(data=oMeans,aes(x=x,y=exam.predictions),color=\"black\")+\n  facet_wrap(~pv, scales=\"free_y\")+ggtitle(\"EXAM predictions\")+ylim(0,300)\n\n\nHigh noise, 60 training rep\nRed dots are training points - gray lines are individual simulations, black line is average of simulations\n\nCodetrainRep=1\n\nx.plotting&lt;&lt;-seq(0,100, .5)\ny.plotting&lt;&lt;-seq(0, 210, by=2)\nf.plotting&lt;-as.numeric(x.plotting*2.2+30)\nx.learning&lt;-rep(x.plotting[20*c(4:7)+1])\nf.learning&lt;-rep(f.plotting[20*c(4:7)+1])\n\n\nparmVec &lt;- expand.grid(assoc=c(.1,0.5),update=c(0.2,1),noise=c(30),trainRep=c(60))\n#parmVec &lt;- expand.grid(assoc=c(.01),update=c(0.5),noise=c(30),trainRep=c(1,2,3,4))\n\nparmVec$sim &lt;- 1:nrow(parmVec)\nnSim=nrow(parmVec)\n\nnRep=10\noutput &lt;- list()\nfor (i in 1:nrow(parmVec)){\n  x.learning&lt;-rep(x.plotting[20*c(4:7)+1],times=parmVec$trainRep[i])\n  f.learning&lt;-rep(f.plotting[20*c(4:7)+1],times=parmVec$trainRep[i])\n  #noise.learning &lt;- rnorm(n_distinct(f.learning),sd=parmVec$noise[i])\n  output[[i]] &lt;- replicate(nRep, list(learn.alm(f.learning+rep(rnorm(n_distinct(f.learning),sd=parmVec$noise[i]),times=parmVec$trainRep[i]), \n                                         association.parameter=parmVec$assoc[i], update.parameter=parmVec$update[i])))\n}\n\n\n# convert list of dataframes to a list of lists, each list is a simulation, each element is a dataframe\noutput1 &lt;- lapply(output, function(x) lapply(x, as.data.frame)) # 10 dfs x 9 lists\noutput2 &lt;- lapply(output1, function(x) Reduce(rbind,x))# 1 df x 9 lists\noutput3 &lt;- lapply(output2, function(x) mutate(x, x=rep(x.plotting,nRep),y=rep(f.plotting,nRep),\n                                              repN=rep(seq(1,nRep),each=length(x.plotting))))\no4 &lt;- Reduce(rbind,output3) %&gt;% \n  mutate(sim=rep(seq(1,nrow(parmVec)),each=nRep*length(x.plotting))) %&gt;%\n  left_join(.,parmVec,by=\"sim\") %&gt;%\n  mutate(pvec=paste0(\"c=\",assoc,\"_lr=\",update,\"_noise=\",noise,\"_nrep=\",trainRep),pv=factor(pvec),rn=factor(repN)) \n\noMeans &lt;- o4 %&gt;% group_by(pv,x,y) %&gt;% \n  summarise(alm.predictions=mean(alm.predictions),exam.predictions=mean(exam.predictions),.groups=\"keep\")\n\no4 %&gt;% ggplot(aes(x=x,y=alm.predictions,color=rn))+geom_line(alpha=.7)+\n   scale_color_manual(values=rep(\"grey\",nRep))+\n  theme(legend.position=\"none\")+\n  geom_point(data=data.frame(x=x.learning,y=f.learning),aes(x=x,y=y),color=\"red\")+\n  geom_line(data=o4,aes(x=x,y=y),color=\"black\",alpha=.5, linetype=2)+\n  geom_line(data=oMeans,aes(x=x,y=alm.predictions),color=\"black\")+\n  facet_wrap(~pv, scales=\"free_y\")+ggtitle(\"ALM predictions\")+ylim(0,300)\n\no4 %&gt;% ggplot(aes(x=x,y=exam.predictions,color=rn))+ geom_line()+ #geom_line(color=\"grey\",alpha=.4)+\n  scale_color_manual(values=rep(\"grey\",nRep))+\n  theme(legend.position=\"none\")+\n  geom_point(data=data.frame(x=x.learning,y=f.learning),aes(x=x,y=y),color=\"red\")+\n  geom_line(data=o4,aes(x=x,y=y),color=\"black\",alpha=.5,linetype=2)+\n  geom_line(data=oMeans,aes(x=x,y=exam.predictions),color=\"black\")+\n  facet_wrap(~pv, scales=\"free_y\")+ggtitle(\"EXAM predictions\")+ylim(0,300)\n\n\nShiny App\n\nCodex.plotting&lt;&lt;-seq(0,90, .5)\ny.plotting&lt;&lt;-seq(0, 210, by=2)\nf.plotting&lt;-as.numeric(x.plotting * 2.2 + 30)\nx.learning&lt;-x.plotting[10*c(3:9)+1]\nf.learning&lt;-f.plotting[10*c(3:9)+1]\n\n# Single Simulation\n# get alm and exam predictions for full range of x.plotting\noutput&lt;-learn.alm(f.learning)\nalm.predictions&lt;-output$alm.predictions\nexam.predictions&lt;-output$exam.predictions\n\n# plot the results\nplot(x.plotting, f.plotting, type=\"l\", col=\"blue\", lwd=.5, xlab=\"x\", ylab=\"f(x)\")\npoints(x.learning, f.learning, col=\"red\", pch=19)\nlines(x.plotting, alm.predictions, col=\"green\", lwd=2)\nlines(x.plotting, exam.predictions, col=\"purple\", lwd=2)\nlegend(\"topright\", legend=c(\"f(x)\", \"training data\", \"ALM\", \"Exam\"), col=c(\"blue\", \"red\", \"green\", \"purple\"), lty=1.5, cex=0.8)\n\n#function to plot in greyscale\nplot.grey&lt;-function(predictions){\n  lines(x.plotting, predictions, col=\"grey\")\n}\n\n\n\nCode# Average of 100 simulations:\n# get alm and exam predictions for full range of x.plotting, averaged over 100 simulations\nnSim&lt;-10\noutput &lt;- replicate(nSim, list(learn.alm(f.learning + rnorm(length(f.learning), sd=0.1), \n                                         association.parameter=0.05, update.parameter=0.5)))\n\n#alm.predictions&lt;-do.call(rbind, lapply(output, function(x) x$alm.predictions))\nalm.predictions &lt;- Reduce(rbind,output %&gt;% map(\"alm.predictions\"))\nexam.predictions &lt;- Reduce(rbind,output %&gt;% map(\"exam.predictions\"))\n\nalm.predictions.avg&lt;-apply(alm.predictions, 2, mean)\nexam.predictions.avg&lt;-apply(exam.predictions, 2, mean)\ndfAvg&lt;-data.frame(x=x.plotting, f=f.plotting, alm=alm.predictions.avg, exam=exam.predictions.avg)\ndfAvg&lt;-reshape2::melt(dfAvg, id.vars=\"x\")\ndfAvg$model&lt;-factor(dfAvg$variable, levels=c(\"f\", \"alm\", \"exam\"))\nggplot(dfAvg, aes(x=x, y=value, color=model)) + geom_line() + geom_point(data=data.frame(x=x.learning, f=f.learning), aes(x=x, y=f), color=\"red\", size=2) + theme_bw() + theme(legend.position=\"topright\")\n\n\nalm.predictions&lt;-as.data.frame(alm.predictions) %&gt;% mutate(sim=seq(1:nSim))\nalm.predictions&lt;-pivot_longer(alm.predictions, cols=1:ncol(alm.predictions)-1, \n                              names_to=c(\"sim\"), values_to=\"alm\",names_repair = \"unique\") \ncolnames(alm.predictions)=c(\"sim\",\"x\",\"pred\")\nalm.predictions &lt;- alm.predictions %&gt;% mutate(stim = as.numeric(gsub(\"V\", \"\", x)),model=\"alm\",x=x.plotting[stim])\n\n\nexam.predictions&lt;-as.data.frame(exam.predictions) %&gt;% mutate(sim=seq(1:nSim))\nexam.predictions&lt;-pivot_longer(exam.predictions, cols=1:ncol(exam.predictions)-1, \n                               names_to=c(\"sim\"), values_to=\"exam\",names_repair = \"unique\")\ncolnames(exam.predictions)=c(\"sim\",\"x\",\"pred\")\nexam.predictions &lt;- exam.predictions %&gt;% mutate(stim = as.numeric(gsub(\"V\", \"\", x)),model=\"exam\",x=x.plotting[stim])\n\n\ndf&lt;- rbind(alm.predictions,exam.predictions)\n\nggplot(df, aes(x=x, y=pred, color=sim)) + geom_line(alpha=.2) + facet_wrap(~model) + theme_bw() + \n  geom_point(data=data.frame(x=x.learning, f=f.learning), aes(x=x, y=f), color=\"red\", size=2)+\n  geom_line(data=data.frame(x=x.plotting, f=f.plotting),aes(x=x,y=f),color=\"black\")+\n  geom_line(data=dfAvg %&gt;% filter(model!=\"f\"),aes(x=x,y=value),color=\"green\")",
    "crumbs": [
      "Simulations",
      "General Simulations"
    ]
  },
  {
    "objectID": "Simulations/exp1_sim.html",
    "href": "Simulations/exp1_sim.html",
    "title": "HTW Project",
    "section": "",
    "text": "Design The experiment employed a 2 (Training Condition: varied vs. constant).\nProcedure Upon arrival at the laboratory, participants were provided with a description of the experiment and signed informed consent forms. They were then seated in front of a computer equipped with a mouse and were given instructions on how to perform the “Hit The Wall” (HTW) visuomotor extrapolation task.\nThe HTW task involved launching projectiles to hit a target displayed on the computer screen. Participants completed a total of 90 trials during the training stage. In the varied training condition, participants encountered three velocity bands (800-1000, 1000-1200, and 1200-1400). In contrast, participants in the constant training condition encountered only one velocity band (800-1000).\nDuring the training stage, participants in both conditions also completed “no feedback” trials, where they received no information about their performance. These trials were randomly interleaved with the regular training trials.\nFollowing the training stage, participants proceeded to the testing stage, which consisted of three phases. In the first phase, participants completed “no-feedback” testing from three novel extrapolation bands (100-300, 350-550, and 600-800), with each band consisting of 15 trials.\nIn the second phase of testing, participants completed “no-feedback” testing from the three velocity bands used during the training stage (800-1000, 1000-1200, and 1200-1400). In the constant training condition, two of these bands were novel, while in the varied training condition, all three bands were encountered during training.\nThe third and final phase of testing involved “feedback” testing for each of the three extrapolation bands (100-300, 350-550, and 600-800), with each band consisting of 10 trials. Participants received feedback on their performance during this phase.\nThroughout the experiment, participants’ performance was measured by calculating the distance between the produced x-velocity of the projectiles and the closest edge of the current velocity band. Lower distances indicated better performance.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# simulate design of experiment\nset.seed(123)\nn_participants &lt;- 20\nnum_constant_subjects &lt;- 10\nnum_varied_subjects &lt;- 10\nn_trials &lt;- 90\nn_bands_varied &lt;- 3\nn_bands_constant &lt;- 1\n# Set the training positions\ntraining_pos_constant &lt;- 800\ntraining_pos_varied &lt;- c(800, 1000, 1200)\n\ntest_positions &lt;- c(200, 400, 600, 800, 1000, 1200)\n# Set the noise level (standard deviation of the noise)\nnoise_level &lt;- 0.1\n# Set the initial performance for each subject\ninitial_performance &lt;- 0.5\n# Set the learning rate (how much performance improves with each trial)\nlearning_rate &lt;- 0.01\n\n# Set the number of trials for each phase\nn_training_trials &lt;- 90\nn_testing_trials &lt;- 15\nn_feedback_trials &lt;- 10\n\n# Set the number of phases\nn_phases &lt;- 3\n\n\n# Initialize vectors to store the performance of each subject\nperformance_constant &lt;- rep(initial_performance, num_constant_subjects)\nperformance_varied &lt;- rep(initial_performance, num_varied_subjects)\n\n\n\n\n\n# Simulate the training phase for the constant condition\nfor (i in 1:num_constant_subjects) {\n  for (j in 1:n_training_trials) {\n    # Simulate the participant's response\n    response &lt;- rnorm(1, training_pos_constant, noise_level)\n    # Calculate the distance between the response and the target\n    distance &lt;- abs(response - training_pos_constant)\n    # Update the performance\n    performance_constant[i] &lt;- performance_constant[i] + learning_rate * (1 - distance)\n  }\n}"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HTW Project",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Categories\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nAnalyses\n\n\nR\n\n\nBayesian\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalyses\n\n\nR\n\n\nBayesian\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalyses\n\n\nR\n\n\nBayesian\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalyses\n\n\nR\n\n\nBayesian\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalyses\n\n\nR\n\n\nBayesian\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalyses\n\n\nR\n\n\nBayesian\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalyses\n\n\nR\n\n\nBayesian\n\n\n\n\n\n\n\n\n\n\nMar 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalyses\n\n\nR\n\n\nBayesian\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "HTW Project"
    ]
  },
  {
    "objectID": "index.html#modeling-empircal-data",
    "href": "index.html#modeling-empircal-data",
    "title": "HTW Project",
    "section": "Modeling Empircal Data",
    "text": "Modeling Empircal Data\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Categories\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nHTW Hybrid Models\n\n\n\nModeling\n\n\nALM\n\n\nEXAM\n\n\nR\n\n\n\n\n\n\n\nThomas Gorman\n\n\nInvalid Date\n\n\n\n\n\n\n\n\n\n\n\n\nHTW Model\n\n\n\nModeling\n\n\nALM\n\n\nEXAM\n\n\nR\n\n\n\n\n\n\n\nThomas Gorman\n\n\nMar 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHTW Model e1\n\n\n\nModeling\n\n\nALM\n\n\nEXAM\n\n\nR\n\n\n\n\n\n\n\nThomas Gorman\n\n\nMar 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHTW Model e2\n\n\n\nModeling\n\n\nALM\n\n\nEXAM\n\n\nR\n\n\n\n\n\n\n\nThomas Gorman\n\n\nMar 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHTW Model e3\n\n\n\nModeling\n\n\nALM\n\n\nEXAM\n\n\nR\n\n\n\n\n\n\n\nThomas Gorman\n\n\nMar 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHTW Modeling\n\n\n\nModeling\n\n\nALM\n\n\nEXAM\n\n\nR\n\n\n\n\n\n\n\nThomas Gorman\n\n\nMar 2024\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "HTW Project"
    ]
  },
  {
    "objectID": "index.html#simulations",
    "href": "index.html#simulations",
    "title": "HTW Project",
    "section": "Simulations",
    "text": "Simulations\n\n\n\n\n\n\n\n\nALM Learning\n\n\n\nSimulation\n\n\nALM\n\n\nR\n\n\n\n\n\n\n\n\n\n\nJan 2024\n\n\n\n\n\n\n\n\n\n\n\n\nBenchmarking\n\n\n\nSimulation\n\n\nALM\n\n\nR\n\n\n\n\n\n\n\n\n\n\nJan 2024\n\n\n\n\n\n\n\n\n\n\n\n\nEXAM Group Fits\n\n\n\nSimulation\n\n\nALM\n\n\nEXAM\n\n\nR\n\n\n\n\n\n\n\n\n\n\nFeb 2024\n\n\n\n\n\n\n\n\n\n\n\n\nGeneral Simulations\n\n\n\nSimulation\n\n\nALM\n\n\nEXAM\n\n\nR\n\n\n\n\n\n\n\n\n\n\nJan 2024\n\n\n\n\n\n\n\n\n\n\n\n\nParameter Recovery Simulations\n\n\n\nSimulation\n\n\nALM\n\n\nEXAM\n\n\nR\n\n\n\n\n\n\n\n\n\n\nJan 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSimulating DeLosh 1997\n\n\n\nSimulation\n\n\nALM\n\n\nEXAM\n\n\nR\n\n\n\n\n\n\n\n\n\n\nJan 2024\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "HTW Project"
    ]
  },
  {
    "objectID": "index.html#analyses",
    "href": "index.html#analyses",
    "title": "HTW Project",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Categories\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nAnalyses\n\n\nR\n\n\nBayesian\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalyses\n\n\nR\n\n\nBayesian\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalyses\n\n\nR\n\n\nBayesian\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalyses\n\n\nR\n\n\nBayesian\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalyses\n\n\nR\n\n\nBayesian\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalyses\n\n\nR\n\n\nBayesian\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalyses\n\n\nR\n\n\nBayesian\n\n\n\n\n\n\n\n\n\n\nMar 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalyses\n\n\nR\n\n\nBayesian\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "HTW Project"
    ]
  },
  {
    "objectID": "index.html#misc",
    "href": "index.html#misc",
    "title": "HTW Project",
    "section": "Misc",
    "text": "Misc\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Categories\n        \n     \n  \n\n\n\n\n\n\n\n\nALM Shiny App Code\n\n\n\nSimulation\n\n\nALM\n\n\nEXAM\n\n\nShiny\n\n\nInteractive\n\n\nR\n\n\n\n\n\n\n\n\n\n\nJan 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHTW Task\n\n\n\nTask\n\n\njs\n\n\n\n\n\n\n\nThomas Gorman\n\n\nJan 2024\n\n\n\n\n\n\n\n\n\n\n\n\nMermaid with R + consort\n\n\n\nVisualization\n\n\nR\n\n\nOJS\n\n\n\n\n\n\n\n\n\n\nJan 2024\n\n\n\n\n\n\n\n\n\n\n\n\nModel Visualization\n\n\n\nVisualization\n\n\nR\n\n\nOJS\n\n\n\n\n\n\n\n\n\n\nJan 2024\n\n\n\n\n\n\n\n\n\n\n\n\nOJS ALM\n\n\n\nSimulation\n\n\nALM\n\n\nOJS\n\n\nInteractive\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOJS data exploration\n\n\n\nAnalysis\n\n\nLearning-Curve\n\n\nR\n\n\nOJS\n\n\n\n\n\n\n\n\n\n\nJan 2024\n\n\n\n\n\n\n\n\n\n\n\n\ntikz\n\n\n\nVisualization\n\n\nR\n\n\nOJS\n\n\n\n\n\n\n\n\n\n\nJan 2024\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "HTW Project"
    ]
  },
  {
    "objectID": "Sections/Results.html#function-learning-and-extrapolation",
    "href": "Sections/Results.html#function-learning-and-extrapolation",
    "title": "HTW E3 Testing",
    "section": "Function Learning and Extrapolation",
    "text": "Function Learning and Extrapolation\nThe study of human function learning investigates how people learn relationships between continuous input and output values. Function learning is studied both in tasks where individuals are exposed to a sequence of input/output pairs (DeLosh et al., 1997; McDaniel et al., 2013), or situations where observers are presented with a an incomplete scatterplot or line graph and make predictions about regions of the plot that don’t contain data (Ciccione & Dehaene, 2021; Courrieu, 2012; Said & Fischer, 2021; Schulz et al., 2020).\nCarroll (1963) conducted the earliest work on function learning. Input stimuli and output responses were both lines of varying length. The correct output response was related to the length of the input line by a linear, quadratic, or random function. Participants in the linear and quadratic performed above chance levels during extrapolation testing, with those in the linear condition performing the best overall. Carroll argued that these results were best explained by a ruled based model wherein learners form an abstract representation of the underlying function. Subsequent work by Brehmer (1974),testing a wider array of functional forms, provided further evidence for superior extrapolation in tasks with linear functions. Brehmer argued that individuals start out with an assumption of a linear function, but given sufficient error will progressively test alternative hypothesis with polynomials of greater degree. Koh & Meyer (1991) employed a visuomotor function learning task, wherein participants were trained on examples from an unknown function relating the length of an input line to the duration of a response (time between keystrokes). In this domain, participants performed best when the relation between line length and response duration was determined by a power, as opposed to linear function. Koh & Meyer developed the log-polynomial adaptive-regression model to account for their results.\nThe first significant challenge to the rule-based accounts of function learning was put forth by DeLosh et al. (1997) . In their task, participants learned to associate stimulus magnitudes with response magnitudes that were related via either linear, exponential, or quadratic function. Participants approached ceiling performance by the end of training in each function condition, and were able to correctly respond in interpolation testing trials. All three conditions demonstrated some capacity for extrapolation, however participants in the linear condition tended to underestimate the true function, while exponential and quadratic participants reliably overestimated the true function on extrapolation trials. Extrapolation and interpolation performance are depicted in Figure 1.\nThe authors evaluated both of the rule-based models introduced in earlier research (with some modifications enabling trial-by-trial learning). The polynomial hypothesis testing model (Brehmer, 1974; Carroll, 1963) tended to mimic the true function closely in extrapolation, and thus offered a poor account of the human data. The log-polynomial adaptive regression model (Koh & Meyer, 1991) was able to mimic some of the systematic deviations produced by human subjects, but also predicted overestimation in cases where underestimation occurred.\nThe authors also introduced two new function-learning models. The Associative Learning Model (ALM) and the extrapolation-association model (EXAM). ALM is a two layer connectionist model adapted from the ALCOVE model in the category learning literature (Kruschke, 1992). ALM belongs to the general class of radial-basis function neural networks, and can be considered a similarity-based model in the sense that the nodes in the input layer of the network are activated as a function of distance. The EXAM model retains the same similarity based activation and associative learning mechanisms as ALM, while being augmented with a linear rule response mechanism. When presented with novel stimuli, EXAM will retrieve the most similar input-output examples encountered during training, and from those examples compute a local slope. ALM was able to provide a good account of participant training and interpolation data in all three function conditions, however it was unable to extrapolate. EXAM, on the other hand, was able to reproduce both the extrapolation underestimation, as well as the quadratic and exponential overestimation patterns exhibited by the human participants. Subsequent research identified some limitations in EXAM’s ability to account for cases where human participants learn and extrapolate sinusoidal function Bott & Heit (2004) or to scenarios where different functions apply to different regions of the input space Kalish et al. (2004), though EXAM has been shown to provide a good account of human learning and extrapolation in tasks with bi-linear, V shaped input spaces Mcdaniel et al. (2009).\n\n\n\n\n\n\n\nFigure 1: Generalization reproduced patterns from DeLosh et al. (1997) Figure 3. Stimulii that fall within the dashed lines are interpolations of the training examples.",
    "crumbs": [
      "Sections",
      "HTW Results"
    ]
  },
  {
    "objectID": "Sections/Results.html#methods",
    "href": "Sections/Results.html#methods",
    "title": "HTW E3 Testing",
    "section": "",
    "text": "Participants A total of 166 participants (XXX% female, XXX% male) were recruited from the Indiana University Introductory Psychology Course. The average age of participants was XXX years (SD = XXX). Participants were randomly assigned to one of two training conditions: varied training or constant training.\nDesign The experiment employed a 2 (Training Condition: varied vs. constant).\nProcedure Upon arrival at the laboratory, participants were provided with a description of the experiment and signed informed consent forms. They were then seated in front of a computer equipped with a mouse and were given instructions on how to perform the “Hit The Wall” (HTW) visuomotor extrapolation task.\nThe HTW task involved launching projectiles to hit a target displayed on the computer screen. Participants completed a total of 90 trials during the training stage. In the varied training condition, participants encountered three velocity bands (800-1000, 1000-1200, and 1200-1400). In contrast, participants in the constant training condition encountered only one velocity band (800-1000).\nDuring the training stage, participants in both conditions also completed “no feedback” trials, where they received no information about their performance. These trials were randomly interleaved with the regular training trials.\nFollowing the training stage, participants proceeded to the testing stage, which consisted of three phases. In the first phase, participants completed “no-feedback” testing from three novel extrapolation bands (100-300, 350-550, and 600-800), with each band consisting of 15 trials.\nIn the second phase of testing, participants completed “no-feedback” testing from the three velocity bands used during the training stage (800-1000, 1000-1200, and 1200-1400). In the constant training condition, two of these bands were novel, while in the varied training condition, all three bands were encountered during training.\nThe third and final phase of testing involved “feedback” testing for each of the three extrapolation bands (100-300, 350-550, and 600-800), with each band consisting of 10 trials. Participants received feedback on their performance during this phase.\nThroughout the experiment, participants’ performance was measured by calculating the distance between the produced x-velocity of the projectiles and the closest edge of the current velocity band. Lower distances indicated better performance.\nAfter completing the experiment, participants were debriefed and provided with an opportunity to ask questions about the study.\n\n\n\n\n\ncluster\nTest Phase (Counterbalanced Order)data1\n Varied Training 800-10001000-12001200-1400Test1\nTest  Novel Bands 100-300350-550600-800data1-&gt;Test1\ndata2\n Constant Training 800-1000data2-&gt;Test1\nTest3\n    Final Test   Novel With Feedback  100-300350-550600-800Test2\n  Test   Varied Training Bands  800-10001000-12001200-1400Test1-&gt;Test2\nTest2-&gt;Test3\n\n\n\n\nFigure 1: Experiment 1 Design. Constant and Varied participants complete different training conditions.",
    "crumbs": [
      "Sections",
      "HTW Results"
    ]
  },
  {
    "objectID": "Sections/Results.html#htw-task",
    "href": "Sections/Results.html#htw-task",
    "title": "HTW E3 Testing",
    "section": "",
    "text": "need to create a demo version without consent form. And maybe separate windows for the different versions.\n\nExperimental Task for the HTW Project. Programmed in Javascript, and making use of phaser.js.",
    "crumbs": [
      "Sections",
      "HTW Results"
    ]
  },
  {
    "objectID": "Sections/Results.html#live-task-demo",
    "href": "Sections/Results.html#live-task-demo",
    "title": "HTW E3 Testing",
    "section": "",
    "text": "Check the box at the bottom of the consent form, and then click Start Experiment.\n\n\nHTW_Task",
    "crumbs": [
      "Sections",
      "HTW Results"
    ]
  },
  {
    "objectID": "Sections/Results.html#analyses-strategy",
    "href": "Sections/Results.html#analyses-strategy",
    "title": "HTW E3 Testing",
    "section": "",
    "text": "All data processing and statistical analyses were performed in R version 4.31 Team (2020). To assess differences between groups, we used Bayesian Mixed Effects Regression. Model fitting was performed with the brms package in R Bürkner (2017), and descriptive stats and tables were extracted with the BayestestR package Makowski et al. (2019). Mixed effects regression enables us to take advantage of partial pooling, simultaneously estimating parameters at the individual and group level. Our use of Bayesian, rather than frequentist methods allows us to directly quantify the uncertainty in our parameter estimates, as well as circumventing convergence issues common to the frequentist analogues of our mixed models. For each model, we report the median values of the posterior distribution, and 95% credible intervals.\nEach model was set to run with 4 chains, 5000 iterations per chain, with the first 2500 of which were discarded as warmup chains. Rhat values were generally within an acceptable range, with values &lt;=1.02 (see appendix for diagnostic plots). We used uninformative priors for the fixed effects of the model (condition and velocity band), and weakly informative Student T distributions for for the random effects.\nWe compared varied and constant performance across two measures, deviation and discrimination. Deviation was quantified as the absolute deviation from the nearest boundary of the velocity band, or set to 0 if the throw velocity fell anywhere inside the target band. Thus, when the target band was 600-800, throws of 400, 650, and 1100 would result in deviation values of 200, 0, and 300, respectively. Discrimination was measured by fitting a linear model to the testing throws of each subjects, with the lower end of the target velocity band as the predicted variable, and the x velocity produced by the participants as the predictor variable. Participants who reliably discriminated between velocity bands tended to have positive slopes with values ~1, while participants who made throws irrespective of the current target band would have slopes ~0.\n\n\n\nTable 1: Mixed model structure and coefficient descriptions\n\n\n\n\n\nType\nParameter\nTerm\nDescription\n\n\n\n\n\n\nPopulation-Level Effects\n\\(\\beta_0\\)\n(Intercept)\nIntercept representing the baseline deviation\n\n\nPopulation-Level Effects\n\\(\\beta_1\\)\nconditVaried\nEffect of condition (Varied vs. Constant) on deviation\n\n\nPopulation-Level Effects\n\\(\\beta_2\\)\nbandInt\nEffect of target velocity band (bandInt) on deviation\n\n\nPopulation-Level Effects\n\\(\\beta_3\\)\nconditVaried:bandInt\nInteraction effect between training condition and target velocity band on deviation\n\n\n\n\n\nGroup-Level Effects\n\\(\\sigma_{\\text{Intercept}}\\)\nsd__(Intercept)\nStandard deviation for (Intercept)\n\n\nGroup-Level Effects\n\\(\\sigma_{\\text{bandInt}}\\)\nsd__bandInt\nStandard deviation for bandInt\n\n\n\n\n\nFamily Specific Parameters\n\\(\\sigma_{\\text{Observation}}\\)\nsd__Observation\nStandard deviation for Gaussian Family",
    "crumbs": [
      "Sections",
      "HTW Results"
    ]
  },
  {
    "objectID": "Sections/Results.html#results",
    "href": "Sections/Results.html#results",
    "title": "HTW E3 Testing",
    "section": "",
    "text": "In the first part of the testing phase, participants are tested from each of the velocity bands, and receive no feedback after each throw.\n\nDescriptive summaries testing deviation data are provided in Table 2 and Figure 1. To model differences in accuracy between groups, we used Bayesian mixed effects regression models to the trial level data from the testing phase. The primary model predicted the absolute deviation from the target velocity band (dist) as a function of training condition (condit), target velocity band (band), and their interaction, with random intercepts and slopes for each participant (id).\n\\[\\begin{equation}\ndist_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot band_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot band_{ij} + b_{0i} + b_{1i} \\cdot band_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\n\nTable 2: Testing Deviation - Empirical Summary\n\n\n\n\n\n\n(a) Constant Testing - Deviation\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n254\n148\n298\n\n\n350-550\nExtrapolation\n191\n110\n229\n\n\n600-800\nExtrapolation\n150\n84\n184\n\n\n800-1000\nTrained\n184\n106\n242\n\n\n1000-1200\nExtrapolation\n233\n157\n282\n\n\n1200-1400\nExtrapolation\n287\n214\n290\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Varied Testing - Deviation\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n386\n233\n426\n\n\n350-550\nExtrapolation\n285\n149\n340\n\n\n600-800\nExtrapolation\n234\n144\n270\n\n\n800-1000\nTrained\n221\n149\n248\n\n\n1000-1200\nTrained\n208\n142\n226\n\n\n1200-1400\nTrained\n242\n182\n235\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: E1. Deviations from target band during testing without feedback stage.\n\n\n\n\n\n\n\nTable 3: Experiment 1. Bayesian Mixed Model predicting absolute deviation as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\nModel Coefficients\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n205.09\n136.86\n274.06\n1.00\n\n\nconditVaried\n157.44\n60.53\n254.90\n1.00\n\n\nBand\n0.01\n-0.07\n0.08\n0.57\n\n\ncondit*Band\n-0.16\n-0.26\n-0.06\n1.00\n\n\n\n\n\n\n\n\nContrasts\n\ncontrast\nBand\nvalue\nlower\nupper\npd\n\n\n\nConstant - Varied\n100\n-141.49\n-229.19\n-53.83\n1.00\n\n\nConstant - Varied\n350\n-101.79\n-165.62\n-36.32\n1.00\n\n\nConstant - Varied\n600\n-62.02\n-106.21\n-14.77\n1.00\n\n\nConstant - Varied\n800\n-30.11\n-65.08\n6.98\n0.94\n\n\nConstant - Varied\n1000\n2.05\n-33.46\n38.41\n0.54\n\n\nConstant - Varied\n1200\n33.96\n-11.94\n81.01\n0.92\n\n\n\n\n\n\n\n\n\nThe model predicting absolute deviation (dist) showed clear effects of both training condition and target velocity band (Table X). Overall, the varied training group showed a larger deviation relative to the constant training group (β = 157.44, 95% CI [60.53, 254.9]). Deviation also depended on target velocity band, with lower bands showing less deviation. See Table 3 for full model output.\n\n\n\n\n\n\n\nFigure 2: E1. Conditioinal Effect of Training Condition and Band. Ribbon indicated 95% Credible Intervals.\n\n\n\n\n\nIn addition to accuracy/deviation, we also assessed the ability of participants to reliably discriminate between the velocity bands (i.e. responding differently when prompted for band 600-800 than when prompted for band 150-350). Table 4 shows descriptive statistics of this measure, and Figure 1 visualizes the full distributions of throws for each combination of condition and velocity band. To quantify discrimination, we again fit Bayesian Mixed Models as above, but this time the dependent variable was the raw x velocity generated by participants on each testing trial.\n\\[\\begin{equation}\nvx_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot bandInt_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot bandInt_{ij} + b_{0i} + b_{1i} \\cdot bandInt_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\n\n\n\n\n\n\nFigure 3: E1 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\n\n\n\n\n\n\nTable 4: Testing vx - Empirical Summary\n\n\n\n\n\n\n(a) Constant Testing - vx\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n524\n448\n327\n\n\n350-550\nExtrapolation\n659\n624\n303\n\n\n600-800\nExtrapolation\n770\n724\n300\n\n\n800-1000\nTrained\n1001\n940\n357\n\n\n1000-1200\nExtrapolation\n1167\n1104\n430\n\n\n1200-1400\nExtrapolation\n1283\n1225\n483\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Varied Testing - vx\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n664\n533\n448\n\n\n350-550\nExtrapolation\n768\n677\n402\n\n\n600-800\nExtrapolation\n876\n813\n390\n\n\n800-1000\nTrained\n1064\n1029\n370\n\n\n1000-1200\nTrained\n1180\n1179\n372\n\n\n1200-1400\nTrained\n1265\n1249\n412\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 5: Experiment 1. Bayesian Mixed Model Predicting Vx as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\n\n\n(a) Model fit to all 6 bands\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n408.55\n327.00\n490.61\n1.00\n\n\nconditVaried\n164.05\n45.50\n278.85\n1.00\n\n\nBand\n0.71\n0.62\n0.80\n1.00\n\n\ncondit*Band\n-0.14\n-0.26\n-0.01\n0.98\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Model fit to 3 extrapolation bands\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n497.49\n431.26\n566.17\n1.00\n\n\nconditVaried\n124.79\n26.61\n224.75\n0.99\n\n\nBand\n0.49\n0.42\n0.56\n1.00\n\n\ncondit*Band\n-0.06\n-0.16\n0.04\n0.88\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSee Table 5 for the full model results. The estimated coefficient for training condition (β = 164.05, 95% CrI [45.5, 278.85]) suggests that the varied group tends to produce harder throws than the constant group, but is not in and of itself useful for assessing discrimination. Most relevant to the issue of discrimination is the slope on Velocity Band (β = 0.71, 95% CrI [0.62, 0.8]). Although the median slope does fall underneath the ideal of value of 1, the fact that the 95% credible interval does not contain 0 provides strong evidence that participants exhibited some discrimination between bands. The estimate for the interaction between slope and condition (β = -0.14, 95% CrI [-0.26, -0.01]), suggests that the discrimination was somewhat modulated by training condition, with the varied participants showing less sensitivity between bands than the constant condition. This difference is depicted visually in Figure 4. Table 6 shows the average slope coefficients for varied and constant participants separately for each quartile. The constant participant participants appear to have larger slopes across quartiles, but the difference between conditions may be less pronounced for the top quartiles of subjects who show the strongest discrimination. Figure Figure 5 shows the distributions of slope values for each participant, and the compares the probability density of slope coefficients between training conditions. Figure 6\nThe second model, which focused solely on extrapolation bands, revealed similar patterns. The Velocity Band term (β = 0.49, 95% CrI [0.42, 0.56]) still demonstrates a high degree of discrimination ability. However, the posterior distribution for interaction term (β = -0.06, 95% CrI [-0.16, 0.04] ) does across over 0, suggesting that the evidence for decreased discrimination ability for the varied participants is not as strong when considering only the three extrapolation bands.\n\n\n\n\n\n\n\n\n\n(a) Model fit to all 6 bands\n\n\n\n\n\n\n\n\n\n\n\n(b) Model fit to only 3 extrapolation bands\n\n\n\n\n\n\nFigure 4: Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.\n\n\n\n\n\nTable 6: Slope coefficients by quartile, per condition\n\n\n\n\n\nCondition\nQ_0%_mean\nQ_25%_mean\nQ_50%_mean\nQ_75%_mean\nQ_100%_mean\n\n\n\nConstant\n-0.1047625\n0.4834235\n0.6920624\n0.9287940\n1.397466\n\n\nVaried\n-0.2042235\n0.2669960\n0.5860852\n0.9041669\n1.300985\n\n\n\n\n\n\n\n\n\nFigure 5 shows the distributions of estimated slopes relating velocity band to x velocity for each participant, ordered from lowest to highest within condition. Slope values are lower overall for varied training compared to constant training. Figure Xb plots the density of these slopes for each condition. The distribution for varied training has more mass at lower values than the constant training distribution. Both figures illustrate the model’s estimate that varied training resulted in less discrimination between velocity bands, evidenced by lower slopes on average.\n\n\n\n\n\n\n\n\n\n(a) Slope estimates by participant - ordered from lowest to highest within each condition.\n\n\n\n\n\n\n\n\n\n\n\n(b) Destiny of slope coefficients by training group\n\n\n\n\n\n\nFigure 5: Slope distributions between condition\n\n\n\n\n\n\n\n\n\n\n\n(a) subset with largest slopes\n\n\n\n\n\n\n\n\n\n(b) subset with smallest slopes\n\n\n\n\n\nFigure 6: Subset of Varied and Constant Participants with the smallest and largest estimated slope values. Red lines represent the best fitting line for each participant, gray lines are 200 random samples from the posterior distribution. Colored points and intervals at each band represent the empirical median and 95% HDI.\n\n\n\n\nNEEDS TO BE WRITTEN",
    "crumbs": [
      "Sections",
      "HTW Results"
    ]
  },
  {
    "objectID": "Sections/Results.html#references",
    "href": "Sections/Results.html#references",
    "title": "Experiment 3",
    "section": "\n8 References",
    "text": "8 References\n\n\nBürkner, P.-C. (2017). Brms: An R Package for Bayesian Multilevel Models Using Stan. Journal of Statistical Software, 80, 1–28. https://doi.org/10.18637/jss.v080.i01\n\n\nMakowski, D., Ben-Shachar, M. S., & Lüdecke, D. (2019). bayestestR: Describing Effects and their Uncertainty, Existence and Significance within the Bayesian Framework. Journal of Open Source Software, 4(40), 1541. https://doi.org/10.21105/joss.01541\n\n\nRaviv, L., Lupyan, G., & Green, S. C. (2022). How variability shapes learning and generalization. Trends in Cognitive Sciences, S1364661322000651. https://doi.org/10.1016/j.tics.2022.03.007\n\n\nSoderstrom, N. C., & Bjork, R. A. (2015). Learning versus performance: An integrative review. Perspectives on Psychological Science, 10(2), 176–199. https://doi.org/10.1177/1745691615569000\n\n\nTeam, R. C. (2020). R: A Language and Environment for Statistical Computing. R: A Language and Environment for Statistical Computing.\n\n\n\n\n\nFigure 1: E1. Deviations from target band across training blocks.\nFigure 2: E1. Deviations from target band during testing without feedback stage.\nFigure 3: E1. A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% confidence intervals.\nFigure 4: E1 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\nExperiment 1. Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.\nFigure 6: E2. Deviations from target band across training blocks.\nFigure 7: A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% confidence intervals.\nFigure 8: E2 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\nConditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.\nFigure 9: E3. Deviations from target band during testing without feedback stage.\nFigure 10: E3. A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% confidence intervals.\nFigure 11: e3 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\nFigure 12: Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.",
    "crumbs": [
      "Sections",
      "Results"
    ]
  },
  {
    "objectID": "Sections/Results.html#appendix",
    "href": "Sections/Results.html#appendix",
    "title": "HTW E3 Testing",
    "section": "Appendix",
    "text": "Appendix",
    "crumbs": [
      "Sections",
      "HTW Results"
    ]
  },
  {
    "objectID": "Sections/Results.html#results-1",
    "href": "Sections/Results.html#results-1",
    "title": "HTW E3 Testing",
    "section": "Results",
    "text": "Results\nTesting Phase - No feedback.\nIn the first part of the testing phase, participants are tested from each of the velocity bands, and receive no feedback after each throw.\nDeviation From Target Band\nDescriptive summaries testing deviation data are provided in Table 7 and Figure 8. To model differences in accuracy between groups, we used Bayesian mixed effects regression models to the trial level data from the testing phase. The primary model predicted the absolute deviation from the target velocity band (dist) as a function of training condition (condit), target velocity band (band), and their interaction, with random intercepts and slopes for each participant (id).\n\\[\\begin{equation}\ndist_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot band_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot band_{ij} + b_{0i} + b_{1i} \\cdot band_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\n\n\nTable 7: Testing Deviation - Empirical Summary\n\n\n\n\n\n(a) Constant Testing - Deviation\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n206\n48\n317\n\n\n350-550\nExtrapolation\n194\n86\n268\n\n\n600-800\nTrained\n182\n112\n240\n\n\n800-1000\nExtrapolation\n200\n129\n233\n\n\n1000-1200\nExtrapolation\n238\n190\n234\n\n\n1200-1400\nExtrapolation\n311\n254\n288\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Varied Testing - Deviation\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nTrained\n153\n25\n266\n\n\n350-550\nTrained\n138\n53\n233\n\n\n600-800\nTrained\n160\n120\n183\n\n\n800-1000\nExtrapolation\n261\n207\n257\n\n\n1000-1200\nExtrapolation\n305\n258\n273\n\n\n1200-1400\nExtrapolation\n363\n314\n297\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 8: E2. Deviations from target band during testing without feedback stage.\n\n\n\n\n\n\n\nTable 8: Experiment 2. Bayesian Mixed Model predicting absolute deviation as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n151.71\n90.51\n215.86\n1.00\n\n\nconditVaried\n-70.33\n-156.87\n16.66\n0.94\n\n\nBand\n0.10\n0.02\n0.18\n1.00\n\n\ncondit*Band\n0.12\n0.02\n0.23\n0.99\n\n\n\n\n\n\n\n\nContrasts\n\ncontrast\nBand\nvalue\nlower\nupper\npd\n\n\n\nConstant - Varied\n100\n57.57\n-20.48\n135.32\n0.93\n\n\nConstant - Varied\n350\n26.60\n-30.93\n83.84\n0.83\n\n\nConstant - Varied\n600\n-4.30\n-46.73\n38.52\n0.58\n\n\nConstant - Varied\n800\n-29.30\n-69.38\n11.29\n0.92\n\n\nConstant - Varied\n1000\n-54.62\n-101.06\n-5.32\n0.98\n\n\nConstant - Varied\n1200\n-79.63\n-139.47\n-15.45\n0.99\n\n\n\n\n\n\n\n\n\nThe model predicting absolute deviation showed a modest tendency for the varied training group to have lower deviation compared to the constant training group (β = -70.33, 95% CI [-156.87, 16.66]),with 94% of the posterior distribution being less than 0. This suggests a potential benefit of training with variation, though the evidence is not definitive.\n(SHOULD PROBABLY DO ALTERNATE ANALYSIS THAT ONLY CONSIDERS THE NOVEL EXTRAPOLATION BANDS)\n\n\n\n\n\n\n\nFigure 9: E2. Conditioinal Effect of Training Condition and Band. Ribbon indicated 95% Credible Intervals.\n\n\n\n\nDiscrimination between Velocity Bands\nIn addition to accuracy/deviation. We also assessed the ability of participants to reliably discriminate between the velocity bands (i.e. responding differently when prompted for band 600-800 than when prompted for band 150-350). Table 9 shows descriptive statistics of this measure, and Figure 1 visualizes the full distributions of throws for each combination of condition and velocity band. To quantify discrimination, we again fit Bayesian Mixed Models as above, but this time the dependent variable was the raw x velocity generated by participants.\n\\[\\begin{equation}\nvx_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot bandInt_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot bandInt_{ij} + b_{0i} + b_{1i} \\cdot bandInt_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\n\n\n\n\n\n\nFigure 10: E2 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\n\n\n\n\n\n\nTable 9: Testing vx - Empirical Summary\n\n\n\n\n\n\n(a) Constant Testing - vx\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nExtrapolation\n457\n346\n354\n\n\n350-550\nExtrapolation\n597\n485\n368\n\n\n600-800\nTrained\n728\n673\n367\n\n\n800-1000\nExtrapolation\n953\n913\n375\n\n\n1000-1200\nExtrapolation\n1064\n1012\n408\n\n\n1200-1400\nExtrapolation\n1213\n1139\n493\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Varied Testing - vx\n\n\n\nBand\nBand Type\nMean\nMedian\nSd\n\n\n\n100-300\nTrained\n410\n323\n297\n\n\n350-550\nTrained\n582\n530\n303\n\n\n600-800\nTrained\n696\n641\n316\n\n\n800-1000\nExtrapolation\n910\n848\n443\n\n\n1000-1200\nExtrapolation\n1028\n962\n482\n\n\n1200-1400\nExtrapolation\n1095\n1051\n510\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 10: Experiment 2. Bayesian Mixed Model Predicting Vx as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n362.64\n274.85\n450.02\n1.00\n\n\nconditVaried\n-8.56\n-133.97\n113.98\n0.55\n\n\nBand\n0.71\n0.58\n0.84\n1.00\n\n\ncondit*Band\n-0.06\n-0.24\n0.13\n0.73\n\n\n\n\n\n\n\n\n\nSee Table 10 for the full model results.\nWhen examining discrimination ability using the model predicting raw x-velocity, the results were less clear than those of the absolute deviation analysis. The slope on Velocity Band (β = 0.71, 95% CrI [0.58, 0.84]) indicates that participants showed good discrimination between bands overall. However, the interaction term suggested this effect was not modulated by training condition (β = -0.06, 95% CrI [-0.24, 0.13]) Thus, while varied training may provide some advantage for accuracy, both training conditions seem to have similar abilities to discriminate between velocity bands.\n\n\n\n\n\n\n\nFigure 11: Conditional effect of training condition and Band. Ribbons indicate 95% HDI.\n\n\n\n\n\n\n\nTable 11: Slope coefficients by quartile, per condition\n\n\n\n\n\nCondition\nQ_0%_mean\nQ_25%_mean\nQ_50%_mean\nQ_75%_mean\nQ_100%_mean\n\n\n\nConstant\n-0.2798300\n0.3930362\n0.6998464\n1.0761288\n1.619777\n\n\nVaried\n-0.2412158\n0.3112065\n0.6794843\n0.9478971\n1.815403\n\n\n\n\n\n\n\n\n\nFigure 12 visually represents the distributions of estimated slopes relating velocity band to x velocity for each participant, ordered from lowest to highest within condition. Slope values are lower overall for varied training compared to constant training. Figure Xb plots the density of these slopes for each condition. The distribution for varied training has more mass at lower values than the constant training distribution. Both figures illustrate the model’s estimate that varied training resulted in less discrimination between velocity bands, evidenced by lower slopes on average.\n\n\n\n\n\n\n\n\n\n(a) Slope estimates by participant - ordered from lowest to highest within each condition.\n\n\n\n\n\nFigure 12: Slope distributions between condition\n\n\n\n\n\n\n\n\n\n\n\n\n(a) subset with largest slopes\n\n\n\n\n\n\n\n\n\n(b) subset with smallest slopes\n\n\n\n\n\nFigure 13: Subset of Varied and Constant Participants with the smallest and largest estimated slope values. Red lines represent the best fitting line for each participant, gray lines are 200 random samples from the posterior distribution. Colored points and intervals at each band represent the empirical median and 95% HDI.",
    "crumbs": [
      "Sections",
      "HTW Results"
    ]
  },
  {
    "objectID": "Sections/Results.html#results-2",
    "href": "Sections/Results.html#results-2",
    "title": "HTW E3 Testing",
    "section": "Results",
    "text": "Results\nTesting Phase - No feedback.\nIn the first part of the testing phase, participants are tested from each of the velocity bands, and receive no feedback after each throw. Note that these no-feedback testing trials are identical to those of Experiment 1 and 2, as the ordinal feedback only occurs during the training phase, and final testing phase, of Experiment 3.\nDeviation From Target Band\nDescriptive summaries testing deviation data are provided in Table 12 and Figure 14. To model differences in accuracy between groups, we fit Bayesian mixed effects regression models to the trial level data from the testing phase. The primary model predicted the absolute deviation from the target velocity band (dist) as a function of training condition (condit), target velocity band (band), and their interaction, with random intercepts and slopes for each participant (id).\n```{r}\n#| label: tbl-e3-test-nf-deviation\n#| tbl-cap: \"Testing Deviation - Empirical Summary\"\n#| tbl-subcap: [\"Constant Testing - Deviation\", \"Varied Testing - Deviation\"]\n#| layout-ncol: 2\n\nresultOrig &lt;- test_summary_table(testE3 |&gt; filter(bandOrder==\"Original\"), \"dist\",\"Deviation\", mfun = list(mean = mean, median = median, sd = sd))\nresultOrig$constant \nresultOrig$varied \n\nresultRev &lt;- test_summary_table(testE3 |&gt; filter(bandOrder==\"Reverse\"), \"dist\",\"Deviation\", mfun = list(mean = mean, median = median, sd = sd))\nresultRev$constant \nresultRev$varied \n```\n\n\nTable 12: Testing Deviation - Empirical Summary\n\n\n\n# A tibble: 6 × 5\n  Band      `Band Type`    Mean Median    Sd\n  &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 100-300   Extrapolation   396    325   350\n2 350-550   Extrapolation   278    176   299\n3 600-800   Extrapolation   173    102   215\n4 800-1000  Trained         225    126   284\n5 1000-1200 Extrapolation   253    192   271\n6 1200-1400 Extrapolation   277    210   262\n# A tibble: 6 × 5\n  Band      `Band Type`    Mean Median    Sd\n  &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 100-300   Extrapolation   383    254   385\n2 350-550   Extrapolation   287    154   318\n3 600-800   Extrapolation   213    140   244\n4 800-1000  Trained         199    142   209\n5 1000-1200 Trained         222    163   221\n6 1200-1400 Trained         281    227   246\n# A tibble: 6 × 5\n  Band      `Band Type`    Mean Median    Sd\n  &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 100-300   Extrapolation   403    334   383\n2 350-550   Extrapolation   246    149   287\n3 600-800   Trained         155     82   209\n4 800-1000  Extrapolation   207    151   241\n5 1000-1200 Extrapolation   248    220   222\n6 1200-1400 Extrapolation   322    281   264\n# A tibble: 6 × 5\n  Band      `Band Type`    Mean Median    Sd\n  &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 100-300   Trained         153      0   307\n2 350-550   Trained         147     55   258\n3 600-800   Trained         159    107   192\n4 800-1000  Extrapolation   221    160   235\n5 1000-1200 Extrapolation   244    185   235\n6 1200-1400 Extrapolation   324    264   291\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 14: e3. Deviations from target band during testing without feedback stage.\n\n\n\n\n\n\n\nTable 13: Experiment 3. Bayesian Mixed Model predicting absolute deviation as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n306.47\n243.89\n368.75\n1.00\n\n\nconditVaried\n-90.65\n-182.79\n3.75\n0.97\n\n\nBand\n-0.07\n-0.13\n0.00\n0.97\n\n\ncondit*Band\n0.09\n-0.01\n0.19\n0.96\n\n\n\n\n\n\n\n\n\nThe effect of training condition in Experiment 3 showed a similar pattern to Experiment 2, with the varied group tending to have lower deviation than the constant group (β = -90.65, 95% CrI [-182.79, 3.75]), with 97% of the posterior distribution falling under 0.\n(NEED TO CONTROL FOR BAND ORDER HERE)\n\n\n\n\n\n\n\nFigure 15: e3. Conditioinal Effect of Training Condition and Band. Ribbon indicated 95% Credible Intervals.\n\n\n\n\nDiscrimination between Velocity Bands\nIn addition to accuracy/deviation. We also assessed the ability of participants to reliably discriminate between the velocity bands (i.e. responding differently when prompted for band 600-800 than when prompted for band 150-350). Table 14 shows descriptive statistics of this measure, and Figure 1 visualizes the full distributions of throws for each combination of condition and velocity band. To quantify discrimination, we again fit Bayesian Mixed Models as above, but this time the dependent variable was the raw x velocity generated by participants.\n\\[\\begin{equation}\nvx_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot bandInt_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot bandInt_{ij} + b_{0i} + b_{1i} \\cdot bandInt_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\n\n\n\n\n\n\nFigure 16: e3 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\n\n\n\n\n```{r}\n#| label: tbl-e3-test-nf-vx\n#| tbl-cap: \"Testing vx - Empirical Summary\"\n#| tbl-subcap: [\"Constant Testing - vx\", \"Varied Testing - vx\"]\n#| layout-ncol: 2\n\nresultOrig &lt;- test_summary_table(testE3 |&gt; filter(bandOrder==\"Original\"), \"vx\",\"X Velocity\", mfun = list(mean = mean, median = median, sd = sd))\nresultOrig$constant \nresultOrig$varied \n\nresultRev &lt;- test_summary_table(testE3 |&gt; filter(bandOrder==\"Reverse\"), \"vx\",\"X Velocity\", mfun = list(mean = mean, median = median, sd = sd))\nresultRev$constant \nresultRev$varied \n```\n\n\nTable 14: Testing vx - Empirical Summary\n\n\n\n# A tibble: 6 × 5\n  Band      `Band Type`    Mean Median    Sd\n  &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 100-300   Extrapolation   680    625   370\n2 350-550   Extrapolation   771    716   357\n3 600-800   Extrapolation   832    786   318\n4 800-1000  Trained        1006    916   417\n5 1000-1200 Extrapolation  1149   1105   441\n6 1200-1400 Extrapolation  1180   1112   443\n# A tibble: 6 × 5\n  Band      `Band Type`    Mean Median    Sd\n  &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 100-300   Extrapolation   667    554   403\n2 350-550   Extrapolation   770    688   383\n3 600-800   Extrapolation   869    814   358\n4 800-1000  Trained         953    928   359\n5 1000-1200 Trained        1072   1066   388\n6 1200-1400 Trained        1144   1093   426\n# A tibble: 6 × 5\n  Band      `Band Type`    Mean Median    Sd\n  &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 100-300   Extrapolation   684    634   406\n2 350-550   Extrapolation   729    679   350\n3 600-800   Trained         776    721   318\n4 800-1000  Extrapolation   941    883   387\n5 1000-1200 Extrapolation  1014    956   403\n6 1200-1400 Extrapolation  1072   1014   442\n# A tibble: 6 × 5\n  Band      `Band Type`    Mean Median    Sd\n  &lt;fct&gt;     &lt;fct&gt;         &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 100-300   Trained         392    270   343\n2 350-550   Trained         540    442   343\n3 600-800   Trained         642    588   315\n4 800-1000  Extrapolation   943    899   394\n5 1000-1200 Extrapolation  1081   1048   415\n6 1200-1400 Extrapolation  1185   1129   500\n\n\n\n\n\n\n\n\nTable 15: Experiment 3. Bayesian Mixed Model Predicting Vx as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n607.67\n536.02\n679.87\n1\n\n\nconditVaried\n-167.76\n-277.14\n-64.08\n1\n\n\nBand\n0.44\n0.35\n0.52\n1\n\n\ncondit*Band\n0.18\n0.06\n0.31\n1\n\n\n\n\n\n\n\n\n\nSee Table 15 for the full model results.\nSlope estimates for experiment 3 suggest that participants were capable of distinguishing between velocity bands even when provided only ordinal feedback during training (β = 0.44, 95% CrI [0.35, 0.52]). Unlike the previous two experiments, the posterior distribution for the interaction between condition and band was consistently positive, suggestive of superior discrimination for the varied participants β = 0.18, 95% CrI [0.06, 0.31].\n\n\n\n\n\n\n\nFigure 17: Conditional effect of training condition and Band. Ribbons indicate 95% HDI.\n\n\n\n\n\n\n\nTable 16: Slope coefficients by quartile, per condition\n\n\n\n\n\nCondition\nQ_0%_mean\nQ_25%_mean\nQ_50%_mean\nQ_75%_mean\nQ_100%_mean\n\n\n\nConstant\n-0.3537295\n0.1182897\n0.4215208\n0.6375090\n1.935769\n\n\nVaried\n-0.3186220\n0.2509344\n0.5978780\n0.9222335\n1.744295\n\n\n\n\n\n\n\n\n\nFigure 18 shows the distributions of estimated slopes relating velocity band to x velocity for each participant, ordered from lowest to highest within condition. Slope values are lower overall for varied training compared to constant training. Figure Xb plots the density of these slopes for each condition. The distribution for varied training has more mass at lower values than the constant training distribution. Both figures illustrate the model’s estimate that varied training resulted in less discrimination between velocity bands, evidenced by lower slopes on average.\n\n\n\n\n\n\n\n\n\n(a) Slope estimates by participant - ordered from lowest to highest within each condition.\n\n\n\n\n\nFigure 18: Slope distributions between condition\n\n\n\n\n\n\n\n\n\n\n\n\n(a) subset with largest slopes\n\n\n\n\n\n\n\n\n\n(b) subset with smallest slopes\n\n\n\n\n\nFigure 19: Subset of Varied and Constant Participants with the smallest and largest estimated slope values. Red lines represent the best fitting line for each participant, gray lines are 200 random samples from the posterior distribution. Colored points and intervals at each band represent the empirical median and 95% HDI.",
    "crumbs": [
      "Sections",
      "HTW Results"
    ]
  },
  {
    "objectID": "Sections/Results.html",
    "href": "Sections/Results.html",
    "title": "Experiment 3",
    "section": "",
    "text": "All data processing and statistical analyses were performed in R version 4.32 Team (2020). To assess differences between groups, we used Bayesian Mixed Effects Regression. Model fitting was performed with the brms package in R Bürkner (2017), and descriptive stats and tables were extracted with the BayestestR package Makowski et al. (2019). Mixed effects regression enables us to take advantage of partial pooling, simultaneously estimating parameters at the individual and group level. Our use of Bayesian, rather than frequentist methods allows us to directly quantify the uncertainty in our parameter estimates, as well as avoiding convergence issues common to the frequentist analogues of our mixed models.\nEach model was set to run with 4 chains, 5000 iterations per chain, with the first 2500 discarded as warmup chains. Rhat values were within an acceptable range, with values &lt;=1.02 (see appendix for diagnostic plots). We used uninformative priors for the fixed effects of the model (condition and velocity band), and weakly informative Student T distributions for for the random effects. For each model, we report 1) the mean values of the posterior distribution for the parameters of interest, 2) the lower and upper credible intervals (CrI), and the probability of direction value (pd).\n\n\n\n\n\n\n\nGroup Comparison\nCode\nData\n\n\n\nEnd of Training Accuracy\nbrm(dist ~ condit)\nFinal Training Block\n\n\nTest Accuracy\nbrm(dist ~ condit * bandType + (1|id) + (1|bandInt)\nAll Testing trials\n\n\nBand Discrimination\nbrm(vx ~ condit * band +(1 + bandInt|id)\nAll Testing Trials\n\n\n\n\nIn each experiment we compare varied and constant conditions in terms of 1) accuracy in the final training block; 2) testing accuracy as a function of band type (trained vs. extrapolation bands); 3) extent of discrimination between all six testing bands. We quantified accuracy as the absolute deviation between the response velocity and the nearest boundary of the target band. Thus, when the target band was velocity 600-800, throws of 400, 650, and 900 would result in deviation values of 200, 0, and 100, respectively. The degree of discrimination between bands was index by fitting a linear model predicting the response velocity as a function of the target velocity. Participants who reliably discriminated between velocity bands tended to haves slope values ~1, while participants who made throws irrespective of the current target band would have slopes ~0.\n\\[\\begin{equation}\ndist_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot band_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot band_{ij} + b_{0i} + b_{1i} \\cdot band_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\n\n\n\n\n\n\n\nFigure 1: E1. Deviations from target band across training blocks.\n\n\n\n\n\n\n\n\n\nTable 1: Experiment 1 - End of training performance. The Intercept represents the average of the baseline (constant condition), and the conditVaried coefficient reflects the difference between the constant and varied groups. A larger positive estimates indicates a greater deviation (lower accuracy) for the varied group.\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n106.34\n95.46\n117.25\n1\n\n\nconditVaried\n79.64\n57.92\n101.63\n1\n\n\n\n\n\n\n\nTraining. Figure 1 displays the average deviations across training blocks for the varied group, which trained on three velocity bands, and the constant group, which trained on one velocity band. To compare the training conditions at the end of training, we analyzed performance on the 800-1000 velocity band, which both groups trained on. The full model results are shown in Table 1. The varied group had a significantly greater deviation than the constant group in the final training block, (\\(\\beta\\) = 79.64, 95% CrI [57.92, 101.63]; pd = 100%).\n\n\n\n\n\nTable 2: Experiment 1 testing accuracy. Main effects of condition and band type (training vs. extrapolation), and the interaction between the two factors. Larger coefficient estimates indicate larger deviations from the baselines (constant & trained bands) - and a positive interaction coefficient indicates disproporionate deviation for the varied condition on the extrapolation bands\n\n\n\n\n\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n152.55\n70.63\n229.85\n1.0\n\n\nconditVaried\n39.00\n-21.10\n100.81\n0.9\n\n\nbandTypeExtrapolation\n71.51\n33.24\n109.60\n1.0\n\n\nconditVaried:bandTypeExtrapolation\n66.46\n32.76\n99.36\n1.0\n\n\n\n\n\n\nTesting. To compare accuracy between groups in the testing stage, we fit a Bayesian mixed effects model predicting deviation from the target band as a function of training condition (varied vs. constant) and band type (trained vs. extrapolation), with random intercepts for participants and bands. The model results are shown in Table 2. The main effect of training condition was not significant (\\(\\beta\\) = 39, 95% CrI [-21.1, 100.81]; pd = 89.93%). The extrapolation testing items had a significantly greater deviation than the training bands (\\(\\beta\\) = 71.51, 95% CrI [33.24, 109.6]; pd = 99.99%). Most importantly, the interaction between training condition and band type was significant (\\(\\beta\\) = 66.46, 95% CrI [32.76, 99.36]; pd = 99.99%), As shown in Figure 3, the varied group had disproportionately larger deviations compared to the constant group in the extrapolation bands.\n\n\n\n\n\n\n\nFigure 2: E1. Deviations from target band during testing without feedback stage.\n\n\n\n\n\n\n\n\n\nFigure 3: E1. A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% confidence intervals.\n\n\n\n\n\n\n\n\nTable 3: Experiment 1. Bayesian Mixed Model Predicting Vx as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n408.55\n327.00\n490.61\n1.00\n\n\nconditVaried\n164.05\n45.50\n278.85\n1.00\n\n\nBand\n0.71\n0.62\n0.80\n1.00\n\n\ncondit*Band\n-0.14\n-0.26\n-0.01\n0.98\n\n\n\n\n\n\nFinally, to assess the ability of both conditions to discriminate between velocity bands, we fit a model predicting velocity as a function of training condition and velocity band, with random intercepts and random slopes for each participant. See Table 4 for the full model results. The estimated coefficient for training condition (\\(\\beta\\) = 164.05, 95% CrI [45.5, 278.85]) suggests that the varied group tends to produce harder throws than the constant group, but is not in and of itself useful for assessing discrimination. Most relevant to the issue of discrimination is the coefficient on the Band predictor (\\(\\beta\\) = 0.71 95% CrI [0.62, 0.8]). Although the median slope does fall underneath the ideal of value of 1, the fact that the 95% credible interval does not contain 0 provides strong evidence that participants exhibited some discrimination between bands. The estimate for the interaction between slope and condition (\\(\\beta\\) = -0.14, 95% CrI [-0.26, -0.01]), suggests that the discrimination was somewhat modulated by training condition, with the varied participants showing less sensitivity between bands than the constant condition. This difference is depicted visually in Figure 4.\n\n\n\n\n\n\n\nFigure 4: E1 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\n\n\n\n\n\n\n\nTable 4\n\n\n\n\nExperiment 1. Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.",
    "crumbs": [
      "Sections",
      "Results"
    ]
  },
  {
    "objectID": "Sections/Results.html#experiment-1",
    "href": "Sections/Results.html#experiment-1",
    "title": "Experiment 3",
    "section": "",
    "text": "All data processing and statistical analyses were performed in R version 4.32 Team (2020). To assess differences between groups, we used Bayesian Mixed Effects Regression. Model fitting was performed with the brms package in R Bürkner (2017), and descriptive stats and tables were extracted with the BayestestR package Makowski et al. (2019). Mixed effects regression enables us to take advantage of partial pooling, simultaneously estimating parameters at the individual and group level. Our use of Bayesian, rather than frequentist methods allows us to directly quantify the uncertainty in our parameter estimates, as well as avoiding convergence issues common to the frequentist analogues of our mixed models.\nEach model was set to run with 4 chains, 5000 iterations per chain, with the first 2500 discarded as warmup chains. Rhat values were within an acceptable range, with values &lt;=1.02 (see appendix for diagnostic plots). We used uninformative priors for the fixed effects of the model (condition and velocity band), and weakly informative Student T distributions for for the random effects. For each model, we report 1) the mean values of the posterior distribution for the parameters of interest, 2) the lower and upper credible intervals (CrI), and the probability of direction value (pd).\n\n\n\n\n\n\n\nGroup Comparison\nCode\nData\n\n\n\nEnd of Training Accuracy\nbrm(dist ~ condit)\nFinal Training Block\n\n\nTest Accuracy\nbrm(dist ~ condit * bandType + (1|id) + (1|bandInt)\nAll Testing trials\n\n\nBand Discrimination\nbrm(vx ~ condit * band +(1 + bandInt|id)\nAll Testing Trials\n\n\n\n\nIn each experiment we compare varied and constant conditions in terms of 1) accuracy in the final training block; 2) testing accuracy as a function of band type (trained vs. extrapolation bands); 3) extent of discrimination between all six testing bands. We quantified accuracy as the absolute deviation between the response velocity and the nearest boundary of the target band. Thus, when the target band was velocity 600-800, throws of 400, 650, and 900 would result in deviation values of 200, 0, and 100, respectively. The degree of discrimination between bands was index by fitting a linear model predicting the response velocity as a function of the target velocity. Participants who reliably discriminated between velocity bands tended to haves slope values ~1, while participants who made throws irrespective of the current target band would have slopes ~0.\n\\[\\begin{equation}\ndist_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot band_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot band_{ij} + b_{0i} + b_{1i} \\cdot band_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\n\n\n\n\n\n\n\nFigure 1: E1. Deviations from target band across training blocks.\n\n\n\n\n\n\n\n\n\nTable 1: Experiment 1 - End of training performance. The Intercept represents the average of the baseline (constant condition), and the conditVaried coefficient reflects the difference between the constant and varied groups. A larger positive estimates indicates a greater deviation (lower accuracy) for the varied group.\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n106.34\n95.46\n117.25\n1\n\n\nconditVaried\n79.64\n57.92\n101.63\n1\n\n\n\n\n\n\n\nTraining. Figure 1 displays the average deviations across training blocks for the varied group, which trained on three velocity bands, and the constant group, which trained on one velocity band. To compare the training conditions at the end of training, we analyzed performance on the 800-1000 velocity band, which both groups trained on. The full model results are shown in Table 1. The varied group had a significantly greater deviation than the constant group in the final training block, (\\(\\beta\\) = 79.64, 95% CrI [57.92, 101.63]; pd = 100%).\n\n\n\n\n\nTable 2: Experiment 1 testing accuracy. Main effects of condition and band type (training vs. extrapolation), and the interaction between the two factors. Larger coefficient estimates indicate larger deviations from the baselines (constant & trained bands) - and a positive interaction coefficient indicates disproporionate deviation for the varied condition on the extrapolation bands\n\n\n\n\n\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n152.55\n70.63\n229.85\n1.0\n\n\nconditVaried\n39.00\n-21.10\n100.81\n0.9\n\n\nbandTypeExtrapolation\n71.51\n33.24\n109.60\n1.0\n\n\nconditVaried:bandTypeExtrapolation\n66.46\n32.76\n99.36\n1.0\n\n\n\n\n\n\nTesting. To compare accuracy between groups in the testing stage, we fit a Bayesian mixed effects model predicting deviation from the target band as a function of training condition (varied vs. constant) and band type (trained vs. extrapolation), with random intercepts for participants and bands. The model results are shown in Table 2. The main effect of training condition was not significant (\\(\\beta\\) = 39, 95% CrI [-21.1, 100.81]; pd = 89.93%). The extrapolation testing items had a significantly greater deviation than the training bands (\\(\\beta\\) = 71.51, 95% CrI [33.24, 109.6]; pd = 99.99%). Most importantly, the interaction between training condition and band type was significant (\\(\\beta\\) = 66.46, 95% CrI [32.76, 99.36]; pd = 99.99%), As shown in Figure 3, the varied group had disproportionately larger deviations compared to the constant group in the extrapolation bands.\n\n\n\n\n\n\n\nFigure 2: E1. Deviations from target band during testing without feedback stage.\n\n\n\n\n\n\n\n\n\nFigure 3: E1. A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% confidence intervals.\n\n\n\n\n\n\n\n\nTable 3: Experiment 1. Bayesian Mixed Model Predicting Vx as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n408.55\n327.00\n490.61\n1.00\n\n\nconditVaried\n164.05\n45.50\n278.85\n1.00\n\n\nBand\n0.71\n0.62\n0.80\n1.00\n\n\ncondit*Band\n-0.14\n-0.26\n-0.01\n0.98\n\n\n\n\n\n\nFinally, to assess the ability of both conditions to discriminate between velocity bands, we fit a model predicting velocity as a function of training condition and velocity band, with random intercepts and random slopes for each participant. See Table 4 for the full model results. The estimated coefficient for training condition (\\(\\beta\\) = 164.05, 95% CrI [45.5, 278.85]) suggests that the varied group tends to produce harder throws than the constant group, but is not in and of itself useful for assessing discrimination. Most relevant to the issue of discrimination is the coefficient on the Band predictor (\\(\\beta\\) = 0.71 95% CrI [0.62, 0.8]). Although the median slope does fall underneath the ideal of value of 1, the fact that the 95% credible interval does not contain 0 provides strong evidence that participants exhibited some discrimination between bands. The estimate for the interaction between slope and condition (\\(\\beta\\) = -0.14, 95% CrI [-0.26, -0.01]), suggests that the discrimination was somewhat modulated by training condition, with the varied participants showing less sensitivity between bands than the constant condition. This difference is depicted visually in Figure 4.\n\n\n\n\n\n\n\nFigure 4: E1 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\n\n\n\n\n\n\n\nTable 4\n\n\n\n\nExperiment 1. Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.",
    "crumbs": [
      "Sections",
      "Results"
    ]
  },
  {
    "objectID": "Sections/Results.html#experiment-2",
    "href": "Sections/Results.html#experiment-2",
    "title": "Experiment 3",
    "section": "\n3 Experiment 2",
    "text": "3 Experiment 2\n\n\n\n\n3.1 Methods & Procedure\nThe task and procedure of Experiment was identical to Experiment 1, with the exception that the training and testing bands were reversed (see Figure 5). The Varied group trained on bands 100-300, 350-550, 600-800, and the constant group trained on band 600-800. Both groups were tested from all six bands. A total of 110 participants completed the experiment (Varied: 55, Constant: 55).\n\n\n\n\n\ncluster\nTest Phase (Counterbalanced Order)data1\n Varied Training 100-300350-550600-800Test1\nTest  Novel Bands  800-10001000-12001200-1400data1-&gt;Test1\ndata2\n Constant Training 600-800data2-&gt;Test1\nTest3\n    Final Test   Novel With Feedback  800-10001000-12001200-1400Test2\n  Test   Varied Training Bands  100-300350-550600-800Test1-&gt;Test2\nTest2-&gt;Test3\n\n\n\n\nFigure 5: Experiment 2 Design. Constant and Varied participants complete different training conditions. The training and testing bands are the reverse of Experiment 1.\n\n\n\n\n\n3.2 Results\n\n\n\n\n\n\n\nFigure 6: E2. Deviations from target band across training blocks.\n\n\n\n\n\n\n\n\n\nTable 5: Experiment 2 - End of training performance. The Intercept represents the average of the baseline (constant condition), and the conditVaried coefficient reflects the difference between the constant and varied groups. A larger positive coefficient indicates a greater deviation (lower accuracy) for the varied group.\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n91.01\n80.67\n101.26\n1\n\n\nconditVaried\n36.15\n16.35\n55.67\n1\n\n\n\n\n\n\n\nTraining. Figure 6 presents the deviations across training blocks for both constant and varied training groups. We again compared training performance on the band common to both groups (600-800). The full model results are shown in Table 1. The varied group had a significantly greater deviation than the constant group in the final training block, ( \\(\\beta\\) = 36.15, 95% CrI [16.35, 55.67]; pd = 99.95%). ::: {.cell}\n:::\n\n\nTable 6: Experiment 2 testing accuracy. Main effects of condition and band type (training vs. extrapolation), and the interaction between the two factors. Larger coefficient estimates indicate larger deviations from the baselines (constant & trained bands) - and a positive interaction coefficient indicates disproporionate deviation for the varied condition on the extrapolation bands\n\n\n\n\n\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n190.91\n125.03\n259.31\n1.00\n\n\nconditVaried\n-20.58\n-72.94\n33.08\n0.78\n\n\nbandTypeExtrapolation\n38.09\n-6.94\n83.63\n0.95\n\n\nconditVaried:bandTypeExtrapolation\n82.00\n41.89\n121.31\n1.00\n\n\n\n\n\n\n \nTesting Accuracy. The analysis of testing accuracy examined deviations from the target band as influenced by training condition (Varied vs. Constant) and band type (training vs. extrapolation bands). The results, summarized in Table 6, reveal no significant main effect of training condition (\\(\\beta\\) = -20.58, 95% CrI [-72.94, 33.08]; pd = 77.81%). However, the interaction between training condition and band type was significant (\\(\\beta\\) = 82, 95% CrI [41.89, 121.31]; pd = 100%), with the varied group showing disproportionately larger deviations compared to the constant group on the extrapolation bands (see Figure 7).\n\n\n\n\n\n\n\nFigure 7: A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% confidence intervals.\n\n\n\n\n\n\n\n\n\nTable 7: Experiment 2. Bayesian Mixed Model Predicting Vx as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n362.64\n274.85\n450.02\n1.00\n\n\nconditVaried\n-8.56\n-133.97\n113.98\n0.55\n\n\nBand\n0.71\n0.58\n0.84\n1.00\n\n\ncondit*Band\n-0.06\n-0.24\n0.13\n0.73\n\n\n\n\n\n\nTesting Discrimination. Finally, to assess the ability of both conditions to discriminate between velocity bands, we fit a model predicting velocity as a function of training condition and velocity band, with random intercepts and random slopes for each participant. The full model results are shown in Table 8. The overall slope on target velocity band predictor was significantly positive, (\\(\\beta\\) = 0.71, 95% CrI [0.58, 0.84]; pd= 100%), indicating that participants exhibited discrimination between bands. The interaction between slope and condition was not significant, (\\(\\beta\\) = -0.06, 95% CrI [-0.24, 0.13]; pd= 72.67%), suggesting that the two conditions did not differ in their ability to discriminate between bands (see Figure 8).\n\n\n\n\n\n\n\nFigure 8: E2 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\n\n\n\n\n\n\n\nTable 8\n\n\n\n\nConditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.",
    "crumbs": [
      "Sections",
      "Results"
    ]
  },
  {
    "objectID": "Sections/Results.html#experiment-3",
    "href": "Sections/Results.html#experiment-3",
    "title": "Experiment 3",
    "section": "\n5 Experiment 3",
    "text": "5 Experiment 3\n\n\n\n\n5.1 Methods & Procedure\nThe major adjustment of Experiment 3 is for participants to receive ordinal feedback during training, in contrast to the continuous feedback of the prior experiments. After each training throw, participants are informed whether a throw was too soft, too hard, or correct (i.e. within the target velocity range). All other aspects of the task and design are identical to Experiments 1 and 2. We utilized the order of training and testing bands from both of the prior experiments, thus assigning participants to both an order condition (Original or Reverse) and a training condition (Constant or Varied). Participants were once again recruited from the online Indiana University Introductory Psychology Course pool. Following exclusions, 195 participants were included in the final analysis, n=51 in the Constant-Original condition, n=59 in the Constant-Reverse condition, n=39 in the Varied-Original condition, and n=46 in the Varied-Reverse condition.\n\n5.2 Results\n\n\n\n\n\nTable 9: Experiment 3 - End of training performance. The Intercept represents the average of the baseline (constant condition), and the conditVaried coefficient reflects the difference between the constant and varied groups. A larger positive coefficient indicates a greater deviation (lower accuracy) for the varied group.\n\n\n\n\n\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n121.86\n109.24\n134.60\n1.00\n\n\nconditVaried\n64.93\n36.99\n90.80\n1.00\n\n\nbandOrderReverse\n1.11\n-16.02\n18.16\n0.55\n\n\nconditVaried:bandOrderReverse\n-77.02\n-114.16\n-39.61\n1.00\n\n\n\n\n\n\nTraining. Figure 9 displays the average deviations from the target band across training blocks, and Table 9 shows the results of the Bayesian regression model predicting the deviation from the common band at the end of training (600-800 for reversed order, and 800-1000 for original order conditions). The main effect of training condition is significant, with the varied condition showing larger deviations ( \\(\\beta\\) = 64.93, 95% CrI [36.99, 90.8]; pd = 100%). The main effect of band order is not significant \\(\\beta\\) = 1.11, 95% CrI [-16.02, 18.16]; pd = 55.4%, however the interaction between training condition and band order is significant, with the varied condition showing greater accuracy in the reverse order condition ( \\(\\beta\\) = -77.02, 95% CrI [-114.16, -39.61]; pd = 100%).\n\n\n\n\n\n\n\nFigure 9: E3. Deviations from target band during testing without feedback stage.\n\n\n\n\n\n\n\n\n\nTable 10: Experiment 3 testing accuracy. Main effects of condition and band type (training vs. extrapolation), and the interaction between the two factors. Larger coefficient estimates indicate larger deviations from the baselines (constant & trained bands) - and a positive interaction coefficient indicates disproporionate deviation for the varied condition on the extrapolation bands\n\n\n\n\n\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n288.65\n199.45\n374.07\n1.00\n\n\nconditVaried\n-40.19\n-104.68\n23.13\n0.89\n\n\nbandTypeExtrapolation\n-23.35\n-57.28\n10.35\n0.92\n\n\nbandOrderReverse\n-73.72\n-136.69\n-11.07\n0.99\n\n\nconditVaried:bandTypeExtrapolation\n52.66\n14.16\n90.23\n1.00\n\n\nconditVaried:bandOrderReverse\n-37.48\n-123.28\n49.37\n0.80\n\n\nbandTypeExtrapolation:bandOrderReverse\n80.69\n30.01\n130.93\n1.00\n\n\nconditVaried:bandTypeExtrapolation:bandOrderReverse\n30.42\n-21.00\n81.65\n0.87\n\n\n\n\n\n\nTesting Accuracy. Table 10 presents the results of the Bayesian mixed efects model predicting absolute deviation from the target band during the testing stage. There was no significant main effect of training condition,\\(\\beta\\) = -40.19, 95% CrI [-104.68, 23.13]; pd = 89.31%, or band type,\\(\\beta\\) = -23.35, 95% CrI [-57.28, 10.35]; pd = 91.52%. However the effect of band order was significant, with the reverse order condition showing lower deviations, \\(\\beta\\) = -73.72, 95% CrI [-136.69, -11.07]; pd = 98.89%. The interaction between training condition and band type was also significant \\(\\beta\\) = 52.66, 95% CrI [14.16, 90.23]; pd = 99.59%, with the varied condition showing disproprionately large deviations on the extrapolation bands compared to the constant group. There was also a significant interaction between band type and band order, \\(\\beta\\) = 80.69, 95% CrI [30.01, 130.93]; pd = 99.89%, such that the reverse order condition showed larger deviations on the extrapolation bands. No other interactions were significant.\n\n\n\n\n\n\n\nFigure 10: E3. A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% confidence intervals.\n\n\n\n\n\n\n\n\n\nTable 11: Experiment 3. Bayesian Mixed Model Predicting Vx as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\n\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n601.83\n504.75\n699.42\n1.00\n\n\nconditVaried\n12.18\n-134.94\n162.78\n0.56\n\n\nbandOrderReverse\n13.03\n-123.89\n144.67\n0.58\n\n\nBand\n0.49\n0.36\n0.62\n1.00\n\n\nconditVaried:bandOrderReverse\n-338.15\n-541.44\n-132.58\n1.00\n\n\nconditVaried:Band\n-0.04\n-0.23\n0.15\n0.67\n\n\nbandOrderReverse:bandInt\n-0.10\n-0.27\n0.08\n0.86\n\n\nconditVaried:bandOrderReverse:bandInt\n0.42\n0.17\n0.70\n1.00\n\n\n\n\n\n\nTesting Discrimination. The full results of the discrimination model are presented in Table 10. For the purposes of assessing group differences in discrimination, only the coefficients including the band variable are of interest. The baseline effect of band represents the slope cofficient for the constant training - original order condition, this effect was significant \\(\\beta\\) = 0.49, 95% CrI [0.36, 0.62]; pd = 100%. Neither of the two way interactions reached significance, \\(\\beta\\) = -0.04, 95% CrI [-0.23, 0.15]; pd = 66.63%, \\(\\beta\\) = -0.1, 95% CrI [-0.27, 0.08]; pd = 86.35%. However, the three way interaction between training condition, band order, and target band was significant, \\(\\beta\\) = 0.42, 95% CrI [0.17, 0.7]; pd = 99.96% - indicating that the varied condition showed a greater slope coefficient on the reverse order bands, compared to the constant condition - this is clearly shown in Figure 11, where the steepness of the best fitting line for the varied-reversed condition is noticably steeper than the other conditions.\n\n\n\n\n\n\n\nFigure 11: e3 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\n\n\n\n\n\n\n\n\n\n\n\nFigure 12: Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.",
    "crumbs": [
      "Sections",
      "Results"
    ]
  },
  {
    "objectID": "Model/htw_model_e3.html",
    "href": "Model/htw_model_e3.html",
    "title": "HTW Model e3",
    "section": "",
    "text": "Codepacman::p_load(dplyr,purrr,tidyr,ggplot2, data.table, here, patchwork, conflicted, \n               stringr,future,furrr, knitr, reactable, flextable,ggstance, htmltools,ggdist)\n#conflict_prefer_all(\"dplyr\", quiet = TRUE)\noptions(scipen = 999)\nwalk(c(\"Display_Functions\",\"fun_alm\",\"fun_indv_fit\",\"fun_model\"), ~ source(here::here(paste0(\"Functions/\", .x, \".R\"))))",
    "crumbs": [
      "Model",
      "HTW Model e3"
    ]
  },
  {
    "objectID": "Model/hybrid.html",
    "href": "Model/hybrid.html",
    "title": "HTW Hybrid Models",
    "section": "",
    "text": "Codepacman::p_load(dplyr,purrr,tidyr,ggplot2, data.table, here, patchwork, conflicted, \n               stringr,future,furrr, knitr, reactable, flextable,ggstance, htmltools,kableExtra,ggdist)\nconflict_prefer_all(\"dplyr\", quiet = TRUE)\noptions(scipen = 999)\nwalk(c(\"Display_Functions\",\"fun_alm\",\"fun_indv_fit\",\"fun_model\"), ~ source(here::here(paste0(\"Functions/\", .x, \".R\"))))",
    "crumbs": [
      "Model",
      "HTW Hybrid Models"
    ]
  },
  {
    "objectID": "Model/hybrid.html#e1",
    "href": "Model/hybrid.html#e1",
    "title": "HTW Hybrid Models",
    "section": "E1",
    "text": "E1\n\nCodeds &lt;- readRDS(here::here(\"data/e1_md_11-06-23.rds\"))  |&gt; as.data.table()\nnbins &lt;- 3\n\nfd &lt;- readRDS(here(\"data/e1_08-21-23.rds\"))\ntest &lt;- fd |&gt; filter(expMode2 == \"Test\") \ntestAvg &lt;- test %&gt;% group_by(id, condit, vb, bandInt,bandType,tOrder) %&gt;%\n  summarise(nHits=sum(dist==0),vx=mean(vx),dist=mean(dist),sdist=mean(sdist),n=n(),Percent_Hit=nHits/n)\n\ntrainAvg &lt;- fd |&gt; filter(expMode2 == \"Train\") |&gt; group_by(id) |&gt; \n  mutate(tr=trial,x=vb,Block=case_when(expMode2==\"Train\" ~ cut(tr,breaks=seq(1,max(tr), length.out=nbins+1),include.lowest=TRUE,labels=FALSE),\n                                         expMode2==\"Test\" ~ 4)) |&gt; \n  group_by(id,condit,vb,x,Block) |&gt; \n  summarise(dist=mean(dist),y=mean(vx))\n\ninput_layer &lt;&lt;- output_layer &lt;&lt;-  c(100,350,600,800,1000,1200)\nids2 &lt;- c(1,66,36)\n\nfile_name &lt;- \"e1_hybrid_n_iter_250_ntry_200_0637\"\n\nind_fits &lt;- map(list.files(here(paste0('data/abc_reject/'),file_name),full.names=TRUE), readRDS)\nind_fits_df &lt;- ind_fits |&gt; map(~list(dat=.x[[1]], Model = .x[[\"Model\"]], Fit_Method=.x[[\"Fit_Method\"]]))\nind_fits_df &lt;- ind_fits_df |&gt; map(~rbindlist(.x$dat) |&gt; mutate(Model = .x$Model, Fit_Method = .x$Fit_Method)) |&gt; rbindlist() \n\n\nprocess_folder &lt;- function(folder_name) {\n  ind_fits &lt;- map(list.files(here(paste0('data/abc_reject/'), folder_name), \n                             full.names = TRUE), readRDS)\n  ind_fits_df &lt;- ind_fits |&gt; \n    map(~list(dat = .x[[1]], Model = .x[[\"Model\"]], Fit_Method = .x[[\"Fit_Method\"]],tolM=.x$tolM,ar=.x$min_accept_rate,\n              t=.x$ri$elapsed)) |&gt; \n    map(~rbindlist(.x$dat) |&gt; \n           mutate(Model = .x$Model, Fit_Method = .x$Fit_Method,\n                 exp = str_extract(folder_name, \"^e\\\\d\"),\n                 n_int = as.numeric(str_extract(folder_name, \"(?&lt;=_n_iter_)\\\\d+\")),\n                 ntry = as.numeric(str_extract(folder_name, \"(?&lt;=_ntry_)\\\\d+\")),\n                 tolM=.x$tolM,ar=.x$ar,\n                 run_name = folder_name,\n                 min = round(.x$t/60,0))) |&gt; \n    rbindlist()\n  return(ind_fits_df)\n}\n\n# folder_names &lt;- c(\"e1_hybrid_n_iter_250_ntry_200_0637\",\n# \"e1_hybrid_n_iter_60_ntry_150_2335\",\n# \"e1_hybrid_n_iter_200_ntry_300_0741\",\n# \"e1_hybrid_n_iter_150_ntry_150_4749\",\"e1_hybrid_n_iter_100_ntry_100_1435\",\"e1_hybrid_n_iter_400_ntry_300_3744\")\n\nfolder_names &lt;- list.files(here(\"data/abc_reject\"),pattern=\"e1_hyb*\")\n\n\n\nall_fits &lt;- map_df(folder_names, process_folder)\n\nall_fits |&gt; \n  group_by(exp,n_int,ntry,tolM,ar,condit,Fit_Method) |&gt; \n  summarise(min=first(min),me=mean(mean_error),\n            w=median(weight_exam),sd_w=sd(weight_exam),c=median(c),\n            lr=median(lr),n=n_distinct(id)) |&gt;\n   mutate(across(c(me, w, lr, sd_w), ~round(., 2))) |&gt;\n  arrange(condit,Fit_Method,me) |&gt; kable(caption=\"E1 Fit Comparisons\") |&gt; \n  kable_styling(full_width = F) |&gt;\n  column_spec(8,bold=T,border_left=T) \n\n\n\nE1 Fit Comparisons\n\nexp\nn_int\nntry\ntolM\nar\ncondit\nFit_Method\nmin\nme\nw\nsd_w\nc\nlr\nn\n\n\n\ne1\n150\n2500\n0.65\n0.10\nConstant\nTest\n847\n214.73\n0.80\n0.25\n0.0000403\n2.37\n80\n\n\ne1\n100\n2500\n0.65\n0.10\nConstant\nTest\n209\n214.87\n0.80\n0.25\n0.0000402\n2.37\n80\n\n\ne1\n200\n1500\n0.70\n0.10\nConstant\nTest\n402\n215.79\n0.80\n0.25\n0.0000411\n2.37\n80\n\n\ne1\n50\n900\n0.80\n0.12\nConstant\nTest\n55\n217.65\n0.79\n0.25\n0.0000433\n2.32\n80\n\n\ne1\n90\n900\n0.80\n0.09\nConstant\nTest\n101\n217.77\n0.79\n0.25\n0.0000439\n2.31\n80\n\n\ne1\n150\n500\n0.95\n0.10\nConstant\nTest\n112\n220.00\n0.79\n0.25\n0.0000500\n2.30\n80\n\n\ne1\n70\n500\n0.85\n0.10\nConstant\nTest\n177\n220.15\n0.79\n0.24\n0.0000486\n2.30\n80\n\n\ne1\n400\n300\n0.85\n0.04\nConstant\nTest\n337\n220.33\n0.79\n0.24\n0.0000491\n2.28\n80\n\n\ne1\n50\n500\n0.85\n0.05\nConstant\nTest\n201\n220.67\n0.79\n0.24\n0.0000472\n2.28\n80\n\n\ne1\n200\n300\n0.90\n0.10\nConstant\nTest\n129\n220.96\n0.79\n0.24\n0.0000525\n2.28\n80\n\n\ne1\n49\n800\n0.95\n0.18\nConstant\nTest\n286\n221.49\n0.79\n0.25\n0.0000513\n2.31\n80\n\n\ne1\n61\n500\n0.95\n0.10\nConstant\nTest\n41\n221.57\n0.79\n0.24\n0.0000552\n2.30\n80\n\n\ne1\n50\n900\n0.95\n0.10\nConstant\nTest\n37\n221.77\n0.79\n0.25\n0.0000524\n2.33\n80\n\n\ne1\n250\n200\n0.85\n0.10\nConstant\nTest\n176\n222.09\n0.78\n0.24\n0.0000594\n2.27\n80\n\n\ne1\n52\n600\n0.95\n0.18\nConstant\nTest\n199\n222.28\n0.79\n0.25\n0.0000584\n2.32\n80\n\n\ne1\n65\n300\n0.95\n0.10\nConstant\nTest\n29\n223.14\n0.79\n0.25\n0.0000602\n2.26\n80\n\n\ne1\n100\n100\n0.85\n0.01\nConstant\nTest\n372\n223.15\n0.79\n0.25\n0.0000567\n2.24\n80\n\n\ne1\n150\n150\n0.85\n0.10\nConstant\nTest\n72\n223.85\n0.78\n0.24\n0.0000647\n2.27\n80\n\n\ne1\n51\n300\n0.95\n0.15\nConstant\nTest\n149\n223.96\n0.79\n0.25\n0.0000643\n2.31\n80\n\n\ne1\n60\n150\n0.85\n0.10\nConstant\nTest\n24\n224.74\n0.78\n0.25\n0.0000670\n2.28\n80\n\n\ne1\n105\n100\n0.85\n0.05\nConstant\nTest\n228\n225.38\n0.78\n0.25\n0.0000644\n2.24\n80\n\n\ne1\n100\n100\n0.90\n0.10\nConstant\nTest\n162\n226.26\n0.79\n0.25\n0.0000798\n2.25\n80\n\n\ne1\n100\n2500\n0.65\n0.10\nConstant\nTest_Train\n317\n233.60\n0.79\n0.24\n0.0000381\n0.72\n80\n\n\ne1\n200\n1500\n0.70\n0.10\nConstant\nTest_Train\n466\n234.43\n0.79\n0.24\n0.0000388\n0.72\n80\n\n\ne1\n90\n900\n0.80\n0.09\nConstant\nTest_Train\n120\n235.49\n0.78\n0.25\n0.0000388\n0.73\n80\n\n\ne1\n50\n900\n0.80\n0.12\nConstant\nTest_Train\n71\n235.70\n0.77\n0.25\n0.0000388\n0.71\n80\n\n\ne1\n70\n500\n0.85\n0.10\nConstant\nTest_Train\n173\n237.28\n0.77\n0.25\n0.0000401\n0.76\n80\n\n\ne1\n150\n500\n0.95\n0.10\nConstant\nTest_Train\n138\n237.33\n0.78\n0.25\n0.0000400\n0.75\n80\n\n\ne1\n50\n500\n0.85\n0.05\nConstant\nTest_Train\n217\n237.64\n0.78\n0.25\n0.0000401\n0.77\n80\n\n\ne1\n400\n300\n0.85\n0.04\nConstant\nTest_Train\n475\n237.70\n0.77\n0.25\n0.0000409\n0.79\n80\n\n\ne1\n49\n800\n0.95\n0.18\nConstant\nTest_Train\n263\n238.08\n0.78\n0.25\n0.0000400\n0.79\n80\n\n\ne1\n200\n300\n0.90\n0.10\nConstant\nTest_Train\n153\n238.15\n0.77\n0.25\n0.0000413\n0.82\n80\n\n\ne1\n50\n900\n0.95\n0.10\nConstant\nTest_Train\n38\n238.19\n0.78\n0.25\n0.0000398\n0.79\n80\n\n\ne1\n52\n600\n0.95\n0.18\nConstant\nTest_Train\n210\n238.88\n0.77\n0.25\n0.0000395\n0.82\n80\n\n\ne1\n250\n200\n0.85\n0.10\nConstant\nTest_Train\n183\n239.01\n0.77\n0.25\n0.0000429\n0.83\n80\n\n\ne1\n61\n500\n0.95\n0.10\nConstant\nTest_Train\n46\n239.02\n0.77\n0.25\n0.0000410\n0.81\n80\n\n\ne1\n100\n100\n0.85\n0.01\nConstant\nTest_Train\n465\n239.10\n0.77\n0.25\n0.0000429\n0.83\n80\n\n\ne1\n65\n300\n0.95\n0.10\nConstant\nTest_Train\n28\n239.92\n0.77\n0.25\n0.0000423\n0.82\n80\n\n\ne1\n150\n150\n0.85\n0.10\nConstant\nTest_Train\n89\n240.04\n0.77\n0.25\n0.0000453\n0.84\n80\n\n\ne1\n60\n150\n0.85\n0.10\nConstant\nTest_Train\n17\n240.55\n0.76\n0.25\n0.0000466\n0.83\n80\n\n\ne1\n51\n300\n0.95\n0.15\nConstant\nTest_Train\n137\n240.77\n0.77\n0.25\n0.0000424\n0.87\n80\n\n\ne1\n105\n100\n0.85\n0.05\nConstant\nTest_Train\n212\n241.24\n0.76\n0.26\n0.0000480\n0.91\n80\n\n\ne1\n100\n100\n0.90\n0.10\nConstant\nTest_Train\n194\n242.04\n0.76\n0.25\n0.0000519\n0.94\n80\n\n\ne1\n100\n100\n0.90\n0.10\nConstant\nTrain\n30\n211.21\n0.50\n0.29\n0.0000284\n2.00\n135\n\n\ne1\n200\n300\n0.90\n0.10\nConstant\nTrain\n146\n220.24\n0.50\n0.29\n0.0001014\n2.08\n80\n\n\ne1\n70\n500\n0.85\n0.10\nConstant\nTrain\n84\n220.80\n0.48\n0.29\n0.0001000\n2.09\n80\n\n\ne1\n50\n500\n0.85\n0.05\nConstant\nTrain\n91\n221.54\n0.50\n0.29\n0.0000965\n2.08\n80\n\n\ne1\n60\n150\n0.85\n0.10\nConstant\nTrain\n32\n221.76\n0.50\n0.29\n0.0000750\n1.38\n80\n\n\ne1\n52\n600\n0.95\n0.18\nConstant\nTrain\n84\n224.05\n0.50\n0.29\n0.0001002\n2.01\n80\n\n\ne1\n150\n2500\n0.65\n0.10\nVaried\nTest\n847\n217.30\n0.72\n0.27\n0.0000745\n3.16\n76\n\n\ne1\n100\n2500\n0.65\n0.10\nVaried\nTest\n209\n217.57\n0.72\n0.27\n0.0000807\n3.11\n76\n\n\ne1\n200\n1500\n0.70\n0.10\nVaried\nTest\n402\n219.21\n0.71\n0.27\n0.0000771\n3.09\n76\n\n\ne1\n90\n900\n0.80\n0.09\nVaried\nTest\n101\n222.25\n0.71\n0.27\n0.0000799\n3.03\n76\n\n\ne1\n50\n900\n0.80\n0.12\nVaried\nTest\n55\n222.79\n0.71\n0.27\n0.0000727\n2.98\n76\n\n\ne1\n70\n500\n0.85\n0.10\nVaried\nTest\n177\n225.34\n0.70\n0.27\n0.0000810\n2.87\n76\n\n\ne1\n150\n500\n0.95\n0.10\nVaried\nTest\n112\n225.47\n0.70\n0.27\n0.0000810\n2.89\n76\n\n\ne1\n50\n900\n0.95\n0.10\nVaried\nTest\n37\n226.30\n0.70\n0.27\n0.0000811\n2.89\n76\n\n\ne1\n400\n300\n0.85\n0.04\nVaried\nTest\n337\n226.51\n0.69\n0.27\n0.0000845\n2.84\n76\n\n\ne1\n50\n500\n0.85\n0.05\nVaried\nTest\n201\n226.53\n0.70\n0.27\n0.0000860\n2.86\n76\n\n\ne1\n49\n800\n0.95\n0.18\nVaried\nTest\n286\n226.86\n0.69\n0.27\n0.0000783\n2.95\n76\n\n\ne1\n61\n500\n0.95\n0.10\nVaried\nTest\n41\n227.08\n0.69\n0.27\n0.0000855\n2.81\n76\n\n\ne1\n200\n300\n0.90\n0.10\nVaried\nTest\n129\n227.66\n0.69\n0.27\n0.0000844\n2.82\n76\n\n\ne1\n52\n600\n0.95\n0.18\nVaried\nTest\n199\n227.96\n0.69\n0.27\n0.0000787\n2.84\n76\n\n\ne1\n250\n200\n0.85\n0.10\nVaried\nTest\n176\n229.83\n0.68\n0.27\n0.0000894\n2.71\n76\n\n\ne1\n100\n100\n0.85\n0.01\nVaried\nTest\n372\n230.20\n0.68\n0.27\n0.0000877\n2.71\n76\n\n\ne1\n65\n300\n0.95\n0.10\nVaried\nTest\n29\n231.00\n0.67\n0.26\n0.0000874\n2.71\n76\n\n\ne1\n51\n300\n0.95\n0.15\nVaried\nTest\n149\n231.32\n0.68\n0.27\n0.0000827\n2.78\n76\n\n\ne1\n150\n150\n0.85\n0.10\nVaried\nTest\n72\n231.85\n0.68\n0.27\n0.0000879\n2.57\n76\n\n\ne1\n60\n150\n0.85\n0.10\nVaried\nTest\n24\n234.05\n0.66\n0.27\n0.0000959\n2.54\n76\n\n\ne1\n105\n100\n0.85\n0.05\nVaried\nTest\n228\n234.81\n0.67\n0.27\n0.0000966\n2.51\n76\n\n\ne1\n100\n100\n0.90\n0.10\nVaried\nTest\n162\n235.56\n0.66\n0.27\n0.0000958\n2.48\n76\n\n\ne1\n100\n2500\n0.65\n0.10\nVaried\nTest_Train\n317\n290.40\n0.54\n0.27\n0.0000764\n0.99\n76\n\n\ne1\n200\n1500\n0.70\n0.10\nVaried\nTest_Train\n466\n291.65\n0.54\n0.27\n0.0000776\n0.84\n76\n\n\ne1\n90\n900\n0.80\n0.09\nVaried\nTest_Train\n120\n293.35\n0.55\n0.27\n0.0000747\n0.78\n76\n\n\ne1\n50\n900\n0.80\n0.12\nVaried\nTest_Train\n71\n293.77\n0.56\n0.27\n0.0000750\n0.76\n76\n\n\ne1\n70\n500\n0.85\n0.10\nVaried\nTest_Train\n173\n295.56\n0.55\n0.27\n0.0000752\n0.73\n76\n\n\ne1\n49\n800\n0.95\n0.18\nVaried\nTest_Train\n263\n295.63\n0.55\n0.26\n0.0000721\n0.78\n76\n\n\ne1\n50\n500\n0.85\n0.05\nVaried\nTest_Train\n217\n295.74\n0.56\n0.27\n0.0000708\n0.71\n76\n\n\ne1\n50\n900\n0.95\n0.10\nVaried\nTest_Train\n38\n295.80\n0.55\n0.26\n0.0000748\n0.79\n76\n\n\ne1\n150\n500\n0.95\n0.10\nVaried\nTest_Train\n138\n295.84\n0.55\n0.27\n0.0000732\n0.75\n76\n\n\ne1\n52\n600\n0.95\n0.18\nVaried\nTest_Train\n210\n296.14\n0.56\n0.26\n0.0000705\n0.76\n76\n\n\ne1\n400\n300\n0.85\n0.04\nVaried\nTest_Train\n475\n296.24\n0.56\n0.26\n0.0000720\n0.74\n76\n\n\ne1\n61\n500\n0.95\n0.10\nVaried\nTest_Train\n46\n296.78\n0.56\n0.27\n0.0000710\n0.78\n76\n\n\ne1\n200\n300\n0.90\n0.10\nVaried\nTest_Train\n153\n296.83\n0.56\n0.27\n0.0000713\n0.72\n76\n\n\ne1\n100\n100\n0.85\n0.01\nVaried\nTest_Train\n465\n297.79\n0.55\n0.27\n0.0000734\n0.75\n76\n\n\ne1\n250\n200\n0.85\n0.10\nVaried\nTest_Train\n183\n298.19\n0.55\n0.27\n0.0000712\n0.71\n76\n\n\ne1\n65\n300\n0.95\n0.10\nVaried\nTest_Train\n28\n298.71\n0.56\n0.26\n0.0000735\n0.74\n76\n\n\ne1\n150\n150\n0.85\n0.10\nVaried\nTest_Train\n89\n299.31\n0.56\n0.26\n0.0000700\n0.71\n76\n\n\ne1\n51\n300\n0.95\n0.15\nVaried\nTest_Train\n137\n299.59\n0.55\n0.26\n0.0000738\n0.72\n76\n\n\ne1\n60\n150\n0.85\n0.10\nVaried\nTest_Train\n17\n300.04\n0.56\n0.26\n0.0000687\n0.69\n76\n\n\ne1\n105\n100\n0.85\n0.05\nVaried\nTest_Train\n212\n300.51\n0.56\n0.26\n0.0000690\n0.69\n76\n\n\ne1\n100\n100\n0.90\n0.10\nVaried\nTest_Train\n194\n301.28\n0.56\n0.27\n0.0000667\n0.70\n76\n\n\ne1\n100\n100\n0.90\n0.10\nVaried\nTrain\n30\n265.62\n0.50\n0.29\n0.0000226\n0.92\n131\n\n\ne1\n70\n500\n0.85\n0.10\nVaried\nTrain\n84\n312.06\n0.49\n0.29\n0.0000266\n1.51\n76\n\n\ne1\n50\n500\n0.85\n0.05\nVaried\nTrain\n91\n312.34\n0.51\n0.28\n0.0000261\n1.38\n76\n\n\ne1\n200\n300\n0.90\n0.10\nVaried\nTrain\n146\n313.11\n0.50\n0.29\n0.0000260\n1.40\n76\n\n\ne1\n52\n600\n0.95\n0.18\nVaried\nTrain\n84\n314.91\n0.49\n0.29\n0.0000267\n1.40\n76\n\n\ne1\n60\n150\n0.85\n0.10\nVaried\nTrain\n32\n315.65\n0.49\n0.29\n0.0000259\n1.14\n76\n\n\n\n\n\nCodeall_fits |&gt; \n  filter(id %in% unique(all_fits$id)[1:2]) |&gt;\n  group_by(id,exp,n_int,ntry,condit,Fit_Method) |&gt; \n  mutate(rank=rank(mean_error)) |&gt; filter(rank&lt;n_int*.90) |&gt;\n  group_by(id,exp,n_int,ntry,condit,Fit_Method) |&gt; \n  summarise(me=mean(mean_error),w=median(weight_exam),sd_w=sd(weight_exam),c=median(c),lr=median(lr)) |&gt;\n  arrange(id,condit,Fit_Method,me) |&gt; \n    kbl() |&gt; kable_styling(full_width = F)\n\n\n\n\nid\nexp\nn_int\nntry\ncondit\nFit_Method\nme\nw\nsd_w\nc\nlr\n\n\n\n1\ne1\n100\n2500\nVaried\nTest\n223.5378\n0.8182305\n0.2035620\n0.0000019\n5.2816922\n\n\n1\ne1\n150\n2500\nVaried\nTest\n223.5554\n0.8585789\n0.1787275\n0.0000022\n5.1924980\n\n\n1\ne1\n50\n900\nVaried\nTest\n223.6162\n0.7473703\n0.1897786\n0.0000019\n5.2693800\n\n\n1\ne1\n150\n500\nVaried\nTest\n224.6697\n0.8149536\n0.1970840\n0.0000020\n5.1997612\n\n\n1\ne1\n200\n1500\nVaried\nTest\n225.4042\n0.7649556\n0.2123507\n0.0000019\n5.2531997\n\n\n1\ne1\n90\n900\nVaried\nTest\n226.6014\n0.7998805\n0.2525561\n0.0000020\n5.1910494\n\n\n1\ne1\n100\n100\nVaried\nTest\n228.0284\n0.8293703\n0.2262617\n0.0000023\n5.1435685\n\n\n1\ne1\n70\n500\nVaried\nTest\n230.9324\n0.8355013\n0.2819217\n0.0000020\n5.1279383\n\n\n1\ne1\n400\n300\nVaried\nTest\n231.2286\n0.8104574\n0.2420737\n0.0000023\n5.1076418\n\n\n1\ne1\n200\n300\nVaried\nTest\n232.2169\n0.8051852\n0.2395735\n0.0000023\n5.0557794\n\n\n1\ne1\n50\n500\nVaried\nTest\n232.5206\n0.8222143\n0.2435945\n0.0000021\n5.0075482\n\n\n1\ne1\n52\n600\nVaried\nTest\n233.0113\n0.8626639\n0.1970062\n0.0000830\n2.6120010\n\n\n1\ne1\n49\n800\nVaried\nTest\n233.2076\n0.8204706\n0.1984141\n0.0000023\n5.0773731\n\n\n1\ne1\n250\n200\nVaried\nTest\n233.5362\n0.7986295\n0.2476705\n0.0000021\n5.0901121\n\n\n1\ne1\n61\n500\nVaried\nTest\n233.7241\n0.8264059\n0.2336978\n0.0000023\n5.0624427\n\n\n1\ne1\n60\n150\nVaried\nTest\n235.2363\n0.7849864\n0.2606166\n0.0000024\n5.0587135\n\n\n1\ne1\n65\n300\nVaried\nTest\n236.8494\n0.7526598\n0.2464510\n0.0000021\n5.1046996\n\n\n1\ne1\n51\n300\nVaried\nTest\n236.8643\n0.8326864\n0.2732785\n0.0000668\n4.6356408\n\n\n1\ne1\n150\n150\nVaried\nTest\n238.8422\n0.8057119\n0.2588631\n0.0000046\n4.8535159\n\n\n1\ne1\n105\n100\nVaried\nTest\n240.9037\n0.7794698\n0.2547383\n0.0001021\n1.8109660\n\n\n1\ne1\n100\n2500\nVaried\nTest_Train\n291.1208\n0.4982487\n0.2149724\n0.0000627\n0.1050512\n\n\n1\ne1\n90\n900\nVaried\nTest_Train\n291.8641\n0.4633852\n0.1755527\n0.0000643\n0.1239611\n\n\n1\ne1\n200\n1500\nVaried\nTest_Train\n292.0506\n0.4656865\n0.1840448\n0.0000650\n0.1342331\n\n\n1\ne1\n50\n900\nVaried\nTest_Train\n292.7664\n0.4828479\n0.2012370\n0.0000584\n0.0823038\n\n\n1\ne1\n150\n500\nVaried\nTest_Train\n293.0012\n0.4539042\n0.1576420\n0.0000639\n0.1014355\n\n\n1\ne1\n70\n500\nVaried\nTest_Train\n294.7952\n0.4768128\n0.1804256\n0.0000711\n0.1343180\n\n\n1\ne1\n400\n300\nVaried\nTest_Train\n294.8046\n0.4961300\n0.1948949\n0.0000650\n0.1460962\n\n\n1\ne1\n50\n500\nVaried\nTest_Train\n294.8834\n0.4763972\n0.1708669\n0.0000729\n0.1072454\n\n\n1\ne1\n49\n800\nVaried\nTest_Train\n295.0383\n0.4812279\n0.1352303\n0.0000736\n0.1449286\n\n\n1\ne1\n100\n100\nVaried\nTest_Train\n295.4118\n0.4917216\n0.1817776\n0.0000666\n0.1636531\n\n\n1\ne1\n52\n600\nVaried\nTest_Train\n295.4456\n0.4399127\n0.1818114\n0.0000624\n0.0987222\n\n\n1\ne1\n200\n300\nVaried\nTest_Train\n295.9199\n0.4870067\n0.2079155\n0.0000664\n0.1371202\n\n\n1\ne1\n250\n200\nVaried\nTest_Train\n296.5507\n0.4909003\n0.1756808\n0.0000672\n0.1867037\n\n\n1\ne1\n105\n100\nVaried\nTest_Train\n297.3157\n0.4826085\n0.1881216\n0.0000674\n0.2043142\n\n\n1\ne1\n51\n300\nVaried\nTest_Train\n297.3525\n0.4793596\n0.2287758\n0.0000671\n0.2355805\n\n\n1\ne1\n61\n500\nVaried\nTest_Train\n297.3594\n0.4408326\n0.1632677\n0.0000699\n0.1775518\n\n\n1\ne1\n60\n150\nVaried\nTest_Train\n297.5422\n0.5341098\n0.1860066\n0.0000555\n0.1508889\n\n\n1\ne1\n150\n150\nVaried\nTest_Train\n298.1399\n0.5021449\n0.1864520\n0.0000740\n0.1710864\n\n\n1\ne1\n65\n300\nVaried\nTest_Train\n300.3247\n0.4955346\n0.1788877\n0.0000656\n0.2270260\n\n\n1\ne1\n200\n300\nVaried\nTrain\n301.0392\n0.4510923\n0.2769286\n0.0000187\n8.0239746\n\n\n1\ne1\n70\n500\nVaried\nTrain\n301.9224\n0.5754325\n0.2973605\n0.0000418\n7.9297719\n\n\n1\ne1\n50\n500\nVaried\nTrain\n302.6788\n0.5817460\n0.2974083\n0.0000424\n8.1026574\n\n\n1\ne1\n60\n150\nVaried\nTrain\n305.4690\n0.4887447\n0.2976968\n0.0000476\n7.9030316\n\n\n1\ne1\n52\n600\nVaried\nTrain\n306.0869\n0.4761011\n0.3128097\n0.0000496\n7.8344141\n\n\n1\ne1\n100\n100\nVaried\nTrain\n306.6696\n0.5408164\n0.2728925\n0.0000464\n7.8161855\n\n\n2\ne1\n100\n2500\nVaried\nTest\n369.8400\n0.5863439\n0.2981269\n0.0000348\n4.0355545\n\n\n2\ne1\n150\n2500\nVaried\nTest\n369.8738\n0.5306497\n0.3050162\n0.0000338\n5.0224378\n\n\n2\ne1\n150\n500\nVaried\nTest\n370.1960\n0.5485465\n0.2928199\n0.0000335\n5.0353815\n\n\n2\ne1\n50\n900\nVaried\nTest\n370.5906\n0.4917389\n0.2895874\n0.0000317\n5.1695962\n\n\n2\ne1\n200\n1500\nVaried\nTest\n371.4073\n0.4989873\n0.2888450\n0.0000336\n5.0766927\n\n\n2\ne1\n90\n900\nVaried\nTest\n374.1310\n0.5857368\n0.2691902\n0.0000345\n4.9535572\n\n\n2\ne1\n100\n100\nVaried\nTest\n374.7765\n0.5144509\n0.2778470\n0.0000341\n4.7317420\n\n\n2\ne1\n49\n800\nVaried\nTest\n376.1818\n0.4814195\n0.3264464\n0.0000352\n4.4422502\n\n\n2\ne1\n61\n500\nVaried\nTest\n376.4798\n0.6001896\n0.2867825\n0.0000353\n4.0377088\n\n\n2\ne1\n400\n300\nVaried\nTest\n377.7010\n0.4745654\n0.2921842\n0.0000345\n4.0564093\n\n\n2\ne1\n50\n500\nVaried\nTest\n377.7084\n0.4700296\n0.2752379\n0.0000385\n4.0132306\n\n\n2\ne1\n200\n300\nVaried\nTest\n377.9897\n0.4644357\n0.3013704\n0.0000351\n4.1080690\n\n\n2\ne1\n70\n500\nVaried\nTest\n378.6938\n0.5585721\n0.3168538\n0.0000356\n4.0292617\n\n\n2\ne1\n51\n300\nVaried\nTest\n380.1584\n0.4959267\n0.2805370\n0.0000381\n4.0102128\n\n\n2\ne1\n65\n300\nVaried\nTest\n381.2897\n0.4558618\n0.3250864\n0.0000353\n4.0229159\n\n\n2\ne1\n52\n600\nVaried\nTest\n381.8625\n0.6456892\n0.3142880\n0.0000380\n3.9758295\n\n\n2\ne1\n250\n200\nVaried\nTest\n382.6800\n0.5574183\n0.2947822\n0.0000368\n4.0376555\n\n\n2\ne1\n105\n100\nVaried\nTest\n386.5428\n0.4663750\n0.3017272\n0.0000374\n4.1107081\n\n\n2\ne1\n150\n150\nVaried\nTest\n386.6443\n0.5275578\n0.3094980\n0.0000363\n4.0164842\n\n\n2\ne1\n60\n150\nVaried\nTest\n387.5823\n0.4715924\n0.3332044\n0.0000386\n4.0013609\n\n\n2\ne1\n50\n900\nVaried\nTest_Train\n428.1180\n0.4978363\n0.2970980\n0.0000385\n4.9800328\n\n\n2\ne1\n150\n500\nVaried\nTest_Train\n429.5278\n0.4630116\n0.2978593\n0.0000375\n4.9235301\n\n\n2\ne1\n100\n2500\nVaried\nTest_Train\n429.7416\n0.4441688\n0.2806442\n0.0000385\n4.8920111\n\n\n2\ne1\n200\n1500\nVaried\nTest_Train\n432.2028\n0.4870858\n0.2860881\n0.0000373\n4.8960848\n\n\n2\ne1\n49\n800\nVaried\nTest_Train\n436.2951\n0.3925758\n0.2483927\n0.0000358\n4.9014996\n\n\n2\ne1\n100\n100\nVaried\nTest_Train\n438.4416\n0.4760461\n0.3051119\n0.0000351\n4.8056798\n\n\n2\ne1\n90\n900\nVaried\nTest_Train\n439.2872\n0.5689515\n0.3051232\n0.0000354\n4.9116788\n\n\n2\ne1\n52\n600\nVaried\nTest_Train\n441.2831\n0.5517423\n0.3000017\n0.0000357\n4.6911650\n\n\n2\ne1\n61\n500\nVaried\nTest_Train\n441.9809\n0.4955319\n0.2817430\n0.0000361\n4.9272707\n\n\n2\ne1\n70\n500\nVaried\nTest_Train\n442.1006\n0.6065832\n0.3080914\n0.0000364\n4.9111936\n\n\n2\ne1\n65\n300\nVaried\nTest_Train\n443.6291\n0.4970180\n0.2848160\n0.0000341\n4.8086849\n\n\n2\ne1\n400\n300\nVaried\nTest_Train\n444.0730\n0.5335898\n0.2966844\n0.0000351\n4.9310083\n\n\n2\ne1\n50\n500\nVaried\nTest_Train\n444.9344\n0.5975558\n0.2789440\n0.0000351\n4.7531000\n\n\n2\ne1\n200\n300\nVaried\nTest_Train\n445.7221\n0.4626835\n0.2983041\n0.0000358\n4.9009381\n\n\n2\ne1\n51\n300\nVaried\nTest_Train\n448.7055\n0.3941551\n0.2908179\n0.0000349\n4.9279146\n\n\n2\ne1\n250\n200\nVaried\nTest_Train\n451.1523\n0.4805013\n0.2915747\n0.0000357\n4.8348896\n\n\n2\ne1\n60\n150\nVaried\nTest_Train\n455.9307\n0.4307338\n0.2992679\n0.0000349\n4.9789964\n\n\n2\ne1\n150\n150\nVaried\nTest_Train\n456.8058\n0.6124759\n0.3025009\n0.0000359\n4.7546298\n\n\n2\ne1\n105\n100\nVaried\nTest_Train\n457.5066\n0.5686353\n0.2888873\n0.0000361\n4.7358573\n\n\n2\ne1\n200\n300\nVaried\nTrain\n445.4326\n0.4992835\n0.2903908\n0.0000143\n1.2852145\n\n\n2\ne1\n50\n500\nVaried\nTrain\n446.0390\n0.4863962\n0.2996348\n0.0000139\n1.2527575\n\n\n2\ne1\n52\n600\nVaried\nTrain\n446.2512\n0.4010491\n0.2681370\n0.0000138\n1.2558990\n\n\n2\ne1\n70\n500\nVaried\nTrain\n446.4922\n0.4650381\n0.2920932\n0.0000139\n1.2373839\n\n\n2\ne1\n60\n150\nVaried\nTrain\n447.9030\n0.5259795\n0.2935894\n0.0000131\n1.1056549\n\n\n2\ne1\n100\n100\nVaried\nTrain\n448.5521\n0.4988236\n0.2767507\n0.0000149\n1.0656699\n\n\n\n\n\nCodek = all_fits |&gt; \n    filter(id %in% unique(all_fits$id)[1])  |&gt;\n  group_by(Fit_Method) |&gt; arrange(mean_error)\n\nid_mdif &lt;- all_fits |&gt; \n    group_by(id,condit,Fit_Method,run_name) |&gt; \n  mutate(rank=rank(mean_error)) |&gt;\n  summarize(n=n(),all_me=mean(mean_error),\n            p50=mean(mean_error[rank&lt;n*.50]),\n         top10 = mean(mean_error[rank&lt;10])) \n\nid_wdif &lt;- all_fits |&gt; \n    group_by(id,condit,Fit_Method,run_name) |&gt; \n  mutate(rank=rank(mean_error)) |&gt;\n  summarize(n=n(),all_we=mean(weight_exam),\n            p50=mean(weight_exam[rank&lt;n*.50]),\n         top10 = mean(weight_exam[rank&lt;10])) |&gt;\n  mutate(dif=all_we-top10,adif=abs(dif)) |&gt; arrange(adif)\n\nid_wdifAll &lt;- all_fits |&gt; \n    group_by(id,condit,Fit_Method) |&gt; \n  mutate(rank=rank(mean_error)) |&gt;\n  summarize(n=n(),all_we=median(weight_exam),\n            p50=median(weight_exam[rank&lt;n*.50]),\n         top10 = median(weight_exam[rank&lt;30])) |&gt;\n  mutate(dif=all_we-top10,adif=abs(dif)) |&gt; arrange(-adif)\n\n\n\nCode# ind_fits_df |&gt; group_by(id,condit,Fit_Method) |&gt; summarise(w=median(weight_exam),me=mean(mean_error))\n# \n# ind_fits_df |&gt; group_by(id,condit,Fit_Method) |&gt; summarise(we=median(weight_exam),me=mean(mean_error)) |&gt;\n#   group_by(condit,Fit_Method) |&gt; summarise(w=mean(we),sd_w=sd(we),me=mean(me)) \n# \n# ind_fits_df |&gt; \n#   group_by(condit,Fit_Method) |&gt; \n#   summarise(w=median(weight_exam),sd_w=sd(weight_exam),me=mean(mean_error)) \n\n{all_fits |&gt; \n   filter(Fit_Method==\"Test\") |&gt;\n    ggplot(aes(x=weight_exam,fill=condit)) +geom_density(alpha=.5) } /{\n\nall_fits |&gt; \n   filter(Fit_Method==\"Test\") |&gt;\n    ggplot(aes(x=weight_exam,fill=condit)) +geom_density(alpha=.5) +\n  facet_wrap(~run_name)\n    }\n\n\n\n\n\n\nCodeall_fits |&gt; ggplot(aes(x=condit,y=weight_exam,col=condit)) + stat_pointinterval() +\n  facet_wrap(~Fit_Method)\n\n\n\n\n\n\nCodeall_fits |&gt; ggplot(aes(x=run_name,y=weight_exam,col=condit)) + stat_pointinterval() +\n  facet_wrap(condit~Fit_Method)\n\n\n\n\n\n\nCodeall_fits |&gt; \n   filter(id %in% unique(all_fits$id)[1:50], Fit_Method==\"Test\") |&gt;\n    ggplot(aes(x=weight_exam,fill=condit)) +\n  geom_density() +\n  geom_vline(xintercept = .5,linetype=\"dashed\") +\n  ggh4x::facet_wrap2(~id+condit, scales=\"free_y\")\n\n\n\n\n\n\nCodeall_fits |&gt; \n   filter(id %in% unique(all_fits$id)[1:50], Fit_Method==\"Test_Train\") |&gt;\n    ggplot(aes(x=weight_exam,fill=condit)) +\n  geom_density() +\n  geom_vline(xintercept = .5,linetype=\"dashed\") +\n  ggh4x::facet_wrap2(~id+condit, scales=\"free_y\")\n\n\n\n\n\n\nCodeall_fits |&gt; \n    group_by(id,run_name,condit,Fit_Method) |&gt; \n  mutate(rank=rank(mean_error)) |&gt; \n  filter(rank&lt;n_int*.50) |&gt;\n   filter(id %in% unique(all_fits$id)[1:50], Fit_Method==\"Test\") |&gt;\n    ggplot(aes(x=weight_exam,fill=condit)) +\n  geom_density() +\n  geom_vline(xintercept = .5,linetype=\"dashed\") +\n  ggh4x::facet_wrap2(~id+condit, scales=\"free_y\")\n\n\n\n\n\n\nCodeall_fits |&gt; \n  group_by(id,condit,Fit_Method) |&gt;\n  mutate(we_med=median(weight_exam),\n         Best_Model=case_when(we_med&gt;.5 ~\"EXAM\",we_med&lt;.5 ~\"ALM\")) |&gt;\n  filter(Fit_Method==\"Test\") |&gt;\n  ungroup() |&gt;\n  mutate(id=reorder(id,we_med,decreasing = TRUE)) |&gt;\n  ggplot(aes(x=weight_exam,y=id,col=Best_Model)) + \n  geom_vline(xintercept = .5,linetype=\"dashed\") +\n  stat_pointinterval() + \n  ggh4x::facet_grid2(~condit,axes=\"all\",scales=\"free_y\", independent = \"y\")+\n  theme_minimal() +\n  theme(legend.position=\"top\")\n\n\n\n\n\n\nCodeall_fits |&gt; \n  filter(Fit_Method==\"Test\") |&gt;\n    group_by(id,run_name,condit,Fit_Method) |&gt; \n  mutate(rank=rank(mean_error)) |&gt; \n  filter(rank&lt;n_int*.50) |&gt;\n  group_by(id,condit,Fit_Method,run_name) |&gt;\n  mutate(we_med=median(weight_exam),\n         Best_Model=case_when(we_med&gt;.5 ~\"EXAM\",we_med&lt;.5 ~\"ALM\")) |&gt;\n  ungroup() |&gt;\n  group_by(run_name) |&gt;\n    mutate(id=reorder(id,we_med,decreasing = FALSE)) |&gt;\n  ggplot(aes(x=weight_exam,y=id,col=Best_Model)) + \n  geom_vline(xintercept = .5,linetype=\"dashed\") +\n  stat_pointinterval() + \n  ggh4x::facet_grid2(run_name~condit,axes=\"all\",scales=\"free_y\", independent = \"y\")+\n  theme_minimal() +\n  theme(legend.position=\"top\")\n\n\n\n\n\n\nCodeall_fits |&gt; ggplot(aes(x=condit,y=weight_exam,col=run_name)) + \n  stat_pointinterval(position=position_dodge(.5)) +\n  facet_wrap(condit~Fit_Method)\n\n\n\n\n\n\nCodeall_fits |&gt; \n   filter(Fit_Method==\"Test\") |&gt;\n    ggplot(aes(x=weight_exam,fill=condit)) +geom_density(alpha=.5) \n\n\n\n\n\n\nCodeall_fits |&gt; \n   filter(id %in% unique(all_fits$id)[1:50], Fit_Method==\"Test\") |&gt;\n  ggplot(aes(x=run_name,y=weight_exam,col=run_name)) + \n  stat_pointinterval(position=position_dodge(.5)) +\n  ggh4x::facet_wrap2(~id+condit) + \n  theme(axis.text.x = element_blank()) \n\n\n\n\n\n\nCodeall_fits |&gt; \n   filter(id %in% unique(all_fits$id)[1:50], Fit_Method==\"Test_Train\") |&gt;\n  ggplot(aes(x=run_name,y=weight_exam,col=run_name)) + \n  stat_pointinterval(position=position_dodge(.5)) +\n  ggh4x::facet_wrap2(~id+condit) + \n  theme(axis.text.x = element_blank())",
    "crumbs": [
      "Model",
      "HTW Hybrid Models"
    ]
  },
  {
    "objectID": "Model/hybrid.html#e2",
    "href": "Model/hybrid.html#e2",
    "title": "HTW Hybrid Models",
    "section": "E2",
    "text": "E2\n\nCode# folder_names &lt;- c(\"e2_hybrid_n_iter_60_ntry_150_3658\",\"e2_hybrid_n_iter_250_ntry_200_0540\",\"e2_hybrid_n_iter_150_ntry_150_2904\",\"e2_hybrid_n_iter_100_ntry_100_3211\")\n\nfolder_names &lt;- list.files(here(\"data/abc_reject\"),pattern=\"e2_hyb*\")\n\n\nall_fits &lt;- map_df(folder_names, process_folder)\n\nall_fits |&gt; \n  group_by(exp,n_int,ntry,tolM,ar,condit,Fit_Method) |&gt; \n  summarise(min=first(min),me=mean(mean_error),\n            w=median(weight_exam),sd_w=sd(weight_exam),c=median(c),\n            lr=median(lr),n=n_distinct(id)) |&gt;\n   mutate(across(c(me, w, lr, sd_w), ~round(., 2))) |&gt;\n  arrange(condit,Fit_Method,me) |&gt; kable(caption=\"E2 Fit Comparisons\") |&gt; \n  kable_styling(full_width = F) |&gt;\n  column_spec(8,bold=T,border_left=T) \n\n\n\nE2 Fit Comparisons\n\nexp\nn_int\nntry\ntolM\nar\ncondit\nFit_Method\nmin\nme\nw\nsd_w\nc\nlr\nn\n\n\n\ne2\n100\n2500\n0.65\n0.10\nConstant\nTest\n171\n221.67\n0.89\n0.21\n0.0000892\n1.82\n55\n\n\ne2\n200\n1500\n0.70\n0.10\nConstant\nTest\n268\n222.80\n0.88\n0.21\n0.0000989\n1.82\n55\n\n\ne2\n90\n900\n0.80\n0.09\nConstant\nTest\n68\n224.39\n0.87\n0.22\n0.0001410\n1.84\n55\n\n\ne2\n50\n900\n0.80\n0.12\nConstant\nTest\n33\n225.12\n0.87\n0.22\n0.0001354\n1.82\n55\n\n\ne2\n70\n500\n0.85\n0.10\nConstant\nTest\n87\n227.01\n0.86\n0.22\n0.0001926\n1.86\n55\n\n\ne2\n150\n500\n0.95\n0.10\nConstant\nTest\n81\n227.14\n0.86\n0.22\n0.0001649\n1.82\n55\n\n\ne2\n400\n300\n0.85\n0.04\nConstant\nTest\n249\n227.22\n0.86\n0.22\n0.0001926\n1.85\n55\n\n\ne2\n50\n500\n0.85\n0.05\nConstant\nTest\n108\n227.28\n0.86\n0.22\n0.0001984\n1.84\n55\n\n\ne2\n50\n900\n0.95\n0.10\nConstant\nTest\n32\n228.36\n0.86\n0.23\n0.0001890\n1.84\n55\n\n\ne2\n52\n600\n0.95\n0.18\nConstant\nTest\n118\n228.78\n0.86\n0.22\n0.0002007\n1.87\n55\n\n\ne2\n61\n500\n0.95\n0.10\nConstant\nTest\n24\n228.91\n0.85\n0.22\n0.0002036\n1.89\n55\n\n\ne2\n49\n800\n0.95\n0.18\nConstant\nTest\n139\n228.94\n0.86\n0.22\n0.0001620\n1.84\n55\n\n\ne2\n250\n200\n0.85\n0.10\nConstant\nTest\n74\n229.10\n0.86\n0.22\n0.0002492\n1.88\n55\n\n\ne2\n100\n100\n0.85\n0.01\nConstant\nTest\n225\n229.42\n0.86\n0.22\n0.0002304\n1.85\n55\n\n\ne2\n65\n300\n0.95\n0.10\nConstant\nTest\n15\n230.22\n0.86\n0.22\n0.0002432\n1.88\n55\n\n\ne2\n150\n150\n0.85\n0.10\nConstant\nTest\n57\n230.44\n0.85\n0.23\n0.0002646\n1.87\n55\n\n\ne2\n51\n300\n0.95\n0.15\nConstant\nTest\n81\n231.20\n0.84\n0.23\n0.0002761\n1.87\n55\n\n\ne2\n60\n150\n0.85\n0.10\nConstant\nTest\n12\n231.32\n0.84\n0.23\n0.0003111\n1.90\n55\n\n\ne2\n105\n100\n0.85\n0.05\nConstant\nTest\n126\n232.04\n0.85\n0.22\n0.0003055\n1.87\n55\n\n\ne2\n100\n100\n0.85\n0.10\nConstant\nTest\n92\n232.82\n0.84\n0.22\n0.0003746\n1.94\n55\n\n\ne2\n100\n2500\n0.65\n0.10\nConstant\nTest_Train\n172\n221.92\n0.84\n0.24\n0.0000962\n0.38\n55\n\n\ne2\n200\n1500\n0.70\n0.10\nConstant\nTest_Train\n301\n222.68\n0.84\n0.24\n0.0001096\n0.42\n55\n\n\ne2\n90\n900\n0.80\n0.09\nConstant\nTest_Train\n62\n223.95\n0.84\n0.24\n0.0001247\n0.48\n55\n\n\ne2\n50\n900\n0.80\n0.12\nConstant\nTest_Train\n39\n224.60\n0.84\n0.23\n0.0001343\n0.53\n55\n\n\ne2\n400\n300\n0.85\n0.04\nConstant\nTest_Train\n191\n225.77\n0.83\n0.24\n0.0001481\n0.69\n55\n\n\ne2\n70\n500\n0.85\n0.10\nConstant\nTest_Train\n95\n225.87\n0.82\n0.24\n0.0001523\n0.67\n55\n\n\ne2\n50\n500\n0.85\n0.05\nConstant\nTest_Train\n118\n225.89\n0.83\n0.24\n0.0001450\n0.64\n55\n\n\ne2\n150\n500\n0.95\n0.10\nConstant\nTest_Train\n74\n225.96\n0.82\n0.24\n0.0001472\n0.66\n55\n\n\ne2\n100\n100\n0.85\n0.01\nConstant\nTest_Train\n236\n227.13\n0.82\n0.24\n0.0001532\n0.74\n55\n\n\ne2\n250\n200\n0.85\n0.10\nConstant\nTest_Train\n83\n227.25\n0.82\n0.24\n0.0001663\n0.88\n55\n\n\ne2\n49\n800\n0.95\n0.18\nConstant\nTest_Train\n152\n227.38\n0.83\n0.24\n0.0001500\n0.76\n55\n\n\ne2\n50\n900\n0.95\n0.10\nConstant\nTest_Train\n31\n227.49\n0.81\n0.25\n0.0001571\n0.69\n55\n\n\ne2\n52\n600\n0.95\n0.18\nConstant\nTest_Train\n130\n227.65\n0.82\n0.24\n0.0001712\n0.80\n55\n\n\ne2\n61\n500\n0.95\n0.10\nConstant\nTest_Train\n23\n227.79\n0.81\n0.24\n0.0001700\n0.89\n55\n\n\ne2\n150\n150\n0.85\n0.10\nConstant\nTest_Train\n52\n227.94\n0.82\n0.24\n0.0001829\n1.03\n55\n\n\ne2\n105\n100\n0.85\n0.05\nConstant\nTest_Train\n124\n228.84\n0.82\n0.24\n0.0002131\n1.22\n55\n\n\ne2\n51\n300\n0.95\n0.15\nConstant\nTest_Train\n90\n228.86\n0.82\n0.24\n0.0001958\n1.20\n55\n\n\ne2\n60\n150\n0.85\n0.10\nConstant\nTest_Train\n15\n228.86\n0.81\n0.24\n0.0002271\n1.66\n55\n\n\ne2\n65\n300\n0.95\n0.10\nConstant\nTest_Train\n18\n229.04\n0.81\n0.24\n0.0001718\n0.96\n55\n\n\ne2\n100\n100\n0.85\n0.10\nConstant\nTest_Train\n91\n229.41\n0.82\n0.24\n0.0002158\n1.61\n55\n\n\ne2\n50\n500\n0.85\n0.05\nConstant\nTrain\n36\n193.84\n0.50\n0.29\n0.0000033\n2.43\n55\n\n\ne2\n70\n500\n0.85\n0.10\nConstant\nTrain\n28\n193.88\n0.50\n0.29\n0.0000030\n2.40\n55\n\n\ne2\n100\n100\n0.85\n0.10\nConstant\nTrain\n31\n194.16\n0.49\n0.29\n0.0000028\n2.33\n55\n\n\ne2\n60\n150\n0.85\n0.10\nConstant\nTrain\n5\n194.66\n0.51\n0.29\n0.0000032\n2.35\n55\n\n\ne2\n52\n600\n0.95\n0.18\nConstant\nTrain\n31\n196.66\n0.50\n0.29\n0.0000037\n2.45\n55\n\n\ne2\n100\n2500\n0.65\n0.10\nVaried\nTest\n171\n208.73\n0.87\n0.26\n0.0001168\n1.95\n55\n\n\ne2\n200\n1500\n0.70\n0.10\nVaried\nTest\n268\n209.95\n0.86\n0.26\n0.0001098\n1.95\n55\n\n\ne2\n90\n900\n0.80\n0.09\nVaried\nTest\n68\n211.50\n0.85\n0.27\n0.0001103\n1.89\n55\n\n\ne2\n50\n900\n0.80\n0.12\nVaried\nTest\n33\n212.52\n0.85\n0.26\n0.0000967\n1.87\n55\n\n\ne2\n150\n500\n0.95\n0.10\nVaried\nTest\n81\n214.26\n0.84\n0.26\n0.0001105\n1.88\n55\n\n\ne2\n50\n500\n0.85\n0.05\nVaried\nTest\n108\n214.52\n0.85\n0.27\n0.0000934\n1.83\n55\n\n\ne2\n400\n300\n0.85\n0.04\nVaried\nTest\n249\n214.62\n0.84\n0.26\n0.0001073\n1.87\n55\n\n\ne2\n70\n500\n0.85\n0.10\nVaried\nTest\n87\n214.71\n0.84\n0.27\n0.0001021\n1.88\n55\n\n\ne2\n50\n900\n0.95\n0.10\nVaried\nTest\n32\n215.29\n0.84\n0.27\n0.0000970\n1.90\n55\n\n\ne2\n52\n600\n0.95\n0.18\nVaried\nTest\n118\n215.97\n0.84\n0.26\n0.0001130\n1.93\n55\n\n\ne2\n49\n800\n0.95\n0.18\nVaried\nTest\n139\n216.30\n0.84\n0.26\n0.0001029\n1.90\n55\n\n\ne2\n61\n500\n0.95\n0.10\nVaried\nTest\n24\n216.51\n0.84\n0.27\n0.0001072\n1.91\n55\n\n\ne2\n250\n200\n0.85\n0.10\nVaried\nTest\n74\n216.66\n0.83\n0.26\n0.0001020\n1.87\n55\n\n\ne2\n100\n100\n0.85\n0.01\nVaried\nTest\n225\n217.90\n0.82\n0.27\n0.0000965\n1.85\n55\n\n\ne2\n150\n150\n0.85\n0.10\nVaried\nTest\n57\n217.98\n0.83\n0.27\n0.0001039\n1.85\n55\n\n\ne2\n65\n300\n0.95\n0.10\nVaried\nTest\n15\n218.08\n0.83\n0.27\n0.0000977\n1.90\n55\n\n\ne2\n51\n300\n0.95\n0.15\nVaried\nTest\n81\n219.08\n0.83\n0.27\n0.0001295\n1.85\n55\n\n\ne2\n60\n150\n0.85\n0.10\nVaried\nTest\n12\n219.11\n0.83\n0.26\n0.0001021\n1.83\n55\n\n\ne2\n105\n100\n0.85\n0.05\nVaried\nTest\n126\n219.59\n0.82\n0.26\n0.0001012\n1.82\n55\n\n\ne2\n100\n100\n0.85\n0.10\nVaried\nTest\n92\n220.43\n0.81\n0.26\n0.0001067\n1.81\n55\n\n\ne2\n100\n2500\n0.65\n0.10\nVaried\nTest_Train\n172\n219.33\n0.89\n0.30\n0.0000330\n0.60\n55\n\n\ne2\n200\n1500\n0.70\n0.10\nVaried\nTest_Train\n301\n220.15\n0.88\n0.29\n0.0000330\n0.62\n55\n\n\ne2\n50\n900\n0.80\n0.12\nVaried\nTest_Train\n39\n221.27\n0.87\n0.29\n0.0000316\n0.62\n55\n\n\ne2\n90\n900\n0.80\n0.09\nVaried\nTest_Train\n62\n221.29\n0.86\n0.29\n0.0000305\n0.64\n55\n\n\ne2\n70\n500\n0.85\n0.10\nVaried\nTest_Train\n95\n222.78\n0.85\n0.29\n0.0000291\n0.67\n55\n\n\ne2\n150\n500\n0.95\n0.10\nVaried\nTest_Train\n74\n223.03\n0.85\n0.28\n0.0000292\n0.67\n55\n\n\ne2\n50\n500\n0.85\n0.05\nVaried\nTest_Train\n118\n223.40\n0.85\n0.28\n0.0000289\n0.67\n55\n\n\ne2\n400\n300\n0.85\n0.04\nVaried\nTest_Train\n191\n223.41\n0.84\n0.28\n0.0000281\n0.68\n55\n\n\ne2\n50\n900\n0.95\n0.10\nVaried\nTest_Train\n31\n223.58\n0.86\n0.29\n0.0000299\n0.71\n55\n\n\ne2\n61\n500\n0.95\n0.10\nVaried\nTest_Train\n23\n223.86\n0.84\n0.28\n0.0000292\n0.70\n55\n\n\ne2\n49\n800\n0.95\n0.18\nVaried\nTest_Train\n152\n224.02\n0.85\n0.28\n0.0000329\n0.69\n55\n\n\ne2\n52\n600\n0.95\n0.18\nVaried\nTest_Train\n130\n224.57\n0.85\n0.28\n0.0000307\n0.68\n55\n\n\ne2\n250\n200\n0.85\n0.10\nVaried\nTest_Train\n83\n224.70\n0.82\n0.28\n0.0000269\n0.71\n55\n\n\ne2\n100\n100\n0.85\n0.01\nVaried\nTest_Train\n236\n224.85\n0.83\n0.28\n0.0000274\n0.70\n55\n\n\ne2\n65\n300\n0.95\n0.10\nVaried\nTest_Train\n18\n225.46\n0.83\n0.28\n0.0000273\n0.72\n55\n\n\ne2\n150\n150\n0.85\n0.10\nVaried\nTest_Train\n52\n225.70\n0.81\n0.28\n0.0000255\n0.73\n55\n\n\ne2\n51\n300\n0.95\n0.15\nVaried\nTest_Train\n90\n226.28\n0.83\n0.28\n0.0000276\n0.74\n55\n\n\ne2\n105\n100\n0.85\n0.05\nVaried\nTest_Train\n124\n226.63\n0.80\n0.28\n0.0000251\n0.72\n55\n\n\ne2\n60\n150\n0.85\n0.10\nVaried\nTest_Train\n15\n226.77\n0.80\n0.28\n0.0000256\n0.76\n55\n\n\ne2\n100\n100\n0.85\n0.10\nVaried\nTest_Train\n91\n227.37\n0.79\n0.27\n0.0000253\n0.77\n55\n\n\ne2\n70\n500\n0.85\n0.10\nVaried\nTrain\n28\n192.05\n0.50\n0.29\n0.0000191\n0.68\n55\n\n\ne2\n50\n500\n0.85\n0.05\nVaried\nTrain\n36\n193.06\n0.50\n0.29\n0.0000194\n0.69\n55\n\n\ne2\n100\n100\n0.85\n0.10\nVaried\nTrain\n31\n193.62\n0.51\n0.29\n0.0000190\n0.70\n55\n\n\ne2\n60\n150\n0.85\n0.10\nVaried\nTrain\n5\n193.70\n0.50\n0.29\n0.0000190\n0.70\n55\n\n\ne2\n52\n600\n0.95\n0.18\nVaried\nTrain\n31\n195.83\n0.51\n0.29\n0.0000198\n0.71\n55\n\n\n\n\n\nCode{all_fits |&gt; \n   filter(Fit_Method==\"Test\") |&gt;\n    ggplot(aes(x=weight_exam,fill=condit)) +geom_density(alpha=.5) } /{\n\nall_fits |&gt; \n   filter(Fit_Method==\"Test\") |&gt;\n    ggplot(aes(x=weight_exam,fill=condit)) +geom_density(alpha=.5) +\n  facet_wrap(~run_name)\n    }\n\n\n\n\n\n\nCodeall_fits |&gt; ggplot(aes(x=condit,y=weight_exam,col=condit)) + stat_pointinterval() +\n  facet_wrap(~Fit_Method)\n\n\n\n\n\n\nCodeall_fits |&gt; ggplot(aes(x=run_name,y=weight_exam,col=condit)) + stat_pointinterval() +\n  facet_wrap(condit~Fit_Method)\n\n\n\n\n\n\nCodeall_fits |&gt; \n   filter(id %in% unique(all_fits$id)[1:50], Fit_Method==\"Test\") |&gt;\n    ggplot(aes(x=weight_exam,fill=condit)) +\n  geom_density() +\n  geom_vline(xintercept = .5,linetype=\"dashed\") +\n  ggh4x::facet_wrap2(~id+condit, scales=\"free_y\")\n\n\n\n\n\n\nCodeall_fits |&gt; \n   filter(id %in% unique(all_fits$id)[1:50], Fit_Method==\"Test_Train\") |&gt;\n    ggplot(aes(x=weight_exam,fill=condit)) +\n  geom_density() +\n  geom_vline(xintercept = .5,linetype=\"dashed\") +\n  ggh4x::facet_wrap2(~id+condit, scales=\"free_y\")\n\n\n\n\n\n\nCodeall_fits |&gt; \n   filter(id %in% unique(all_fits$id)[1:50], Fit_Method==\"Test\") |&gt;\n  ggplot(aes(x=run_name,y=weight_exam,col=run_name)) + \n  stat_pointinterval(position=position_dodge(.5)) +\n  ggh4x::facet_wrap2(~id+condit) + \n  theme(axis.text.x = element_blank()) \n\n\n\n\n\n\nCodeall_fits |&gt; \n   filter(id %in% unique(all_fits$id)[1:50], Fit_Method==\"Test_Train\") |&gt;\n  ggplot(aes(x=run_name,y=weight_exam,col=run_name)) + \n  stat_pointinterval(position=position_dodge(.5)) +\n  ggh4x::facet_wrap2(~id+condit) + \n  theme(axis.text.x = element_blank()) \n\n\n\n\n\n\nCodeall_fits |&gt; \n  group_by(id,condit,Fit_Method) |&gt;\n  mutate(we_med=median(weight_exam),\n         Best_Model=case_when(we_med&gt;.5 ~\"EXAM\",we_med&lt;.5 ~\"ALM\")) |&gt;\n  filter(Fit_Method==\"Test\") |&gt;\n  ungroup() |&gt;\n  mutate(id=reorder(id,we_med,decreasing = TRUE)) |&gt;\n  ggplot(aes(x=weight_exam,y=id,col=Best_Model)) + \n  geom_vline(xintercept = .5,linetype=\"dashed\") +\n  stat_pointinterval() + \n  ggh4x::facet_grid2(~condit,axes=\"all\",scales=\"free_y\", independent = \"y\")+\n  theme_minimal() +\n  theme(legend.position=\"top\")",
    "crumbs": [
      "Model",
      "HTW Hybrid Models"
    ]
  },
  {
    "objectID": "Model/hybrid.html#e3",
    "href": "Model/hybrid.html#e3",
    "title": "HTW Hybrid Models",
    "section": "E3",
    "text": "E3\n\nCode# folder_names &lt;- c(\"e3_hybrid_n_iter_150_ntry_150_1757\",\"e3_hybrid_n_iter_250_ntry_200_4300\",\"e3_hybrid_n_iter_60_ntry_150_0946\",\"e3_hybrid_n_iter_100_ntry_100_0545\")\ntestE3 &lt;- readRDS(here(\"data/e3_08-04-23.rds\")) |&gt; filter(expMode2 == \"Test\") \ne3Sbjs &lt;- testE3 |&gt; group_by(id,condit,bandOrder) |&gt; summarise(n=n())\n\nfolder_names &lt;- list.files(here(\"data/abc_reject\"),pattern=\"e3_hyb*\")\n\nall_fits &lt;- map_df(folder_names, process_folder) |&gt; \n  left_join(e3Sbjs,by=c(\"id\",\"condit\")) \n\n\nall_fits |&gt; \n  group_by(exp,n_int,ntry,tolM,ar,condit,Fit_Method) |&gt; \n  summarise(min=first(min),me=mean(mean_error),\n            w=median(weight_exam),sd_w=sd(weight_exam),c=median(c),\n            lr=median(lr),n=n_distinct(id)) |&gt;\n   mutate(across(c(me, w, lr, sd_w), ~round(., 2))) |&gt;\n  arrange(condit,Fit_Method,me) |&gt; kable(caption=\"E3 Fit Comparisons\") |&gt; \n  kable_styling(full_width = F) |&gt;\n  column_spec(8,bold=T,border_left=T) \n\n\n\nE3 Fit Comparisons\n\nexp\nn_int\nntry\ntolM\nar\ncondit\nFit_Method\nmin\nme\nw\nsd_w\nc\nlr\nn\n\n\n\ne3\n100\n2500\n0.65\n0.10\nConstant\nTest\n246\n213.60\n0.75\n0.27\n0.0000413\n2.08\n110\n\n\ne3\n200\n1500\n0.70\n0.10\nConstant\nTest\n348\n214.91\n0.74\n0.27\n0.0000417\n2.08\n110\n\n\ne3\n90\n900\n0.80\n0.09\nConstant\nTest\n92\n217.05\n0.73\n0.27\n0.0000413\n2.04\n110\n\n\ne3\n50\n900\n0.80\n0.12\nConstant\nTest\n53\n217.53\n0.73\n0.27\n0.0000406\n2.02\n110\n\n\ne3\n70\n500\n0.85\n0.10\nConstant\nTest\n186\n219.42\n0.72\n0.27\n0.0000397\n2.06\n110\n\n\ne3\n150\n500\n0.95\n0.10\nConstant\nTest\n96\n219.56\n0.72\n0.27\n0.0000397\n2.04\n110\n\n\ne3\n50\n500\n0.85\n0.05\nConstant\nTest\n312\n220.20\n0.72\n0.27\n0.0000394\n2.06\n110\n\n\ne3\n400\n300\n0.85\n0.04\nConstant\nTest\n353\n220.22\n0.72\n0.27\n0.0000403\n2.04\n110\n\n\ne3\n50\n900\n0.95\n0.10\nConstant\nTest\n37\n220.50\n0.72\n0.27\n0.0000387\n2.10\n110\n\n\ne3\n49\n800\n0.95\n0.18\nConstant\nTest\n303\n221.29\n0.72\n0.27\n0.0000390\n2.10\n110\n\n\ne3\n52\n600\n0.95\n0.18\nConstant\nTest\n228\n221.74\n0.72\n0.28\n0.0000387\n2.04\n110\n\n\ne3\n61\n500\n0.95\n0.10\nConstant\nTest\n36\n221.78\n0.71\n0.27\n0.0000381\n2.02\n110\n\n\ne3\n250\n200\n0.85\n0.10\nConstant\nTest\n184\n222.77\n0.72\n0.28\n0.0000395\n2.06\n110\n\n\ne3\n100\n100\n0.85\n0.01\nConstant\nTest\n804\n223.08\n0.71\n0.27\n0.0000407\n2.08\n110\n\n\ne3\n65\n300\n0.95\n0.10\nConstant\nTest\n31\n224.28\n0.71\n0.27\n0.0000391\n2.03\n110\n\n\ne3\n150\n150\n0.85\n0.10\nConstant\nTest\n92\n224.50\n0.72\n0.28\n0.0000396\n2.03\n110\n\n\ne3\n60\n150\n0.85\n0.10\nConstant\nTest\n38\n225.40\n0.72\n0.28\n0.0000373\n2.07\n110\n\n\ne3\n51\n300\n0.95\n0.15\nConstant\nTest\n162\n225.64\n0.72\n0.27\n0.0000380\n2.01\n110\n\n\ne3\n105\n100\n0.85\n0.05\nConstant\nTest\n351\n225.99\n0.71\n0.28\n0.0000388\n2.04\n110\n\n\ne3\n100\n100\n0.85\n0.10\nConstant\nTest\n202\n227.29\n0.72\n0.28\n0.0000383\n2.07\n110\n\n\ne3\n100\n2500\n0.65\n0.10\nConstant\nTest_Train\n244\n230.55\n0.73\n0.27\n0.0000384\n0.60\n110\n\n\ne3\n200\n1500\n0.70\n0.10\nConstant\nTest_Train\n480\n231.40\n0.71\n0.27\n0.0000372\n0.60\n110\n\n\ne3\n90\n900\n0.80\n0.09\nConstant\nTest_Train\n94\n232.37\n0.70\n0.27\n0.0000369\n0.62\n110\n\n\ne3\n50\n900\n0.80\n0.12\nConstant\nTest_Train\n58\n232.77\n0.70\n0.28\n0.0000365\n0.63\n110\n\n\ne3\n70\n500\n0.85\n0.10\nConstant\nTest_Train\n186\n233.90\n0.68\n0.27\n0.0000364\n0.67\n110\n\n\ne3\n50\n500\n0.85\n0.05\nConstant\nTest_Train\n224\n234.15\n0.68\n0.28\n0.0000352\n0.69\n110\n\n\ne3\n400\n300\n0.85\n0.04\nConstant\nTest_Train\n613\n234.32\n0.69\n0.27\n0.0000358\n0.71\n110\n\n\ne3\n150\n500\n0.95\n0.10\nConstant\nTest_Train\n106\n234.35\n0.69\n0.27\n0.0000358\n0.70\n110\n\n\ne3\n50\n900\n0.95\n0.10\nConstant\nTest_Train\n40\n235.16\n0.69\n0.28\n0.0000359\n0.73\n110\n\n\ne3\n49\n800\n0.95\n0.18\nConstant\nTest_Train\n263\n235.38\n0.69\n0.28\n0.0000358\n0.70\n110\n\n\ne3\n100\n100\n0.85\n0.01\nConstant\nTest_Train\n645\n235.54\n0.69\n0.28\n0.0000357\n0.76\n110\n\n\ne3\n250\n200\n0.85\n0.10\nConstant\nTest_Train\n289\n235.70\n0.68\n0.28\n0.0000351\n0.77\n110\n\n\ne3\n52\n600\n0.95\n0.18\nConstant\nTest_Train\n227\n235.74\n0.68\n0.28\n0.0000358\n0.77\n110\n\n\ne3\n61\n500\n0.95\n0.10\nConstant\nTest_Train\n48\n236.01\n0.68\n0.28\n0.0000355\n0.74\n110\n\n\ne3\n65\n300\n0.95\n0.10\nConstant\nTest_Train\n30\n236.55\n0.68\n0.27\n0.0000347\n0.77\n110\n\n\ne3\n150\n150\n0.85\n0.10\nConstant\nTest_Train\n92\n236.60\n0.67\n0.28\n0.0000345\n0.81\n110\n\n\ne3\n51\n300\n0.95\n0.15\nConstant\nTest_Train\n152\n236.95\n0.68\n0.28\n0.0000352\n0.79\n110\n\n\ne3\n60\n150\n0.85\n0.10\nConstant\nTest_Train\n23\n237.40\n0.67\n0.28\n0.0000340\n0.85\n110\n\n\ne3\n105\n100\n0.85\n0.05\nConstant\nTest_Train\n284\n237.51\n0.67\n0.28\n0.0000348\n0.86\n110\n\n\ne3\n100\n100\n0.85\n0.10\nConstant\nTest_Train\n167\n237.92\n0.67\n0.28\n0.0000341\n0.86\n110\n\n\ne3\n70\n500\n0.85\n0.10\nConstant\nTrain\n70\n213.90\n0.50\n0.29\n0.0000236\n1.56\n110\n\n\ne3\n100\n100\n0.85\n0.10\nConstant\nTrain\n77\n214.41\n0.50\n0.29\n0.0000195\n1.48\n110\n\n\ne3\n50\n500\n0.85\n0.05\nConstant\nTrain\n78\n214.84\n0.50\n0.29\n0.0000225\n1.57\n110\n\n\ne3\n60\n150\n0.85\n0.10\nConstant\nTrain\n16\n215.59\n0.51\n0.29\n0.0000208\n1.48\n110\n\n\ne3\n52\n600\n0.95\n0.18\nConstant\nTrain\n74\n216.80\n0.50\n0.29\n0.0000286\n1.65\n110\n\n\ne3\n100\n2500\n0.65\n0.10\nVaried\nTest\n246\n194.62\n0.81\n0.27\n0.0000966\n2.19\n85\n\n\ne3\n200\n1500\n0.70\n0.10\nVaried\nTest\n348\n196.04\n0.80\n0.26\n0.0000974\n2.19\n85\n\n\ne3\n90\n900\n0.80\n0.09\nVaried\nTest\n92\n197.98\n0.79\n0.26\n0.0000914\n2.18\n85\n\n\ne3\n50\n900\n0.80\n0.12\nVaried\nTest\n53\n198.23\n0.78\n0.27\n0.0000913\n2.23\n85\n\n\ne3\n70\n500\n0.85\n0.10\nVaried\nTest\n186\n200.61\n0.78\n0.27\n0.0000958\n2.15\n85\n\n\ne3\n150\n500\n0.95\n0.10\nVaried\nTest\n96\n200.72\n0.78\n0.26\n0.0000980\n2.18\n85\n\n\ne3\n50\n500\n0.85\n0.05\nVaried\nTest\n312\n200.88\n0.78\n0.27\n0.0000973\n2.20\n85\n\n\ne3\n50\n900\n0.95\n0.10\nVaried\nTest\n37\n201.12\n0.78\n0.27\n0.0001014\n2.15\n85\n\n\ne3\n400\n300\n0.85\n0.04\nVaried\nTest\n353\n201.41\n0.78\n0.26\n0.0000998\n2.17\n85\n\n\ne3\n49\n800\n0.95\n0.18\nVaried\nTest\n303\n201.72\n0.78\n0.27\n0.0000950\n2.25\n85\n\n\ne3\n52\n600\n0.95\n0.18\nVaried\nTest\n228\n202.47\n0.77\n0.27\n0.0001007\n2.18\n85\n\n\ne3\n61\n500\n0.95\n0.10\nVaried\nTest\n36\n203.09\n0.77\n0.26\n0.0001052\n2.20\n85\n\n\ne3\n250\n200\n0.85\n0.10\nVaried\nTest\n184\n203.72\n0.77\n0.27\n0.0000987\n2.15\n85\n\n\ne3\n100\n100\n0.85\n0.01\nVaried\nTest\n804\n204.11\n0.77\n0.26\n0.0000951\n2.16\n85\n\n\ne3\n65\n300\n0.95\n0.10\nVaried\nTest\n31\n204.23\n0.77\n0.26\n0.0000958\n2.17\n85\n\n\ne3\n150\n150\n0.85\n0.10\nVaried\nTest\n92\n205.29\n0.76\n0.26\n0.0000935\n2.15\n85\n\n\ne3\n51\n300\n0.95\n0.15\nVaried\nTest\n162\n205.69\n0.76\n0.26\n0.0000900\n2.15\n85\n\n\ne3\n60\n150\n0.85\n0.10\nVaried\nTest\n38\n206.85\n0.77\n0.27\n0.0001061\n2.13\n85\n\n\ne3\n105\n100\n0.85\n0.05\nVaried\nTest\n351\n207.63\n0.76\n0.26\n0.0001001\n2.13\n85\n\n\ne3\n100\n100\n0.85\n0.10\nVaried\nTest\n202\n207.79\n0.76\n0.26\n0.0001005\n2.15\n85\n\n\ne3\n100\n2500\n0.65\n0.10\nVaried\nTest_Train\n244\n236.31\n0.83\n0.28\n0.0000443\n0.72\n85\n\n\ne3\n200\n1500\n0.70\n0.10\nVaried\nTest_Train\n480\n236.94\n0.82\n0.28\n0.0000421\n0.74\n85\n\n\ne3\n90\n900\n0.80\n0.09\nVaried\nTest_Train\n94\n238.09\n0.81\n0.28\n0.0000396\n0.74\n85\n\n\ne3\n50\n900\n0.80\n0.12\nVaried\nTest_Train\n58\n238.16\n0.81\n0.28\n0.0000393\n0.72\n85\n\n\ne3\n50\n900\n0.95\n0.10\nVaried\nTest_Train\n40\n239.45\n0.80\n0.28\n0.0000381\n0.78\n85\n\n\ne3\n70\n500\n0.85\n0.10\nVaried\nTest_Train\n186\n239.45\n0.79\n0.28\n0.0000375\n0.76\n85\n\n\ne3\n50\n500\n0.85\n0.05\nVaried\nTest_Train\n224\n239.63\n0.79\n0.28\n0.0000378\n0.76\n85\n\n\ne3\n150\n500\n0.95\n0.10\nVaried\nTest_Train\n106\n239.73\n0.79\n0.28\n0.0000383\n0.80\n85\n\n\ne3\n400\n300\n0.85\n0.04\nVaried\nTest_Train\n613\n240.07\n0.78\n0.28\n0.0000370\n0.79\n85\n\n\ne3\n49\n800\n0.95\n0.18\nVaried\nTest_Train\n263\n240.16\n0.79\n0.28\n0.0000398\n0.78\n85\n\n\ne3\n52\n600\n0.95\n0.18\nVaried\nTest_Train\n227\n240.47\n0.79\n0.28\n0.0000393\n0.78\n85\n\n\ne3\n61\n500\n0.95\n0.10\nVaried\nTest_Train\n48\n240.80\n0.78\n0.27\n0.0000377\n0.81\n85\n\n\ne3\n250\n200\n0.85\n0.10\nVaried\nTest_Train\n289\n241.42\n0.77\n0.28\n0.0000352\n0.81\n85\n\n\ne3\n100\n100\n0.85\n0.01\nVaried\nTest_Train\n645\n241.44\n0.77\n0.28\n0.0000360\n0.80\n85\n\n\ne3\n51\n300\n0.95\n0.15\nVaried\nTest_Train\n152\n242.07\n0.77\n0.28\n0.0000362\n0.83\n85\n\n\ne3\n65\n300\n0.95\n0.10\nVaried\nTest_Train\n30\n242.42\n0.78\n0.27\n0.0000372\n0.83\n85\n\n\ne3\n150\n150\n0.85\n0.10\nVaried\nTest_Train\n92\n242.42\n0.76\n0.27\n0.0000347\n0.81\n85\n\n\ne3\n60\n150\n0.85\n0.10\nVaried\nTest_Train\n23\n242.93\n0.77\n0.27\n0.0000355\n0.83\n85\n\n\ne3\n105\n100\n0.85\n0.05\nVaried\nTest_Train\n284\n243.66\n0.76\n0.27\n0.0000342\n0.85\n85\n\n\ne3\n100\n100\n0.85\n0.10\nVaried\nTest_Train\n167\n244.18\n0.74\n0.28\n0.0000342\n0.85\n85\n\n\ne3\n70\n500\n0.85\n0.10\nVaried\nTrain\n70\n231.82\n0.50\n0.29\n0.0000210\n0.82\n85\n\n\ne3\n50\n500\n0.85\n0.05\nVaried\nTrain\n78\n232.06\n0.51\n0.29\n0.0000213\n0.82\n85\n\n\ne3\n60\n150\n0.85\n0.10\nVaried\nTrain\n16\n233.78\n0.50\n0.29\n0.0000218\n0.80\n85\n\n\ne3\n52\n600\n0.95\n0.18\nVaried\nTrain\n74\n234.14\n0.50\n0.29\n0.0000219\n0.81\n85\n\n\ne3\n100\n100\n0.85\n0.10\nVaried\nTrain\n77\n234.53\n0.50\n0.29\n0.0000211\n0.81\n85\n\n\n\n\n\nCodeall_fits |&gt; \n  group_by(exp,n_int,ntry,tolM,ar,condit,Fit_Method) |&gt; \n  summarise(min=first(min),me=mean(mean_error),\n            w=median(weight_exam),sd_w=sd(weight_exam),c=median(c),\n            lr=median(lr),n=n_distinct(id)) |&gt;\n   mutate(across(c(me, w, lr, sd_w), ~round(., 2))) |&gt;\n  arrange(condit,Fit_Method,me) |&gt; kable(caption=\"E2 Fit Comparisons\") |&gt; \n  kable_styling(full_width = F) |&gt;\n  column_spec(8,bold=T,border_left=T) \n\n\n\nE2 Fit Comparisons\n\nexp\nn_int\nntry\ntolM\nar\ncondit\nFit_Method\nmin\nme\nw\nsd_w\nc\nlr\nn\n\n\n\ne3\n100\n2500\n0.65\n0.10\nConstant\nTest\n246\n213.60\n0.75\n0.27\n0.0000413\n2.08\n110\n\n\ne3\n200\n1500\n0.70\n0.10\nConstant\nTest\n348\n214.91\n0.74\n0.27\n0.0000417\n2.08\n110\n\n\ne3\n90\n900\n0.80\n0.09\nConstant\nTest\n92\n217.05\n0.73\n0.27\n0.0000413\n2.04\n110\n\n\ne3\n50\n900\n0.80\n0.12\nConstant\nTest\n53\n217.53\n0.73\n0.27\n0.0000406\n2.02\n110\n\n\ne3\n70\n500\n0.85\n0.10\nConstant\nTest\n186\n219.42\n0.72\n0.27\n0.0000397\n2.06\n110\n\n\ne3\n150\n500\n0.95\n0.10\nConstant\nTest\n96\n219.56\n0.72\n0.27\n0.0000397\n2.04\n110\n\n\ne3\n50\n500\n0.85\n0.05\nConstant\nTest\n312\n220.20\n0.72\n0.27\n0.0000394\n2.06\n110\n\n\ne3\n400\n300\n0.85\n0.04\nConstant\nTest\n353\n220.22\n0.72\n0.27\n0.0000403\n2.04\n110\n\n\ne3\n50\n900\n0.95\n0.10\nConstant\nTest\n37\n220.50\n0.72\n0.27\n0.0000387\n2.10\n110\n\n\ne3\n49\n800\n0.95\n0.18\nConstant\nTest\n303\n221.29\n0.72\n0.27\n0.0000390\n2.10\n110\n\n\ne3\n52\n600\n0.95\n0.18\nConstant\nTest\n228\n221.74\n0.72\n0.28\n0.0000387\n2.04\n110\n\n\ne3\n61\n500\n0.95\n0.10\nConstant\nTest\n36\n221.78\n0.71\n0.27\n0.0000381\n2.02\n110\n\n\ne3\n250\n200\n0.85\n0.10\nConstant\nTest\n184\n222.77\n0.72\n0.28\n0.0000395\n2.06\n110\n\n\ne3\n100\n100\n0.85\n0.01\nConstant\nTest\n804\n223.08\n0.71\n0.27\n0.0000407\n2.08\n110\n\n\ne3\n65\n300\n0.95\n0.10\nConstant\nTest\n31\n224.28\n0.71\n0.27\n0.0000391\n2.03\n110\n\n\ne3\n150\n150\n0.85\n0.10\nConstant\nTest\n92\n224.50\n0.72\n0.28\n0.0000396\n2.03\n110\n\n\ne3\n60\n150\n0.85\n0.10\nConstant\nTest\n38\n225.40\n0.72\n0.28\n0.0000373\n2.07\n110\n\n\ne3\n51\n300\n0.95\n0.15\nConstant\nTest\n162\n225.64\n0.72\n0.27\n0.0000380\n2.01\n110\n\n\ne3\n105\n100\n0.85\n0.05\nConstant\nTest\n351\n225.99\n0.71\n0.28\n0.0000388\n2.04\n110\n\n\ne3\n100\n100\n0.85\n0.10\nConstant\nTest\n202\n227.29\n0.72\n0.28\n0.0000383\n2.07\n110\n\n\ne3\n100\n2500\n0.65\n0.10\nConstant\nTest_Train\n244\n230.55\n0.73\n0.27\n0.0000384\n0.60\n110\n\n\ne3\n200\n1500\n0.70\n0.10\nConstant\nTest_Train\n480\n231.40\n0.71\n0.27\n0.0000372\n0.60\n110\n\n\ne3\n90\n900\n0.80\n0.09\nConstant\nTest_Train\n94\n232.37\n0.70\n0.27\n0.0000369\n0.62\n110\n\n\ne3\n50\n900\n0.80\n0.12\nConstant\nTest_Train\n58\n232.77\n0.70\n0.28\n0.0000365\n0.63\n110\n\n\ne3\n70\n500\n0.85\n0.10\nConstant\nTest_Train\n186\n233.90\n0.68\n0.27\n0.0000364\n0.67\n110\n\n\ne3\n50\n500\n0.85\n0.05\nConstant\nTest_Train\n224\n234.15\n0.68\n0.28\n0.0000352\n0.69\n110\n\n\ne3\n400\n300\n0.85\n0.04\nConstant\nTest_Train\n613\n234.32\n0.69\n0.27\n0.0000358\n0.71\n110\n\n\ne3\n150\n500\n0.95\n0.10\nConstant\nTest_Train\n106\n234.35\n0.69\n0.27\n0.0000358\n0.70\n110\n\n\ne3\n50\n900\n0.95\n0.10\nConstant\nTest_Train\n40\n235.16\n0.69\n0.28\n0.0000359\n0.73\n110\n\n\ne3\n49\n800\n0.95\n0.18\nConstant\nTest_Train\n263\n235.38\n0.69\n0.28\n0.0000358\n0.70\n110\n\n\ne3\n100\n100\n0.85\n0.01\nConstant\nTest_Train\n645\n235.54\n0.69\n0.28\n0.0000357\n0.76\n110\n\n\ne3\n250\n200\n0.85\n0.10\nConstant\nTest_Train\n289\n235.70\n0.68\n0.28\n0.0000351\n0.77\n110\n\n\ne3\n52\n600\n0.95\n0.18\nConstant\nTest_Train\n227\n235.74\n0.68\n0.28\n0.0000358\n0.77\n110\n\n\ne3\n61\n500\n0.95\n0.10\nConstant\nTest_Train\n48\n236.01\n0.68\n0.28\n0.0000355\n0.74\n110\n\n\ne3\n65\n300\n0.95\n0.10\nConstant\nTest_Train\n30\n236.55\n0.68\n0.27\n0.0000347\n0.77\n110\n\n\ne3\n150\n150\n0.85\n0.10\nConstant\nTest_Train\n92\n236.60\n0.67\n0.28\n0.0000345\n0.81\n110\n\n\ne3\n51\n300\n0.95\n0.15\nConstant\nTest_Train\n152\n236.95\n0.68\n0.28\n0.0000352\n0.79\n110\n\n\ne3\n60\n150\n0.85\n0.10\nConstant\nTest_Train\n23\n237.40\n0.67\n0.28\n0.0000340\n0.85\n110\n\n\ne3\n105\n100\n0.85\n0.05\nConstant\nTest_Train\n284\n237.51\n0.67\n0.28\n0.0000348\n0.86\n110\n\n\ne3\n100\n100\n0.85\n0.10\nConstant\nTest_Train\n167\n237.92\n0.67\n0.28\n0.0000341\n0.86\n110\n\n\ne3\n70\n500\n0.85\n0.10\nConstant\nTrain\n70\n213.90\n0.50\n0.29\n0.0000236\n1.56\n110\n\n\ne3\n100\n100\n0.85\n0.10\nConstant\nTrain\n77\n214.41\n0.50\n0.29\n0.0000195\n1.48\n110\n\n\ne3\n50\n500\n0.85\n0.05\nConstant\nTrain\n78\n214.84\n0.50\n0.29\n0.0000225\n1.57\n110\n\n\ne3\n60\n150\n0.85\n0.10\nConstant\nTrain\n16\n215.59\n0.51\n0.29\n0.0000208\n1.48\n110\n\n\ne3\n52\n600\n0.95\n0.18\nConstant\nTrain\n74\n216.80\n0.50\n0.29\n0.0000286\n1.65\n110\n\n\ne3\n100\n2500\n0.65\n0.10\nVaried\nTest\n246\n194.62\n0.81\n0.27\n0.0000966\n2.19\n85\n\n\ne3\n200\n1500\n0.70\n0.10\nVaried\nTest\n348\n196.04\n0.80\n0.26\n0.0000974\n2.19\n85\n\n\ne3\n90\n900\n0.80\n0.09\nVaried\nTest\n92\n197.98\n0.79\n0.26\n0.0000914\n2.18\n85\n\n\ne3\n50\n900\n0.80\n0.12\nVaried\nTest\n53\n198.23\n0.78\n0.27\n0.0000913\n2.23\n85\n\n\ne3\n70\n500\n0.85\n0.10\nVaried\nTest\n186\n200.61\n0.78\n0.27\n0.0000958\n2.15\n85\n\n\ne3\n150\n500\n0.95\n0.10\nVaried\nTest\n96\n200.72\n0.78\n0.26\n0.0000980\n2.18\n85\n\n\ne3\n50\n500\n0.85\n0.05\nVaried\nTest\n312\n200.88\n0.78\n0.27\n0.0000973\n2.20\n85\n\n\ne3\n50\n900\n0.95\n0.10\nVaried\nTest\n37\n201.12\n0.78\n0.27\n0.0001014\n2.15\n85\n\n\ne3\n400\n300\n0.85\n0.04\nVaried\nTest\n353\n201.41\n0.78\n0.26\n0.0000998\n2.17\n85\n\n\ne3\n49\n800\n0.95\n0.18\nVaried\nTest\n303\n201.72\n0.78\n0.27\n0.0000950\n2.25\n85\n\n\ne3\n52\n600\n0.95\n0.18\nVaried\nTest\n228\n202.47\n0.77\n0.27\n0.0001007\n2.18\n85\n\n\ne3\n61\n500\n0.95\n0.10\nVaried\nTest\n36\n203.09\n0.77\n0.26\n0.0001052\n2.20\n85\n\n\ne3\n250\n200\n0.85\n0.10\nVaried\nTest\n184\n203.72\n0.77\n0.27\n0.0000987\n2.15\n85\n\n\ne3\n100\n100\n0.85\n0.01\nVaried\nTest\n804\n204.11\n0.77\n0.26\n0.0000951\n2.16\n85\n\n\ne3\n65\n300\n0.95\n0.10\nVaried\nTest\n31\n204.23\n0.77\n0.26\n0.0000958\n2.17\n85\n\n\ne3\n150\n150\n0.85\n0.10\nVaried\nTest\n92\n205.29\n0.76\n0.26\n0.0000935\n2.15\n85\n\n\ne3\n51\n300\n0.95\n0.15\nVaried\nTest\n162\n205.69\n0.76\n0.26\n0.0000900\n2.15\n85\n\n\ne3\n60\n150\n0.85\n0.10\nVaried\nTest\n38\n206.85\n0.77\n0.27\n0.0001061\n2.13\n85\n\n\ne3\n105\n100\n0.85\n0.05\nVaried\nTest\n351\n207.63\n0.76\n0.26\n0.0001001\n2.13\n85\n\n\ne3\n100\n100\n0.85\n0.10\nVaried\nTest\n202\n207.79\n0.76\n0.26\n0.0001005\n2.15\n85\n\n\ne3\n100\n2500\n0.65\n0.10\nVaried\nTest_Train\n244\n236.31\n0.83\n0.28\n0.0000443\n0.72\n85\n\n\ne3\n200\n1500\n0.70\n0.10\nVaried\nTest_Train\n480\n236.94\n0.82\n0.28\n0.0000421\n0.74\n85\n\n\ne3\n90\n900\n0.80\n0.09\nVaried\nTest_Train\n94\n238.09\n0.81\n0.28\n0.0000396\n0.74\n85\n\n\ne3\n50\n900\n0.80\n0.12\nVaried\nTest_Train\n58\n238.16\n0.81\n0.28\n0.0000393\n0.72\n85\n\n\ne3\n50\n900\n0.95\n0.10\nVaried\nTest_Train\n40\n239.45\n0.80\n0.28\n0.0000381\n0.78\n85\n\n\ne3\n70\n500\n0.85\n0.10\nVaried\nTest_Train\n186\n239.45\n0.79\n0.28\n0.0000375\n0.76\n85\n\n\ne3\n50\n500\n0.85\n0.05\nVaried\nTest_Train\n224\n239.63\n0.79\n0.28\n0.0000378\n0.76\n85\n\n\ne3\n150\n500\n0.95\n0.10\nVaried\nTest_Train\n106\n239.73\n0.79\n0.28\n0.0000383\n0.80\n85\n\n\ne3\n400\n300\n0.85\n0.04\nVaried\nTest_Train\n613\n240.07\n0.78\n0.28\n0.0000370\n0.79\n85\n\n\ne3\n49\n800\n0.95\n0.18\nVaried\nTest_Train\n263\n240.16\n0.79\n0.28\n0.0000398\n0.78\n85\n\n\ne3\n52\n600\n0.95\n0.18\nVaried\nTest_Train\n227\n240.47\n0.79\n0.28\n0.0000393\n0.78\n85\n\n\ne3\n61\n500\n0.95\n0.10\nVaried\nTest_Train\n48\n240.80\n0.78\n0.27\n0.0000377\n0.81\n85\n\n\ne3\n250\n200\n0.85\n0.10\nVaried\nTest_Train\n289\n241.42\n0.77\n0.28\n0.0000352\n0.81\n85\n\n\ne3\n100\n100\n0.85\n0.01\nVaried\nTest_Train\n645\n241.44\n0.77\n0.28\n0.0000360\n0.80\n85\n\n\ne3\n51\n300\n0.95\n0.15\nVaried\nTest_Train\n152\n242.07\n0.77\n0.28\n0.0000362\n0.83\n85\n\n\ne3\n65\n300\n0.95\n0.10\nVaried\nTest_Train\n30\n242.42\n0.78\n0.27\n0.0000372\n0.83\n85\n\n\ne3\n150\n150\n0.85\n0.10\nVaried\nTest_Train\n92\n242.42\n0.76\n0.27\n0.0000347\n0.81\n85\n\n\ne3\n60\n150\n0.85\n0.10\nVaried\nTest_Train\n23\n242.93\n0.77\n0.27\n0.0000355\n0.83\n85\n\n\ne3\n105\n100\n0.85\n0.05\nVaried\nTest_Train\n284\n243.66\n0.76\n0.27\n0.0000342\n0.85\n85\n\n\ne3\n100\n100\n0.85\n0.10\nVaried\nTest_Train\n167\n244.18\n0.74\n0.28\n0.0000342\n0.85\n85\n\n\ne3\n70\n500\n0.85\n0.10\nVaried\nTrain\n70\n231.82\n0.50\n0.29\n0.0000210\n0.82\n85\n\n\ne3\n50\n500\n0.85\n0.05\nVaried\nTrain\n78\n232.06\n0.51\n0.29\n0.0000213\n0.82\n85\n\n\ne3\n60\n150\n0.85\n0.10\nVaried\nTrain\n16\n233.78\n0.50\n0.29\n0.0000218\n0.80\n85\n\n\ne3\n52\n600\n0.95\n0.18\nVaried\nTrain\n74\n234.14\n0.50\n0.29\n0.0000219\n0.81\n85\n\n\ne3\n100\n100\n0.85\n0.10\nVaried\nTrain\n77\n234.53\n0.50\n0.29\n0.0000211\n0.81\n85\n\n\n\n\n\nCode{all_fits |&gt; \n   filter(Fit_Method==\"Test\") |&gt;\n    ggplot(aes(x=weight_exam,fill=condit)) +geom_density(alpha=.5) } /{\n\nall_fits |&gt; \n   filter(Fit_Method==\"Test\") |&gt;\n    ggplot(aes(x=weight_exam,fill=condit)) +geom_density(alpha=.5) +\n  facet_wrap(~run_name)\n    }\n\n\n\n\n\n\nCodeall_fits |&gt; \n   filter(Fit_Method==\"Test\") |&gt;\n    ggplot(aes(x=weight_exam,fill=condit)) +geom_density(alpha=.5) + facet_wrap(~bandOrder) \n\n\n\n\n\n\nCodeall_fits |&gt; ggplot(aes(x=condit,y=weight_exam,col=condit)) + stat_pointinterval() +\n  facet_wrap(bandOrder~Fit_Method)\n\n\n\n\n\n\nCodeall_fits |&gt; ggplot(aes(x=run_name,y=weight_exam,col=condit)) + stat_pointinterval() +\n  facet_wrap(condit~Fit_Method)\n\n\n\n\n\n\nCodeall_fits |&gt; \n   filter(id %in% unique(all_fits$id)[1:50], Fit_Method==\"Test\") |&gt;\n    ggplot(aes(x=weight_exam,fill=condit)) +\n  geom_density() +\n  geom_vline(xintercept = .5,linetype=\"dashed\") +\n  ggh4x::facet_wrap2(~id+condit, scales=\"free_y\")\n\n\n\n\n\n\nCodeall_fits |&gt; \n   filter(id %in% unique(all_fits$id)[1:50], Fit_Method==\"Test_Train\") |&gt;\n    ggplot(aes(x=weight_exam,fill=condit)) +\n  geom_density() +\n  geom_vline(xintercept = .5,linetype=\"dashed\") +\n  ggh4x::facet_wrap2(~id+condit, scales=\"free_y\")\n\n\n\n\n\n\nCodeall_fits |&gt; \n   filter(id %in% unique(all_fits$id)[1:50], Fit_Method==\"Test\") |&gt;\n  ggplot(aes(x=run_name,y=weight_exam,col=run_name)) + \n  stat_pointinterval(position=position_dodge(.5)) +\n  ggh4x::facet_wrap2(~id+condit) + \n  theme(axis.text.x = element_blank()) \n\n\n\n\n\n\nCodeall_fits |&gt; \n   filter(id %in% unique(all_fits$id)[1:50], Fit_Method==\"Test_Train\") |&gt;\n  ggplot(aes(x=run_name,y=weight_exam,col=run_name)) + \n  stat_pointinterval(position=position_dodge(.5)) +\n  ggh4x::facet_wrap2(~id+condit) + \n  theme(axis.text.x = element_blank()) \n\n\n\n\n\n\nCode{all_fits |&gt; \n  group_by(id,condit,Fit_Method) |&gt;\n  mutate(we_med=median(weight_exam),\n         Best_Model=case_when(we_med&gt;.5 ~\"EXAM\",we_med&lt;.5 ~\"ALM\")) |&gt;\n  filter(Fit_Method==\"Test\") |&gt;\n  ungroup() |&gt;\n  mutate(id=reorder(id,we_med,decreasing = TRUE)) |&gt;\n  ggplot(aes(x=weight_exam,y=id,col=Best_Model)) + \n  geom_vline(xintercept = .5,linetype=\"dashed\") +\n  stat_pointinterval() + \n  ggh4x::facet_grid2(~condit,axes=\"all\",scales=\"free_y\", independent = \"y\")+\n  theme_minimal() +\n  theme(legend.position=\"top\")} / \n  {all_fits |&gt; \n  group_by(id,condit,Fit_Method,bandOrder) |&gt;\n  mutate(we_med=median(weight_exam),\n         Best_Model=case_when(we_med&gt;.5 ~\"EXAM\",we_med&lt;.5 ~\"ALM\")) |&gt;\n  filter(Fit_Method==\"Test\") |&gt;\n  ungroup() |&gt;\n  mutate(id=reorder(id,we_med,decreasing = TRUE)) |&gt;\n  ggplot(aes(x=weight_exam,y=id,col=Best_Model)) + \n  geom_vline(xintercept = .5,linetype=\"dashed\") +\n  stat_pointinterval() + \n  ggh4x::facet_grid2(~bandOrder+condit,axes=\"all\",scales=\"free_y\", independent = \"y\")+\n  theme_minimal() +\n  theme(legend.position=\"top\")}",
    "crumbs": [
      "Model",
      "HTW Hybrid Models"
    ]
  },
  {
    "objectID": "Analysis/combo_test.html#testing-vx",
    "href": "Analysis/combo_test.html#testing-vx",
    "title": "HTW All Exp Testing",
    "section": "Testing Vx",
    "text": "Testing Vx\n\nCodeep1 &lt;- d |&gt;\n  filter(expMode2 == \"Test\") |&gt;\n  group_by(condit, bandType, fb, bandOrder, vb) |&gt;  # No need for 'id' if not used later\n  summarise(se_vx = sd(vx) / sqrt(n()),vx = mean(vx)) |&gt;\n  ggplot(aes(x = condit, y = vx, fill = vb, pattern=bandType)) +\n   geom_bar_pattern(stat = \"identity\", \n                    position = position_dodge()) + \n  geom_errorbar(aes(ymin = vx - se_vx, ymax = vx + se_vx),position = position_dodge()) +\n  facet_wrap2(~fb*bandOrder,axes=\"all\") +\n  labs(title=\"Testing Vx\",pattern = \"Band Type\") +\n   scale_pattern_manual(values = c(\"stripe\", \"circle\"))\n\n\nep2 &lt;- d |&gt;\n  filter(expMode2 == \"Test\") |&gt;\n  group_by(condit, bandType, fb, bandOrder, vb) |&gt;  # No need for 'id' if not used later\n  summarise(se_vx = sd(vx) / sqrt(n()),vx = mean(vx)) |&gt;\n  ggplot(aes(x = vb, y = vx, fill = condit, pattern=bandType)) +\n   geom_bar_pattern(stat = \"identity\", \n                    position = position_dodge()) + \n  geom_errorbar(aes(ymin = vx - se_vx, ymax = vx + se_vx),position = position_dodge()) +\n  facet_wrap2(~fb*bandOrder,axes=\"all\") +\n  labs(title=\"Testing Vx\",pattern = \"Band Type\") +\n   scale_pattern_manual(values = c(\"stripe\", \"circle\"))\n\nep1/ep2\n\n\n\n\n\n\n\nControl for end of training performance\n\nCodetest|&gt; group_by(id,condit) |&gt; pivot_longer(c(\"dist\",\"train_end\"),names_to=\"var\",values_to=\"value\") |&gt; \n  ggplot(aes(x=var,y=value, fill=condit)) + stat_bar + facet_wrap(~var)\n\n\n\n\n\n\nCodetest2 |&gt; ggplot(aes(x=bandInt,y=dist,fill=expMode2)) + stat_bar + facet_wrap(~condit+fb+bandOrder)\n\n\n\n\n\n\nCodetest2 |&gt; mutate(train_end_q = ntile(train_end,4)) |&gt;  \n  ggplot(aes(x=bandInt,y=dist,fill=expMode2)) + stat_bar + facet_wrap(~condit+train_end_q+bandOrder)\n\n\n\n\n\n\nCodetest2 |&gt; mutate(train_end_q = ntile(train_end,4)) |&gt;  \n  ggplot(aes(x=condit,y=dist,fill=vb)) + stat_bar + \n  facet_wrap(~expMode2+train_end_q+bandOrder,scales=\"free\")\n\n\n\n\n\n\nCodetest2 |&gt; mutate(train_end_q = ntile(train_end,4)) |&gt;  \n  ggplot(aes(x=vb,y=dist,fill=condit)) + stat_bar + \n  facet_wrap(~expMode2+train_end_q+bandOrder,scales=\"free\")\n\n\n\n\n\n\nCodetest2 |&gt; mutate(train_end_q = ntile(train_end,4)) |&gt;  \n  ggplot(aes(x=train_end_q,y=dist,fill=condit)) + stat_bar + \n  facet_wrap(~expMode2+vb+bandOrder,scales=\"free\")\n\n\n\n\n\n\nCodetest |&gt; ggplot(aes(x=train_end,y=dist,fill=condit)) + \n  stat_summary(geom = \"line\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) + \n    facet_wrap(~vb) +\n  labs(x=\"Band\", y=\"Deviation From Target\")\n\nWarning: Width not defined\nℹ Set with `position_dodge(width = ...)`\n\n\nWarning: `position_dodge()` requires non-overlapping x intervals.\n`position_dodge()` requires non-overlapping x intervals.\n`position_dodge()` requires non-overlapping x intervals.\n`position_dodge()` requires non-overlapping x intervals.\n`position_dodge()` requires non-overlapping x intervals.\n`position_dodge()` requires non-overlapping x intervals.\n\n\n\n\n\n\n\nCodetest |&gt; filter(bandType==\"Extrapolation\") |&gt;\n  ggplot(aes(x=train_end,y=dist,fill=condit,col=condit)) + \n  #geom_point() +\n  geom_smooth(method=\"loess\") +\n    facet_nested_wrap(~bandOrder+vb+fb) +\n  labs(x=\"Band\", y=\"Deviation From Target\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nCodetest |&gt; filter(bandType==\"Extrapolation\") |&gt;\n  ggplot(aes(x=train_end,y=dist,fill=condit,col=condit)) + \n  #geom_point() +\n  geom_smooth() +\n    facet_nested_wrap(~bandOrder+vb+fb) +\n  labs(x=\"Band\", y=\"Deviation From Target\")\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\nCodetest |&gt; filter(bandType==\"Extrapolation\") |&gt;\n  ggplot(aes(x=train_end,y=dist,fill=condit,col=condit)) + \n  #geom_point() +\n  geom_smooth(method=\"lm\") +\n    facet_nested_wrap(~bandOrder+vb) +\n  labs(x=\"Band\", y=\"Deviation From Target\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nCode# create quartiles for train_end\ntest |&gt; group_by(condit,vb,fb,bandOrder) |&gt;  filter(bandType==\"Extrapolation\") |&gt;\n  mutate(train_end_q = ntile(train_end,4)) |&gt; \n  ggplot(aes(x=train_end_q,y=dist,fill=condit)) + \n stat_bar + \n    ggh4x::facet_wrap2(bandOrder~vb~fb) +\n  labs(x=\"quartile\", y=\"Deviation From Target\")\n\n\n\n\n\n\nCodetest |&gt; group_by(condit,vb,fb,bandOrder) |&gt;  #filter(bandType==\"Extrapolation\") |&gt;\n  mutate(train_end_q = ntile(train_end,4)) |&gt; \n  ggplot(aes(x=condit,y=vx,fill=vb)) +\n  stat_bar + \n    ggh4x::facet_wrap2(~train_end_q+bandOrder+fb) \n\n\n\n\n\n\n\ndist ~ condit * fb * bandOrder * bandInt + (1 + bandInt | id)\n\nCode# dist ~ condit * fb * bandOrder * bandInt + (1 + bandInt | id)\nbmm_combo_testDistBand &lt;- readRDS(paste0(here::here(\"data/model_cache\",\"combo_testDistBand_RF_5k.rds\")))\n\nmted1 &lt;- as.data.frame(describe_posterior(bmm_combo_testDistBand, centrality = \"Mean\"))[, c(1,2,4,5,6)]\ncolnames(mted1) &lt;- c(\"Term\", \"Estimate\",\"95% CrI Lower\", \"95% CrI Upper\", \"pd\")\n\nmted1 |&gt; mutate(across(where(is.numeric), \\(x) round(x, 2))) |&gt;\n  tibble::remove_rownames() |&gt; \n  mutate(Term = stringr::str_remove(Term, \"b_\")) |&gt; kable(booktabs = TRUE, caption=(bmm_combo_testDistBand$formula[1]))\n\n\n\ndist ~ condit * fb * bandOrder * bandInt + (1 + bandInt | id)\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n205.97\n147.49\n267.42\n1.00\n\n\nconditVaried\n157.04\n68.71\n240.80\n1.00\n\n\nfbOrdinal\n138.32\n43.63\n240.16\n1.00\n\n\nbandOrderReverse\n-54.71\n-153.03\n40.96\n0.86\n\n\nbandInt\n0.01\n-0.06\n0.07\n0.58\n\n\nconditVaried:fbOrdinal\n-152.04\n-301.04\n-12.59\n0.98\n\n\nconditVaried:bandOrderReverse\n-225.89\n-366.28\n-84.64\n1.00\n\n\nfbOrdinal:bandOrderReverse\n-13.77\n-163.82\n130.61\n0.57\n\n\nconditVaried:bandInt\n-0.16\n-0.25\n-0.06\n1.00\n\n\nfbOrdinal:bandInt\n-0.14\n-0.25\n-0.03\n1.00\n\n\nbandOrderReverse:bandInt\n0.10\n-0.01\n0.20\n0.96\n\n\nconditVaried:fbOrdinal:bandOrderReverse\n46.25\n-163.02\n268.66\n0.65\n\n\nconditVaried:fbOrdinal:bandInt\n0.16\n0.00\n0.32\n0.98\n\n\nconditVaried:bandOrderReverse:bandInt\n0.28\n0.13\n0.44\n1.00\n\n\nfbOrdinal:bandOrderReverse:bandInt\n0.02\n-0.14\n0.18\n0.60\n\n\nconditVaried:fbOrdinal:bandOrderReverse:bandInt\n-0.10\n-0.35\n0.13\n0.79\n\n\n\n\n\nCodece_bmm1 &lt;- plot(conditional_effects(bmm_combo_testDistBand),points=FALSE,plot=FALSE)\nwrap_plots(ce_bmm1)\n\n\n\n\n\n\n\nvx ~ condit * fb * bandOrder * bandInt + (1 + bandInt | id)\n\nCode# vx ~ condit * fb * bandOrder * bandInt + (1 + bandInt | id)\nbmm_combo_testVxBand&lt;- readRDS(paste0(here::here(\"data/model_cache\",\"combo_testVxBand_RF_5K.rds\")))\n\nmted2 &lt;- as.data.frame(describe_posterior(bmm_combo_testVxBand, centrality = \"Mean\"))[, c(1,2,4,5,6)]\ncolnames(mted2) &lt;- c(\"Term\", \"Estimate\",\"95% CrI Lower\", \"95% CrI Upper\", \"pd\")\n\nmted2 |&gt; mutate(across(where(is.numeric), \\(x) round(x, 2))) |&gt;\n  tibble::remove_rownames() |&gt; \n  mutate(Term = stringr::str_remove(Term, \"b_\")) |&gt; kable(booktabs = TRUE, caption=(bmm_combo_testVxBand$formula[1]))\n\n\n\nvx ~ condit * fb * bandOrder * bandInt + (1 + bandInt | id)\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n415.31\n333.21\n494.51\n1.00\n\n\nconditVaried\n163.41\n45.67\n275.80\n1.00\n\n\nfbOrdinal\n186.14\n59.22\n314.65\n1.00\n\n\nbandOrderReverse\n-53.30\n-173.43\n68.10\n0.81\n\n\nbandInt\n0.71\n0.61\n0.81\n1.00\n\n\nconditVaried:fbOrdinal\n-147.56\n-329.93\n41.42\n0.94\n\n\nconditVaried:bandOrderReverse\n-169.21\n-340.18\n11.54\n0.97\n\n\nfbOrdinal:bandOrderReverse\n63.60\n-117.65\n242.70\n0.76\n\n\nconditVaried:bandInt\n-0.14\n-0.29\n0.00\n0.97\n\n\nfbOrdinal:bandInt\n-0.22\n-0.39\n-0.06\n1.00\n\n\nbandOrderReverse:bandInt\n0.00\n-0.15\n0.15\n0.51\n\n\nconditVaried:fbOrdinal:bandOrderReverse\n-169.57\n-438.52\n93.73\n0.90\n\n\nconditVaried:fbOrdinal:bandInt\n0.09\n-0.15\n0.32\n0.78\n\n\nconditVaried:bandOrderReverse:bandInt\n0.08\n-0.13\n0.30\n0.78\n\n\nfbOrdinal:bandOrderReverse:bandInt\n-0.09\n-0.33\n0.13\n0.80\n\n\nconditVaried:fbOrdinal:bandOrderReverse:bandInt\n0.34\n0.01\n0.68\n0.98\n\n\n\n\n\nCodece_bmm1 &lt;- plot(conditional_effects(bmm_combo_testVxBand),points=FALSE,plot=FALSE)\nwrap_plots(ce_bmm1)\n\n\n\n\n\n\n\ndist ~ condit * bandType * bandOrder * fb + (1 + bandType | id)\n\nCode# dist ~ condit * bandType * bandOrder * fb + (1 + bandType | id)\nbmm_combo_testBT_dist&lt;- readRDS(paste0(here::here(\"data/model_cache/brms\",\"combo_TeDistBt_test6__4_5000_0.93_12_Bt_test6_1537.rds\")))\n\nmted4 &lt;- as.data.frame(describe_posterior(bmm_combo_testBT_dist, centrality = \"Mean\"))[, c(1,2,4,5,6)]\ncolnames(mted4) &lt;- c(\"Term\", \"Estimate\",\"95% CrI Lower\", \"95% CrI Upper\", \"pd\")\n\nmted4 |&gt; mutate(across(where(is.numeric), \\(x) round(x, 2))) |&gt;\n  tibble::remove_rownames() |&gt; \n  mutate(Term = stringr::str_remove(Term, \"b_\")) |&gt; kable(booktabs = TRUE, caption=(bmm_combo_testBT_dist$formula[1]))\n\n\n\ndist ~ condit * bandType * bandOrder * fb + (1 + bandType | id)\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n186.62\n150.21\n222.49\n1.00\n\n\nconditVaried\n39.03\n-9.09\n88.02\n0.94\n\n\nbandTypeExtrapolation\n23.83\n-19.81\n68.55\n0.85\n\n\nbandOrderReverse\n-2.40\n-58.78\n55.98\n0.53\n\n\nfbOrdinal\n41.49\n-17.95\n100.89\n0.91\n\n\nconditVaried:bandTypeExtrapolation\n54.72\n-6.85\n115.38\n0.96\n\n\nconditVaried:bandOrderReverse\n-73.30\n-149.35\n1.68\n0.97\n\n\nbandTypeExtrapolation:bandOrderReverse\n31.52\n-39.14\n104.13\n0.80\n\n\nconditVaried:fbOrdinal\n-34.88\n-114.89\n47.95\n0.80\n\n\nbandTypeExtrapolation:fbOrdinal\n26.82\n-46.39\n98.89\n0.77\n\n\nbandOrderReverse:fbOrdinal\n-70.56\n-154.91\n14.86\n0.95\n\n\nconditVaried:bandTypeExtrapolation:bandOrderReverse\n51.22\n-45.23\n146.02\n0.85\n\n\nconditVaried:bandTypeExtrapolation:fbOrdinal\n-41.83\n-145.96\n62.54\n0.79\n\n\nconditVaried:bandOrderReverse:fbOrdinal\n70.87\n-45.83\n183.42\n0.89\n\n\nbandTypeExtrapolation:bandOrderReverse:fbOrdinal\n36.67\n-66.72\n139.66\n0.75\n\n\nconditVaried:bandTypeExtrapolation:bandOrderReverse:fbOrdinal\n-76.72\n-221.77\n71.82\n0.85\n\n\n\n\n\nCodece_bmm1 &lt;- plot(conditional_effects(bmm_combo_testBT_dist),points=FALSE,plot=FALSE)\nwrap_plots(ce_bmm1)\n\n\n\n\n\n\n\ndist ~ condit * bandType * bandOrder * fb + (1 | id) + (1 | bandInt)\n\nCode# dist ~ condit * bandType * bandOrder * fb + (1 | id) + (1 | bandInt)\nbmm_combo_testBT_dist3&lt;- readRDS(paste0(here::here(\"data/model_cache/brms\",\"combo_TeDistBand_test6_RF_2_2_8000_0.94_13_Band_test6_RF_21817.rds\")))\n\nmted7 &lt;- as.data.frame(describe_posterior(bmm_combo_testBT_dist3, centrality = \"Mean\"))[, c(1,2,4,5,6)]\ncolnames(mted7) &lt;- c(\"Term\", \"Estimate\",\"95% CrI Lower\", \"95% CrI Upper\", \"pd\")\n\nmted7 |&gt; mutate(across(where(is.numeric), \\(x) round(x, 2))) |&gt;\n  tibble::remove_rownames() |&gt; \n  mutate(Term = stringr::str_remove(Term, \"b_\")) |&gt; kable(booktabs = TRUE, caption=(bmm_combo_testBT_dist3$formula[1]))\n\n\n\ndist ~ condit * bandType * bandOrder * fb + (1 | id) + (1 | bandInt)\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n219.02\n150.88\n288.15\n1.00\n\n\nconditVaried\n-2.12\n-52.80\n47.57\n0.53\n\n\nbandTypeExtrapolation\n-9.66\n-35.89\n16.09\n0.77\n\n\nbandOrderReverse\n29.28\n-30.80\n89.14\n0.83\n\n\nfbOrdinal\n40.26\n-19.25\n99.48\n0.91\n\n\nconditVaried:bandTypeExtrapolation\n101.40\n72.52\n130.37\n1.00\n\n\nconditVaried:bandOrderReverse\n-89.61\n-168.58\n-13.13\n0.99\n\n\nbandTypeExtrapolation:bandOrderReverse\n-11.29\n-53.56\n31.35\n0.70\n\n\nconditVaried:fbOrdinal\n-33.43\n-118.57\n52.94\n0.78\n\n\nbandTypeExtrapolation:fbOrdinal\n27.05\n-10.96\n65.49\n0.92\n\n\nbandOrderReverse:fbOrdinal\n-68.09\n-156.41\n17.84\n0.94\n\n\nconditVaried:bandTypeExtrapolation:bandOrderReverse\n64.61\n19.80\n109.63\n1.00\n\n\nconditVaried:bandTypeExtrapolation:fbOrdinal\n-42.78\n-89.10\n3.82\n0.96\n\n\nconditVaried:bandOrderReverse:fbOrdinal\n65.56\n-53.40\n183.10\n0.87\n\n\nbandTypeExtrapolation:bandOrderReverse:fbOrdinal\n34.46\n-19.89\n88.51\n0.89\n\n\nconditVaried:bandTypeExtrapolation:bandOrderReverse:fbOrdinal\n-69.97\n-135.85\n-3.96\n0.98\n\n\n\n\n\nCodece_bmm1 &lt;- plot(conditional_effects(bmm_combo_testBT_dist3),points=FALSE,plot=FALSE)\nwrap_plots(ce_bmm1)\n\n\n\n\n\n\n\ndist ~ condit * bandType * bandOrder * fb + (1 | id) + (1 | bandInt)\n\nCode# dist ~ condit * bandType * bandOrder * fb + (1 | id) + (1 | bandInt)\nbmm_combo_testBT_dist2&lt;- readRDS(paste0(here::here(\"data/model_cache/brms\",\"combo_TeDistBand_test6_RF_2_4_5000_0.94_14_Band_test6_RF_25437.rds\")))\n\nmted5 &lt;- as.data.frame(describe_posterior(bmm_combo_testBT_dist2, centrality = \"Mean\"))[, c(1,2,4,5,6)]\ncolnames(mted5) &lt;- c(\"Term\", \"Estimate\",\"95% CrI Lower\", \"95% CrI Upper\", \"pd\")\n\nmted5 |&gt; mutate(across(where(is.numeric), \\(x) round(x, 2))) |&gt;\n  tibble::remove_rownames() |&gt; \n  mutate(Term = stringr::str_remove(Term, \"b_\")) |&gt; kable(booktabs = TRUE, caption=(bmm_combo_testBT_dist2$formula[1]))\n\n\n\ndist ~ condit * bandType * bandOrder * fb + (1 | id) + (1 | bandInt)\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n218.19\n143.92\n288.36\n1.00\n\n\nconditVaried\n-1.11\n-51.46\n48.60\n0.52\n\n\nbandTypeExtrapolation\n-9.24\n-35.42\n17.02\n0.76\n\n\nbandOrderReverse\n30.19\n-28.56\n86.72\n0.84\n\n\nfbOrdinal\n41.44\n-16.83\n100.84\n0.92\n\n\nconditVaried:bandTypeExtrapolation\n101.14\n72.70\n129.45\n1.00\n\n\nconditVaried:bandOrderReverse\n-91.21\n-165.93\n-13.21\n0.99\n\n\nbandTypeExtrapolation:bandOrderReverse\n-12.11\n-53.77\n29.59\n0.72\n\n\nconditVaried:fbOrdinal\n-33.01\n-113.59\n46.80\n0.79\n\n\nbandTypeExtrapolation:fbOrdinal\n26.60\n-11.27\n64.33\n0.92\n\n\nbandOrderReverse:fbOrdinal\n-70.04\n-154.19\n13.95\n0.95\n\n\nconditVaried:bandTypeExtrapolation:bandOrderReverse\n65.30\n20.37\n110.21\n1.00\n\n\nconditVaried:bandTypeExtrapolation:fbOrdinal\n-42.23\n-88.30\n3.79\n0.96\n\n\nconditVaried:bandOrderReverse:fbOrdinal\n65.45\n-54.03\n181.29\n0.87\n\n\nbandTypeExtrapolation:bandOrderReverse:fbOrdinal\n35.32\n-18.02\n89.89\n0.90\n\n\nconditVaried:bandTypeExtrapolation:bandOrderReverse:fbOrdinal\n-70.89\n-137.60\n-4.83\n0.98\n\n\n\n\n\nCodece_bmm1 &lt;- plot(conditional_effects(bmm_combo_testBT_dist2),points=FALSE,plot=FALSE)\nwrap_plots(ce_bmm1)\n\n\n\n\n\n\n\ndist ~ condit * bandType * bandOrder * fb + (1 | id * bandInt)\n\nCode# dist ~ condit * bandType * bandOrder * fb + (1 | id * bandInt)\nbmm_combo_testBT_dist4&lt;- readRDS(paste0(here::here(\"data/model_cache/brms\",\"combo_TeDistBt_test6_RF_int_2_8000_0.94_13_Bt_test6_RF_int4808.rds\")))\n\nmted9 &lt;- as.data.frame(describe_posterior(bmm_combo_testBT_dist4, centrality = \"Mean\"))[, c(1,2,4,5,6)]\ncolnames(mted9) &lt;- c(\"Term\", \"Estimate\",\"95% CrI Lower\", \"95% CrI Upper\", \"pd\")\n\nmted9 |&gt; mutate(across(where(is.numeric), \\(x) round(x, 2))) |&gt;\n  tibble::remove_rownames() |&gt; \n  mutate(Term = stringr::str_remove(Term, \"b_\")) |&gt; kable(booktabs = TRUE, caption=(bmm_combo_testBT_dist4$formula[1]))\n\n\n\ndist ~ condit * bandType * bandOrder * fb + (1 | id * bandInt)\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n213.95\n138.03\n285.77\n1.00\n\n\nconditVaried\n1.57\n-52.63\n57.54\n0.51\n\n\nbandTypeExtrapolation\n1.25\n-43.39\n46.38\n0.52\n\n\nbandOrderReverse\n26.73\n-47.18\n99.90\n0.76\n\n\nfbOrdinal\n40.87\n-28.66\n110.50\n0.88\n\n\nconditVaried:bandTypeExtrapolation\n91.75\n40.69\n142.93\n1.00\n\n\nconditVaried:bandOrderReverse\n-86.93\n-171.08\n-1.71\n0.98\n\n\nbandTypeExtrapolation:bandOrderReverse\n-21.29\n-92.94\n50.87\n0.71\n\n\nconditVaried:fbOrdinal\n-32.89\n-120.92\n55.22\n0.77\n\n\nbandTypeExtrapolation:fbOrdinal\n13.60\n-48.78\n76.13\n0.66\n\n\nbandOrderReverse:fbOrdinal\n-71.63\n-171.52\n31.15\n0.92\n\n\nconditVaried:bandTypeExtrapolation:bandOrderReverse\n73.15\n-5.64\n152.36\n0.97\n\n\nconditVaried:bandTypeExtrapolation:fbOrdinal\n-30.15\n-110.05\n48.97\n0.77\n\n\nconditVaried:bandOrderReverse:fbOrdinal\n69.36\n-56.34\n192.48\n0.86\n\n\nbandTypeExtrapolation:bandOrderReverse:fbOrdinal\n67.39\n-23.76\n157.12\n0.93\n\n\nconditVaried:bandTypeExtrapolation:bandOrderReverse:fbOrdinal\n-102.77\n-215.69\n10.23\n0.96\n\n\n\n\n\nCodece_bmm1 &lt;- plot(conditional_effects(bmm_combo_testBT_dist4),points=FALSE,plot=FALSE)\nwrap_plots(ce_bmm1)\n\n\n\n\n\n\n\ndist ~ condit * bandType * bandOrder * fb + bandInt + (1 | id)\n\nCode# dist ~ condit * bandType * bandOrder * fb + (1 | id) + (1 | bandInt)\nbmm_combo_testBT_dist3&lt;- readRDS(paste0(here::here(\"data/model_cache/brms\",\"combo_TeDistBand_test6_fixBandInt_RF_1_4_5000_0.94_14_Band_test6_fixBandInt_RF_10858.rds\")))\n\nmted5 &lt;- as.data.frame(describe_posterior(bmm_combo_testBT_dist3, centrality = \"Mean\"))[, c(1,2,4,5,6)]\ncolnames(mted5) &lt;- c(\"Term\", \"Estimate\",\"95% CrI Lower\", \"95% CrI Upper\", \"pd\")\n\nmted5 |&gt; mutate(across(where(is.numeric), \\(x) round(x, 2))) |&gt;\n  tibble::remove_rownames() |&gt; \n  mutate(Term = stringr::str_remove(Term, \"b_\")) |&gt; kable(booktabs = TRUE, caption=(bmm_combo_testBT_dist3$formula[1]))\n\n\n\ndist ~ condit * bandType * bandOrder * fb + bandInt + (1 | id)\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n207.20\n168.97\n245.78\n1.00\n\n\nconditVaried\n42.62\n-6.68\n91.45\n0.96\n\n\nbandTypeExtrapolation\n16.24\n-7.68\n40.81\n0.90\n\n\nbandOrderReverse\n-10.08\n-68.95\n49.91\n0.64\n\n\nfbOrdinal\n39.23\n-20.79\n97.66\n0.90\n\n\nbandInt\n-0.02\n-0.03\n-0.01\n1.00\n\n\nconditVaried:bandTypeExtrapolation\n45.25\n16.68\n74.29\n1.00\n\n\nconditVaried:bandOrderReverse\n-80.96\n-158.95\n-2.68\n0.98\n\n\nbandTypeExtrapolation:bandOrderReverse\n45.64\n7.41\n84.36\n0.99\n\n\nconditVaried:fbOrdinal\n-30.79\n-110.29\n49.26\n0.77\n\n\nbandTypeExtrapolation:fbOrdinal\n27.26\n-10.81\n66.45\n0.92\n\n\nbandOrderReverse:fbOrdinal\n-66.90\n-154.53\n19.05\n0.93\n\n\nconditVaried:bandTypeExtrapolation:bandOrderReverse\n67.94\n23.37\n113.09\n1.00\n\n\nconditVaried:bandTypeExtrapolation:fbOrdinal\n-42.98\n-91.17\n3.58\n0.96\n\n\nconditVaried:bandOrderReverse:fbOrdinal\n63.08\n-54.57\n182.68\n0.85\n\n\nbandTypeExtrapolation:bandOrderReverse:fbOrdinal\n35.08\n-22.23\n90.81\n0.89\n\n\nconditVaried:bandTypeExtrapolation:bandOrderReverse:fbOrdinal\n-70.38\n-138.05\n-1.13\n0.98\n\n\n\n\n\nCodece_bmm1 &lt;- plot(conditional_effects(bmm_combo_testBT_dist3),points=FALSE,plot=FALSE)\nwrap_plots(ce_bmm1)\n\n\n\n\n\n\n\nvx ~ condit * bandType * bandOrder * fb + (1 + bandType | id)\n\nCode# vx ~ condit * bandType * bandOrder * fb + (1 + bandType | id)\nbmm_combo_testBT&lt;- readRDS(paste0(here::here(\"data/model_cache/brms\",\"combo_TeVxBt_test6__4_5000_0.93_12_Bt_test6_3033.rds\")))\n\nmted3 &lt;- as.data.frame(describe_posterior(bmm_combo_testBT, centrality = \"Mean\"))[, c(1,2,4,5,6)]\ncolnames(mted3) &lt;- c(\"Term\", \"Estimate\",\"95% CrI Lower\", \"95% CrI Upper\", \"pd\")\n\nmted3 |&gt; mutate(across(where(is.numeric), \\(x) round(x, 2))) |&gt;\n  tibble::remove_rownames() |&gt; \n  mutate(Term = stringr::str_remove(Term, \"b_\")) |&gt; kable(booktabs = TRUE, caption=(bmm_combo_testBT$formula[1]))\n\n\n\nvx ~ condit * bandType * bandOrder * fb + (1 + bandType | id)\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n1006.75\n947.60\n1067.18\n1.00\n\n\nconditVaried\n167.24\n84.29\n249.31\n1.00\n\n\nbandTypeExtrapolation\n-241.09\n-309.10\n-173.08\n1.00\n\n\nbandOrderReverse\n-274.23\n-368.69\n-179.03\n1.00\n\n\nfbOrdinal\n4.84\n-92.33\n98.77\n0.54\n\n\nconditVaried:bandTypeExtrapolation\n-161.31\n-253.24\n-71.39\n1.00\n\n\nconditVaried:bandOrderReverse\n-337.34\n-465.68\n-209.79\n1.00\n\n\nbandTypeExtrapolation:bandOrderReverse\n470.18\n363.86\n575.32\n1.00\n\n\nconditVaried:fbOrdinal\n-118.92\n-251.26\n16.32\n0.96\n\n\nbandTypeExtrapolation:fbOrdinal\n71.23\n-35.26\n177.28\n0.91\n\n\nbandOrderReverse:fbOrdinal\n38.34\n-100.45\n179.61\n0.71\n\n\nconditVaried:bandTypeExtrapolation:bandOrderReverse\n387.75\n243.41\n529.99\n1.00\n\n\nconditVaried:bandTypeExtrapolation:fbOrdinal\n43.02\n-105.25\n191.99\n0.71\n\n\nconditVaried:bandOrderReverse:fbOrdinal\n41.08\n-152.15\n237.75\n0.66\n\n\nbandTypeExtrapolation:bandOrderReverse:fbOrdinal\n-128.62\n-284.77\n27.32\n0.94\n\n\nconditVaried:bandTypeExtrapolation:bandOrderReverse:fbOrdinal\n102.72\n-118.70\n318.92\n0.82\n\n\n\n\n\nCodece_bmm1 &lt;- plot(conditional_effects(bmm_combo_testBT),points=FALSE,plot=FALSE)\nwrap_plots(ce_bmm1)",
    "crumbs": [
      "Analyses",
      "HTW All Exp Testing"
    ]
  },
  {
    "objectID": "Model/htw_model_e3.html#deviation-predictions",
    "href": "Model/htw_model_e3.html#deviation-predictions",
    "title": "HTW Model e3",
    "section": "Deviation Predictions",
    "text": "Deviation Predictions\n\nCode post_dat_l |&gt; \n  mutate(vbLab = factor(paste0(x,\"-\",x+200),levels=levels(testAvg$vb))) |&gt;\n  ggplot(aes(x=condit,y=dist,fill=vbLab)) + \n  stat_bar + \n  #facet_wrap(~Resp)\n  ggh4x::facet_nested_wrap(rename_fm(Fit_Method)~Resp, axes = \"all\",ncol=3,scale=\"free\")\n\n\n\n\n\n\n\n\nCode po &lt;- post_dat_l |&gt; \n  filter(bandOrder==\"Original\") |&gt;\n  mutate(vbLab = factor(paste0(x,\"-\",x+200),levels=levels(testAvg$vb))) |&gt;\n  ggplot(aes(x=condit,y=dist,fill=vbLab)) + \n  stat_bar + \n  #facet_wrap(~Resp)\n  ggh4x::facet_nested_wrap(rename_fm(Fit_Method)~Resp, axes = \"all\",ncol=3,scale=\"free\")+\n  labs(title=\"Original Order\")\n\n  pr &lt;- post_dat_l |&gt; \n  filter(bandOrder==\"Reverse\") |&gt;\n  mutate(vbLab = factor(paste0(x,\"-\",x+200),levels=levels(testAvg$vb))) |&gt;\n  ggplot(aes(x=condit,y=dist,fill=vbLab)) + \n  stat_bar + \n  #facet_wrap(~Resp)\n  ggh4x::facet_nested_wrap(rename_fm(Fit_Method)~Resp, axes = \"all\",ncol=3,scale=\"free\")+\n  labs(title=\"Reverse Order\")\n\n  po/pr\n\n\n\n\n\n\n\n\nCodec_post &lt;- post_dat_avg %&gt;%\n    group_by(id, condit,bandOrder, Model, Fit_Method, rank) %&gt;%\n    slice_head(n = 1) |&gt;\n    ggplot(aes(y=log(c), x = Fit_Method,col=condit)) + stat_pointinterval(position=position_dodge(.2)) +\n    ggh4x::facet_nested_wrap(~Model+bandOrder) + labs(title=\"c parameter\") +\n  theme(legend.title = element_blank(), legend.position=\"right\",plot.title=element_text(hjust=.4))\n\nlr_post &lt;- post_dat_avg %&gt;%\n    group_by(id, condit,bandOrder, Model, Fit_Method, rank) %&gt;%\n    slice_head(n = 1) |&gt;\n    ggplot(aes(y=lr, x = Fit_Method,col=condit)) + stat_pointinterval(position=position_dodge(.4)) +\n    ggh4x::facet_nested_wrap(~Model+bandOrder) + labs(title=\"learning rate parameter\") +\n  theme(legend.title = element_blank(), legend.position = \"none\",plot.title=element_text(hjust=.5))\nc_post + lr_post\n\n\n\n\n\n\nFigure 2: Posterior Distributions of \\(c\\) and \\(lr\\) parameters. Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median. Note that the y axes of the plots for the c parameter are scaled logarithmically.\n\n\n\n\nAccounting for individual patterns\n\nCode# could compute best model for each posterior parameter - examine consistency\n# then I'd have an error bar for each subject in the model error diff. figure\n\ntid1 &lt;- post_dat  |&gt; group_by(id,condit,Model,Fit_Method,x) |&gt; \n  mutate(e2=abs(y-pred)) |&gt; \n  summarise(y1=mean(y), pred1=mean(pred),mean_error=abs(y1-pred1)) |&gt;\n  group_by(id,condit,Model,Fit_Method) |&gt; \n  summarise(mean_error=mean(mean_error)) |&gt; \n  arrange(id,condit,Fit_Method) |&gt;\n  round_tibble(1) \n\nbest_id &lt;- tid1 |&gt; \n  group_by(id,condit,Fit_Method) |&gt; mutate(best=ifelse(mean_error==min(mean_error),1,0)) \n\nlowest_error_model &lt;- best_id %&gt;%\n  group_by(id, condit,Fit_Method) %&gt;%\n  summarise(Best_Model = Model[which.min(mean_error)],\n            Lowest_error = min(mean_error),\n            differential = min(mean_error) - max(mean_error)) %&gt;%\n  ungroup()\n\n\nerror_difference&lt;- best_id %&gt;%\n  select(id, condit, Model,Fit_Method, mean_error) %&gt;%\n  pivot_wider(names_from = Model, values_from = c(mean_error)) %&gt;%\n  mutate(Error_difference = (ALM - EXAM))\n\nfull_comparison &lt;- lowest_error_model |&gt; left_join(error_difference, by=c(\"id\",\"condit\",\"Fit_Method\"))  |&gt; \n  group_by(condit,Fit_Method,Best_Model) |&gt; mutate(nGrp=n(), model_rank = nGrp - rank(Error_difference) ) |&gt; \n  arrange(Fit_Method,-Error_difference)\n\nfull_comparison |&gt; filter(Fit_Method==\"Test_Train\") |&gt; \n  left_join(group_ids, by = join_by(id,condit)) |&gt;\n  ungroup() |&gt;\n  mutate(id = reorder(id, Error_difference)) %&gt;%\n  ggplot(aes(y=id,x=Error_difference,fill=Best_Model))+\n  geom_col() +\n  ggh4x::facet_grid2(~condit+bandOrder,axes=\"all\",scales=\"free_y\", independent = \"y\")+\n  labs(fill=\"Best Model\",x=\"Mean Model Error Difference (ALM - EXAM)\",y=\"Participant\")\n\n\n\n# full_comparison |&gt; filter(Fit_Method==\"Test_Train\") |&gt; \n#   ungroup() |&gt;\n#   mutate(id = reorder(id, Error_difference)) |&gt;\n#   left_join(post_dat_avg |&gt; filter(x==100) |&gt; select(-x) |&gt; ungroup(), by=c(\"id\",\"condit\")) |&gt;\n#   ggplot(aes(y=id,x=c,fill=Best_Model))+\n#   stat_pointinterval(position=position_dodge(.1))\n\n\n\n\n\n\nFigure 3: Difference in model errors for each participant, with models fit to both train and test data. Positive values favor EXAM, while negative values favor ALM.\n\n\n\n\nSubjects with biggest differential favoring ALM\n\nCodevAlm &lt;- c(245,264,280,408,370,413); cAlm &lt;- c(219,202,225,456,463,407)\n\npost_dat_l |&gt; filter(id %in% c(vAlm,cAlm), Fit_Method==\"Test_Train\") |&gt; \n   mutate(x=as.factor(x), Resp=as.factor(Resp)) |&gt;\n  group_by(id,condit,Fit_Method,Model,Resp) |&gt;\n   mutate(flab=paste0(\"Subject: \",id)) |&gt;\n  ggplot(aes(x = Resp, y = val, fill=x)) + \n  stat_bar_sd + ggh4x::facet_nested_wrap(condit+bandOrder~flab, axes = \"all\",ncol=3) +\n  labs(title=\"Subjects with biggest differential favoring ALM\",\n       y=\"X Velocity\",fill=\"Target Velocity\") +\n   guides(fill = guide_legend(nrow = 1)) + \n  theme(legend.position = \"bottom\",axis.title.x = element_blank())\n\n\n\n\n\n\n\nSubjects with biggest differential favoring EXAM\n\nCodevAlm &lt;- c(278,215,274,401,375,425); cAlm &lt;- c(260,223,249,376,440,418)\n\npost_dat_l |&gt; filter(id %in% c(vAlm,cAlm), Fit_Method==\"Test_Train\") |&gt; \n   mutate(x=as.factor(x), Resp=as.factor(Resp)) |&gt;\n  group_by(id,condit,bandOrder,Fit_Method,Model,Resp) |&gt;\n   mutate(flab=paste0(\"Subject: \",id)) |&gt;\n  ggplot(aes(x = Resp, y = val, fill=x)) + \n  stat_bar_sd + ggh4x::facet_nested_wrap(condit+bandOrder~flab, axes = \"all\",ncol=3) +\n  labs(title=\"Subjects with biggest differential favoring EXAM\",\n       y=\"X Velocity\",fill=\"Target Velocity\") +\n   guides(fill = guide_legend(nrow = 1)) + \n  theme(legend.position = \"bottom\",axis.title.x = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: A) Model residuals for each combination of training condition, fit method, and model. Residuals reflect the difference between observed and predicted values. Lower values indicate better model fit. Note that y axes are scaled differently between facets. B) Full posterior predictive distributions vs. observed data from participants.Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median.\nFigure 2: Posterior Distributions of \\(c\\) and \\(lr\\) parameters. Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median. Note that the y axes of the plots for the c parameter are scaled logarithmically.\nFigure 3: Difference in model errors for each participant, with models fit to both train and test data. Positive values favor EXAM, while negative values favor ALM.",
    "crumbs": [
      "Model",
      "HTW Model e3"
    ]
  },
  {
    "objectID": "Model/htw_model_e2.html#deviation-predictions",
    "href": "Model/htw_model_e2.html#deviation-predictions",
    "title": "HTW Model e2",
    "section": "Deviation Predictions",
    "text": "Deviation Predictions\n\nCode post_dat_l |&gt; \n  mutate(vbLab = factor(paste0(x,\"-\",x+200),levels=levels(testAvg$vb))) |&gt;\n  ggplot(aes(x=condit,y=dist,fill=vbLab)) + \n  stat_bar + \n  #facet_wrap(~Resp)\n  ggh4x::facet_nested_wrap(rename_fm(Fit_Method)~Resp, axes = \"all\",ncol=3,scale=\"free\")\n\n\n\n\n\n\n\n\nCodec_post &lt;- post_dat_avg %&gt;%\n    group_by(id, condit, Model, Fit_Method, rank) %&gt;%\n    slice_head(n = 1) |&gt;\n    ggplot(aes(y=log(c), x = Fit_Method,col=condit)) + stat_pointinterval(position=position_dodge(.2)) +\n    ggh4x::facet_nested_wrap(~Model) + labs(title=\"c parameter\") +\n  theme(legend.title = element_blank(), legend.position=\"right\",plot.title=element_text(hjust=.4))\n\nlr_post &lt;- post_dat_avg %&gt;%\n    group_by(id, condit, Model, Fit_Method, rank) %&gt;%\n    slice_head(n = 1) |&gt;\n    ggplot(aes(y=lr, x = Fit_Method,col=condit)) + stat_pointinterval(position=position_dodge(.4)) +\n    ggh4x::facet_nested_wrap(~Model) + labs(title=\"learning rate parameter\") +\n  theme(legend.title = element_blank(), legend.position = \"none\",plot.title=element_text(hjust=.5))\nc_post + lr_post\n\n\n\n\n\n\nFigure 2: Posterior Distributions of \\(c\\) and \\(lr\\) parameters. Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median. Note that the y axes of the plots for the c parameter are scaled logarithmically.\n\n\n\n\nAccounting for individual patterns\n\nCode# could compute best model for each posterior parameter - examine consistency\n# then I'd have an error bar for each subject in the model error diff. figure\n\ntid1 &lt;- post_dat  |&gt; group_by(id,condit,Model,Fit_Method,x) |&gt; \n  mutate(e2=abs(y-pred)) |&gt; \n  summarise(y1=mean(y), pred1=mean(pred),mean_error=abs(y1-pred1)) |&gt;\n  group_by(id,condit,Model,Fit_Method) |&gt; \n  summarise(mean_error=mean(mean_error)) |&gt; \n  arrange(id,condit,Fit_Method) |&gt;\n  round_tibble(1) \n\nbest_id &lt;- tid1 |&gt; \n  group_by(id,condit,Fit_Method) |&gt; mutate(best=ifelse(mean_error==min(mean_error),1,0)) \n\nlowest_error_model &lt;- best_id %&gt;%\n  group_by(id, condit,Fit_Method) %&gt;%\n  summarise(Best_Model = Model[which.min(mean_error)],\n            Lowest_error = min(mean_error),\n            differential = min(mean_error) - max(mean_error)) %&gt;%\n  ungroup()\n\n\nerror_difference&lt;- best_id %&gt;%\n  select(id, condit, Model,Fit_Method, mean_error) %&gt;%\n  pivot_wider(names_from = Model, values_from = c(mean_error)) %&gt;%\n  mutate(Error_difference = (ALM - EXAM))\n\nfull_comparison &lt;- lowest_error_model |&gt; left_join(error_difference, by=c(\"id\",\"condit\",\"Fit_Method\"))  |&gt; \n  group_by(condit,Fit_Method,Best_Model) |&gt; mutate(nGrp=n(), model_rank = nGrp - rank(Error_difference) ) |&gt; \n  arrange(Fit_Method,-Error_difference)\n\nfull_comparison |&gt; filter(Fit_Method==\"Test_Train\") |&gt; \n  ungroup() |&gt;\n  mutate(id = reorder(id, Error_difference)) %&gt;%\n  ggplot(aes(y=id,x=Error_difference,fill=Best_Model))+\n  geom_col() +\n  ggh4x::facet_grid2(~condit,axes=\"all\",scales=\"free_y\", independent = \"y\")+\n  labs(fill=\"Best Model\",x=\"Mean Model Error Difference (ALM - EXAM)\",y=\"Participant\")\n\n\n\n# full_comparison |&gt; filter(Fit_Method==\"Test_Train\") |&gt; \n#   ungroup() |&gt;\n#   mutate(id = reorder(id, Error_difference)) |&gt;\n#   left_join(post_dat_avg |&gt; filter(x==100) |&gt; select(-x) |&gt; ungroup(), by=c(\"id\",\"condit\")) |&gt;\n#   ggplot(aes(y=id,x=c,fill=Best_Model))+\n#   stat_pointinterval(position=position_dodge(.1))\n\n\n\n\n\n\nFigure 3: Difference in model errors for each participant, with models fit to both train and test data. Positive values favor EXAM, while negative values favor ALM.\n\n\n\n\nSubjects with biggest differential favoring ALM\n\nCodevAlm &lt;- c(307,331,197); cAlm &lt;- c(372,173,157)\n\npost_dat_l |&gt; filter(id %in% c(vAlm,cAlm), Fit_Method==\"Test_Train\") |&gt; \n   mutate(x=as.factor(x), Resp=as.factor(Resp)) |&gt;\n  group_by(id,condit,Fit_Method,Model,Resp) |&gt;\n   mutate(flab=paste0(\"Subject: \",id)) |&gt;\n  ggplot(aes(x = Resp, y = val, fill=x)) + \n  stat_bar_sd + ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",ncol=3) +\n  labs(title=\"Subjects with biggest differential favoring ALM\",\n       y=\"X Velocity\",fill=\"Target Velocity\") +\n   guides(fill = guide_legend(nrow = 1)) + \n  theme(legend.position = \"bottom\",axis.title.x = element_blank())\n\n\n\n\n\n\n\nSubjects with biggest differential favoring EXAM\n\nCodevAlm &lt;- c(312,334,295); cAlm &lt;- c(132,366,415)\n\npost_dat_l |&gt; filter(id %in% c(vAlm,cAlm), Fit_Method==\"Test_Train\") |&gt; \n   mutate(x=as.factor(x), Resp=as.factor(Resp)) |&gt;\n  group_by(id,condit,Fit_Method,Model,Resp) |&gt;\n   mutate(flab=paste0(\"Subject: \",id)) |&gt;\n  ggplot(aes(x = Resp, y = val, fill=x)) + \n  stat_bar_sd + ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",ncol=3) +\n  labs(title=\"Subjects with biggest differential favoring EXAM\",\n       y=\"X Velocity\",fill=\"Target Velocity\") +\n   guides(fill = guide_legend(nrow = 1)) + \n  theme(legend.position = \"bottom\",axis.title.x = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: A) Model residuals for each combination of training condition, fit method, and model. Residuals reflect the difference between observed and predicted values. Lower values indicate better model fit. Note that y axes are scaled differently between facets. B) Full posterior predictive distributions vs. observed data from participants.Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median.\nFigure 2: Posterior Distributions of \\(c\\) and \\(lr\\) parameters. Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median. Note that the y axes of the plots for the c parameter are scaled logarithmically.\nFigure 3: Difference in model errors for each participant, with models fit to both train and test data. Positive values favor EXAM, while negative values favor ALM.",
    "crumbs": [
      "Model",
      "HTW Model e2"
    ]
  },
  {
    "objectID": "Model/htw_model.html#deviation-predictions",
    "href": "Model/htw_model.html#deviation-predictions",
    "title": "HTW Model e1",
    "section": "Deviation Predictions",
    "text": "Deviation Predictions\n\nCode post_dat_l |&gt; \n  mutate(vbLab = factor(paste0(x,\"-\",x+200),levels=levels(testAvg$vb))) |&gt;\n  ggplot(aes(x=condit,y=dist,fill=vbLab)) + \n  stat_bar + \n  #facet_wrap(~Resp)\n  ggh4x::facet_nested_wrap(rename_fm(Fit_Method)~Resp, axes = \"all\",ncol=3,scale=\"free\")\n\n\n\n\n\n\nCodepost_dat_l |&gt; \n  mutate(vbLab = factor(paste0(x,\"-\",x+200),levels=levels(testAvg$vb))) |&gt;\n  ggplot(aes(x=Resp,y=dist,fill=vbLab)) + \n  stat_bar + \n  #facet_wrap(~Resp)\n  ggh4x::facet_nested_wrap(rename_fm(Fit_Method)~condit, axes = \"all\",ncol=2,scale=\"free\")\n\n\n\n\n\n\nCodep1 &lt;- post_dat_l |&gt; \n  filter(Fit_Method==\"Test_Train\") |&gt; \n  mutate(vbLab = factor(paste0(x,\"-\",x+200),levels=levels(testAvg$vb))) |&gt;\n  ggplot(aes(x=Resp,y=dist,fill=vbLab)) + \n  stat_bar + \n  #facet_wrap(~Resp)\n  ggh4x::facet_nested_wrap(~condit, axes = \"all\",ncol=2,scale=\"free\")\n \n\np2 &lt;- post_dat_l |&gt; \n  filter(Fit_Method==\"Test_Train\") |&gt; \n  mutate(vbLab = factor(paste0(x,\"-\",x+200),levels=levels(testAvg$vb))) |&gt;\n  ggplot(aes(x=Resp,y=val,fill=vbLab)) + \n  stat_bar + \n  #facet_wrap(~Resp)\n  ggh4x::facet_nested_wrap(~condit, axes = \"all\",ncol=2,scale=\"free\")\n \np1/p2\n\n\n\n\n\n\nCode post_dat_l |&gt; filter(Fit_Method==\"Test_Train\") |&gt; \n  mutate(vbLab = factor(paste0(x,\"-\",x+200),levels=levels(testAvg$vb))) |&gt;\n  ggplot(aes(x=Resp,y=dist,fill=condit)) + \n  stat_bar + \n  #facet_wrap(~Resp)\n  ggh4x::facet_nested_wrap(~vbLab, axes = \"all\",ncol=2,scale=\"free\")\n\n\n\n\n\n\nCode post_dat_l |&gt; filter(Fit_Method==\"Test_Train\") |&gt; \n  mutate(vbLab = factor(paste0(x,\"-\",x+200),levels=levels(testAvg$vb))) |&gt;\n  ggplot(aes(x=Resp,y=val,fill=condit)) + \n  stat_bar + \n  #facet_wrap(~Resp)\n  ggh4x::facet_nested_wrap(~vbLab, axes = \"all\",ncol=2,scale=\"free\")\n\n\n\n\n\n\n\n\nCodec_post &lt;- post_dat_avg %&gt;%\n    group_by(id, condit, Model, Fit_Method, rank) %&gt;%\n    slice_head(n = 1) |&gt;\n    ggplot(aes(y=log(c), x = Fit_Method,col=condit)) + stat_pointinterval(position=position_dodge(.2)) +\n    ggh4x::facet_nested_wrap(~Model) + labs(title=\"c parameter\") +\n  theme(legend.title = element_blank(), legend.position=\"right\",plot.title=element_text(hjust=.4))\n\nlr_post &lt;- post_dat_avg %&gt;%\n    group_by(id, condit, Model, Fit_Method, rank) %&gt;%\n    slice_head(n = 1) |&gt;\n    ggplot(aes(y=lr, x = Fit_Method,col=condit)) + stat_pointinterval(position=position_dodge(.4)) +\n    ggh4x::facet_nested_wrap(~Model) + labs(title=\"learning rate parameter\") +\n  theme(legend.title = element_blank(), legend.position = \"none\",plot.title=element_text(hjust=.5))\nc_post + lr_post\n\n\n\n\n\n\nFigure 3: Posterior Distributions of \\(c\\) and \\(lr\\) parameters. Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median. Note that the y axes of the plots for the c parameter are scaled logarithmically.\n\n\n\n\nAccounting for individual patterns\nTo more accurately assess the relative abilities of ALM and EXAM to capture important empirical patterns - we will now examine the predictions of both models for the subset of individual participants shown in Figure 4. Panel A presents three varied and constant participants who demonstrated a reasonable degree of discrimination between the 6 velocity bands during testing.\n\n** comment on the different ways ALM can completely fail to mimic discrimination patterns (sbj. 35; sbj. 137),and on how it can sometimes partially succeed (sbj. 11; 14,74)\n** comment on how EXAM can somtimes mimic non-monotonic spacing between bands due to associative stregth from training (i.e. subject 47)\n** compare c values to slope parameters from the statistical models earlier in paper\n\n\nCodecId_tr &lt;- c(137, 181, 11)\nvId_tr &lt;- c(14, 193, 47)\ncId_tt &lt;- c(11, 93, 35)\nvId_tt &lt;- c(1,14,74)\n# filter(id %in% (filter(bestTestEXAM,group_rank&lt;=9, Fit_Method==\"Test\")\n\ntestIndv &lt;- post_dat_l |&gt; filter(id %in% c(cId_tt,vId_tt), Fit_Method==\"Test_Train\") |&gt; \n   mutate(x=as.factor(x), Resp=as.factor(Resp)) |&gt;\n  group_by(id,condit,Fit_Method,Model,Resp) |&gt;\n   mutate(flab=paste0(\"Subject: \",id)) |&gt;\n  ggplot(aes(x = Resp, y = val, fill=x)) + \n  stat_bar_sd + ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",ncol=3) +\n  labs(title=\"Individual Participant fits from Test & Train Fitting Method\",\n       y=\"X Velocity\",fill=\"Target Velocity\") +\n   guides(fill = guide_legend(nrow = 1)) + \n  theme(legend.position = \"bottom\",axis.title.x = element_blank())\n\n\ntrainIndv &lt;- post_dat_l |&gt; filter(id %in% c(cId_tr,vId_tr), Fit_Method==\"Train\") |&gt; \n   mutate(x=as.factor(x), Resp=as.factor(Resp), flab=paste0(\"Subject: \",id)) |&gt;\n  group_by(id,condit,Fit_Method,Model,Resp) |&gt;\n  ggplot(aes(x = Resp, y = val, fill=x)) + \n  stat_bar + \n  ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",ncol=3) +\n  labs(title=\"Individual Participant fits from Train Only Fitting Method\", y=\"X Velocity\",\n       fill=\"Target Velocity\") +\n     guides(fill = guide_legend(nrow = 1)) + \n  theme(legend.position = \"bottom\",axis.title.x = element_blank())\n\n\n(testIndv  / trainIndv) +\n  plot_annotation(tag_levels = list(c('A','B')),tag_suffix = ') ') & \n  theme(plot.tag.position = c(0, 1))\n\n\n\n\n\n\nFigure 4: Model predictions alongside observed data for a subset of individual participants. A) 3 constant and 3 varied participants fit to both the test and training data. B) 3 constant and 3 varied subjects fit to only the trainign data.\n\n\n\n\n\nCode# could compute best model for each posterior parameter - examine consistency\n# then I'd have an error bar for each subject in the model error diff. figure\n\ntid1 &lt;- post_dat  |&gt; group_by(id,condit,Model,Fit_Method,x) |&gt; \n  mutate(e2=abs(y-pred)) |&gt; \n  summarise(y1=mean(y), pred1=mean(pred),mean_error=abs(y1-pred1)) |&gt;\n  group_by(id,condit,Model,Fit_Method) |&gt; \n  summarise(mean_error=mean(mean_error)) |&gt; \n  arrange(id,condit,Fit_Method) |&gt;\n  round_tibble(1) \n\nbest_id &lt;- tid1 |&gt; \n  group_by(id,condit,Fit_Method) |&gt; mutate(best=ifelse(mean_error==min(mean_error),1,0)) \n\nlowest_error_model &lt;- best_id %&gt;%\n  group_by(id, condit,Fit_Method) %&gt;%\n  summarise(Best_Model = Model[which.min(mean_error)],\n            Lowest_error = min(mean_error),\n            differential = min(mean_error) - max(mean_error)) %&gt;%\n  ungroup()\n\n\nerror_difference&lt;- best_id %&gt;%\n  select(id, condit, Model,Fit_Method, mean_error) %&gt;%\n  pivot_wider(names_from = Model, values_from = c(mean_error)) %&gt;%\n  mutate(Error_difference = (ALM - EXAM))\n\nfull_comparison &lt;- lowest_error_model |&gt; left_join(error_difference, by=c(\"id\",\"condit\",\"Fit_Method\"))  |&gt; \n  group_by(condit,Fit_Method,Best_Model) |&gt; mutate(nGrp=n(), model_rank = nGrp - rank(Error_difference) ) |&gt; \n  arrange(Fit_Method,-Error_difference)\n\nfull_comparison |&gt; filter(Fit_Method==\"Test_Train\") |&gt; \n  ungroup() |&gt;\n  mutate(id = reorder(id, Error_difference)) %&gt;%\n  ggplot(aes(y=id,x=Error_difference,fill=Best_Model))+\n  geom_col() +\n  ggh4x::facet_grid2(~condit,axes=\"all\",scales=\"free_y\", independent = \"y\")+\n  labs(fill=\"Best Model\",x=\"Mean Model Error Difference (ALM - EXAM)\",y=\"Participant\")\n\n\n\n# full_comparison |&gt; filter(Fit_Method==\"Test_Train\") |&gt; \n#   ungroup() |&gt;\n#   mutate(id = reorder(id, Error_difference)) |&gt;\n#   left_join(post_dat_avg |&gt; filter(x==100) |&gt; select(-x) |&gt; ungroup(), by=c(\"id\",\"condit\")) |&gt;\n#   ggplot(aes(y=id,x=c,fill=Best_Model))+\n#   stat_pointinterval(position=position_dodge(.1))\n\n\n\n\n\n\nFigure 5: Difference in model errors for each participant, with models fit to both train and test data. Positive values favor EXAM, while negative values favor ALM.\n\n\n\n\nSubjects with biggest differential favoring ALM\n\nCodevAlm &lt;- c(29,70,68); cAlm &lt;- c(73,49,128)\n\npost_dat_l |&gt; filter(id %in% c(vAlm,cAlm), Fit_Method==\"Test_Train\") |&gt; \n   mutate(x=as.factor(x), Resp=as.factor(Resp)) |&gt;\n  group_by(id,condit,Fit_Method,Model,Resp) |&gt;\n   mutate(flab=paste0(\"Subject: \",id)) |&gt;\n  ggplot(aes(x = Resp, y = val, fill=x)) + \n  stat_bar_sd + ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",ncol=3) +\n  labs(title=\"Subjects with biggest differential favoring ALM\",\n       y=\"X Velocity\",fill=\"Target Velocity\") +\n   guides(fill = guide_legend(nrow = 1)) + \n  theme(legend.position = \"bottom\",axis.title.x = element_blank())\n\n\n\n\n\n\n\nSubjects with biggest differential favoring EXAM\n\nCodevAlm &lt;- c(23,155,184); cAlm &lt;- c(119,85,175)\n\npost_dat_l |&gt; filter(id %in% c(vAlm,cAlm), Fit_Method==\"Test_Train\") |&gt; \n   mutate(x=as.factor(x), Resp=as.factor(Resp)) |&gt;\n  group_by(id,condit,Fit_Method,Model,Resp) |&gt;\n   mutate(flab=paste0(\"Subject: \",id)) |&gt;\n  ggplot(aes(x = Resp, y = val, fill=x)) + \n  stat_bar_sd + ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",ncol=3) +\n  labs(title=\"Subjects with biggest differential favoring EXAM\",\n       y=\"X Velocity\",fill=\"Target Velocity\") +\n   guides(fill = guide_legend(nrow = 1)) + \n  theme(legend.position = \"bottom\",axis.title.x = element_blank())\n\n\n\n\n\n\n\nSubjects with no clear best model\n\nCodevAlm &lt;- c(129,192,105); cAlm &lt;- c(101, 109,134)\n\npost_dat_l |&gt; filter(id %in% c(vAlm,cAlm), Fit_Method==\"Test_Train\") |&gt; \n   mutate(x=as.factor(x), Resp=as.factor(Resp)) |&gt;\n  group_by(id,condit,Fit_Method,Model,Resp) |&gt;\n   mutate(flab=paste0(\"Subject: \",id)) |&gt;\n  ggplot(aes(x = Resp, y = val, fill=x)) + \n  stat_bar_sd + ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",ncol=3) +\n  labs(title=\"Subjects with no clear best model\",\n       y=\"X Velocity\",fill=\"Target Velocity\") +\n   guides(fill = guide_legend(nrow = 1)) + \n  theme(legend.position = \"bottom\",axis.title.x = element_blank())\n\n\n\n\n\n\n\n\nCodevAlm &lt;- c(29,70,68); cAlm &lt;- c(73,49,128)\n\ndifAlm &lt;-  post_dat_avg  |&gt; filter(x==100,id %in% c(vAlm,cAlm), Fit_Method==\"Test_Train\") |&gt;\n    group_by(id, condit, Model, rank) %&gt;%\n      mutate(flab=paste0(\"Subject: \",id)) |&gt;\n    ggplot(aes(y=log(c), x = id,col=Model)) + \n  stat_pointinterval(position=position_dodge(.5)) +\n   # ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",scales=\"free_y\",ncol=3) + \n      labs(title=\"c parameter - sbjs. with biggest diff. favoring ALM\") +\n  theme(legend.title = element_blank(), legend.position=\"right\",plot.title=element_text(hjust=.4)) +ylim(c(-11,-4))\n\n\nvAlm &lt;- c(23,155,184); cAlm &lt;- c(119,85,175)\n\ndifExam &lt;- post_dat_avg  |&gt; filter(x==100,id %in% c(vAlm,cAlm), Fit_Method==\"Test_Train\") |&gt;\n    group_by(id, condit, Model, rank) %&gt;%\n      mutate(flab=paste0(\"Subject: \",id)) |&gt;\n    ggplot(aes(y=log(c), x = id,col=Model)) + \n  stat_pointinterval(position=position_dodge(.1)) +\n   # ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",scales=\"free_y\",ncol=3) + \n      labs(title=\"c parameter - sbjs. with biggest diff. favoring EXAM\") +\n  theme(legend.title = element_blank(), legend.position=\"right\",plot.title=element_text(hjust=.4)) +ylim(c(-11,-4))\n\ndifAlm/difExam\n\n\n\n\n\n\nCodevAlm &lt;- c(29,70,68); cAlm &lt;- c(73,49,128)\n\ndifAlm &lt;-  post_dat_avg  |&gt; filter(x==100,id %in% c(vAlm,cAlm), Fit_Method==\"Test_Train\") |&gt;\n    group_by(id, condit, Model, rank) %&gt;%\n      mutate(flab=paste0(\"Subject: \",id)) |&gt;\n    ggplot(aes(y=lr, x = id,col=Model)) + \n  stat_pointinterval(position=position_dodge(.5)) +\n   # ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",scales=\"free_y\",ncol=3) + \n      labs(title=\"lr parameter - sbjs. with biggest diff. favoring ALM\") +\n  theme(legend.title = element_blank(), legend.position=\"right\",plot.title=element_text(hjust=.4))+ylim(c(0,12))\n\n\nvAlm &lt;- c(23,155,184); cAlm &lt;- c(119,85,175)\n\ndifExam &lt;- post_dat_avg  |&gt; filter(x==100,id %in% c(vAlm,cAlm), Fit_Method==\"Test_Train\") |&gt;\n    group_by(id, condit, Model, rank) %&gt;%\n      mutate(flab=paste0(\"Subject: \",id)) |&gt;\n    ggplot(aes(y=lr, x = id,col=Model)) + \n  stat_pointinterval(position=position_dodge(.1)) +\n   # ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",scales=\"free_y\",ncol=3) + \n      labs(title=\"lr parameter - sbjs. with biggest diff. favoring EXAM\") +\n  theme(legend.title = element_blank(), legend.position=\"right\",plot.title=element_text(hjust=.4)) +ylim(c(0,12))\n\ndifAlm/difExam\n\n\n\n\n\n\n\n\nCode# \n# \n# full_comparison |&gt; filter(Fit_Method==\"Test_Train\") |&gt;\n#   ungroup() |&gt;\n#   mutate(id = reorder(id, Error_difference)) %&gt;%\n#   ggplot(aes(y=id,x=Error_difference,fill=Best_Model))+\n#   geom_col()+\n#   ggh4x::facet_grid2(~condit,axes=\"all\",scales=\"free_y\", independent = \"y\")\n# \n\n# d &lt;- testAvg |&gt; left_join(full_comparison, by=c(\"id\",\"condit\")) |&gt; filter(Fit_Method==\"Test_Train\")\n# \n# \n# \n# d |&gt; ggplot(aes(x=vb,y=vx,fill=condit)) + stat_bar + facet_wrap(Fit_Method~Best_Model2,ncol=2)\n# \n# d |&gt; \n#   group_by(condit,Fit_Method,Best_Model) |&gt; \n#   mutate(nGrp2=n()) |&gt;\n#   filter(abs(Error_difference)&gt;15) |&gt; \n#   ggplot(aes(x=vb,y=dist,fill=condit)) + \n#   stat_bar + facet_wrap(Fit_Method~Best_Model,ncol=2)\n# \n# d |&gt; group_by(condit,Fit_Method,Best_Model) %&gt;% tally() |&gt; mutate(n=n/6)\n# \n# d |&gt; group_by(condit,Fit_Method,Best_Model) |&gt; filter(abs(Error_difference)&gt;15) |&gt; tally() |&gt; mutate(n=n/6)\n# \n# d |&gt; group_by(condit,Fit_Method) |&gt; mutate(m=mean(Error_difference), \n#                                               sd=sd(Error_difference), \n#                                               n=n()/6,se=sd/sqrt(n)) |&gt;\n#    group_by(condit,Fit_Method,Best_Model) |&gt; \n#  # filter(abs(Error_difference)&gt;(2.5*se)) |&gt; \n#   ggplot(aes(x=vb,y=dist,fill=condit)) + \n#   stat_bar + facet_wrap(Fit_Method~Best_Model,ncol=2)\n#   \n\n\nTo add to appendix\n\nCodepost_tabs$agg_x_full |&gt; flextable::tabulator(rows=c(\"Fit_Method\",\"x\"), columns=c(\"condit\",\"Model\"),\n                       `X` = as_paragraph(mean_error)) |&gt; as_flextable()\n\n\n\n\n\n\nFit_Method\nx\n\nConstant\n\nVaried\n\n\n\nALM\n\nEXAM\n\nALM\n\nEXAM\n\n\n\n\nTest\n100\n\n203.3\n\n191.4\n\n233.5\n\n194.8\n\n\n350\n\n249.8\n\n169.0\n\n213.2\n\n193.5\n\n\n600\n\n264.1\n\n199.5\n\n222.4\n\n219.2\n\n\n800\n\n218.2\n\n214.3\n\n243.9\n\n222.9\n\n\n1,000\n\n315.9\n\n245.3\n\n224.4\n\n222.3\n\n\n1,200\n\n409.1\n\n275.9\n\n249.8\n\n237.2\n\n\nTest_Train\n100\n\n195.0\n\n213.2\n\n238.1\n\n217.2\n\n\n350\n\n241.4\n\n183.9\n\n241.0\n\n207.1\n\n\n600\n\n255.3\n\n190.5\n\n270.5\n\n230.0\n\n\n800\n\n244.9\n\n222.0\n\n270.3\n\n257.9\n\n\n1,000\n\n355.3\n\n265.1\n\n276.0\n\n272.2\n\n\n1,200\n\n437.3\n\n297.0\n\n313.8\n\n319.9\n\n\nTrain\n100\n\n519.3\n\n430.2\n\n495.7\n\n498.8\n\n\n350\n\n466.6\n\n310.9\n\n398.6\n\n405.2\n\n\n600\n\n445.4\n\n243.0\n\n347.3\n\n349.0\n\n\n800\n\n260.9\n\n261.2\n\n298.5\n\n300.0\n\n\n1,000\n\n667.3\n\n352.9\n\n311.0\n\n311.0\n\n\n1,200\n\n809.3\n\n443.5\n\n361.3\n\n361.3\n\n\n\n\n\nCode# post_dat  |&gt; group_by(id,condit,Model,Fit_Method,x) |&gt; \n#   mutate(e2=abs(y-pred)) |&gt; \n#   summarise(y1=mean(y), pred1=mean(pred)) |&gt;\n#   group_by(condit,Model,Fit_Method,x) |&gt; \n#   summarise(y=mean(y1), pred=mean(pred1),mean_error=abs(y-pred)) |&gt; \n#   round_tibble(1) |&gt; pander::pandoc.table()\n\n\n# post_dat  |&gt; group_by(id,condit,Model,Fit_Method,x) |&gt;\n#   mutate(e2=abs(y-pred)) |&gt;\n#   summarise(y1=mean(y), pred1=mean(pred)) |&gt;\n#   group_by(condit,Model,Fit_Method) |&gt;\n#   summarise(y=mean(y1), pred=mean(pred1),mean_error=abs(y-pred)) |&gt;\n#   round_tibble(1) |&gt; pander::pandoc.table()\n# \n# post_dat  |&gt; group_by(id,condit,Model,Fit_Method,x) |&gt; \n#   mutate(e2=abs(y-pred),Fit_Method=rename_fm(Fit_Method)) |&gt; \n#   summarise(y1=mean(y), pred1=mean(pred)) |&gt;\n#   group_by(condit,Model,Fit_Method) |&gt; \n#   summarise(y=mean(y1), pred=mean(pred1),mean_error=abs(y-pred)) |&gt; \n#   select(-y,-pred) |&gt;\n#   arrange(condit,Fit_Method) |&gt;\n#   round_tibble(1) |&gt; pander::pandoc.table()\n# \n# \n# \n# post_dat  |&gt; group_by(id,condit,Model,Fit_Method,x) |&gt; \n#   mutate(e2=abs(y-pred),Fit_Method=rename_fm(Fit_Method)) |&gt; \n#   summarise(y1=mean(y), pred1=mean(pred)) |&gt;\n#   group_by(condit,Model,Fit_Method,x) |&gt; \n#   summarise(y2=mean(y1), pred2=mean(pred1)) |&gt; \n#   group_by(condit,Model,Fit_Method) |&gt; \n#   summarise(y=mean(y2), pred=mean(pred2),mean_error=abs(y-pred)) |&gt; \n#   select(-y,-pred) |&gt;\n#   arrange(condit,Fit_Method) |&gt;\n#   round_tibble(1) |&gt; pander::pandoc.table()\n# \n# \n# post_dat  |&gt; group_by(id,condit,Model,Fit_Method,x) |&gt; \n#   mutate(e2=abs(y-pred),Fit_Method=rename_fm(Fit_Method)) |&gt; \n#   summarise(y1=mean(y), pred1=mean(pred),mean_error=abs(y1-pred1)) |&gt;\n#   group_by(id,condit,Model,Fit_Method) |&gt; \n#   summarise(mean_error=mean(mean_error)) |&gt; \n#   group_by(condit,Model,Fit_Method) |&gt;\n#   summarise(mean_error=mean(mean_error)) |&gt; \n#   arrange(condit,Fit_Method) |&gt;\n#   round_tibble(1) |&gt; pander::pandoc.table()",
    "crumbs": [
      "Model",
      "HTW Model e1"
    ]
  },
  {
    "objectID": "Analysis/e1.html",
    "href": "Analysis/e1.html",
    "title": "Experiment 1",
    "section": "",
    "text": "Codepacman::p_load(dplyr,purrr,tidyr,tibble,ggplot2,\n  brms,tidybayes, rstanarm,emmeans,broom,bayestestR,\n  stringr, here,conflicted, patchwork, knitr,kableExtra)\n#options(brms.backend=\"cmdstanr\",mc.cores=4)\noptions(digits=2, scipen=999, dplyr.summarise.inform=FALSE)\nwalk(c(\"brms\",\"dplyr\",\"bayestestR\"), conflict_prefer_all, quiet = TRUE)\nwalk(c(\"Display_Functions\",\"org_functions\"), ~ source(here::here(paste0(\"Functions/\", .x, \".R\"))))\ne1 &lt;- readRDS(here(\"data/e1_08-21-23.rds\")) \ne1Sbjs &lt;- e1 |&gt; group_by(id,condit) |&gt; summarise(n=n())\ntestE1 &lt;- e1 |&gt; filter(expMode2 == \"Test\")\nnbins=5\ntrainE1 &lt;-  e1 |&gt; filter(expMode2==\"Train\") |&gt; group_by(id,condit, vb) |&gt; \n    mutate(Trial_Bin = cut( gt.train, breaks = seq(1, max(gt.train),length.out=nbins+1),include.lowest = TRUE, labels=FALSE)) \ntrainE1_max &lt;- trainE1 |&gt; filter(Trial_Bin == nbins, bandInt==800)\ntrainE1_avg &lt;- trainE1_max |&gt; group_by(id,condit) |&gt; summarise(avg = mean(dist))",
    "crumbs": [
      "Analyses",
      "Experiment 1"
    ]
  },
  {
    "objectID": "Analysis/e2.html",
    "href": "Analysis/e2.html",
    "title": "Experiment 2",
    "section": "",
    "text": "Codepacman::p_load(dplyr,purrr,tidyr,tibble,ggplot2,\n  brms,tidybayes, rstanarm,emmeans,broom,bayestestR,\n  stringr, here,conflicted, patchwork, knitr,kableExtra)\n#options(brms.backend=\"cmdstanr\",mc.cores=4)\noptions(dplyr.summarise.inform = FALSE)\nwalk(c(\"brms\",\"dplyr\",\"bayestestR\"), conflict_prefer_all, quiet = TRUE)\nwalk(c(\"Display_Functions\",\"org_functions\"), ~ source(here::here(paste0(\"Functions/\", .x, \".R\"))))\ne2 &lt;- readRDS(here(\"data/e2_08-04-23.rds\")) \ne2Sbjs &lt;- e2 |&gt; group_by(id,condit) |&gt; summarise(n=n())\ntestE2 &lt;- e2 |&gt; filter(expMode2 == \"Test\")\nnbins=5\ntrainE2 &lt;-  e2 |&gt; filter(expMode2==\"Train\") |&gt; group_by(id,condit, vb) |&gt; \n    mutate(Trial_Bin = cut( gt.train, breaks = seq(1, max(gt.train),length.out=nbins+1),include.lowest = TRUE, labels=FALSE)) \ntrainE2_max &lt;- trainE2 |&gt; filter(Trial_Bin == nbins, bandInt==600)\n\n# e2 |&gt; group_by(condit, bandOrder) |&gt; summarise(n_distinct(id))",
    "crumbs": [
      "Analyses",
      "Experiment 2"
    ]
  },
  {
    "objectID": "Analysis/e3.html",
    "href": "Analysis/e3.html",
    "title": "Experiment 3",
    "section": "",
    "text": "Codepacman::p_load(dplyr,purrr,tidyr,tibble,ggplot2,\n  brms,tidybayes, rstanarm,emmeans,broom,bayestestR,\n  stringr, here,conflicted, patchwork, knitr,kableExtra)\nwalk(c(\"brms\",\"dplyr\",\"bayestestR\"), conflict_prefer_all, quiet = TRUE)\nwalk(c(\"Display_Functions\",\"org_functions\"), ~ source(here::here(paste0(\"Functions/\", .x, \".R\"))))\ne3 &lt;- readRDS(here(\"data/e3_08-04-23.rds\")) |&gt; \n    mutate(trainCon=case_when(\n    bandOrder==\"Original\" ~ \"800\",\n    bandOrder==\"Reverse\" ~ \"600\",\n    TRUE ~ NA_character_\n    ), trainCon=as.numeric(trainCon)) \ne3Sbjs &lt;- e3 |&gt; group_by(id,condit,bandOrder) |&gt; summarise(n=n())\ntestE3 &lt;- e3 |&gt; filter(expMode2 == \"Test\")\n\nnbins=5\ntrainE3 &lt;-  e3 |&gt; filter(expMode2==\"Train\") |&gt; group_by(id,condit,bandOrder, vb) |&gt; \n    mutate(Trial_Bin = cut( gt.train, breaks = seq(1, max(gt.train),length.out=nbins+1),include.lowest = TRUE, labels=FALSE)) \n# bayesian comparison of condits in training\ntrainE3_max &lt;- trainE3 |&gt; filter(Trial_Bin == nbins, bandInt==trainCon)\n\n# e3 |&gt; group_by(condit, bandOrder) |&gt; summarise(n_distinct(id))\n\n\nMethods & Procedure\nThe major adjustment of Experiment 3 is for participants to receive ordinal feedback during training, in contrast to the continuous feedback of the prior experiments. After each training throw, participants are informed whether a throw was too soft, too hard, or correct (i.e. within the target velocity range). All other aspects of the task and design are identical to Experiments 1 and 2. We utilized the order of training and testing bands from both of the prior experiments, thus assigning participants to both an order condition (Original or Reverse) and a training condition (Constant or Varied). Participants were once again recruited from the online Indiana University Introductory Psychology Course pool. Following exclusions, 195 participants were included in the final analysis, n=51 in the Constant-Original condition, n=59 in the Constant-Reverse condition, n=39 in the Varied-Original condition, and n=46 in the Varied-Reverse condition.\nResults\n\nCodebmm_e3_train &lt;- trainE3_max %&gt;% \n  brm(dist ~ condit*bandOrder, \n      file=here(\"data/model_cache/e3_train_deviation\"),\n      data = .,\n      iter = 2000,\n      chains = 4,\n      control = list(adapt_delta = .94, max_treedepth = 13))\n\n# mtr3 &lt;- as.data.frame(describe_posterior(bmm_e3_train, centrality = \"Mean\"))[, c(1,2,4,5,6)]\n# colnames(mtr3) &lt;- c(\"Term\", \"Estimate\",\"95% CrI Lower\", \"95% CrI Upper\", \"pd\")\n# mtr3 |&gt; mutate(across(where(is.numeric), \\(x) round(x, 2))) |&gt;\n#   tibble::remove_rownames() |&gt; \n#   mutate(Term = stringr::str_remove(Term, \"b_\")) |&gt;\n#   kable(escape=F,booktabs=T) \n\ncd3tr1 &lt;- get_coef_details(bmm_e3_train, \"conditVaried\")\ncd3tr2 &lt;-get_coef_details(bmm_e3_train, \"bandOrderReverse\")\ncd3tr3 &lt;-get_coef_details(bmm_e3_train, \"conditVaried:bandOrderReverse\")\n\n\n\n\nTable 1: Experiment 3 - End of training performance. The Intercept represents the average of the baseline (constant condition), and the conditVaried coefficient reflects the difference between the constant and varied groups. A larger positive coefficient indicates a greater deviation (lower accuracy) for the varied group.\n\n\n\n\n\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n121.86\n109.24\n134.60\n1.00\n\n\nconditVaried\n64.93\n36.99\n90.80\n1.00\n\n\nbandOrderReverse\n1.11\n-16.02\n18.16\n0.55\n\n\nconditVaried:bandOrderReverse\n-77.02\n-114.16\n-39.61\n1.00\n\n\n\n\n\n\nTraining. Figure 1 displays the average deviations from the target band across training blocks, and Table 1 shows the results of the Bayesian regression model predicting the deviation from the common band at the end of training (600-800 for reversed order, and 800-1000 for original order conditions). The main effect of training condition is significant, with the varied condition showing larger deviations ( \\(\\beta\\) = 64.93, 95% CrI [36.99, 90.8]; pd = 100%). The main effect of band order is not significant \\(\\beta\\) = 1.11, 95% CrI [-16.02, 18.16]; pd = 55.4%, however the interaction between training condition and band order is significant, with the varied condition showing greater accuracy in the reverse order condition ( \\(\\beta\\) = -77.02, 95% CrI [-114.16, -39.61]; pd = 100%).\n\nCodep1 &lt;- trainE3 |&gt; ggplot(aes(x = Trial_Bin, y = dist, color = condit)) +\n    stat_summary(geom = \"line\", fun = mean) +\n    stat_summary(geom = \"errorbar\", fun.data = mean_se, width = .4, alpha = .7) +\n    ggh4x::facet_nested_wrap(~bandOrder*vb,ncol=3)+\n    scale_x_continuous(breaks = seq(1, nbins + 1)) +\n    theme(legend.title=element_blank()) + \n    labs(y = \"Deviation\", x=\"Training Block\") \n#ggsave(here(\"Assets/figs/e3_train_deviation.png\"), p1, width = 9, height = 8,bg=\"white\")\np1\n\n\n\n\n\n\nFigure 1: E3. Deviations from target band during testing without feedback stage.\n\n\n\n\n\nCode#options(brms.backend=\"cmdstanr\",mc.cores=4)\nmodelFile &lt;- paste0(here::here(\"data/model_cache/\"), \"e3_dist_Cond_Type_RF_2\")\nbmtd3 &lt;- brm(dist ~ condit * bandType*bandOrder + (1|bandInt) + (1|id), \n    data=testE3, file=modelFile,\n    iter=5000,chains=4, control = list(adapt_delta = .94, max_treedepth = 13))\n                        \n# mted3 &lt;- as.data.frame(describe_posterior(bmtd3, centrality = \"Mean\"))[, c(1,2,4,5,6)]\n# colnames(mted3) &lt;- c(\"Term\", \"Estimate\",\"95% CrI Lower\", \"95% CrI Upper\", \"pd\")\n# mted3 |&gt; mutate(across(where(is.numeric), \\(x) round(x, 2))) |&gt;\n#   tibble::remove_rownames() |&gt; \n#   mutate(Term = stringr::str_remove(Term, \"b_\")) |&gt;\n#   kable(booktabs=TRUE) \n\n#ce_bmtd3 &lt;- plot(conditional_effects(bmtd3),points=FALSE,plot=FALSE)\n#wrap_plots(ce_bmtd3)\n\n#ggsave(here::here(\"Assets/figs\", \"e3_cond_effects_dist.png\"), wrap_plots(ce_bmtd3), width=11, height=11, bg=\"white\")\n\ncd3ted1 &lt;- get_coef_details(bmtd3, \"conditVaried\")\ncd3ted2 &lt;-get_coef_details(bmtd3, \"bandTypeExtrapolation\")\ncd3ted3 &lt;-get_coef_details(bmtd3, \"conditVaried:bandTypeExtrapolation\")\ncd3ted4 &lt;-get_coef_details(bmtd3, \"bandOrderReverse\")\ncd3ted5 &lt;-get_coef_details(bmtd3, \"conditVaried:bandOrderReverse\")\ncd3ted6 &lt;-get_coef_details(bmtd3, \"bandTypeExtrapolation:bandOrderReverse\")\ncd3ted7 &lt;-get_coef_details(bmtd3, \"conditVaried:bandTypeExtrapolation:bandOrderReverse\")\n\n\n\n\nTable 2: Experiment 3 testing accuracy. Main effects of condition and band type (training vs. extrapolation), and the interaction between the two factors. Larger coefficient estimates indicate larger deviations from the baselines (constant & trained bands) - and a positive interaction coefficient indicates disproporionate deviation for the varied condition on the extrapolation bands\n\n\n\n\n\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n288.65\n199.45\n374.07\n1.00\n\n\nconditVaried\n-40.19\n-104.68\n23.13\n0.89\n\n\nbandTypeExtrapolation\n-23.35\n-57.28\n10.35\n0.92\n\n\nbandOrderReverse\n-73.72\n-136.69\n-11.07\n0.99\n\n\nconditVaried:bandTypeExtrapolation\n52.66\n14.16\n90.23\n1.00\n\n\nconditVaried:bandOrderReverse\n-37.48\n-123.28\n49.37\n0.80\n\n\nbandTypeExtrapolation:bandOrderReverse\n80.69\n30.01\n130.93\n1.00\n\n\nconditVaried:bandTypeExtrapolation:bandOrderReverse\n30.42\n-21.00\n81.65\n0.87\n\n\n\n\n\n\nTesting Accuracy. Table 2 presents the results of the Bayesian mixed efects model predicting absolute deviation from the target band during the testing stage. There was no significant main effect of training condition,\\(\\beta\\) = -40.19, 95% CrI [-104.68, 23.13]; pd = 89.31%, or band type,\\(\\beta\\) = -23.35, 95% CrI [-57.28, 10.35]; pd = 91.52%. However the effect of band order was significant, with the reverse order condition showing lower deviations, \\(\\beta\\) = -73.72, 95% CrI [-136.69, -11.07]; pd = 98.89%. The interaction between training condition and band type was also significant \\(\\beta\\) = 52.66, 95% CrI [14.16, 90.23]; pd = 99.59%, with the varied condition showing disproprionately large deviations on the extrapolation bands compared to the constant group. There was also a significant interaction between band type and band order, \\(\\beta\\) = 80.69, 95% CrI [30.01, 130.93]; pd = 99.89%, such that the reverse order condition showed larger deviations on the extrapolation bands. No other interactions were significant.\n\n\nCodecondEffects &lt;- function(m,xvar){\n  m |&gt; ggplot(aes(x = {{xvar}}, y = .value, color = condit, fill = condit)) + \n  stat_dist_pointinterval() + \n  stat_halfeye(alpha=.1, height=.5) +\n  theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n  \n}\n\npe3td &lt;- testE3 |&gt;  ggplot(aes(x = vb, y = dist,fill=condit)) +\n    stat_summary(geom = \"bar\", position=position_dodge(), fun = mean) +\n    stat_summary(geom = \"errorbar\", position=position_dodge(.9), fun.data = mean_se, width = .4, alpha = .7) + \n    facet_wrap(~bandOrder,ncol=1) +\n  theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) +\n  labs(x=\"Band\", y=\"Deviation From Target\")\n\n\npe3ce &lt;- bmtd3 |&gt; emmeans( ~condit *bandOrder*bandType) |&gt;\n  gather_emmeans_draws() |&gt;\n condEffects(bandType) + labs(y=\"Absolute Deviation From Band\", x=\"Band Type\") + \n facet_wrap(~bandOrder,ncol=1)\n\np2 &lt;- pe3td + pe3ce + plot_annotation(tag_levels= 'A')\n#ggsave(here::here(\"Assets/figs\", \"e3_test-dev.png\"), p2, width=9, height=8, bg=\"white\")\np2\n\n\n\n\n\n\nFigure 2: E3. A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% confidence intervals.\n\n\n\n\n\nCode##| label: tbl-e3-bmm-vx\n##| tbl-cap: \"Experiment 3. Bayesian Mixed Model Predicting Vx as a function of condition (Constant vs. Varied) and Velocity Band\"\n\ne3_vxBMM &lt;- brm(vx ~ condit * bandOrder * bandInt + (1 + bandInt|id),\n                        data=test,file=paste0(here::here(\"data/model_cache\", \"e3_testVxBand_RF_5k\")),\n                        iter=5000,chains=4,silent=0,\n                        control=list(adapt_delta=0.94, max_treedepth=13))\n\n# m1 &lt;- as.data.frame(describe_posterior(e3_vxBMM, centrality = \"Mean\"))\n# m2 &lt;- fixef(e3_vxBMM)\n# mp3 &lt;- m1[, c(1,2,4,5,6)]\n# colnames(mp3) &lt;- c(\"Term\", \"Estimate\",\"95% CrI Lower\", \"95% CrI Upper\", \"pd\")                       \n# mp3 |&gt; mutate(across(where(is.numeric), \\(x) round(x, 2))) |&gt;\n#   tibble::remove_rownames() |&gt; \n#   mutate(Term = stringr::str_replace_all(Term, \"b_bandInt\", \"Band\")) |&gt;\n#   mutate(Term = stringr::str_remove(Term, \"b_\")) |&gt;\n#   kable(escape=F,booktabs=T)\n\n\n\n#wrap_plots(plot(conditional_effects(e3_vxBMM),points=FALSE,plot=FALSE))\n\ncd1 &lt;- get_coef_details(e3_vxBMM, \"conditVaried\")\nsc1 &lt;- get_coef_details(e3_vxBMM, \"bandInt\")\nintCoef1 &lt;- get_coef_details(e3_vxBMM, \"conditVaried:bandInt\")\nintCoef2 &lt;- get_coef_details(e3_vxBMM, \"bandOrderReverse:bandInt\")\ncoef3 &lt;- get_coef_details(e3_vxBMM,\"conditVaried:bandOrderReverse:bandInt\")\n\n\n\n\nTable 3: Experiment 3. Bayesian Mixed Model Predicting Vx as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\n\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n601.83\n504.75\n699.42\n1.00\n\n\nconditVaried\n12.18\n-134.94\n162.78\n0.56\n\n\nbandOrderReverse\n13.03\n-123.89\n144.67\n0.58\n\n\nBand\n0.49\n0.36\n0.62\n1.00\n\n\nconditVaried:bandOrderReverse\n-338.15\n-541.44\n-132.58\n1.00\n\n\nconditVaried:Band\n-0.04\n-0.23\n0.15\n0.67\n\n\nbandOrderReverse:bandInt\n-0.10\n-0.27\n0.08\n0.86\n\n\nconditVaried:bandOrderReverse:bandInt\n0.42\n0.17\n0.70\n1.00\n\n\n\n\n\n\nTesting Discrimination. The full results of the discrimination model are presented in Table 2. For the purposes of assessing group differences in discrimination, only the coefficients including the band variable are of interest. The baseline effect of band represents the slope cofficient for the constant training - original order condition, this effect was significant \\(\\beta\\) = 0.49, 95% CrI [0.36, 0.62]; pd = 100%. Neither of the two way interactions reached significance, \\(\\beta\\) = -0.04, 95% CrI [-0.23, 0.15]; pd = 66.63%, \\(\\beta\\) = -0.1, 95% CrI [-0.27, 0.08]; pd = 86.35%. However, the three way interaction between training condition, band order, and target band was significant, \\(\\beta\\) = 0.42, 95% CrI [0.17, 0.7]; pd = 99.96% - indicating that the varied condition showed a greater slope coefficient on the reverse order bands, compared to the constant condition - this is clearly shown in Figure 3, where the steepness of the best fitting line for the varied-reversed condition is noticably steeper than the other conditions.\n\nCode##| column: screen-inset-right\n# testE3 |&gt; filter(bandOrder==\"Original\")|&gt; group_by(id,vb,condit) |&gt; plot_distByCondit()\n# testE3 |&gt; filter(bandOrder==\"Reverse\")|&gt; group_by(id,vb,condit) |&gt; plot_distByCondit() +ggtitle(\"test\")\n\ntestE3 |&gt; group_by(id,vb,condit,bandOrder) |&gt; plot_distByCondit() + \n   ggh4x::facet_nested_wrap(bandOrder~condit,scale=\"free_x\")\n\n\n\n\n\n\nFigure 3: e3 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\n\n\n\n\n\nCode##| eval: FALSE\n# pe3tv &lt;- testE3 %&gt;% group_by(id,vb,condit,bandOrder) |&gt; plot_distByCondit() + ggh4x::facet_nested_wrap(bandOrder~condit,scale=\"free_x\")\n\n\ncondEffects &lt;- function(m,xvar){\n  m |&gt; ggplot(aes(x = {{xvar}}, y = .value, color = condit, fill = condit)) + \n  stat_dist_pointinterval() + \n  stat_halfeye(alpha=.1, height=.5) +\n  theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n  \n}\n\npe3vce &lt;- e3_vxBMM |&gt; emmeans( ~condit* bandOrder* bandInt, \n                       at = list(bandInt = c(100, 350, 600, 800, 1000, 1200))) |&gt;\n  gather_emmeans_draws() |&gt; \n  condEffects(bandInt) +\n  facet_wrap(~bandOrder,ncol=1) +\n  stat_lineribbon(alpha = .25, size = 1, .width = c(.95)) +\n  scale_x_continuous(breaks = c(100, 350, 600, 800, 1000, 1200), \n                     labels = levels(testE3$vb), \n                     limits = c(0, 1400)) + \nscale_y_continuous(expand=expansion(add=100),breaks=round(seq(0,2000,by=200),2)) +\n  theme(legend.title=element_blank()) + \n  labs(y=\"Velcoity\", x=\"Band\")\n\nfe &lt;- fixef(e3_vxBMM)[,1]\nfixed_effect_bandInt &lt;- fixef(e3_vxBMM)[,1][\"bandInt\"]\nfixed_effect_interaction1 &lt;- fixef(e3_vxBMM)[,1][\"conditVaried:bandInt\"]\nfixed_effect_interaction2 &lt;- fixef(e3_vxBMM)[,1][\"bandOrderReverse:bandInt\"]\nfixed_effect_interaction3 &lt;- fixef(e3_vxBMM)[,1][\"conditVaried:bandOrderReverse:bandInt\"]\n\nre &lt;- data.frame(ranef(e3_vxBMM, pars = \"bandInt\")$id[, ,'bandInt']) |&gt; \n  rownames_to_column(\"id\") |&gt; \n  left_join(e3Sbjs,by=\"id\") |&gt;\n  mutate(adjust= fixed_effect_bandInt + fixed_effect_interaction1*(condit==\"Varied\") + \n           fixed_effect_interaction2*(bandOrder==\"Reverse\") + \n           fixed_effect_interaction3*(condit==\"Varied\" & bandOrder==\"Reverse\"),\n  slope = Estimate + adjust )\n\npid_den3 &lt;- ggplot(re, aes(x = slope, fill = condit)) + \n  geom_density(alpha=.5) + \n  xlim(c(min(re$slope)-.3, max(re$slope)+.3))+\n  geom_vline(xintercept = 1, linetype=\"dashed\",alpha=.5) +\n   theme(legend.title=element_blank()) + \n  labs(x=\"Slope Coefficient\",y=\"Density\") +\n  facet_wrap(~bandOrder,ncol=1)\n\npid_slopes3 &lt;- re |&gt;  \n    mutate(id=reorder(id,slope)) |&gt;\n  ggplot(aes(y=id, x=slope,fill=condit,color=condit)) + \n    geom_pointrange(aes(xmin=Q2.5+adjust, xmax=Q97.5+adjust)) + \n    geom_vline(xintercept = 1, linetype=\"dashed\",alpha=.5) +\n    theme(legend.title=element_blank(), \n      axis.text.y = element_text(size=6) ) + \n    labs(x=\"Estimated Slope\", y=\"Participant\")  + \n    ggh4x::facet_nested_wrap(bandOrder~condit,axes=\"all\",scales=\"free_y\")\n\np3 &lt;- (pe3vce + pid_den3 + pid_slopes3) + plot_annotation(tag_levels= 'A')\n\n#ggsave(here::here(\"Assets/figs\", \"e3_test-vx.png\"), p3,width=11,height=13, bg=\"white\",dpi=800)\np3\n\n\n\n\n\n\nFigure 4: Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.\n\n\n\n\n\n\n\nFigure 1: E3. Deviations from target band during testing without feedback stage.\nFigure 2: E3. A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% confidence intervals.\nFigure 3: e3 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\nFigure 4: Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.",
    "crumbs": [
      "Analyses",
      "Experiment 3"
    ]
  },
  {
    "objectID": "Analysis/combo_train.html",
    "href": "Analysis/combo_train.html",
    "title": "Learning Curves",
    "section": "",
    "text": "Codepacman::p_load(dplyr,purrr,tidyr,ggplot2,here,conflicted,ggpmisc,patchwork,ggh4x)\nwalk(c(\"dplyr\"), conflict_prefer_all, quiet = TRUE)\nwalk(c(\"Display_Functions\"), ~ source(here::here(paste0(\"Functions/\", .x, \".R\"))))\n\ne1 &lt;- readRDS(here(\"data/e1_08-21-23.rds\")) \ne2 &lt;- readRDS(here(\"data/e2_08-04-23.rds\")) \ne3 &lt;- readRDS(here(\"data/e3_08-04-23.rds\")) \nd &lt;- rbind(e1,e2,e3)\n\n\n\nCodelearn_curve_plot &lt;- function(df, x_var, y_var, color_var, facet_var = NULL, groupVec, nbins, labels = FALSE, y_label=NULL) {\n\n  if (is.null(y_label)) {\n    y_label &lt;- deparse(substitute(y_var))\n  }\n  df |&gt; \n    group_by(!!!syms(groupVec)) |&gt; \n    mutate(Trial_Bin = cut( {{x_var}}, breaks = seq(1, max({{x_var}}),length.out=nbins+1),include.lowest = TRUE, labels = labels)) |&gt; \n    ggplot(aes(x = Trial_Bin, y = {{ y_var }}, color = {{ color_var }})) +\n    stat_summary(aes(color = {{ color_var }}), geom = \"line\", fun = mean) +\n    stat_summary(geom = \"errorbar\", fun.data = mean_se, width = .4, alpha = .7) +\n    #facet_wrap(vars({{facet_var}}), scales = 'free_y') + \n    labs(y = y_label) + # Set the y axis label dynamically\n    scale_x_continuous(breaks = seq(1, nbins + 1)) \n}\n\nnb=6\ne1 |&gt; filter(expMode==\"train\") %&gt;% \n    learn_curve_plot(gt.train,dist,condit,facet_var=vb,groupVec = c(\"id\", \"condit\",\"vb\"),nbins=nb) + facet_wrap(~vb)\n\n\n\n\n\n\nCoded |&gt; filter(expMode==\"train\") %&gt;% \n    learn_curve_plot(gt.train,dist,condit,facet_var=c(\"Exp\",\"vb\"),groupVec = c(\"id\", \"condit\",\"vb\"),nbins=nb) + facet_wrap(~bandOrder*fb*vb,ncol=3)\n\n\n\n\n\n\nCode# d |&gt; group_by(id,condit,vb) |&gt; ggplot(aes(x=gt.train,y=dist,col=condit)) + geom_smooth() + \n#     facet_wrap(~bandOrder*fb*vb,ncol=3)\n# \n# d |&gt; group_by(gt.train,condit) |&gt; ggplot(aes(x=gt.train,y=dist,col=condit)) + geom_smooth(method=\"loess\") + \n#     facet_wrap(~bandOrder*fb*vb,ncol=3)\n\n\n\nCodenbins=4\ntrainE1 &lt;-  e1 |&gt; filter(expMode2==\"Train\") |&gt; group_by(id,condit, vb) |&gt; \n    mutate(Trial_Bin = cut( gt.train, breaks = seq(1, max(gt.train),length.out=nbins+1),include.lowest = TRUE, labels=FALSE)) \ntrainE1_max &lt;- trainE1 |&gt; filter(Trial_Bin == nbins, bandInt==800) |&gt; \n  group_by(id,condit) |&gt; summarize(dist=mean(dist)) |&gt; arrange(dist) |&gt;\n  mutate(id=reorder(id,dist))\n\n\n\nnbins=10\n e1 |&gt; filter(expMode2==\"Train\") |&gt; group_by(id,condit, vb) |&gt; \n    mutate(Trial_Bin = cut( gt.train, breaks = seq(1, max(gt.train),length.out=nbins+1),include.lowest = TRUE, labels=FALSE))  |&gt; filter(expMode==\"train\", id %in% unique(trainE1_max$id)[1:55]) |&gt;\n   ggplot(aes(x = Trial_Bin, y = vx, color = vb)) +\n    stat_summary(geom = \"line\", fun = median) +\n    #stat_summary(geom = \"errorbar\", fun.data = mean_se, width = .4, alpha = .7) +\n    facet_wrap(~id,scales=\"free\")+\n    scale_x_continuous(breaks = seq(1, nbins + 1)) +\n    theme(legend.title=element_blank()) + \n    labs(y = \"Deviation\", x=\"Training Block\") \n\n\n\n\n\n\nCode  e1 |&gt; filter(expMode2==\"Train\") |&gt; group_by(id,condit, vb) |&gt; \n    mutate(Trial_Bin = cut( gt.train, breaks = seq(1, max(gt.train),length.out=nbins+1),include.lowest = TRUE, labels=FALSE))  |&gt; filter(expMode==\"train\", id %in% unique(trainE1_max$id)[1:55]) |&gt;\n    ggplot(aes(x = Trial_Bin, y = dist, color = vb)) +\n    stat_summary(geom = \"line\", fun = median) +\n    #stat_summary(geom = \"errorbar\", fun.data = mean_se, width = .4, alpha = .7) +\n    facet_wrap(~id,scales=\"fixed\")+\n    scale_x_continuous(breaks = seq(1, nbins + 1)) +\n    theme(legend.title=element_blank()) + \n    labs(y = \"Deviation\", x=\"Training Block\") \n\n\n\n\n\n\nCodee1 |&gt; filter(expMode2==\"Train\") |&gt; group_by(id,condit, vb) |&gt; \n    mutate(Trial_Bin = cut( gt.train, breaks = seq(1, max(gt.train),length.out=nbins+1),include.lowest = TRUE, labels=FALSE))  |&gt; filter(expMode==\"train\", id %in% unique(e1$id)[1:55]) |&gt; \n    ggplot(aes(x = Trial_Bin, y = dist,color=condit)) +\n    stat_summary(geom = \"line\", fun = median) +\n    #stat_summary(geom = \"errorbar\", fun.data = mean_se, width = .4, alpha = .7) +\n    facet_wrap(~id,scales=\"free\")+\n    scale_x_continuous(breaks = seq(1, nbins + 1)) +\n    theme(legend.title=element_blank()) + \n    labs(y = \"Deviation\", x=\"Training Block\") \n\n\n\n\n\n\nCodee1  |&gt; group_by(id,condit, vb,expMode2) |&gt; \n  mutate(mt=max(trial)) |&gt;\n    mutate(Trial_Bin = cut( gt.stage, breaks = seq(1, max(gt.stage),length.out=nbins+1),include.lowest = TRUE, labels=FALSE))  |&gt; \n  #filter(expMode==\"train\", id %in% unique(e1$id)[1:55]) |&gt; \n    ggplot(aes(x = Trial_Bin, y = dist,color=condit)) +\n    stat_summary(geom = \"line\", fun = mean) +\n    stat_summary(geom = \"errorbar\", fun.data = mean_se, width = .4, alpha = .7) +\n    ggh4x::facet_wrap2(~expMode2+vb,scales=\"free_x\",ncol=3)+\n    scale_x_continuous(breaks = seq(1, nbins + 1)) +\n    theme(legend.title=element_blank()) + \n    labs(y = \"Deviation\", x=\"Training Block\") \n\n\n\n\n\n\nCodee1  |&gt; group_by(id,condit, vb,expMode2) |&gt; \n  mutate(mt=max(trial)) |&gt;\n    mutate(Trial_Bin = cut( gt.stage, breaks = seq(1, max(gt.stage),length.out=nbins+1),include.lowest = TRUE, labels=FALSE))  |&gt; \n  #filter(expMode==\"train\", id %in% unique(e1$id)[1:55]) |&gt; \n    ggplot(aes(x = Trial_Bin, y = vx,color=vb)) +\n    stat_summary(geom = \"line\", fun = mean) +\n    stat_summary(geom = \"errorbar\", fun.data = mean_se, width = .4, alpha = .7) +\n    ggh4x::facet_wrap2(~expMode2+condit,scales=\"free_x\",ncol=2)+\n    scale_x_continuous(breaks = seq(1, nbins + 1)) +\n    theme(legend.title=element_blank()) + \n    labs(y = \"Deviation\", x=\"Training Block\") \n\n\n\n\n\n\n\n\nCodep1 &lt;- e1  |&gt; group_by(id,condit, vb,expMode2) |&gt; \n    ggplot(aes(x = vb, y = vx,fill=expMode2)) +\n    stat_bar + \n    ggh4x::facet_wrap2(~condit,scales=\"free_x\",ncol=2)+\n    theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\n\np2 &lt;- e1  |&gt; group_by(id,condit, vb,expMode2) |&gt; \n    ggplot(aes(x = expMode2, y = vx,fill=vb)) +\n    stat_bar + \n    ggh4x::facet_wrap2(~condit,scales=\"free_x\",ncol=2)+\n    theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\np1 + p2\n\n\n\n\n\n\nCodep1 &lt;- e1  |&gt; group_by(id,condit, vb,expMode2) |&gt; \n    ggplot(aes(x = vb, y = dist,fill=expMode2)) +\n    stat_bar + \n    ggh4x::facet_wrap2(~condit,scales=\"free_x\",ncol=2)+\n    theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\n\np2 &lt;- e1  |&gt; group_by(id,condit, vb,expMode2) |&gt; \n    ggplot(aes(x = expMode2, y = dist,fill=vb)) +\n    stat_bar + \n    ggh4x::facet_wrap2(~condit,scales=\"free_x\",ncol=2)+\n    theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\np1 + p2\n\n\n\n\n\n\n\nE2\n\nCodep1 &lt;- e2  |&gt; group_by(id,condit, vb,expMode2) |&gt; \n    ggplot(aes(x = vb, y = vx,fill=expMode2)) +\n    stat_bar + \n    ggh4x::facet_wrap2(~condit,scales=\"free_x\",ncol=2)+\n    theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\n\np2 &lt;- e2  |&gt; group_by(id,condit, vb,expMode2) |&gt; \n    ggplot(aes(x = expMode2, y = vx,fill=vb)) +\n    stat_bar + \n    ggh4x::facet_wrap2(~condit,scales=\"free_x\",ncol=2)+\n    theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\np1 + p2\n\n\n\n\n\n\nCodep1 &lt;- e2  |&gt; group_by(id,condit, vb,expMode2) |&gt; \n    ggplot(aes(x = vb, y = dist,fill=expMode2)) +\n    stat_bar + \n    ggh4x::facet_wrap2(~condit,scales=\"free_x\",ncol=2)+\n    theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\n\np2 &lt;- e2  |&gt; group_by(id,condit, vb,expMode2) |&gt; \n    ggplot(aes(x = expMode2, y = dist,fill=vb)) +\n    stat_bar + \n    ggh4x::facet_wrap2(~condit,scales=\"free_x\",ncol=2)+\n    theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\np1 + p2\n\n\n\n\n\n\n\nE3\n\nCodep1 &lt;- e3  |&gt; group_by(id,condit, vb,expMode2) |&gt; \n    ggplot(aes(x = vb, y = vx,fill=expMode2)) +\n    stat_bar + \n    ggh4x::facet_wrap2(~bandOrder+condit,scales=\"free_x\",ncol=2)+\n    theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\n\np2 &lt;- e3  |&gt; group_by(id,condit, vb,expMode2) |&gt; \n    ggplot(aes(x = expMode2, y = vx,fill=vb)) +\n    stat_bar + \n    ggh4x::facet_wrap2(~bandOrder+condit,scales=\"free_x\",ncol=2)+\n    theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\np1 + p2\n\n\n\n\n\n\nCodep1 &lt;- e3  |&gt; group_by(id,condit, vb,expMode2) |&gt; \n    ggplot(aes(x = vb, y = dist,fill=expMode2)) +\n    stat_bar + \n    ggh4x::facet_wrap2(~bandOrder+condit,scales=\"free_x\",ncol=2)+\n    theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\n\np2 &lt;- e3  |&gt; group_by(id,condit, vb,expMode2) |&gt; \n    ggplot(aes(x = expMode2, y = dist,fill=vb)) +\n    stat_bar + \n    ggh4x::facet_wrap2(~bandOrder+condit,scales=\"free_x\",ncol=2)+\n    theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\np1 + p2\n\n\n\n\n\n\n\n\nCodenb=3\nformula &lt;- y ~ poly(x,3,raw=TRUE)\nformula &lt;- y ~ poly(x,2,raw=TRUE)\n\nd  |&gt; filter(expMode==\"train\") %&gt;% group_by(id,gt.train,condit,vb) |&gt;\n    select(id,condit,bandOrder,fb,gt.train,vb,expMode,dist) |&gt;\n    mutate(Trial_Bin = cut( gt.train, breaks = seq(1, nb + 1), include.lowest = TRUE, labels = FALSE)) |&gt; \n    ggplot(aes(x=Trial_Bin,y=dist,col=condit)) + \n    geom_smooth(method=\"lm\",formula=formula) + \n    facet_wrap(~bandOrder*fb*vb,ncol=3)\n\nWarning: Removed 37477 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n\n\n\n\n\nCoded  |&gt; filter(expMode==\"train\") %&gt;% group_by(id,gt.train,condit,vb) |&gt;\n    select(id,condit,bandOrder,fb,gt.train,vb,expMode,dist) |&gt;\n    ggplot(aes(x=gt.train,y=dist,col=condit)) + \n    geom_smooth(method=\"lm\",formula=formula) + \n    facet_wrap(~bandOrder*fb*vb,ncol=3)\n\n\n\n\n\n\nCoded  |&gt; filter(expMode==\"train\",gt.train&lt;=60) %&gt;% group_by(id,gt.train,condit,vb) |&gt;\n    ggplot(aes(x=gt.train,y=dist,col=condit)) + \n    geom_smooth(method=\"lm\",formula=formula) + \n    facet_wrap(~bandOrder*fb*vb,ncol=3) + \n  stat_poly_eq(geom = \"text\", aes(label = after_stat(eq.label)),\n               label.x = c(60, 0), label.y = c(-0.1, 400.1), hjust = \"inward\",\n               formula = formula)\n\nWarning: The `scale_name` argument of `continuous_scale()` is deprecated as of ggplot2\n3.5.0.\n\n\nWarning: The `trans` argument of `continuous_scale()` is deprecated as of ggplot2 3.5.0.\nℹ Please use the `transform` argument instead.\n\n\n\n\n\n\n\nCodemicmen.formula &lt;- y ~ SSmicmen(x, Vm, K)\nd  |&gt; filter(expMode==\"train\",gt.train&lt;=60) %&gt;% group_by(id,gt.train,condit,vb) |&gt;\n    ggplot(aes(x=gt.train,y=dist,col=condit)) + \n    geom_smooth(method=\"nls\",formula = micmen.formula,se=FALSE) + \n    facet_wrap(~bandOrder*fb*vb,ncol=3)\n\n\n\n\n\n\nCoded |&gt;\n  filter(expMode == \"train\", gt.train &lt;= 60) |&gt;\n  group_by(id, gt.train, condit, vb) |&gt;\n  ggplot(aes(x = gt.train, y = dist, col = condit)) +\n  geom_smooth(method = \"nls\", formula = micmen.formula, se = FALSE, method.args = list(start = list(Vm = 1, K = 1))) +\n  facet_wrap(~bandOrder * fb * vb, ncol = 3)\n\n\n\n\n\n\nCode#bf(dist ~ betaMu + (alphaMu - betaMu) * exp(-exp(gammaMu) * gt.train)\n\n\nexp_model_formula &lt;- y ~ a * exp(b * x)\nd |&gt; filter(expMode == \"train\", gt.train &lt;= 60) %&gt;%\n  group_by(id, gt.train, condit, vb) %&gt;%\n  ggplot(aes(x = gt.train, y = dist, col = condit)) +\n  geom_smooth(method = \"nls\", formula = exp_model_formula, se = FALSE, method.args = list(start = list(a = 1, b = 0.1))) +\n  facet_wrap(~bandOrder * fb * vb, ncol = 3)\n\n\n\n\n\n\nCodenb=3\ne1 |&gt; group_by(id) |&gt; \n    select(id,condit,bandOrder,gt.train,vb,expMode2,dist) |&gt;\n    mutate(Block=case_when(expMode2==\"Train\" ~ cut(gt.train,breaks=seq(1,max(gt.train), length.out=nb+1),include.lowest=TRUE,labels=FALSE),expMode2==\"Test\" ~ nb+1)) %&gt;%\n     ggplot(aes(x=Block,y=dist,col=condit)) + \n    geom_smooth(method=\"lm\", formula= formula) + \n    facet_wrap(~vb)\n\nWarning: Removed 8188 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n\n\n\n\n\n\n\nCodethree_param_exp_formula &lt;- y ~ a + (b - a) * exp(-c * x)\nd |&gt; filter(expMode == \"train\", gt.train &lt;= 60) %&gt;%\n  group_by(id, gt.train, condit, vb) %&gt;%\n  ggplot(aes(x = gt.train, y = dist, col = condit)) +\n  geom_smooth(method = \"nls\", \n              formula = three_param_exp_formula, \n              method.args = list(start = list(a = 100, b = 500, c = 0.01)), # Starting values for a, b, c\n              se = FALSE) +\n  facet_wrap(~bandOrder * fb * vb, ncol = 3) \n\nWarning: Failed to fit group 1.\nCaused by error in `method()`:\n! singular gradient\n\n\nWarning: Failed to fit group 2.\nCaused by error in `method()`:\n! singular gradient\n\n\n\n\n\n\n\nCodetwo_param_exp_formula &lt;- y ~ a  * exp(-c * x)\nd |&gt; filter(expMode == \"train\") %&gt;%\n  group_by(id, gt.train, condit, vb) %&gt;%\n  ggplot(aes(x = gt.train, y = dist, col = condit)) +\n  geom_smooth(method = \"nls\", \n              formula = two_param_exp_formula, \n              method.args = list(start = list(a = 500, c = 0.09)), # Starting values for a, b, c\n              se = FALSE) +\n  facet_wrap(~bandOrder * fb * vb, ncol = 3) \n\n\n\n\n\n\n\n\nCodefiltered_data &lt;- d |&gt; \n  filter(expMode == \"train\", gt.train &lt;= 60)\n\n# Fit the model\nnls_fit &lt;- nls(dist ~ a + (b - a) * exp(-c * gt.train), \n               data = filtered_data, \n               start = list(a = 100, b = 500, c = 0.01))\n\n# Extract coefficients\ncoeffs &lt;- coef(nls_fit)\n\n# Create label (customize as needed)\nlabel_text &lt;- sprintf(\"y = %.2f + (%.2f - %.2f) * exp(-%.2f * x)\", coeffs[\"a\"], coeffs[\"b\"], coeffs[\"a\"], coeffs[\"c\"])\n\n# Plot with custom label\nfiltered_data %&gt;%\n  ggplot(aes(x = gt.train, y = dist, col = condit)) +\n  geom_smooth(method = \"nls\", \n              formula = y ~ a + (b - a) * exp(-c * x), \n              method.args = list(start = list(a = 100, b = 500, c = 0.01)),\n              se = FALSE) +\n  ggpp::annotate(\"text\", x = Inf, y = Inf, label = label_text, hjust = 1, vjust = 1, size = 3.5) +\n  facet_wrap(~bandOrder * fb * vb, ncol = 3) \n\nWarning: Failed to fit group 1.\nCaused by error in `method()`:\n! singular gradient\n\n\nWarning: Failed to fit group 2.\nCaused by error in `method()`:\n! singular gradient\n\n\n\n\n\n\n\nCodelibrary(ggpmisc)\n\nd |&gt; filter(expMode == \"train\", gt.train &lt;= 60) %&gt;%\n  group_by(id, gt.train, condit, vb) %&gt;%\n  ggplot(aes(x = gt.train, y = dist, col = condit)) +\n  geom_smooth(method = \"nlsLM\",\n              formula = y ~ three_param_exp_formula(x, a, b, c),\n              method.args = list(start = list(a = 100, b = 500, c = 0.01)),\n              se = FALSE) +\n  # stat_equation(aes(label = after_stat(eq.label)),\n  #               formula = y ~ three_param_exp_formula(x, a, b, c),\n  #               parse = TRUE) +\n  facet_wrap(~bandOrder * fb * vb, ncol = 3)\n\nWarning: Computation failed in `stat_smooth()`.\nCaused by error in `get()`:\n! object 'nlsLM' of mode 'function' was not found\n\n\nWarning: Computation failed in `stat_smooth()`.\nComputation failed in `stat_smooth()`.\nComputation failed in `stat_smooth()`.\nComputation failed in `stat_smooth()`.\nComputation failed in `stat_smooth()`.\nComputation failed in `stat_smooth()`.\nComputation failed in `stat_smooth()`.\nComputation failed in `stat_smooth()`.\nComputation failed in `stat_smooth()`.\nComputation failed in `stat_smooth()`.\nComputation failed in `stat_smooth()`.\nCaused by error in `get()`:\n! object 'nlsLM' of mode 'function' was not found\n\n\n\n\n\n\n\n\nJoin the labels back to the original data\nfiltered_data &lt;- left_join(filtered_data, labels_df, by = c(“condit”, “bandOrder”, “fb”))\nPlot with annotations\nggplot(filtered_data, aes(x = gt.train, y = dist, col = condit)) + geom_smooth(method = “nls”, formula = y ~ a + (b - a) * exp(-c * x), method.args = list(start = list(a = 100, b = 500, c = 0.01)), se = FALSE) + facet_wrap(~bandOrder * fb * vb, ncol = 3) + geom_text(data = labels_df, aes(label = label, x = 50, y = Inf), hjust = 0.5, vjust = 1, size = 3, inherit.aes = FALSE)\n\nCodefit_model_and_return_label &lt;- function(data, condit, bandOrder, fb) {\n  # Default starting parameters\n  start_params &lt;- list(a = 100, b = 500, c = 0.01)\n  \n  # Adjust starting parameters for the problematic condition\n  if (condit == \"Constant\" && fb == \"Ordinal\") {\n    start_params &lt;- list(a = 100, b = 250, c = 0.01)\n  }\n  tryCatch({\n    model &lt;- nls(dist ~ a + (b - a) * exp(-c * gt.train), data = data, start = start_params)\n    coeffs &lt;- coef(model)\n    label=sprintf(\"y = %.2f + (%.2f - %.2f) * exp(-%.2f * x)\", coeffs[\"a\"], coeffs[\"b\"], coeffs[\"a\"], coeffs[\"c\"])\n    data.frame(label = label, a = coeffs[\"a\"], b = coeffs[\"b\"], c = coeffs[\"c\"])\n  }, error = function(e) {\n    # Return NA or some indication of failure\n    return(data.frame(label = NA, a = NA, b = NA, c = NA))\n  })\n}\n\nlabels_df &lt;- filtered_data %&gt;%\n  group_by(condit, bandOrder, fb,vb) %&gt;%\n  nest() %&gt;%\n  mutate(result = map(data, ~fit_model_and_return_label(.x, condit, bandOrder, fb)),\n         data = NULL) %&gt;%\n  unnest(result) %&gt;%\n  ungroup()\n\nhead(labels_df)\n\n# A tibble: 6 × 8\n  condit   fb         vb        bandOrder label                    a     b     c\n  &lt;fct&gt;    &lt;fct&gt;      &lt;fct&gt;     &lt;fct&gt;     &lt;chr&gt;                &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Varied   Continuous 1000-1200 Original  y = 199.90 + (551.8…  200.  552. 0.247\n2 Varied   Continuous 1200-1400 Original  y = 251.42 + (553.9…  251.  554. 0.156\n3 Varied   Continuous 800-1000  Original  y = 192.56 + (375.6…  193.  376. 0.171\n4 Constant Continuous 800-1000  Original  y = 123.33 + (473.5…  123.  474. 0.236\n5 Constant Continuous 600-800   Reverse   y = 105.74 + (513.6…  106.  514. 0.308\n6 Varied   Continuous 350-550   Reverse   y = 102.66 + (502.0…  103.  502. 0.386\n\nCodegenerate_predictions &lt;- function(x, a, b, c) {\n  return(a + (b - a) * exp(-c * x))\n}\n\n\nplot_data &lt;- filtered_data %&gt;%\n  left_join(labels_df, by = c(\"condit\", \"bandOrder\", \"fb\"))\n\nWarning in left_join(., labels_df, by = c(\"condit\", \"bandOrder\", \"fb\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\nCode# Define a sequence of x values for generating model predictions (adjust as needed)\nx_vals &lt;- seq(min(filtered_data$gt.train), max(filtered_data$gt.train), length.out = 100)\n\n# Create a new data frame for model predictions\npredictions_data &lt;- labels_df %&gt;%\n  mutate(x = list(x_vals)) %&gt;%\n  unnest(x) %&gt;%\n  mutate(y = pmap_dbl(list(a, b, c, x), ~ generate_predictions(..4, ..1, ..2, ..3)))\n\n# Plot\nggplot() +\n  #geom_point(data = plot_data, aes(x = gt.train, y = dist, color = condit), alpha = 0.6) +\n  geom_line(data = predictions_data, aes(x = x, y = y, color = condit), size = 1) +\n  facet_wrap(~ bandOrder * fb , ncol = 2, scales = \"free_y\") +\n  labs(x = \"GT Train\", y = \"Dist\") +\n  theme_minimal()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\nCodeggplot(filtered_data, aes(x = gt.train, y = dist, color = condit)) +\n  geom_point() +\n  stat_function(fun = function(x) with(labels_df[1, ], a + (b - a) * exp(-c * x)),\n                linetype = \"dashed\", color = \"black\", size = 1) +\n  facet_grid(fb ~ bandOrder, labeller = label_both) +\n  labs(title = \"Model Fits of Learning Curves\",\n       x = \"Training Generation\",\n       y = \"Distance\",\n       color = \"Condition\") +\n  theme_bw()\n\n\n\n\n\n\n\ncreate learning models for condit and varied groups.\nWe can model the relation between performance and the number of practice trials as a power law function, or exponential function. Aggregatign over ids in dst. The models predict dist as an exponential decay function of trial number. Band is an additional predictor.\n\\[\nf_p(t) = \\alpha + \\beta t^{r} \\enspace\n\\]\n\\[\nf_e(t) = \\alpha + \\beta e^{rt} \\enspace\n\\]\n\nCode# fit exponential decay model as a function of trial number\n\nfit_exp &lt;- function(trial,dist,input){\n    # fit exponential decay model as a function of trial number, band is an additional predictor\n    fit &lt;- nls(dist ~ yf + (y0-yf) * exp(-r*trial) + beta2*input, start = list(yf = 300, y0 = 364, beta2=0, r = .1), data = data.frame(trial=trial,dist=dist,input=input))\n\n    # extract parameters\n    alpha &lt;- coef(fit)[1]\n    beta &lt;- coef(fit)[2]\n    beta2 &lt;- coef(fit)[3]\n    r &lt;- coef(fit)[4]\n    sigma_e &lt;- summary(fit)$sigma\n\n    # compute negative log likelihood\n    nllh &lt;- negative_llh_exp(dist, trial, alpha, beta, r, sigma_e)\n\n    # return parameters and negative log likelihood\n    return(list(alpha=alpha,beta=beta,beta2=beta2,r=r,sigma_e=sigma_e,nllh=nllh))\n}\n\n# Compute group averages for dist over trial and band. dst \n\navgTrain &lt;- e1 |&gt; filter(expMode2==\"Train\") %&gt;% group_by(id,condit,gt.train,vb,bandInt) %&gt;% \n  summarise(dist=mean(dist)) %&gt;% ungroup() %&gt;% \n  group_by(condit,gt.train,vb,bandInt) %&gt;% \n  summarise(dist=mean(dist)) %&gt;% ungroup()\n \nggplot(avgTrain,aes(x=gt.train,y=dist)) + geom_line(aes(group=vb,color=vb)) +facet_grid(~condit)\n\navgTrain %&gt;% filter(condit==\"Constant\") %&gt;% nls(dist ~ yf + (y0-yf) * exp(-r*gt.train), start = list(yf = 120, y0 = 364, r = .1), data = .) %&gt;% summary()\n\navgTrain %&gt;% filter(condit==\"Constant\") %&gt;% nls(dist ~ SSasymp(gt.train, yf, y0, log_alpha),data=.)\n\nfit_condit &lt;- avgTrain %&gt;% group_by(condit) %&gt;% do(fit_exp(trial=.$gt.train,dist=.$dist,input=.$bandInt))\n\n\n#avgTrain %&gt;% group_by(condit) |&gt; mutate(fit=map(~fit_exp(trial=gt.train,dist=dist,input=bandInt)))\n\n\nInterpretation of improvement_model:\nThe intercept represents the performance when all factors are at their reference levels (Constant condition, original category order, and continuous feedback type). Subjects in the Varied condition improved at a slower rate than those in the Constant condition, as the coefficient for the interaction term conditVaried:trial_band is -2.37284, with a t-value of -6.940. Subjects in the Varied condition with reversed category order showed a greater decrease in performance, as the coefficient for the interaction term conditVaried:bandOrderrev is -43.67731, with a t-value of -2.323. Other significant factors and interactions include trial_band, bandOrderrev, trial_band:bandOrderrev, and trial_band:fbordinal. Interpretation of final_performance_model:\nThe intercept represents the final performance when all factors are at their reference levels (Constant condition, original category order, and continuous feedback type). Subjects in the Varied condition had a better final performance than those in the Constant condition, with a coefficient of 109.73 and a t-value of 4.362. The interaction between the Varied condition and reversed category order (conditVaried:bandOrderrev) had a negative impact on the final performance, with a coefficient of -92.75 and a t-value of -2.342. The interaction between the Varied condition and ordinal feedback type (conditVaried:fbordinal) also had a negative impact on the final performance, with a coefficient of -85.44 and a t-value of -2.079. In summary, subjects in the Varied condition improved at a slower rate during training but achieved a better final performance level compared to those in the Constant condition. The reversed category order and ordinal feedback type in the Varied condition showed negative impacts on both improvement rate and final performance.\nExponential learning model\n\nCodelibrary(dplyr)\nlibrary(tidyr)\nlibrary(nls.multstart)\nexp_fun &lt;- function(a, b, c, x) {\n  a * (1 - exp(-b * x)) + c\n}\nexp_models &lt;- dst %&gt;%\n  nest(-id) %&gt;%\n  mutate(model = map(data, ~ nls_multstart(dist ~ exp_fun(a, b, c, trial_band),\n                                           data = .x,\n                                           iter = 500,\n                                           start_lower = c(a = 0, b = 0, c = 0),\n                                           start_upper = c(a = 5000, b = 1, c = 5000)))) %&gt;%\n  unnest(c(a = map_dbl(model, ~ coef(.x)['a']),\n           b = map_dbl(model, ~ coef(.x)['b']),\n           c = map_dbl(model, ~ coef(.x)['c'])))\ngroup_averages &lt;- exp_models %&gt;%\n  group_by(condit, bandOrder, fb) %&gt;%\n  summarise(a_avg = mean(a), b_avg = mean(b), c_avg = mean(c))\naic_improvement &lt;- AIC(improvement_model)\naic_final_performance &lt;- AIC(final_performance_model)\nexp_models &lt;- exp_models %&gt;%\n  mutate(aic = map_dbl(model, AIC))\n\naic_exp_avg &lt;- exp_models %&gt;%\n  summarise(aic_avg = mean(aic))",
    "crumbs": [
      "Misc",
      "Learning Curves"
    ]
  },
  {
    "objectID": "Analysis/e1_test.html#parameter-median-95-ci-pd-rope-in-rope-rhat-ess",
    "href": "Analysis/e1_test.html#parameter-median-95-ci-pd-rope-in-rope-rhat-ess",
    "title": "HTW E1 Testing",
    "section": "Parameter | Median | 95% CI | pd | ROPE | % in ROPE | Rhat | ESS",
    "text": "Parameter | Median | 95% CI | pd | ROPE | % in ROPE | Rhat | ESS\n(Intercept) | 41.58 | [ -62.85, 136.23] | 82.20% | [-29.55, 29.55] | 33.16% | 1.014 | 142.00 conditVaried | 69.52 | [ -32.25, 154.69] | 90.30% | [-29.55, 29.55] | 18.84% | 1.046 | 70.00 bandTypeExtrapolation | 97.03 | [ 45.56, 151.52] | 100% | [-29.55, 29.55] | 0% | 1.000 | 280.00 train_end | 1.04 | [ 0.45, 1.51] | 99.90% | [-29.55, 29.55] | 100% | 1.010 | 108.00 conditVaried:bandTypeExtrapolation | -76.11 | [-132.46, -22.04] | 99.90% | [-29.55, 29.55] | 2.00% | 1.000 | 268.00 conditVaried:train_end | -0.57 | [ -1.11, 0.11] | 95.10% | [-29.55, 29.55] | 100% | 1.029 | 84.00 bandTypeExtrapolation:train_end | -0.27 | [ -0.58, 0.09] | 92.00% | [-29.55, 29.55] | 100% | 1.006 | 204.00 conditVaried:bandTypeExtrapolation:train_end | 0.89 | [ 0.52, 1.24] | 100% | [-29.55, 29.55] | 100% | 1.005 | 206.00\nE1 Results Discussion\nNEEDS TO BE WRITTEN",
    "crumbs": [
      "Analyses",
      "HTW E1 Testing"
    ]
  },
  {
    "objectID": "Analysis/combo_test.html",
    "href": "Analysis/combo_test.html",
    "title": "HTW All Exp Testing",
    "section": "",
    "text": "Codepacman::p_load(dplyr,purrr,tidyr,tibble,ggplot2,\n  brms,tidybayes, rstanarm,emmeans,broom,bayestestR,\n  stringr, here,conflicted, patchwork, knitr,kableExtra,ggh4x,ggpattern)\n\nconflict_prefer_all(\"dplyr\", quiet = TRUE)\noptions(scipen = 999)\nwalk(c(\"Display_Functions\",\"fun_alm\",\"fun_indv_fit\",\"fun_model\"), ~ source(here::here(paste0(\"Functions/\", .x, \".R\"))))\n\ne1 &lt;- readRDS(here(\"data/e1_08-21-23.rds\")) \ne2 &lt;- readRDS(here(\"data/e2_08-04-23.rds\")) \ne3 &lt;- readRDS(here(\"data/e3_08-04-23.rds\")) \n\n# combine all 3 experiments\nd &lt;- rbind(e1,e2,e3)\n\nd &lt;- d |&gt; \n    mutate(trainCon=case_when(\n    bandOrder==\"Original\" ~ \"800\",\n    bandOrder==\"Reverse\" ~ \"600\",\n    TRUE ~ NA_character_\n    ), trainCon=as.numeric(trainCon)) \n\n\nnbins=5\ntrain &lt;-  d |&gt; filter(expMode2==\"Train\") |&gt; group_by(id,condit,fb,bandOrder, vb) |&gt; \n    mutate(Trial_Bin = cut( gt.train, breaks = seq(1, max(gt.train),length.out=nbins+1),include.lowest = TRUE, labels=FALSE)) \ntrain_max &lt;- train |&gt; filter(Trial_Bin == nbins, bandInt==trainCon)\ntrain_avg &lt;- train_max |&gt; group_by(id,condit,fb,bandOrder) |&gt; summarise(train_end = mean(dist))\ntrain_avg2 &lt;- train_max |&gt; select(id,condit,fb,bandOrder,expMode2,vb,bandInt,dist,vx)\n\ntest2 &lt;- d |&gt; filter(expMode2==\"Test\") |&gt; \n  select(id,condit,fb,bandOrder,expMode2,vb,bandInt,dist,vx) |&gt; \n  rbind(train_avg2) |&gt;\n  left_join(train_avg, by=c(\"id\",\"condit\", \"fb\", \"bandOrder\")) \n\ntest &lt;- d |&gt; filter(expMode2==\"Test\") |&gt; left_join(train_avg, by=c(\"id\",\"condit\", \"fb\", \"bandOrder\")) |&gt;\n  select(id,condit,bandType,bandInt,vb,vx,dist,train_end,fb,bandOrder)",
    "crumbs": [
      "Analyses",
      "HTW All Exp Testing"
    ]
  },
  {
    "objectID": "Analysis/combo_test.html#testing-deviation",
    "href": "Analysis/combo_test.html#testing-deviation",
    "title": "HTW All Exp Testing",
    "section": "Testing Deviation",
    "text": "Testing Deviation\n\nCoded |&gt; filter(expMode2==\"Test\") |&gt; ggplot(aes(x = vb, y = dist,fill=condit)) +\n  stat_bar\n\n\n\n\n\n\nCoded |&gt; filter(expMode2==\"Test\") |&gt; ggplot(aes(x = condit, y = dist,fill=vb)) +\n  stat_bar + facet_wrap(~Exp)\n\n\n\n\n\n\nCoded |&gt; filter(expMode2==\"Test\") |&gt; ggplot(aes(x = condit, y = dist,fill=vb)) +\n  stat_bar + facet_wrap(fb~bandOrder)\n\n\n\n\n\n\nCodek1 &lt;- d |&gt;\n  filter(expMode2 == \"Test\") |&gt;\n  group_by(condit, bandType, fb, bandOrder, vb) |&gt;  # No need for 'id' if not used later\n  summarise(se_dist = sd(dist) / sqrt(n()),dist = mean(dist))\n\nep1 &lt;- d |&gt;\n  filter(expMode2 == \"Test\") |&gt;\n  group_by(condit, bandType, fb, bandOrder, vb) |&gt;  # No need for 'id' if not used later\n  summarise(se_dist = sd(dist) / sqrt(n()),dist = mean(dist)) |&gt;\n  ggplot(aes(x = condit, y = dist, fill = vb,\n             pattern=bandType,\n             pattern_density=0.35,\n             pattern_fill=bandType, \n             ppatern_angle=bandType,\n            )) +\n   geom_bar_pattern(stat = \"identity\", \n                   # pattern_density=.25,\n                    position = position_dodge()) + \n  geom_errorbar(aes(ymin = dist - se_dist, ymax = dist + se_dist),position = position_dodge()) +\n  facet_wrap2(~fb*bandOrder,axes=\"all\") +\n  labs(title=\"Testing Deviation\",pattern = \"Band Type\") +\n  # scale_pattern_manual(values = c(\"stripe\", \"circle\"))\n  scale_pattern_spacing_discrete(range = c(0.01, 0.05)) \n\n\nep2 &lt;- d |&gt;\n  filter(expMode2 == \"Test\") |&gt;\n  group_by(condit, bandType, fb, bandOrder, vb) |&gt;  # No need for 'id' if not used later\n  summarise(se_dist = sd(dist) / sqrt(n()),dist = mean(dist)) |&gt;\n  ggplot(aes(x = vb, y = dist, fill = condit, pattern=bandType)) +\n   geom_bar_pattern(stat = \"identity\", \n                    \n                    position = position_dodge()) + \n  geom_errorbar(aes(ymin = dist - se_dist, ymax = dist + se_dist),position = position_dodge()) +\n  facet_wrap2(~fb*bandOrder,axes=\"all\") +\n  labs(title=\"Testing Deviation\",pattern = \"Band Type\") +\n   scale_pattern_manual(values = c(\"stripe\", \"circle\"))\n\nep1/ep2\n\nWarning: The `scale_name` argument of `discrete_scale()` is deprecated as of ggplot2\n3.5.0.\n\n\nWarning: The `scale_name` argument of `continuous_scale()` is deprecated as of ggplot2\n3.5.0.\n\n\nWarning: The `trans` argument of `continuous_scale()` is deprecated as of ggplot2 3.5.0.\nℹ Please use the `transform` argument instead.",
    "crumbs": [
      "Analyses",
      "HTW All Exp Testing"
    ]
  },
  {
    "objectID": "Analysis/e1.html#references",
    "href": "Analysis/e1.html#references",
    "title": "HTW E1",
    "section": "References",
    "text": "References\n\n\nBürkner, P.-C. (2017). Brms: An R Package for Bayesian Multilevel Models Using Stan. Journal of Statistical Software, 80, 1–28. https://doi.org/10.18637/jss.v080.i01\n\n\nMakowski, D., Ben-Shachar, M. S., & Lüdecke, D. (2019). bayestestR: Describing Effects and their Uncertainty, Existence and Significance within the Bayesian Framework. Journal of Open Source Software, 4(40), 1541. https://doi.org/10.21105/joss.01541\n\n\nRaviv, L., Lupyan, G., & Green, S. C. (2022). How variability shapes learning and generalization. Trends in Cognitive Sciences, S1364661322000651. https://doi.org/10.1016/j.tics.2022.03.007\n\n\nSoderstrom, N. C., & Bjork, R. A. (2015). Learning versus performance: An integrative review. Perspectives on Psychological Science, 10(2), 176–199. https://doi.org/10.1177/1745691615569000\n\n\nTeam, R. C. (2020). R: A Language and Environment for Statistical Computing. R: A Language and Environment for Statistical Computing.\n\n\n\n\n\nFigure 1: E1. Deviations from target band during training\nFigure 2: E1. A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% confidence intervals.\nFigure 3: Experiment 1. Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.",
    "crumbs": [
      "Analyses",
      "HTW E1"
    ]
  },
  {
    "objectID": "Analysis/e1_debug.html",
    "href": "Analysis/e1_debug.html",
    "title": "HTW E1",
    "section": "",
    "text": "Codepacman::p_load(dplyr,purrr,tidyr,tibble,ggplot2,\n  brms,tidybayes, rstanarm,emmeans,broom,bayestestR,\n  stringr, here,conflicted, patchwork, knitr,kableExtra)\n#options(brms.backend=\"cmdstanr\",mc.cores=4)\nwalk(c(\"brms\",\"dplyr\",\"bayestestR\"), conflict_prefer_all, quiet = TRUE)\nwalk(c(\"Display_Functions\",\"org_functions\"), ~ source(here::here(paste0(\"Functions/\", .x, \".R\"))))\ne1 &lt;- readRDS(here(\"data/e1_08-21-23.rds\")) \ne1Sbjs &lt;- e1 |&gt; group_by(id,condit) |&gt; summarise(n=n())\ntestE1 &lt;- e1 |&gt; filter(expMode2 == \"Test\")\nnbins=5\ntrainE1 &lt;-  e1 |&gt; filter(expMode2==\"Train\") |&gt; group_by(id,condit, vb) |&gt; \n    mutate(Trial_Bin = cut( gt.train, breaks = seq(1, max(gt.train),length.out=nbins+1),include.lowest = TRUE, labels=FALSE)) \ntrainE1_max &lt;- trainE1 |&gt; filter(Trial_Bin == nbins, bandInt==800)\ntrainE1_avg &lt;- trainE1_max |&gt; group_by(id,condit) |&gt; summarise(avg = mean(dist))\n\n\nAnalyses Strategy\nAll data processing and statistical analyses were performed in R version 4.32 Team (2020). To assess differences between groups, we used Bayesian Mixed Effects Regression. Model fitting was performed with the brms package in R Bürkner (2017), and descriptive stats and tables were extracted with the BayestestR package Makowski et al. (2019). Mixed effects regression enables us to take advantage of partial pooling, simultaneously estimating parameters at the individual and group level. Our use of Bayesian, rather than frequentist methods allows us to directly quantify the uncertainty in our parameter estimates, as well as circumventing convergence issues common to the frequentist analogues of our mixed models.\nEach model was set to run with 4 chains, 5000 iterations per chain, with the first 2500 discarded as warmup chains. Rhat values were within an acceptable range, with values &lt;=1.02 (see appendix for diagnostic plots). We used uninformative priors for the fixed effects of the model (condition and velocity band), and weakly informative Student T distributions for for the random effects. For each model, we report the median values of the posterior distribution, and 95% credible intervals. EXPLAIN WHAT PARAMETERS REPRESENT AND WHAT HDI & PD\nFor the testing phase of all experiments, we compare varied and constant performance across two measures, deviation and discrimination. Deviation was quantified as the absolute deviation from the nearest boundary of the velocity band, or set to 0 if the throw velocity fell anywhere inside the target band. Thus, when the target band was 600-800, throws of 400, 650, and 1100 would result in deviation values of 200, 0, and 300, respectively. The degree of discrimination between bands was measured by fitting a linear model to the testing throws of each subjects, with the lower end of the target velocity band as the predicted variable, and the x velocity produced by the participants as the predictor variable. Participants who reliably discriminated between velocity bands tended to have positive slopes with values ~1, while participants who made throws irrespective of the current target band would have slopes ~0.\n\\[\\begin{equation}\ndist_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot band_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot band_{ij} + b_{0i} + b_{1i} \\cdot band_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\nResults\n\nCodep1 &lt;- trainE1 |&gt; ggplot(aes(x = Trial_Bin, y = dist, color = condit)) +\n    stat_summary(geom = \"line\", fun = mean) +\n    stat_summary(geom = \"errorbar\", fun.data = mean_se, width = .4, alpha = .7) +\n    facet_wrap(~vb)+\n    scale_x_continuous(breaks = seq(1, nbins + 1)) +\n    theme(legend.title=element_blank()) + \n    labs(y = \"Deviation\", x=\"Training Block\") \n#ggsave(here(\"Assets/figs/e1_train_deviation.png\"), p1, width = 8, height = 6,bg=\"white\")\n\n\n\n\n\n\n\nFigure 1: E1. Deviations from target band during training\n\n\n\nCode##| label: tbl-e1-train-dist\n##| tbl-cap: \"Experiment 1 - Learning curves. \"\n##| output: asis\n\nbmm_e1_train&lt;- trainE1_max %&gt;% \n  brm(dist ~ condit, \n      file=here(\"data/model_cache/e1_train_deviation\"),\n      data = .,\n      iter = 2000,\n      chains = 4,\n      control = list(adapt_delta = .94, max_treedepth = 13))\nmtr1 &lt;- as.data.frame(describe_posterior(bmm_e1_train, centrality = \"Mean\"))[, c(1,2,4,5,6)]\ncolnames(mtr1) &lt;- c(\"Term\", \"Estimate\",\"95% CrI Lower\", \"95% CrI Upper\", \"pd\")\n\n# mtr1 |&gt; mutate(across(where(is.numeric), \\(x) round(x, 2))) |&gt;\n#   tibble::remove_rownames() |&gt; \n#   mutate(Term = stringr::str_remove(Term, \"b_\")) |&gt;\n#    kable(booktabs = TRUE)\n\ncdtr1 &lt;- get_coef_details(bmm_e1_train, \"conditVaried\")\n\n\n\n\n\nFigure 1: E1. Deviations from target band during training\n\n\nReferences\n\nBürkner, P.-C. (2017). Brms: An R Package for Bayesian Multilevel Models Using Stan. Journal of Statistical Software, 80, 1–28. https://doi.org/10.18637/jss.v080.i01\n\n\nMakowski, D., Ben-Shachar, M. S., & Lüdecke, D. (2019). bayestestR: Describing Effects and their Uncertainty, Existence and Significance within the Bayesian Framework. Journal of Open Source Software, 4(40), 1541. https://doi.org/10.21105/joss.01541\n\n\nTeam, R. C. (2020). R: A Language and Environment for Statistical Computing. R: A Language and Environment for Statistical Computing."
  },
  {
    "objectID": "Analysis/e1.html#e1-discussion",
    "href": "Analysis/e1.html#e1-discussion",
    "title": "Experiment 1",
    "section": "E1 Discussion",
    "text": "E1 Discussion\nIn Experiment 1, we investigated how variability in training influenced participants’ ability learn and extrapolate in a visuomotor task. Our findings that training with variable conditions rresulted in lower final training performance is consistent with much of the prior researchon the influence of training variability (Raviv et al., 2022; Soderstrom & Bjork, 2015), and is particularly unsurprising in the present work, given that the constant group received three times the amount of training on the velocity band common to the two conditions.\nMore importantly, the varied training group exhibited significantly larger deviations from the target velocity bands during the testing phase, particularly for the extrapolation bands that were not encountered by either condition during training.\n\n\n\nFigure 1: E1. Deviations from target band across training blocks.\nFigure 2: E1. A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% credible intervals.\nFigure 3: E1 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\nExperiment 1. Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.",
    "crumbs": [
      "Analyses",
      "Experiment 1"
    ]
  },
  {
    "objectID": "Analysis/e2.html#e2-discussion",
    "href": "Analysis/e2.html#e2-discussion",
    "title": "Experiment 2",
    "section": "E2 Discussion",
    "text": "E2 Discussion\nExperiment 2 extended the findings of Experiment 1 by examining the effects of training variability on extrapolation performance in a visuomotor function learning task, but with reversed training and testing bands. Similar to Experiment 1, the Varied group exhibited poorer performance during training and testing. However unlike experiment 1, the Varied group did not show a significant difference in discrimination between bands.\n\n\n\nFigure 2: E2. Deviations from target band across training blocks.\nFigure 3: A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% confidence intervals.\nFigure 4: E2 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\nConditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.",
    "crumbs": [
      "Analyses",
      "Experiment 2"
    ]
  },
  {
    "objectID": "Sections/Results.html#e1-discussion",
    "href": "Sections/Results.html#e1-discussion",
    "title": "Experiment 3",
    "section": "\n2 E1 Discussion",
    "text": "2 E1 Discussion\nIn Experiment 1, we investigated how variability in training influenced participants’ ability learn and extrapolate in a visuomotor task. Our findings that training with variable conditions rresulted in lower final training performance is consistent with much of the prior researchon the influence of training variability (Raviv et al., 2022; Soderstrom & Bjork, 2015), and is particularly unsurprising in the present work, given that the constant group received three times the amount of training on the velocity band common to the two conditions.\nMore importantly, the varied training group exhibited significantly larger deviations from the target velocity bands during the testing phase, particularly for the extrapolation bands that were not encountered by either condition during training.",
    "crumbs": [
      "Sections",
      "Results"
    ]
  },
  {
    "objectID": "Sections/Results.html#e2-discussion",
    "href": "Sections/Results.html#e2-discussion",
    "title": "Experiment 3",
    "section": "\n4 E2 Discussion",
    "text": "4 E2 Discussion\nExperiment 2 extended the findings of Experiment 1 by examining the effects of training variability on extrapolation performance in a visuomotor function learning task, but with reversed training and testing bands. Similar to Experiment 1, the Varied group exhibited poorer performance during training and testing. However unlike experiment 1, the Varied group did not show a significant difference in discrimination between bands.",
    "crumbs": [
      "Sections",
      "Results"
    ]
  },
  {
    "objectID": "Sections/Results.html#references-1",
    "href": "Sections/Results.html#references-1",
    "title": "Experiment 3",
    "section": "\n7 References",
    "text": "7 References\n\n\nBürkner, P.-C. (2017). Brms: An R Package for Bayesian Multilevel Models Using Stan. Journal of Statistical Software, 80, 1–28. https://doi.org/10.18637/jss.v080.i01\n\n\nMakowski, D., Ben-Shachar, M. S., & Lüdecke, D. (2019). bayestestR: Describing Effects and their Uncertainty, Existence and Significance within the Bayesian Framework. Journal of Open Source Software, 4(40), 1541. https://doi.org/10.21105/joss.01541\n\n\nRaviv, L., Lupyan, G., & Green, S. C. (2022). How variability shapes learning and generalization. Trends in Cognitive Sciences, S1364661322000651. https://doi.org/10.1016/j.tics.2022.03.007\n\n\nSoderstrom, N. C., & Bjork, R. A. (2015). Learning versus performance: An integrative review. Perspectives on Psychological Science, 10(2), 176–199. https://doi.org/10.1177/1745691615569000\n\n\nTeam, R. C. (2020). R: A Language and Environment for Statistical Computing. R: A Language and Environment for Statistical Computing.\n\n\n\n\n\nFigure 1: E1. Deviations from target band during training\nFigure 2: E1. A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% confidence intervals.\nFigure 3: E1 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\nExperiment 1. Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.\nFigure 4: Experiment 1. Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.\nFigure 6: E2. Deviations from target band across training blocks.\nFigure 7: E2. A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% confidence intervals.\nFigure 8: E2 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\nConditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.\nFigure 9: E3. Deviations from target band across training blocks.\nFigure 10: E3. A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% confidence intervals.\nFigure 11: e3 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\nFigure 12: Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.",
    "crumbs": [
      "Sections",
      "Results"
    ]
  },
  {
    "objectID": "Sections/Results.html#results-summary",
    "href": "Sections/Results.html#results-summary",
    "title": "Experiment 3",
    "section": "\n6 Results Summary",
    "text": "6 Results Summary",
    "crumbs": [
      "Sections",
      "Results"
    ]
  },
  {
    "objectID": "Sections/Results.html#overall-summary-of-experiments-1-3",
    "href": "Sections/Results.html#overall-summary-of-experiments-1-3",
    "title": "Experiment 3",
    "section": "\n7 Overall Summary of Experiments 1-3",
    "text": "7 Overall Summary of Experiments 1-3\nAcross three experiments, we investigated the impact of training variability on learning, transfer, and extrapolation in a visuomotor function learning task. In Experiment 1, participants in the varied training condition, who experienced a wider range of velocity bands during training, showed lower accuracy at the end of training compared to those in the constant training condition. Crucially, during the testing phase, the varied group exhibited significantly larger deviations from the target velocity bands, particularly for the extrapolation bands that were not encountered during training. The varied group also showed less discrimination between velocity bands, as evidenced by shallower slopes when predicting response velocity from target velocity band.\nExperiment 2 extended these findings by reversing the order of the training and testing bands. Similar to Experiment 1, the varied group demonstrated poorer performance during both training and testing phases. However, unlike Experiment 1, the varied group did not show a significant difference in discrimination between bands compared to the constant group.\nIn Experiment 3, we introduced an ordinal feedback system during training, in contrast to the continuous feedback provided in the previous experiments. Participants were assigned to both an order condition (original or reverse) and a training condition (constant or varied). The varied condition showed larger deviations at the end of training, consistent with the previous experiments. Interestingly, there was a significant interaction between training condition and band order, with the varied condition showing greater accuracy in the reverse order condition. During testing, the varied group once again exhibited larger deviations, particularly for the extrapolation bands. The reverse order conditions showed smaller deviations compared to the original order conditions. Discrimination between velocity bands was poorer for the varied group in the original order condition, but not in the reverse order condition.\nIn summary, these experiments consistently demonstrated that training with greater variability led to lower accuracy during both training and testing phases, with the detrimental effect being more pronounced for extrapolation items. The varied training condition also tended to show less discrimination between velocity bands, although this effect was modulated by the order of the training and testing bands. These findings suggest that while variable training can hinder initial learning, it may have differential effects on transfer and extrapolation depending on the specific task structure and the range of stimuli encountered during training and testing.",
    "crumbs": [
      "Sections",
      "Results"
    ]
  },
  {
    "objectID": "Sections/Intro.html#overview-of-present-study",
    "href": "Sections/Intro.html#overview-of-present-study",
    "title": "Introduction",
    "section": "",
    "text": "The present study investigates the influence of training variability on learning, generalization, and extrapolation in a uni-dimensional visuomotor function learning task. To the best of our knowledge, this research is the first to employ the classic constant vs. varied training manipulation, commonly used in the literature on the benefits of variability, in the context of a uni-dimensional function learning task. Across three experiments, we compare constant and varied training conditions in terms of learning performance, extrapolation accuracy, and the ability to reliably discriminate between stimuli.\nTo account for the empirical results, we will apply a series of computational models, including the Associative Learning Model (ALM) and the Extrapolation-Association Model (EXAM). Notably, this study is the first to employ approximate Bayesian computation (ABC) to fit these models to individual subject data, enabling us to thoroughly investigate the full range of posterior predictions of each model, and to examine the the ability of these influential models of function learning to account for both the group level and individual level data.",
    "crumbs": [
      "Sections",
      "Introduction"
    ]
  },
  {
    "objectID": "Sections/combo1.html#function-learning-and-extrapolation",
    "href": "Sections/combo1.html#function-learning-and-extrapolation",
    "title": "HTW Modeling",
    "section": "\n1.1 Function Learning and Extrapolation",
    "text": "1.1 Function Learning and Extrapolation\nThe study of human function learning investigates how people learn relationships between continuous input and output values. Function learning is studied both in tasks where individuals are exposed to a sequence of input/output pairs (DeLosh et al., 1997; McDaniel et al., 2013), or situations where observers are presented with a an incomplete scatterplot or line graph and make predictions about regions of the plot that don’t contain data (Ciccione & Dehaene, 2021; Courrieu, 2012; Said & Fischer, 2021; Schulz et al., 2020).\nCarroll (1963) conducted the earliest work on function learning. Input stimuli and output responses were both lines of varying length. The correct output response was related to the length of the input line by a linear, quadratic, or random function. Participants in the linear and quadratic performed above chance levels during extrapolation testing, with those in the linear condition performing the best overall. Carroll argued that these results were best explained by a ruled based model wherein learners form an abstract representation of the underlying function. Subsequent work by Brehmer (1974),testing a wider array of functional forms, provided further evidence for superior extrapolation in tasks with linear functions. Brehmer argued that individuals start out with an assumption of a linear function, but given sufficient error will progressively test alternative hypothesis with polynomials of greater degree. Koh & Meyer (1991) employed a visuomotor function learning task, wherein participants were trained on examples from an unknown function relating the length of an input line to the duration of a response (time between keystrokes). In this domain, participants performed best when the relation between line length and response duration was determined by a power, as opposed to linear function. Koh & Meyer developed the log-polynomial adaptive-regression model to account for their results.\nThe first significant challenge to the rule-based accounts of function learning was put forth by DeLosh et al. (1997) . In their task, participants learned to associate stimulus magnitudes with response magnitudes that were related via either linear, exponential, or quadratic function. Participants approached ceiling performance by the end of training in each function condition, and were able to correctly respond in interpolation testing trials. All three conditions demonstrated some capacity for extrapolation, however participants in the linear condition tended to underestimate the true function, while exponential and quadratic participants reliably overestimated the true function on extrapolation trials. Extrapolation and interpolation performance are depicted in Figure 1.\nThe authors evaluated both of the rule-based models introduced in earlier research (with some modifications enabling trial-by-trial learning). The polynomial hypothesis testing model (Brehmer, 1974; Carroll, 1963) tended to mimic the true function closely in extrapolation, and thus offered a poor account of the human data. The log-polynomial adaptive regression model (Koh & Meyer, 1991) was able to mimic some of the systematic deviations produced by human subjects, but also predicted overestimation in cases where underestimation occurred.\nThe authors also introduced two new function-learning models. The Associative Learning Model (ALM) and the extrapolation-association model (EXAM). ALM is a two layer connectionist model adapted from the ALCOVE model in the category learning literature (Kruschke, 1992). ALM belongs to the general class of radial-basis function neural networks, and can be considered a similarity-based model in the sense that the nodes in the input layer of the network are activated as a function of distance. The EXAM model retains the same similarity based activation and associative learning mechanisms as ALM, while being augmented with a linear rule response mechanism. When presented with novel stimuli, EXAM will retrieve the most similar input-output examples encountered during training, and from those examples compute a local slope. ALM was able to provide a good account of participant training and interpolation data in all three function conditions, however it was unable to extrapolate. EXAM, on the other hand, was able to reproduce both the extrapolation underestimation, as well as the quadratic and exponential overestimation patterns exhibited by the human participants. Subsequent research identified some limitations in EXAM’s ability to account for cases where human participants learn and extrapolate sinusoidal function Bott & Heit (2004) or to scenarios where different functions apply to different regions of the input space Kalish et al. (2004), though EXAM has been shown to provide a good account of human learning and extrapolation in tasks with bi-linear, V shaped input spaces Mcdaniel et al. (2009).\n\n1.1.1 Variability and Function Learning\nThe influence of variability on function learning tasks has received relatively little attention. The study by DeLosh et al. (1997) (described in detail above) did include a variability manipulation (referred to as density in their paper), wherein participants were trained with either either 8, 20, or 50 unique input-output pairs, with the total number of training trials held constant. They found a minimal influence of variability on training performance, and no difference between groups in interpolation or extrapolation, with all three variability conditions displaying accurate interpolation, and linearly biased extrapolation that was well accounted for by the EXAM model.\nIn the domain of visuomotor learning, van Dam & Ernst (2015) employed a task which required participants to learn a linear function between the spikiness of shape stimuli and the correct horizontal position to make a rapid pointing response. The shapes ranged from very spiky to completely circular at the extreme ends of the space. Participants trained with intermediate shapes from a lower variation (2 shapes) or higher variation (5 shapes) condition, with the 2 items of the lower varied condition matching the items used on the extreme ends of the higher variation training space. Learning was significantly slower in the higher variation group. However, the two conditions did not differ when tested with novel shapes, with both groups producing extrapolation responses of comparable magnitudes to the most similar training item, rather than in accordance with the true linear function. The authors accounted for both learning and extrapolation performance with a Bayesian learning model. Similar to ALM, the bayesian model assumes that generalization occurs as a Gaussian function of the distance between stimuli. However unlike ALM, the bayesian learning model utilizes more elaborate probabilistic stimulus representations, with a separate Kalman Filter for each shape stimulus.\n\n\n\n\n\n\n\nFigure 1: Generalization reproduced patterns from DeLosh et al. (1997) Figure 3. Stimulii that fall within the dashed lines are interpolations of the training examples.",
    "crumbs": [
      "Sections",
      "combo1"
    ]
  },
  {
    "objectID": "Sections/combo1.html#overview-of-present-study",
    "href": "Sections/combo1.html#overview-of-present-study",
    "title": "HTW Modeling",
    "section": "\n1.2 Overview Of Present Study",
    "text": "1.2 Overview Of Present Study\nThe present study investigates the influence of training variability on learning, generalization, and extrapolation in a uni-dimensional visuomotor function learning task. To the best of our knowledge, this research is the first to employ the classic constant vs. varied training manipulation, commonly used in the literature on the benefits of variability, in the context of a uni-dimensional function learning task. Across three experiments, we compare constant and varied training conditions in terms of learning performance, extrapolation accuracy, and the ability to reliably discriminate between stimuli.\nTo account for the empirical results, we will apply a series of computational models, including the Associative Learning Model (ALM) and the Extrapolation-Association Model (EXAM). Notably, this study is the first to employ approximate Bayesian computation (ABC) to fit these models to individual subject data, enabling us to thoroughly investigate the full range of posterior predictions of each model, and to examine the the ability of these influential models of function learning to account for both the group level and individual level data.",
    "crumbs": [
      "Sections",
      "combo1"
    ]
  },
  {
    "objectID": "Sections/combo1.html#methods",
    "href": "Sections/combo1.html#methods",
    "title": "HTW Modeling",
    "section": "\n1.3 Methods",
    "text": "1.3 Methods",
    "crumbs": [
      "Sections",
      "combo1"
    ]
  },
  {
    "objectID": "Sections/combo1.html#methods-1",
    "href": "Sections/combo1.html#methods-1",
    "title": "HTW Modeling",
    "section": "\n1.4 Methods",
    "text": "1.4 Methods\nParticipants A total of 166 participants (XXX% female, XXX% male) were recruited from the Indiana University Introductory Psychology Course. The average age of participants was XXX years (SD = XXX). Participants were randomly assigned to one of two training conditions: varied training or constant training.\nDesign The experiment employed a 2 (Training Condition: varied vs. constant).\nProcedure Upon arrival at the laboratory, participants were provided with a description of the experiment and signed informed consent forms. They were then seated in front of a computer equipped with a mouse and were given instructions on how to perform the “Hit The Wall” (HTW) visuomotor extrapolation task.\nThe HTW task involved launching projectiles to hit a target displayed on the computer screen. Participants completed a total of 90 trials during the training stage. In the varied training condition, participants encountered three velocity bands (800-1000, 1000-1200, and 1200-1400). In contrast, participants in the constant training condition encountered only one velocity band (800-1000).\nDuring the training stage, participants in both conditions also completed “no feedback” trials, where they received no information about their performance. These trials were randomly interleaved with the regular training trials.\nFollowing the training stage, participants proceeded to the testing stage, which consisted of three phases. In the first phase, participants completed “no-feedback” testing from three novel extrapolation bands (100-300, 350-550, and 600-800), with each band consisting of 15 trials.\nIn the second phase of testing, participants completed “no-feedback” testing from the three velocity bands used during the training stage (800-1000, 1000-1200, and 1200-1400). In the constant training condition, two of these bands were novel, while in the varied training condition, all three bands were encountered during training.\nThe third and final phase of testing involved “feedback” testing for each of the three extrapolation bands (100-300, 350-550, and 600-800), with each band consisting of 10 trials. Participants received feedback on their performance during this phase.\nThroughout the experiment, participants’ performance was measured by calculating the distance between the produced x-velocity of the projectiles and the closest edge of the current velocity band. Lower distances indicated better performance.\nAfter completing the experiment, participants were debriefed and provided with an opportunity to ask questions about the study.\n\n\n\n\n\ncluster\nTest Phase (Counterbalanced Order)data1\n Varied Training 800-10001000-12001200-1400Test1\nTest  Novel Bands 100-300350-550600-800data1-&gt;Test1\ndata2\n Constant Training 800-1000data2-&gt;Test1\nTest3\n    Final Test   Novel With Feedback  100-300350-550600-800Test2\n  Test   Varied Training Bands  800-10001000-12001200-1400Test1-&gt;Test2\nTest2-&gt;Test3\n\n\n\n\nFigure 2: Experiment 1 Design. Constant and Varied participants complete different training conditions.",
    "crumbs": [
      "Sections",
      "combo1"
    ]
  },
  {
    "objectID": "Sections/combo1.html#htw-task",
    "href": "Sections/combo1.html#htw-task",
    "title": "HTW Modeling",
    "section": "\n1.5 HTW Task",
    "text": "1.5 HTW Task\n\nneed to create a demo version without consent form. And maybe separate windows for the different versions.\n\nExperimental Task for the HTW Project. Programmed in Javascript, and making use of phaser.js.",
    "crumbs": [
      "Sections",
      "combo1"
    ]
  },
  {
    "objectID": "Sections/combo1.html#live-task-demo",
    "href": "Sections/combo1.html#live-task-demo",
    "title": "Experiment 3",
    "section": "\n1.6 Live Task Demo",
    "text": "1.6 Live Task Demo\nCheck the box at the bottom of the consent form, and then click Start Experiment.\n\n\nHTW_Task",
    "crumbs": [
      "Sections",
      "combo1"
    ]
  },
  {
    "objectID": "Sections/combo1.html#experiment-1",
    "href": "Sections/combo1.html#experiment-1",
    "title": "HTW Modeling",
    "section": "\n1.6 Experiment 1",
    "text": "1.6 Experiment 1\n\n\n\n\n1.6.1 Analyses Strategy\nAll data processing and statistical analyses were performed in R version 4.32 Team (2020). To assess differences between groups, we used Bayesian Mixed Effects Regression. Model fitting was performed with the brms package in R Bürkner (2017), and descriptive stats and tables were extracted with the BayestestR package Makowski et al. (2019). Mixed effects regression enables us to take advantage of partial pooling, simultaneously estimating parameters at the individual and group level. Our use of Bayesian, rather than frequentist methods allows us to directly quantify the uncertainty in our parameter estimates, as well as avoiding convergence issues common to the frequentist analogues of our mixed models.\nEach model was set to run with 4 chains, 5000 iterations per chain, with the first 2500 discarded as warmup chains. Rhat values were within an acceptable range, with values &lt;=1.02 (see appendix for diagnostic plots). We used uninformative priors for the fixed effects of the model (condition and velocity band), and weakly informative Student T distributions for for the random effects. For each model, we report 1) the mean values of the posterior distribution for the parameters of interest, 2) the lower and upper credible intervals (CrI), and the probability of direction value (pd).\n\n\n\n\n\n\n\nGroup Comparison\nCode\nData\n\n\n\nEnd of Training Accuracy\nbrm(dist ~ condit)\nFinal Training Block\n\n\nTest Accuracy\nbrm(dist ~ condit * bandType + (1|id) + (1|bandInt)\nAll Testing trials\n\n\nBand Discrimination\nbrm(vx ~ condit * band +(1 + bandInt|id)\nAll Testing Trials\n\n\n\n\nIn each experiment we compare varied and constant conditions in terms of 1) accuracy in the final training block; 2) testing accuracy as a function of band type (trained vs. extrapolation bands); 3) extent of discrimination between all six testing bands. We quantified accuracy as the absolute deviation between the response velocity and the nearest boundary of the target band. Thus, when the target band was velocity 600-800, throws of 400, 650, and 900 would result in deviation values of 200, 0, and 100, respectively. The degree of discrimination between bands was index by fitting a linear model predicting the response velocity as a function of the target velocity. Participants who reliably discriminated between velocity bands tended to haves slope values ~1, while participants who made throws irrespective of the current target band would have slopes ~0.\n\\[\\begin{equation}\ndist_{ij} = \\beta_0 + \\beta_1 \\cdot condit_{ij} + \\beta_2 \\cdot band_{ij} + \\beta_3 \\cdot condit_{ij} \\cdot band_{ij} + b_{0i} + b_{1i} \\cdot band_{ij} + \\epsilon_{ij}\n\\end{equation}\\]\n\n1.6.2 Results\n\n\n\n\n\n\n\nFigure 3: E1. Deviations from target band across training blocks.\n\n\n\n\n\n\n\n\n\nTable 1: Experiment 1 - End of training performance. The Intercept represents the average of the baseline (constant condition), and the conditVaried coefficient reflects the difference between the constant and varied groups. A larger positive estimates indicates a greater deviation (lower accuracy) for the varied group.\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n106.34\n95.46\n117.25\n1\n\n\nconditVaried\n79.64\n57.92\n101.63\n1\n\n\n\n\n\n\n\nTraining. Figure 3 displays the average deviations across training blocks for the varied group, which trained on three velocity bands, and the constant group, which trained on one velocity band. To compare the training conditions at the end of training, we analyzed performance on the 800-1000 velocity band, which both groups trained on. The full model results are shown in Table 1. The varied group had a significantly greater deviation than the constant group in the final training block, (\\(\\beta\\) = 79.64, 95% CrI [57.92, 101.63]; pd = 100%).\n\n\n\n\n\nTable 2: Experiment 1 testing accuracy. Main effects of condition and band type (training vs. extrapolation), and the interaction between the two factors. Larger coefficient estimates indicate larger deviations from the baselines (constant & trained bands) - and a positive interaction coefficient indicates disproporionate deviation for the varied condition on the extrapolation bands\n\n\n\n\n\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n152.55\n70.63\n229.85\n1.0\n\n\nconditVaried\n39.00\n-21.10\n100.81\n0.9\n\n\nbandTypeExtrapolation\n71.51\n33.24\n109.60\n1.0\n\n\nconditVaried:bandTypeExtrapolation\n66.46\n32.76\n99.36\n1.0\n\n\n\n\n\n\nTesting. To compare accuracy between groups in the testing stage, we fit a Bayesian mixed effects model predicting deviation from the target band as a function of training condition (varied vs. constant) and band type (trained vs. extrapolation), with random intercepts for participants and bands. The model results are shown in Table 2. The main effect of training condition was not significant (\\(\\beta\\) = 39, 95% CrI [-21.1, 100.81]; pd = 89.93%). The extrapolation testing items had a significantly greater deviation than the training bands (\\(\\beta\\) = 71.51, 95% CrI [33.24, 109.6]; pd = 99.99%). Most importantly, the interaction between training condition and band type was significant (\\(\\beta\\) = 66.46, 95% CrI [32.76, 99.36]; pd = 99.99%), As shown in Figure 4, the varied group had disproportionately larger deviations compared to the constant group in the extrapolation bands.\n\n\n\n\n\n\n\nFigure 4: E1. A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% credible intervals.\n\n\n\n\n\n\n\n\n\n\nTable 3: Experiment 1. Bayesian Mixed Model Predicting Vx as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n408.55\n327.00\n490.61\n1.00\n\n\nconditVaried\n164.05\n45.50\n278.85\n1.00\n\n\nBand\n0.71\n0.62\n0.80\n1.00\n\n\ncondit*Band\n-0.14\n-0.26\n-0.01\n0.98\n\n\n\n\n\n\nFinally, to assess the ability of both conditions to discriminate between velocity bands, we fit a model predicting velocity as a function of training condition and velocity band, with random intercepts and random slopes for each participant. See Table 4 for the full model results. The estimated coefficient for training condition (\\(\\beta\\) = 164.05, 95% CrI [45.5, 278.85]) suggests that the varied group tends to produce harder throws than the constant group, but is not in and of itself useful for assessing discrimination. Most relevant to the issue of discrimination is the coefficient on the Band predictor (\\(\\beta\\) = 0.71 95% CrI [0.62, 0.8]). Although the median slope does fall underneath the ideal of value of 1, the fact that the 95% credible interval does not contain 0 provides strong evidence that participants exhibited some discrimination between bands. The estimate for the interaction between slope and condition (\\(\\beta\\) = -0.14, 95% CrI [-0.26, -0.01]), suggests that the discrimination was somewhat modulated by training condition, with the varied participants showing less sensitivity between bands than the constant condition. This difference is depicted visually in Figure 5.\n\n\n\n\n\n\n\nFigure 5: E1 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\n\n\n\n\n\n\n\nTable 4\n\n\n\n\nExperiment 1. Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.",
    "crumbs": [
      "Sections",
      "combo1"
    ]
  },
  {
    "objectID": "Sections/combo1.html#e1-discussion",
    "href": "Sections/combo1.html#e1-discussion",
    "title": "HTW Modeling",
    "section": "\n1.7 E1 Discussion",
    "text": "1.7 E1 Discussion\nIn Experiment 1, we investigated how variability in training influenced participants’ ability learn and extrapolate in a visuomotor task. Our findings that training with variable conditions rresulted in lower final training performance is consistent with much of the prior researchon the influence of training variability (Raviv et al., 2022; Soderstrom & Bjork, 2015), and is particularly unsurprising in the present work, given that the constant group received three times the amount of training on the velocity band common to the two conditions.\nMore importantly, the varied training group exhibited significantly larger deviations from the target velocity bands during the testing phase, particularly for the extrapolation bands that were not encountered by either condition during training.",
    "crumbs": [
      "Sections",
      "combo1"
    ]
  },
  {
    "objectID": "Sections/combo1.html#experiment-2",
    "href": "Sections/combo1.html#experiment-2",
    "title": "HTW Modeling",
    "section": "\n1.8 Experiment 2",
    "text": "1.8 Experiment 2\n\n\n\n\n1.8.1 Methods & Procedure\nThe task and procedure of Experiment was identical to Experiment 1, with the exception that the training and testing bands were reversed (see Figure 6). The Varied group trained on bands 100-300, 350-550, 600-800, and the constant group trained on band 600-800. Both groups were tested from all six bands. A total of 110 participants completed the experiment (Varied: 55, Constant: 55).\n\n\n\n\n\ncluster\nTest Phase (Counterbalanced Order)data1\n Varied Training 100-300350-550600-800Test1\nTest  Novel Bands  800-10001000-12001200-1400data1-&gt;Test1\ndata2\n Constant Training 600-800data2-&gt;Test1\nTest3\n    Final Test   Novel With Feedback  800-10001000-12001200-1400Test2\n  Test   Varied Training Bands  100-300350-550600-800Test1-&gt;Test2\nTest2-&gt;Test3\n\n\n\n\nFigure 6: Experiment 2 Design. Constant and Varied participants complete different training conditions. The training and testing bands are the reverse of Experiment 1.\n\n\n\n\n\n1.8.2 Results\n\n\n\n\n\n\n\nFigure 7: E2. Deviations from target band across training blocks.\n\n\n\n\n\n\n\n\n\nTable 5: Experiment 2 - End of training performance. The Intercept represents the average of the baseline (constant condition), and the conditVaried coefficient reflects the difference between the constant and varied groups. A larger positive coefficient indicates a greater deviation (lower accuracy) for the varied group.\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n91.01\n80.67\n101.26\n1\n\n\nconditVaried\n36.15\n16.35\n55.67\n1\n\n\n\n\n\n\n\nTraining. Figure 7 presents the deviations across training blocks for both constant and varied training groups. We again compared training performance on the band common to both groups (600-800). The full model results are shown in Table 1. The varied group had a significantly greater deviation than the constant group in the final training block, ( \\(\\beta\\) = 36.15, 95% CrI [16.35, 55.67]; pd = 99.95%). ::: {.cell}\n:::\n\n\nTable 6: Experiment 2 testing accuracy. Main effects of condition and band type (training vs. extrapolation), and the interaction between the two factors. Larger coefficient estimates indicate larger deviations from the baselines (constant & trained bands) - and a positive interaction coefficient indicates disproporionate deviation for the varied condition on the extrapolation bands\n\n\n\n\n\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n190.91\n125.03\n259.31\n1.00\n\n\nconditVaried\n-20.58\n-72.94\n33.08\n0.78\n\n\nbandTypeExtrapolation\n38.09\n-6.94\n83.63\n0.95\n\n\nconditVaried:bandTypeExtrapolation\n82.00\n41.89\n121.31\n1.00\n\n\n\n\n\n\n \nTesting Accuracy. The analysis of testing accuracy examined deviations from the target band as influenced by training condition (Varied vs. Constant) and band type (training vs. extrapolation bands). The results, summarized in Table 6, reveal no significant main effect of training condition (\\(\\beta\\) = -20.58, 95% CrI [-72.94, 33.08]; pd = 77.81%). However, the interaction between training condition and band type was significant (\\(\\beta\\) = 82, 95% CrI [41.89, 121.31]; pd = 100%), with the varied group showing disproportionately larger deviations compared to the constant group on the extrapolation bands (see Figure 8).\n\n\n\n\n\n\n\nFigure 8: A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% confidence intervals.\n\n\n\n\n\n\n\n\n\nTable 7: Experiment 2. Bayesian Mixed Model Predicting Vx as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n362.64\n274.85\n450.02\n1.00\n\n\nconditVaried\n-8.56\n-133.97\n113.98\n0.55\n\n\nBand\n0.71\n0.58\n0.84\n1.00\n\n\ncondit*Band\n-0.06\n-0.24\n0.13\n0.73\n\n\n\n\n\n\nTesting Discrimination. Finally, to assess the ability of both conditions to discriminate between velocity bands, we fit a model predicting velocity as a function of training condition and velocity band, with random intercepts and random slopes for each participant. The full model results are shown in Table 8. The overall slope on target velocity band predictor was significantly positive, (\\(\\beta\\) = 0.71, 95% CrI [0.58, 0.84]; pd= 100%), indicating that participants exhibited discrimination between bands. The interaction between slope and condition was not significant, (\\(\\beta\\) = -0.06, 95% CrI [-0.24, 0.13]; pd= 72.67%), suggesting that the two conditions did not differ in their ability to discriminate between bands (see Figure 9).\n\n\n\n\n\n\n\nFigure 9: E2 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\n\n\n\n\n\n\n\nTable 8\n\n\n\n\nConditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.",
    "crumbs": [
      "Sections",
      "combo1"
    ]
  },
  {
    "objectID": "Sections/combo1.html#e2-discussion",
    "href": "Sections/combo1.html#e2-discussion",
    "title": "HTW Modeling",
    "section": "\n1.9 E2 Discussion",
    "text": "1.9 E2 Discussion\nExperiment 2 extended the findings of Experiment 1 by examining the effects of training variability on extrapolation performance in a visuomotor function learning task, but with reversed training and testing bands. Similar to Experiment 1, the Varied group exhibited poorer performance during training and testing. However unlike experiment 1, the Varied group did not show a significant difference in discrimination between bands.",
    "crumbs": [
      "Sections",
      "combo1"
    ]
  },
  {
    "objectID": "Sections/combo1.html#experiment-3",
    "href": "Sections/combo1.html#experiment-3",
    "title": "HTW Modeling",
    "section": "\n1.10 Experiment 3",
    "text": "1.10 Experiment 3\n\n\n\n\n1.10.1 Methods & Procedure\nThe major adjustment of Experiment 3 is for participants to receive ordinal feedback during training, in contrast to the continuous feedback of the prior experiments. After each training throw, participants are informed whether a throw was too soft, too hard, or correct (i.e. within the target velocity range). All other aspects of the task and design are identical to Experiments 1 and 2. We utilized the order of training and testing bands from both of the prior experiments, thus assigning participants to both an order condition (Original or Reverse) and a training condition (Constant or Varied). Participants were once again recruited from the online Indiana University Introductory Psychology Course pool. Following exclusions, 195 participants were included in the final analysis, n=51 in the Constant-Original condition, n=59 in the Constant-Reverse condition, n=39 in the Varied-Original condition, and n=46 in the Varied-Reverse condition.\n\n1.10.2 Results\n\n\n\n\n\nTable 9: Experiment 3 - End of training performance. The Intercept represents the average of the baseline (constant condition), and the conditVaried coefficient reflects the difference between the constant and varied groups. A larger positive coefficient indicates a greater deviation (lower accuracy) for the varied group.\n\n\n\n\n\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n121.86\n109.24\n134.60\n1.00\n\n\nconditVaried\n64.93\n36.99\n90.80\n1.00\n\n\nbandOrderReverse\n1.11\n-16.02\n18.16\n0.55\n\n\nconditVaried:bandOrderReverse\n-77.02\n-114.16\n-39.61\n1.00\n\n\n\n\n\n\nTraining. Figure 10 displays the average deviations from the target band across training blocks, and Table 9 shows the results of the Bayesian regression model predicting the deviation from the common band at the end of training (600-800 for reversed order, and 800-1000 for original order conditions). The main effect of training condition is significant, with the varied condition showing larger deviations ( \\(\\beta\\) = 64.93, 95% CrI [36.99, 90.8]; pd = 100%). The main effect of band order is not significant \\(\\beta\\) = 1.11, 95% CrI [-16.02, 18.16]; pd = 55.4%, however the interaction between training condition and band order is significant, with the varied condition showing greater accuracy in the reverse order condition ( \\(\\beta\\) = -77.02, 95% CrI [-114.16, -39.61]; pd = 100%).\n\n\n\n\n\n\n\nFigure 10: E3. Deviations from target band during testing without feedback stage.\n\n\n\n\n\n\n\n\n\nTable 10: Experiment 3 testing accuracy. Main effects of condition and band type (training vs. extrapolation), and the interaction between the two factors. Larger coefficient estimates indicate larger deviations from the baselines (constant & trained bands) - and a positive interaction coefficient indicates disproporionate deviation for the varied condition on the extrapolation bands\n\n\n\n\n\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n288.65\n199.45\n374.07\n1.00\n\n\nconditVaried\n-40.19\n-104.68\n23.13\n0.89\n\n\nbandTypeExtrapolation\n-23.35\n-57.28\n10.35\n0.92\n\n\nbandOrderReverse\n-73.72\n-136.69\n-11.07\n0.99\n\n\nconditVaried:bandTypeExtrapolation\n52.66\n14.16\n90.23\n1.00\n\n\nconditVaried:bandOrderReverse\n-37.48\n-123.28\n49.37\n0.80\n\n\nbandTypeExtrapolation:bandOrderReverse\n80.69\n30.01\n130.93\n1.00\n\n\nconditVaried:bandTypeExtrapolation:bandOrderReverse\n30.42\n-21.00\n81.65\n0.87\n\n\n\n\n\n\nTesting Accuracy. Table 10 presents the results of the Bayesian mixed efects model predicting absolute deviation from the target band during the testing stage. There was no significant main effect of training condition,\\(\\beta\\) = -40.19, 95% CrI [-104.68, 23.13]; pd = 89.31%, or band type,\\(\\beta\\) = -23.35, 95% CrI [-57.28, 10.35]; pd = 91.52%. However the effect of band order was significant, with the reverse order condition showing lower deviations, \\(\\beta\\) = -73.72, 95% CrI [-136.69, -11.07]; pd = 98.89%. The interaction between training condition and band type was also significant \\(\\beta\\) = 52.66, 95% CrI [14.16, 90.23]; pd = 99.59%, with the varied condition showing disproprionately large deviations on the extrapolation bands compared to the constant group. There was also a significant interaction between band type and band order, \\(\\beta\\) = 80.69, 95% CrI [30.01, 130.93]; pd = 99.89%, such that the reverse order condition showed larger deviations on the extrapolation bands. No other interactions were significant.\n\n\n\n\n\n\n\nFigure 11: E3. A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% confidence intervals.\n\n\n\n\n\n\n\n\n\nTable 11: Experiment 3. Bayesian Mixed Model Predicting Vx as a function of condition (Constant vs. Varied) and Velocity Band\n\n\n\n\n\n\n\n\n\n\nTerm\nEstimate\n95% CrI Lower\n95% CrI Upper\npd\n\n\n\nIntercept\n601.83\n504.75\n699.42\n1.00\n\n\nconditVaried\n12.18\n-134.94\n162.78\n0.56\n\n\nbandOrderReverse\n13.03\n-123.89\n144.67\n0.58\n\n\nBand\n0.49\n0.36\n0.62\n1.00\n\n\nconditVaried:bandOrderReverse\n-338.15\n-541.44\n-132.58\n1.00\n\n\nconditVaried:Band\n-0.04\n-0.23\n0.15\n0.67\n\n\nbandOrderReverse:bandInt\n-0.10\n-0.27\n0.08\n0.86\n\n\nconditVaried:bandOrderReverse:bandInt\n0.42\n0.17\n0.70\n1.00\n\n\n\n\n\n\nTesting Discrimination. The full results of the discrimination model are presented in Table 10. For the purposes of assessing group differences in discrimination, only the coefficients including the band variable are of interest. The baseline effect of band represents the slope cofficient for the constant training - original order condition, this effect was significant \\(\\beta\\) = 0.49, 95% CrI [0.36, 0.62]; pd = 100%. Neither of the two way interactions reached significance, \\(\\beta\\) = -0.04, 95% CrI [-0.23, 0.15]; pd = 66.63%, \\(\\beta\\) = -0.1, 95% CrI [-0.27, 0.08]; pd = 86.35%. However, the three way interaction between training condition, band order, and target band was significant, \\(\\beta\\) = 0.42, 95% CrI [0.17, 0.7]; pd = 99.96% - indicating that the varied condition showed a greater slope coefficient on the reverse order bands, compared to the constant condition - this is clearly shown in Figure 12, where the steepness of the best fitting line for the varied-reversed condition is noticably steeper than the other conditions.\n\n\n\n\n\n\n\nFigure 12: e3 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\n\n\n\n\n\n\n\n\n\n\n\nFigure 13: Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.",
    "crumbs": [
      "Sections",
      "combo1"
    ]
  },
  {
    "objectID": "Sections/combo1.html#results-summary",
    "href": "Sections/combo1.html#results-summary",
    "title": "HTW Modeling",
    "section": "\n1.11 Results Summary",
    "text": "1.11 Results Summary",
    "crumbs": [
      "Sections",
      "combo1"
    ]
  },
  {
    "objectID": "Sections/combo1.html#overall-summary-of-experiments-1-3",
    "href": "Sections/combo1.html#overall-summary-of-experiments-1-3",
    "title": "HTW Modeling",
    "section": "\n1.12 Overall Summary of Experiments 1-3",
    "text": "1.12 Overall Summary of Experiments 1-3\nAcross three experiments, we investigated the impact of training variability on learning, transfer, and extrapolation in a visuomotor function learning task. In Experiment 1, participants in the varied training condition, who experienced a wider range of velocity bands during training, showed lower accuracy at the end of training compared to those in the constant training condition. Crucially, during the testing phase, the varied group exhibited significantly larger deviations from the target velocity bands, particularly for the extrapolation bands that were not encountered during training. The varied group also showed less discrimination between velocity bands, as evidenced by shallower slopes when predicting response velocity from target velocity band.\nExperiment 2 extended these findings by reversing the order of the training and testing bands. Similar to Experiment 1, the varied group demonstrated poorer performance during both training and testing phases. However, unlike Experiment 1, the varied group did not show a significant difference in discrimination between bands compared to the constant group.\nIn Experiment 3, we introduced an ordinal feedback system during training, in contrast to the continuous feedback provided in the previous experiments. Participants were assigned to both an order condition (original or reverse) and a training condition (constant or varied). The varied condition showed larger deviations at the end of training, consistent with the previous experiments. Interestingly, there was a significant interaction between training condition and band order, with the varied condition showing greater accuracy in the reverse order condition. During testing, the varied group once again exhibited larger deviations, particularly for the extrapolation bands. The reverse order conditions showed smaller deviations compared to the original order conditions. Discrimination between velocity bands was poorer for the varied group in the original order condition, but not in the reverse order condition.\nIn summary, these experiments consistently demonstrated that training with greater variability led to lower accuracy during both training and testing phases, with the detrimental effect being more pronounced for extrapolation items. The varied training condition also tended to show less discrimination between velocity bands, although this effect was modulated by the order of the training and testing bands. These findings suggest that while variable training can hinder initial learning, it may have differential effects on transfer and extrapolation depending on the specific task structure and the range of stimuli encountered during training and testing.",
    "crumbs": [
      "Sections",
      "combo1"
    ]
  },
  {
    "objectID": "Sections/combo1.html#references",
    "href": "Sections/combo1.html#references",
    "title": "HTW Modeling",
    "section": "\n2.3 References",
    "text": "2.3 References\n\n\nBengtsson, H. (2021). A Unifying Framework for Parallel and Distributed Processing in R using Futures. The R Journal, 13(2), 208. https://doi.org/10.32614/RJ-2021-048\n\n\nBerniker, M., Mirzaei, H., & Kording, K. P. (2014). The effects of training breadth on motor generalization. Journal of Neurophysiology, 112(11), 2791–2798. https://doi.org/10.1152/jn.00615.2013\n\n\nBott, L., & Heit, E. (2004). Nonmonotonic Extrapolation in Function Learning. Journal of Experimental Psychology: Learning, Memory, and Cognition, 30(1), 38–50. https://doi.org/10.1037/0278-7393.30.1.38\n\n\nBraithwaite, D. W., & Goldstone, R. L. (2015). Effects of Variation and Prior Knowledge on Abstract Concept Learning. Cognition and Instruction, 33(3), 226–256. https://doi.org/10.1080/07370008.2015.1067215\n\n\nBraun, D. A., Aertsen, A., Wolpert, D. M., & Mehring, C. (2009). Motor Task Variation Induces Structural Learning. Current Biology, 19(4), 352–357. https://doi.org/10.1016/j.cub.2009.01.036\n\n\nBrehmer, B. (1974). Hypotheses about relations between scaled variables in the learning of probabilistic inference tasks. Organizational Behavior and Human Performance, 11(1), 1–27. https://doi.org/10.1016/0030-5073(74)90002-6\n\n\nBrekelmans, G., Lavan, N., Saito, H., Clayards, M., & Wonnacott, E. (2022). Does high variability training improve the learning of non-native phoneme contrasts over low variability training? A replication. Journal of Memory and Language, 126, 104352. https://doi.org/10.1016/j.jml.2022.104352\n\n\nBrown, M. A., & Lacroix, G. (2017). Underestimation in linear function learning: Anchoring to zero or x-y similarity? Canadian Journal of Experimental Psychology/Revue Canadienne de Psychologie Expérimentale, 71(4), 274–282. https://doi.org/10.1037/cep0000129\n\n\nBürkner, P.-C. (2017). Brms: An R Package for Bayesian Multilevel Models Using Stan. Journal of Statistical Software, 80, 1–28. https://doi.org/10.18637/jss.v080.i01\n\n\nCarroll, J. D. (1963). Functional Learning: The Learning of Continuous Functional Mappings Relating Stimulus and Response Continua. ETS Research Bulletin Series, 1963(2), i–144. https://doi.org/10.1002/j.2333-8504.1963.tb00958.x\n\n\nCatalano, J. F., & Kleiner, B. M. (1984). Distant Transfer in Coincident Timing as a Function of Variability of Practice. Perceptual and Motor Skills, 58(3), 851–856. https://doi.org/10.2466/pms.1984.58.3.851\n\n\nCiccione, L., & Dehaene, S. (2021). Can humans perform mental regression on a graph? Accuracy and bias in the perception of scatterplots. Cognitive Psychology, 128, 101406. https://doi.org/10.1016/j.cogpsych.2021.101406\n\n\nCohen, A. L., Nosofsky, R. M., & Zaki, S. R. (2001). Category variability, exemplar similarity, and perceptual classification. Memory & Cognition, 29(8), 1165–1175. https://doi.org/10.3758/BF03206386\n\n\nCourrieu, P. (2012). Quick approximation of bivariate functions. British Journal of Mathematical and Statistical Psychology, 65(1), 89–121. https://doi.org/10.1111/j.2044-8317.2011.02016.x\n\n\nCranmer, K., Brehmer, J., & Louppe, G. (2020). The frontier of simulation-based inference. Proceedings of the National Academy of Sciences, 117(48), 30055–30062. https://doi.org/10.1073/pnas.1912789117\n\n\nDeLosh, E. L., McDaniel, M. A., & Busemeyer, J. R. (1997). Extrapolation: The Sine Qua Non for Abstraction in Function Learning. Journal of Experimental Psychology: Learning, Memory, and Cognition, 23(4), 19. https://doi.org/10.1037/0278-7393.23.4.968\n\n\nFarrell, S., & Lewandowsky, S. (2018). Computational Modeling of Cognition and Behavior: (1st ed.). Cambridge University Press. https://doi.org/10.1017/CBO9781316272503\n\n\nGuo, J.-P., Yang, L.-Y., & Ding, Y. (2014). Effects of example variability and prior knowledge in how students learn to solve equations. European Journal of Psychology of Education, 29(1), 21–42. https://www.jstor.org/stable/43551124\n\n\nHu, M., & Nosofsky, R. M. (2024). High-variability training does not enhance generalization in the prototype-distortion paradigm. Memory & Cognition, 1–16. https://doi.org/10.3758/s13421-023-01516-1\n\n\nKalish, M. L., Lewandowsky, S., & Kruschke, J. K. (2004). Population of Linear Experts: Knowledge Partitioning and Function Learning. Psychological Review, 111(4), 1072–1099. https://doi.org/10.1037/0033-295X.111.4.1072\n\n\nKangasrääsiö, A., Jokinen, J. P. P., Oulasvirta, A., Howes, A., & Kaski, S. (2019). Parameter Inference for Computational Cognitive Models with Approximate Bayesian Computation. Cognitive Science, 43(6), e12738. https://doi.org/10.1111/cogs.12738\n\n\nKoh, K., & Meyer, D. E. (1991). Function learning: Induction of continuous stimulus-response relations. Journal of Experimental Psychology: Learning, Memory, and Cognition, 17(5), 811. https://doi.org/10.1037/0278-7393.17.5.811\n\n\nKruschke, J. K. (1992). ALCOVE: An exemplar-based connectionist model of Category Learning. Psychological Review, 99(1). https://doi.org/10.1037/0033-295X.99.1.22\n\n\nMakowski, D., Ben-Shachar, M. S., & Lüdecke, D. (2019). bayestestR: Describing Effects and their Uncertainty, Existence and Significance within the Bayesian Framework. Journal of Open Source Software, 4(40), 1541. https://doi.org/10.21105/joss.01541\n\n\nMcdaniel, M. A., Dimperio, E., Griego, J. A., & Busemeyer, J. R. (2009). Predicting transfer performance: A comparison of competing function learning models. Journal of Experimental Psychology. Learning, Memory, and Cognition, 35, 173–195. https://doi.org/10.1037/a0013982\n\n\nMcDaniel, M. A., Fadler, C. L., & Pashler, H. (2013). Effects of spaced versus massed training in function learning. Journal of Experimental Psychology: Learning, Memory, and Cognition, 39(5), 1417–1432. https://doi.org/10.1037/a0032184\n\n\nPage, M. (2000). Connectionist modelling in psychology: A localist manifesto. Behavioral and Brain Sciences, 23(4), 443–467. https://doi.org/10.1017/S0140525X00003356\n\n\nPerry, L. K., Samuelson, L. K., Malloy, L. M., & Schiffer, R. N. (2010). Learn Locally, Think Globally: Exemplar Variability Supports Higher-Order Generalization and Word Learning. Psychological Science, 21(12), 1894–1902. https://doi.org/10.1177/0956797610389189\n\n\nPosner, M. I., & Keele, S. W. (1968). On the genesis of abstract ideas. Journal of Experimental Psychology, 77(3), 353–363. https://doi.org/10.1037/h0025953\n\n\nRaviv, L., Lupyan, G., & Green, S. C. (2022). How variability shapes learning and generalization. Trends in Cognitive Sciences, S1364661322000651. https://doi.org/10.1016/j.tics.2022.03.007\n\n\nRoller, C. A., Cohen, H. S., Kimball, K. T., & Bloomberg, J. J. (2001). Variable practice with lenses improves visuo-motor plasticity. Cognitive Brain Research, 12(2), 341–352. https://doi.org/10.1016/S0926-6410(01)00077-5\n\n\nSaid, N., & Fischer, H. (2021). Extrapolation accuracy underestimates rule learning: Evidence from the function-learning paradigm. Acta Psychologica, 218, 103356. https://doi.org/10.1016/j.actpsy.2021.103356\n\n\nSchmidt, R. A. (1975). A schema theory of discrete motor skill learning. Psychological Review, 82(4), 225–260. https://doi.org/10.1037/h0076770\n\n\nSchulz, E., Quiroga, F., & Gershman, S. J. (2020). Communicating Compositional Patterns. Open Mind, 4, 25–39. https://doi.org/10.1162/opmi_a_00032\n\n\nSoderstrom, N. C., & Bjork, R. A. (2015). Learning versus performance: An integrative review. Perspectives on Psychological Science, 10(2), 176–199. https://doi.org/10.1177/1745691615569000\n\n\nTeam, R. C. (2020). R: A Language and Environment for Statistical Computing. R: A Language and Environment for Statistical Computing.\n\n\nTurner, B. M., Sederberg, P. B., & McClelland, J. L. (2016). Bayesian analysis of simulation-based models. Journal of Mathematical Psychology, 72, 191–199. https://doi.org/10.1016/j.jmp.2014.10.001\n\n\nTurner, B. M., & Van Zandt, T. (2012). A tutorial on approximate Bayesian computation. Journal of Mathematical Psychology, 56(2), 69–85. https://doi.org/10.1016/j.jmp.2012.02.005\n\n\nvan Dam, L. C. J., & Ernst, M. O. (2015). Mapping Shape to Visuomotor Mapping: Learning and Generalisation of Sensorimotor Behaviour Based on Contextual Information. PLOS Computational Biology, 11(3), e1004172. https://doi.org/10.1371/journal.pcbi.1004172\n\n\nVan Rossum, J. H. A. (1990). Schmidt’s schema theory: The empirical base of the variability of practice hypothesis. Human Movement Science, 9(3-5), 387–435. https://doi.org/10.1016/0167-9457(90)90010-B\n\n\n\n\n\nFigure 1: Generalization reproduced patterns from DeLosh et al. (1997) Figure 3. Stimulii that fall within the dashed lines are interpolations of the training examples.\nFigure 3: E1. Deviations from target band across training blocks.\nFigure 4: E1. A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% credible intervals.\nFigure 5: E1 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\nExperiment 1. Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.\nFigure 7: E2. Deviations from target band across training blocks.\nFigure 8: A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% confidence intervals.\nFigure 9: E2 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\nConditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.\nFigure 10: E3. Deviations from target band during testing without feedback stage.\nFigure 11: E3. A) Deviations from target band during testing without feedback stage. B) Estimated marginal means for the interaction between training condition and band type. Error bars represent 95% confidence intervals.\nFigure 12: e3 testing x velocities. Translucent bands with dash lines indicate the correct range for each velocity band.\nFigure 13: Conditional effect of training condition and Band. Ribbons indicate 95% HDI. The steepness of the lines serves as an indicator of how well participants discriminated between velocity bands.\nFigure 14: Posterior Distributions of \\(c\\) and \\(lr\\) parameters. Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median. Note that the y axes of the plots for the c parameter are scaled logarithmically.\nFigure 15: Model residuals for each combination of training condition, fit method, and model. Residuals reflect the difference between observed and predicted values. Lower values indicate better model fit. Note that y axes are scaled differently between facets.\nFigure 16: \nFigure 17: Empirical data and Model predictions for absolute deviation from target (accuracy). Observed data is shown on top, and predictions from each combination of model and fitting method are shown below.",
    "crumbs": [
      "Sections",
      "combo1"
    ]
  },
  {
    "objectID": "Sections/combo1.html#computational-model",
    "href": "Sections/combo1.html#computational-model",
    "title": "HTW Modeling",
    "section": "\n1.13 Computational Model",
    "text": "1.13 Computational Model",
    "crumbs": [
      "Sections",
      "combo1"
    ]
  },
  {
    "objectID": "Sections/combo1.html#alm-exam-description",
    "href": "Sections/combo1.html#alm-exam-description",
    "title": "HTW Modeling",
    "section": "\n2.1 ALM & Exam Description",
    "text": "2.1 ALM & Exam Description\nALM is a localist neural network model (Page, 2000), with each input node corresponding to a particular stimulus, and each output node corresponding to a particular response value. The units in the input layer activate as a function of their Gaussian similarity to the input stimulus. So, for example, an input stimulus of value 55 would induce maximal activation of the input unit tuned to 55. Depending on the value of the generalization parameter, the nearby units (e.g. 54 and 56; 53 and 57) may also activate to some degree. ALM is structured with input and output nodes that correspond to regions of the stimulus space, and response space, respectively. The units in the input layer activate as a function of their similarity to a presented stimulus. As was the case with the exemplar-based models, similarity in ALM is exponentially decaying function of distance. The input layer is fully connected to the output layer, and the activation for any particular output node is simply the weighted sum of the connection weights between that node and the input activations. The network then produces a response by taking the weighted average of the output units (recall that each output unit has a value corresponding to a particular response). During training, the network receives feedback which activates each output unit as a function of its distance from the ideal level of activation necessary to produce the correct response. The connection weights between input and output units are then updated via the standard delta learning rule, where the magnitude of weight changes are controlled by a learning rate parameter. The EXAM model is an extension of ALM, with the same learning rule and representational scheme for input and output units. The primary difference is that EXAM includes a linear extrapolation mechanism for generating novel responses during testing, a modification necessary to account for human extrapolation patterns in past research Brown & Lacroix (2017). Although this extrapolation rule departs from a strictly similarity-based generalization mechanism, EXAM is distinct from pure rule-based models in that it remains constrained by the weights learned during training.\nSee Table 12 for a full specification of the equations that define ALM and EXAM.\n\n\n\nTable 12: ALM & EXAM Equations\n\n\n\n\n\n\n\n\n\nALM Response Generation\n\n\n\n\nInput Activation\n\\(a_i(X) = \\frac{e^{-c(X-X_i)^2}}{\\sum_{k=1}^M e^{-c(X-X_k)^2}}\\)\nInput nodes activate as a function of Gaussian similarity to stimulus\n\n\nOutput Activation\n\\(O_j(X) = \\sum_{k=1}^M w_{ji} \\cdot a_i(X)\\)\nOutput unit \\(O_j\\) activation is the weighted sum of input activations and association weights\n\n\nOutput Probability\n\\(P[Y_j|X] = \\frac{O_j(X)}{\\sum_{k=1}^M O_k(X)}\\)\nThe response, \\(Y_j\\) probabilites computed via Luce’s choice rule\n\n\nMean Output\n\\(m(X) = \\sum_{j=1}^L Y_j \\cdot \\frac{O_j(x)}{\\sum_{k=1}^M O_k(X)}\\)\nWeighted average of probabilities determines response to X\n\n\n\nALM Learning\n\n\n\nFeedback\n\\(f_j(Z) = e^{-c(Z-Y_j)^2}\\)\nfeedback signal Z computed as similarity between ideal response and observed response\n\n\nmagnitude of error\n\\(\\Delta_{ji}=(f_{j}(Z)-o_{j}(X))a_{i}(X)\\)\nDelta rule to update weights.\n\n\nUpdate Weights\n\\(w_{ji}^{new}=w_{ji}+\\eta\\Delta_{ji}\\)\nUpdates scaled by learning rate parameter \\(\\eta\\).\n\n\n\nEXAM Extrapolation\n\n\n\nInstance Retrieval\n\\(P[X_i|X] = \\frac{a_i(X)}{\\sum_{k=1}^M a_k(X)}\\)\nNovel test stimulus \\(X\\) activates input nodes \\(X_i\\)\n\n\n\nSlope Computation\n\n\\(S =\\) \\(\\frac{m(X_{1})-m(X_{2})}{X_{1}-X_{2}}\\)\n\nSlope value, \\(S\\) computed from nearest training instances\n\n\nResponse\n\\(E[Y|X_i] = m(X_i) + S \\cdot [X - X_i]\\)\nALM response \\(m(X_i)\\) adjusted by slope.",
    "crumbs": [
      "Sections",
      "combo1"
    ]
  },
  {
    "objectID": "Sections/combo1.html#model-fitting-strategy",
    "href": "Sections/combo1.html#model-fitting-strategy",
    "title": "HTW Modeling",
    "section": "\n2.2 Model Fitting Strategy",
    "text": "2.2 Model Fitting Strategy\nTo fit ALM and EXAM to our participant data, we employ a similar method to Mcdaniel et al. (2009), wherein we examine the performance of each model after being fit to various subsets of the data. Each model was fit to the data in with separate procedures: 1) fit to maximize predictions of the testing data, 2) fit to maximize predictions of both the training and testing data, 3) fit to maximize predictions of the just the training data. We refer to this fitting manipulations as “Fit Method” in the tables and figures below. It should be emphasized that for all three fit methods, the ALM and EXAM models behave identically - with weights updating only during the training phase.Models to were fit separately to the data of each individual participant. The free parameters for both models are the generalization (\\(c\\)) and learning rate (\\(lr\\)) parameters. Parameter estimation was performed using approximate bayesian computation (ABC), which we describe in detail below.\n\n\n\n\n\n\n Approximate Bayesian Computation\nTo estimate parameters, we used approximate bayesian computation (ABC), enabling us to obtain an estimate of the posterior distribution of the generalization and learning rate parameters for each individual. ABC belongs to the class of simulation-based inference methods (Cranmer et al., 2020), which have begun being used for parameter estimation in cognitive modeling relatively recently (Kangasrääsiö et al., 2019; Turner et al., 2016; Turner & Van Zandt, 2012). Although they can be applied to any model from which data can be simulated, ABC methods are most useful for complex models that lack an explicit likelihood function (e.g. many neural network and evidence accumulation models).\nThe general ABC procedure is to 1) define a prior distribution over model parameters. 2) sample candidate parameter values, \\(\\theta^*\\), from the prior. 3) Use \\(\\theta^*\\) to generate a simulated dataset, \\(Data_{sim}\\). 4) Compute a measure of discrepancy between the simulated and observed datasets, \\(discrep\\)(\\(Data_{sim}\\), \\(Data_{obs}\\)). 5) Accept \\(\\theta^*\\) if the discrepancy is less than the tolerance threshold, \\(\\epsilon\\), otherwise reject \\(\\theta^*\\). 6) Repeat until desired number of posterior samples are obtained.\nAlthough simple in the abstract, implementations of ABC require researchers to make a number of non-trivial decisions as to i) the discrepancy function between observed and simulated data, ii) whether to compute the discrepancy between trial level data, or a summary statistic of the datasets, iii) the value of the minimum tolerance \\(\\epsilon\\) between simulated and observed data. For the present work, we follow the guidelines from previously published ABC tutorials (Farrell & Lewandowsky, 2018; Turner & Van Zandt, 2012). For the test stage, we summarized datasets with mean velocity of each band in the observed dataset as \\(V_{obs}^{(k)}\\) and in the simulated dataset as \\(V_{sim}^{(k)}\\), where \\(k\\) represents each of the six velocity bands. For computing the discrepancy between datasets in the training stage, we aggregated training trials into three equally sized blocks (separately for each velocity band in the case of the varied group). After obtaining the summary statistics of the simulated and observed datasets, the discrepancy was computed as the mean of the absolute difference between simulated and observed datasets (Equation 1 and Equation 2). For the models fit to both training and testing data, discrepancies were computed for both stages, and then averaged together.\n\n\\[\ndiscrep_{Test}(Data_{sim}, Data_{obs}) = \\frac{1}{6} \\sum_{k=1}^{6} |V_{obs}^{(k)} - V_{sim}^{(k)}|\n\\tag{1}\\]\n\\[\n\\begin{aligned} \\\\\ndiscrep_{Train,constant}(Data_{sim}, Data_{obs}) = \\frac{1}{N_{blocks}} \\sum_{j=1}^{N_{blocks}} |V_{obs,constant}^{(j)} - V_{sim,constant}^{(j)}| \\\\ \\\\\ndiscrep_{Train,varied}(Data_{sim}, Data_{obs}) = \\frac{1}{N_{blocks} \\times 3} \\sum_{j=1}^{N_{blocks}} \\sum_{k=1}^{3} |V_{obs,varied}^{(j,k)} - V_{sim,varied}^{(j,k)}|\n\\end{aligned}\n\\tag{2}\\]\n\nThe final component of our ABC implementation is the determination of an appropriate value of \\(\\epsilon\\). The setting of \\(\\epsilon\\) exerts strong influence on the approximated posterior distribution. Smaller values of \\(\\epsilon\\) increase the rejection rate, and improve the fidelity of the approximated posterior, while larger values result in an ABC sampler that simply reproduces the prior distribution. Because the individual participants in our dataset differed substantially in terms of the noisiness of their data, we employed an adaptive tolerance setting strategy to tailor \\(\\epsilon\\) to each individual. The initial value of \\(\\epsilon\\) was set to the overall standard deviation of each individuals velocity values. Thus, sampled parameter values that generated simulated data within a standard deviation of the observed data were accepted, while worse performing parameters were rejected. After every 300 samples the tolerance was allowed to increase only if the current acceptance rate of the algorithm was less than 1%. In such cases, the tolerance was shifted towards the average discrepancy of the 5 best samples obtained thus far. To ensure the acceptance rate did not become overly permissive, \\(\\epsilon\\) was also allowed to decrease every time a sample was accepted into the posterior.\n\n\n\nFor each of the 156 participants from Experiment 1, the ABC algorithm was run until 200 samples of parameters were accepted into the posterior distribution. Obtaining this number of posterior samples required an average of 205,000 simulation runs per participant. Fitting each combination of participant, Model (EXAM & ALM), and fitting method (Test only, Train only, Test & Train) required a total of 192 million simulation runs. To facilitate these intensive computational demands, we used the Future Package in R (Bengtsson, 2021), allowing us to parallelize computations across a cluster of ten M1 iMacs, each with 8 cores.\n\n2.2.1 Modelling Results\n\n2.2.1.1 Group level Patterns\n\n\n\nTable 13: Mean model errors predicting empirical data from the testing and training stage, aggregated over all participants and velocity bands. Note that Fit Method refers to the subset of the data that the model was trained on\n\n\n\n\n\n\nstage\nFit_Method\nModel\n\nConstant\n\nVaried\n\n\n\nTest\nFit to Test Data\nALM\n\n199.9\n\n103.4\n\n\nEXAM\n\n104.0\n\n85.7\n\n\nFit to Test & Training Data\nALM\n\n217.0\n\n170.3\n\n\nEXAM\n\n127.9\n\n144.9\n\n\nFit to Training Data\nALM\n\n467.7\n\n291.4\n\n\nEXAM\n\n273.3\n\n297.9\n\n\nTrain\nFit to Test Data\nALM\n\n297.8\n\n2,016.0\n\n\nEXAM\n\n53.9\n\n184.0\n\n\nFit to Test & Training Data\nALM\n\n57.4\n\n132.3\n\n\nEXAM\n\n42.9\n\n127.9\n\n\nFit to Training Data\nALM\n\n51.8\n\n103.5\n\n\nEXAM\n\n51.4\n\n107.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 14: Posterior Distributions of \\(c\\) and \\(lr\\) parameters. Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median. Note that the y axes of the plots for the c parameter are scaled logarithmically.\n\n\n\n\n\n\n\n\n\n\n\nFigure 15: Model residuals for each combination of training condition, fit method, and model. Residuals reflect the difference between observed and predicted values. Lower values indicate better model fit. Note that y axes are scaled differently between facets.\n\n\n\n\nThe posterior distributions of the \\(c\\) and \\(lr\\) parameters are shown Figure 14, and model predictions are shown alongside the empirical data in Figure 16 and Figure 17 (i.e. these plots combine all the posterior samples from all of the subjects). There were substantial individual differences in the posteriors of both parameters, with the within-group individual differences generally swamped any between-group or between-model differences. The magnitude of these individual differences remains even if we consider only the single best parameter set for each subject.\nWe used the posterior distribution of \\(c\\) and \\(lr\\) parameters to generate a posterior predictive distribution of the observed data for each participant, which then allows us to compare the empirical data to the full range of predictions from each model. Aggregated residuals are displayed in Table 13. The pattern of training stage residual errors are unsurprising across the combinations of models and fitting method . Differences in training performance between ALM and EXAM are generally minor (the two models have identical learning mechanisms). The differences in the magnitude of residuals across the three fitting methods are also straightforward, with massive errors for the ‘fit to Test Only’ model, and the smallest errors for the ‘fit to train only’ models. It is also noteworthy that the residual errors are generally larger for the first block of training, which is likely due to the initial values of the ALM weights being unconstrained by whatever initial biases participants tend to bring to the task. Future work may explore the ability of the models to capture more fine grained aspects of the learning trajectories. However for the present purposes, our primary interest is in the ability of ALM and EXAM to account for the testing patterns while being constrained, or not constrained, by the training data. All subsequent analyses and discussion will thus focus on the testing stage.\nThe residuals of the model predictions for the testing stage (Figure 15) also show an unsurprising pattern across fitting methods - with models fit only to the test data showing the best performance, followed by models fit to both training and test data, and with models fit only to the training data showing the worst performance (note that y axes are scaled different between plots). Unsurprisingly, the advantage of EXAM is strongest for extrapolation positions (the three smallest bands for both groups - as well as the two highest bands for the Constant group). Although EXAM tends to perform better for both Constant and Varied participants (see also Table 13), the relative advantage of EXAM is generally larger for the Constant group - a pattern consistent across all three fitting methods.\nPanel B of Figure 15 directly compares the aggregated observed data to the posterior predictive distributions for the testing stage. Of interest are a) the extent to which the median estimates of the ALM and EXAM posteriors deviate from the observed medians for each velocity band; b) the ability of ALM and EXAM to discriminate between velocity bands; c) the relative performance of models that are constrained by the training data (i.e. the ‘fit to train only’ and ‘fit to both’ models) compared to the ‘fit to test only’ models;\nConsidering first the models fit to only the testing data, which reflect the best possible performance of ALM and EXAM at capturing the group-aggregated testing patterns. For the varied group, both ALM and EXAM are able to capture the median values of the observed data within the 66% credible intervals, and the spread of model predictions generally matches that of the observed data. For the constant group, only EXAM is able to capture the median range of values across the velocity bands, with ALM generally underestimating human velocoties in the upper bands, and overestimating in the lower bands. In the case of band 100, the median ALM prediction appears to match that of our participants - however this is due to a large subset of participants have ALM predictions near 0 for band 100, a pattern we will explore further in our considertation of individual patterns below. Models fit to both training and testing data show a similar pattern to only the testing data display the same basic pattern as those fit to only the testing data, albeit with slightly larger residuals. However models fit to only the training data display markedly worse performance at accounting for the key testing patterns.\n\n** explain how the constant group ALM predictions for band 100 look deceptively good due to aggregation of a large subset of subjects having ALM predictions of 0 for vb100, and a large subset with ALM predictions close to their position 800 value. This is relected by much greater variance of the ALM esimates in the posterior predictive plot\n** comment on how much constrained by the training data has a worse impact on the EXAM predictions for varied than for constant - perhaps due to the varied training data being much noisier than the constant training data.\n** comment on EXAM doing a better job mimicing the within-condition variance of the observed data\n** comment on the % of Constant subjects being best accounted for by EXAM being higher.\n** does EXAM do better for the Constant group because the constant group performs better? Or does training with a single example encourage an exam sort of strategy?\n\n\n\n\n\n\n\n\nFigure 16\n\n\n\n\n\n\n\n\n\n\n\nFigure 17: Empirical data and Model predictions for absolute deviation from target (accuracy). Observed data is shown on top, and predictions from each combination of model and fitting method are shown below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.2.2 Accounting for individual patterns\nTo more accurately assess the relative abilities of ALM and EXAM to capture important empirical patterns - we will now examine the predictions of both models for the subset of individual participants shown in ?@fig-htw-indv-pred. Panel A presents three varied and constant participants who demonstrated a reasonable degree of discrimination between the 6 velocity bands during testing.\n\n** comment on the different ways ALM can completely fail to mimic discrimination patterns (sbj. 35; sbj. 137),and on how it can sometimes partially succeed (sbj. 11; 14,74)\n** comment on how EXAM can somtimes mimic non-monotonic spacing between bands due to associative stregth from training (i.e. subject 47)\n** compare c values to slope parameters from the statistical models earlier in paper",
    "crumbs": [
      "Sections",
      "combo1"
    ]
  },
  {
    "objectID": "Sections/combo1.html#deviation-predictions",
    "href": "Sections/combo1.html#deviation-predictions",
    "title": "HTW Model",
    "section": "\n2.3 Deviation Predictions",
    "text": "2.3 Deviation Predictions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 16: Posterior Distributions of \\(c\\) and \\(lr\\) parameters. Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median. Note that the y axes of the plots for the c parameter are scaled logarithmically.\n\n\n\n\n\n2.3.1 Accounting for individual patterns\nTo more accurately assess the relative abilities of ALM and EXAM to capture important empirical patterns - we will now examine the predictions of both models for the subset of individual participants shown in Figure 17. Panel A presents three varied and constant participants who demonstrated a reasonable degree of discrimination between the 6 velocity bands during testing.\n\n** comment on the different ways ALM can completely fail to mimic discrimination patterns (sbj. 35; sbj. 137),and on how it can sometimes partially succeed (sbj. 11; 14,74)\n** comment on how EXAM can somtimes mimic non-monotonic spacing between bands due to associative stregth from training (i.e. subject 47)\n** compare c values to slope parameters from the statistical models earlier in paper\n\n\n\n\n\n\n\n\nFigure 17: Model predictions alongside observed data for a subset of individual participants. A) 3 constant and 3 varied participants fit to both the test and training data. B) 3 constant and 3 varied subjects fit to only the trainign data.\n\n\n\n\n\n\n\n\n\n\n\nFigure 18: Difference in model errors for each participant, with models fit to both train and test data. Positive values favor EXAM, while negative values favor ALM.\n\n\n\n\n\n2.3.1.1 Subjects with biggest differential favoring ALM\n\n\n\n\n\n\n\n\n\n2.3.1.2 Subjects with biggest differential favoring EXAM\n\n\n\n\n\n\n\n\n\n2.3.1.3 Subjects with no clear best model\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.3.2 To add to appendix\n\n\n\n\n\n\n\nFit_Method\nx\n\nConstant\n\nVaried\n\n\n\nALM\n\nEXAM\n\nALM\n\nEXAM\n\n\n\n\nTest\n100\n\n203.3\n\n191.4\n\n233.5\n\n194.8\n\n\n350\n\n249.8\n\n169.0\n\n213.2\n\n193.5\n\n\n600\n\n264.1\n\n199.5\n\n222.4\n\n219.2\n\n\n800\n\n218.2\n\n214.3\n\n243.9\n\n222.9\n\n\n1,000\n\n315.9\n\n245.3\n\n224.4\n\n222.3\n\n\n1,200\n\n409.1\n\n275.9\n\n249.8\n\n237.2\n\n\nTest_Train\n100\n\n195.0\n\n213.2\n\n238.1\n\n217.2\n\n\n350\n\n241.4\n\n183.9\n\n241.0\n\n207.1\n\n\n600\n\n255.3\n\n190.5\n\n270.5\n\n230.0\n\n\n800\n\n244.9\n\n222.0\n\n270.3\n\n257.9\n\n\n1,000\n\n355.3\n\n265.1\n\n276.0\n\n272.2\n\n\n1,200\n\n437.3\n\n297.0\n\n313.8\n\n319.9\n\n\nTrain\n100\n\n519.3\n\n430.2\n\n495.7\n\n498.8\n\n\n350\n\n466.6\n\n310.9\n\n398.6\n\n405.2\n\n\n600\n\n445.4\n\n243.0\n\n347.3\n\n349.0\n\n\n800\n\n260.9\n\n261.2\n\n298.5\n\n300.0\n\n\n1,000\n\n667.3\n\n352.9\n\n311.0\n\n311.0\n\n\n1,200\n\n809.3\n\n443.5\n\n361.3\n\n361.3",
    "crumbs": [
      "Sections",
      "combo1"
    ]
  },
  {
    "objectID": "Sections/combo1.html#comparison-to-project-1",
    "href": "Sections/combo1.html#comparison-to-project-1",
    "title": "HTW Model",
    "section": "\n3.1 Comparison to Project 1",
    "text": "3.1 Comparison to Project 1\n\n3.1.1 Differences between the tasks\nThere are a number of differences between Project 1’s Hit The Target (HTT), and Project 2’s Hit The Wall (HTW) tasks.\n\nTask Space Complexity: In HTW, the task space is also almost perfectly smooth, at least for the continuous feedback subjects, if they throw 100 units too hard, they’ll be told that they were 100 units too hard. Whereas in HTT,  it was possible to produce xy velocity combinations that were technically closer to the empirical solution space than other throws, but which resulted in worse feedback due to striking the barrier.\nPerceptual Distinctiveness: HTT offers perceptually distinct varied conditions that directly relate to the task’s demands, which may increase the sallience between training positions encounted by the varied group. In contrast, HTW’s varied conditions differ only in the numerical values displayed, lacking the same level of perceptual differentiation. Conversely in HTW, the only difference between conditions for the varied group are the numbers displayed at the top of the screen which indicate the current target band(e.g. 800-1000, or 1000-1200)\nIn HTW, our primary testing stage of interest has no feedback, whereas in HTT testing always included feedback (the intermittent testing in HTT expt 1 being the only exception). Of course, we do collect testing with feedback data at the end of HTW, but we haven’t focused on that data at all in our modelling work thus far. It’s also interesting to recall that the gap between varied and constant in HTW does seem to close substantially in the testing-with-feedback stage. The difference between no-feedback and feedback testing might be relevant if the benefits of variation have anything to do with improving subsequent learning (as opposed to subsequent immediate performance), OR if the benefits of constant training rely on having the most useful anchor, having the most useful anchor might be a lot less helpful if you’re getting feedback from novel positions and can thus immediately begin to form position-specific anchors for the novelties, rather than relying on a training anchor. \nHTW and HTT both have a similar amount of training trials (~200), and thus the constant groups acquire a similar amount of experience with their single position/velocity in both experiments. However, the varied conditions in both HTT experiments train on 2 positions, whereas the varied group in HTW trains on 3 velocity bands. This means that in HTT the varied group gets half as much experience on any one position as the constant group, and in HTW they only get 1/3 as much experience in any one position. There are likely myriad ways in which this might impact the success of the varied group regardless of how you think the benefits of variation might be occurring, e.g. maybe they also need to develop a coherent anchor, maybe they need more experience in order to extract a function, or more experience in order to properly learn to tune their c parameter.",
    "crumbs": [
      "Sections",
      "combo1"
    ]
  },
  {
    "objectID": "Analysis/test_pdf.html",
    "href": "Analysis/test_pdf.html",
    "title": "HTW Model",
    "section": "",
    "text": "Modelling Results\nGroup level aggregations\n\n\nTable 1: Mean model errors predicting testing data, aggregated over all participants and velocity bands. Note that Fit Method refers to how model parameters were optimized, while error values reflect mean absolute error for the 6 testing bands\n\n\n\n\n\n\n\nFit_Method\nModel\n\nConstant\n\nVaried\n\n\n\nFit to Test Data\nALM\n\n276.7\n\n231.2\n\n\nEXAM\n\n215.9\n\n215.0\n\n\nFit to Test & Training Data\nALM\n\n288.2\n\n268.3\n\n\nEXAM\n\n228.6\n\n250.7\n\n\nFit to Training Data\nALM\n\n528.1\n\n368.7\n\n\nEXAM\n\n340.3\n\n370.9\n\n\n\n\n\n\n\n\n\n\nFit_Method\nModel\n\nConstant\n\nVaried\n\n\n\nFit to Test Data\nALM\n\n851.2\n\n3,049.9\n\n\nEXAM\n\n711.9\n\n1,047.5\n\n\nFit to Test & Training Data\nALM\n\n229.7\n\n324.7\n\n\nEXAM\n\n233.4\n\n331.3\n\n\nFit to Training Data\nALM\n\n216.1\n\n301.8\n\n\nEXAM\n\n216.0\n\n302.3\n\n\n\n\n\n\n\n\n\n\n\nTable 2: Mean model errors\n\n\n\n\n\n\n(a) Full datasets\n\n\n\ncondit\nModel\nFit_Method\nmean_error\n\n\n\nConstant\nALM\nTest\n276.7\n\n\nConstant\nALM\nTest_Train\n288.2\n\n\nConstant\nALM\nTrain\n528.1\n\n\nConstant\nEXAM\nTest\n215.9\n\n\nConstant\nEXAM\nTest_Train\n228.6\n\n\nConstant\nEXAM\nTrain\n340.3\n\n\nVaried\nALM\nTest\n231.2\n\n\nVaried\nALM\nTest_Train\n268.3\n\n\nVaried\nALM\nTrain\n368.7\n\n\nVaried\nEXAM\nTest\n215.0\n\n\nVaried\nEXAM\nTest_Train\n250.7\n\n\nVaried\nEXAM\nTrain\n370.9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Intersection of samples with all labels available\n\n\n\ncondit\nModel\nFit_Method\nmean_error\n\n\n\nConstant\nALM\nTest\n851.2\n\n\nConstant\nALM\nTest_Train\n229.7\n\n\nConstant\nALM\nTrain\n216.1\n\n\nConstant\nEXAM\nTest\n711.9\n\n\nConstant\nEXAM\nTest_Train\n233.4\n\n\nConstant\nEXAM\nTrain\n216.0\n\n\nVaried\nALM\nTest\n3,049.9\n\n\nVaried\nALM\nTest_Train\n324.7\n\n\nVaried\nALM\nTrain\n301.8\n\n\nVaried\nEXAM\nTest\n1,047.5\n\n\nVaried\nEXAM\nTest_Train\n331.3\n\n\nVaried\nEXAM\nTrain\n302.3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 3: Example\n\n\n\n\n\n(a) Cars\n\n\n\n\n\n\n\n\n\ncondit\nModel\nFit_Method\nmean_error\n\n\n\nConstant\nALM\nTest\n851.2\n\n\nConstant\nALM\nTest_Train\n229.7\n\n\nConstant\nALM\nTrain\n216.1\n\n\nConstant\nEXAM\nTest\n711.9\n\n\nConstant\nEXAM\nTest_Train\n233.4\n\n\nConstant\nEXAM\nTrain\n216\n\n\nVaried\nALM\nTest\n3050\n\n\nVaried\nALM\nTest_Train\n324.7\n\n\nVaried\nALM\nTrain\n301.8\n\n\nVaried\nEXAM\nTest\n1048\n\n\nVaried\nEXAM\nTest_Train\n331.3\n\n\nVaried\nEXAM\nTrain\n302.3\n\n\n\n\n\n\n\n\n\n\n(b) Pressure\n\n\n\n\n\n\n\n\n\ncondit\nModel\nFit_Method\nmean_error\n\n\n\nConstant\nALM\nTest\n276.7\n\n\nConstant\nALM\nTest_Train\n288.2\n\n\nConstant\nALM\nTrain\n528.1\n\n\nConstant\nEXAM\nTest\n215.9\n\n\nConstant\nEXAM\nTest_Train\n228.6\n\n\nConstant\nEXAM\nTrain\n340.3\n\n\nVaried\nALM\nTest\n231.2\n\n\nVaried\nALM\nTest_Train\n268.3\n\n\nVaried\nALM\nTrain\n368.7\n\n\nVaried\nEXAM\nTest\n215\n\n\nVaried\nEXAM\nTest_Train\n250.7\n\n\nVaried\nEXAM\nTrain\n370.9\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 4: Conditional Means and Contrasts\n\n\n\n\n\n\n(a) Conditional Means\n\n\n\ncondit\nModel\nFit_Method\nmean_error\n\n\n\nConstant\nALM\nTest\n276.7\n\n\nConstant\nALM\nTest_Train\n288.2\n\n\nConstant\nALM\nTrain\n528.1\n\n\nConstant\nEXAM\nTest\n215.9\n\n\nConstant\nEXAM\nTest_Train\n228.6\n\n\nConstant\nEXAM\nTrain\n340.3\n\n\nVaried\nALM\nTest\n231.2\n\n\nVaried\nALM\nTest_Train\n268.3\n\n\nVaried\nALM\nTrain\n368.7\n\n\nVaried\nEXAM\nTest\n215.0\n\n\nVaried\nEXAM\nTest_Train\n250.7\n\n\nVaried\nEXAM\nTrain\n370.9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Contrasts\n\n\n\ncondit\nModel\nFit_Method\nmean_error\n\n\n\nConstant\nALM\nTest\n851.2\n\n\nConstant\nALM\nTest_Train\n229.7\n\n\nConstant\nALM\nTrain\n216.1\n\n\nConstant\nEXAM\nTest\n711.9\n\n\nConstant\nEXAM\nTest_Train\n233.4\n\n\nConstant\nEXAM\nTrain\n216.0\n\n\nVaried\nALM\nTest\n3049.9\n\n\nVaried\nALM\nTest_Train\n324.7\n\n\nVaried\nALM\nTrain\n301.8\n\n\nVaried\nEXAM\nTest\n1047.5\n\n\nVaried\nEXAM\nTest_Train\n331.3\n\n\nVaried\nEXAM\nTrain\n302.3"
  },
  {
    "objectID": "Analysis/test_pdf.html#pander",
    "href": "Analysis/test_pdf.html#pander",
    "title": "HTW Model",
    "section": "pander",
    "text": "pander\n\n\nTable 4: Example\n\n\n\n\n\n(a) Cars\n\n\n\n\n\n\n\n\n\nFit_Method\nModel\ncondit\nmean_error\n\n\n\nTest\nALM\nConstant\n297.8\n\n\nTest\nALM\nVaried\n2016\n\n\nTest\nEXAM\nConstant\n53.9\n\n\nTest\nEXAM\nVaried\n184\n\n\nTest_Train\nALM\nConstant\n57.4\n\n\nTest_Train\nALM\nVaried\n132.3\n\n\nTest_Train\nEXAM\nConstant\n42.92\n\n\nTest_Train\nEXAM\nVaried\n127.9\n\n\nTrain\nALM\nConstant\n51.77\n\n\nTrain\nALM\nVaried\n103.5\n\n\nTrain\nEXAM\nConstant\n51.43\n\n\nTrain\nEXAM\nVaried\n107\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Pressure\n\n\n\n\n\n\n\n\n\nFit_Method\nModel\ncondit\nmean_error\n\n\n\nTest\nALM\nConstant\n199.9\n\n\nTest\nALM\nVaried\n103.4\n\n\nTest\nEXAM\nConstant\n104\n\n\nTest\nEXAM\nVaried\n85.68\n\n\nTest_Train\nALM\nConstant\n217\n\n\nTest_Train\nALM\nVaried\n170.3\n\n\nTest_Train\nEXAM\nConstant\n127.9\n\n\nTest_Train\nEXAM\nVaried\n144.9\n\n\nTrain\nALM\nConstant\n467.7\n\n\nTrain\nALM\nVaried\n291.4\n\n\nTrain\nEXAM\nConstant\n273.3\n\n\nTrain\nEXAM\nVaried\n297.9"
  },
  {
    "objectID": "Analysis/test_pdf.html#kbl",
    "href": "Analysis/test_pdf.html#kbl",
    "title": "HTW Model",
    "section": "kbl",
    "text": "kbl\n\n\nTable 5: Conditional Means and Contrasts\n\n\n\n\n\n\n(a) Conditional Means\n\n\n\nFit_Method\nModel\ncondit\nmean_error\n\n\n\nTest\nALM\nConstant\n199.93250\n\n\nTest\nALM\nVaried\n103.36184\n\n\nTest\nEXAM\nConstant\n104.01000\n\n\nTest\nEXAM\nVaried\n85.67763\n\n\nTest_Train\nALM\nConstant\n216.96875\n\n\nTest_Train\nALM\nVaried\n170.27632\n\n\nTest_Train\nEXAM\nConstant\n127.94250\n\n\nTest_Train\nEXAM\nVaried\n144.86316\n\n\nTrain\nALM\nConstant\n467.73000\n\n\nTrain\nALM\nVaried\n291.38289\n\n\nTrain\nEXAM\nConstant\n273.30000\n\n\nTrain\nEXAM\nVaried\n297.91053\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Contrasts\n\n\n\nFit_Method\nModel\ncondit\nmean_error\n\n\n\nTest\nALM\nConstant\n297.81814\n\n\nTest\nALM\nVaried\n2016.00582\n\n\nTest\nEXAM\nConstant\n53.90292\n\n\nTest\nEXAM\nVaried\n184.00079\n\n\nTest_Train\nALM\nConstant\n57.39716\n\n\nTest_Train\nALM\nVaried\n132.32472\n\n\nTest_Train\nEXAM\nConstant\n42.92373\n\n\nTest_Train\nEXAM\nVaried\n127.90159\n\n\nTrain\nALM\nConstant\n51.77211\n\n\nTrain\nALM\nVaried\n103.47686\n\n\nTrain\nEXAM\nConstant\n51.43058\n\n\nTrain\nEXAM\nVaried\n107.03430"
  },
  {
    "objectID": "Analysis/test_pdf.html#gt",
    "href": "Analysis/test_pdf.html#gt",
    "title": "HTW Model",
    "section": "gt",
    "text": "gt\n\n\nTable 6: Conditional Means and Contrasts\n\n\n\n\n\n\n\n\n(a) Conditional Means\n\n\n\ncondit\nmean_error\n\n\n\nTest - ALM\n\n\nConstant\n199.93250\n\n\nVaried\n103.36184\n\n\nTest - EXAM\n\n\nConstant\n104.01000\n\n\nVaried\n85.67763\n\n\nTest_Train - ALM\n\n\nConstant\n216.96875\n\n\nVaried\n170.27632\n\n\nTest_Train - EXAM\n\n\nConstant\n127.94250\n\n\nVaried\n144.86316\n\n\nTrain - ALM\n\n\nConstant\n467.73000\n\n\nVaried\n291.38289\n\n\nTrain - EXAM\n\n\nConstant\n273.30000\n\n\nVaried\n297.91053\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Contrasts\n\n\n\ncondit\nmean_error\n\n\n\nTest - ALM\n\n\nConstant\n297.81814\n\n\nVaried\n2016.00582\n\n\nTest - EXAM\n\n\nConstant\n53.90292\n\n\nVaried\n184.00079\n\n\nTest_Train - ALM\n\n\nConstant\n57.39716\n\n\nVaried\n132.32472\n\n\nTest_Train - EXAM\n\n\nConstant\n42.92373\n\n\nVaried\n127.90159\n\n\nTrain - ALM\n\n\nConstant\n51.77211\n\n\nVaried\n103.47686\n\n\nTrain - EXAM\n\n\nConstant\n51.43058\n\n\nVaried\n107.03430"
  },
  {
    "objectID": "Analysis/test_pdf.html#markdown-subtable",
    "href": "Analysis/test_pdf.html#markdown-subtable",
    "title": "HTW Model",
    "section": "Markdown subtable",
    "text": "Markdown subtable\n\n\nTable 2: Main Caption\n\n\n\n\n\n\n\nFit_Method\nModel\n\nConstant\n\nVaried\n\n\n\nFit to Test Data\nALM\n\n199.9\n\n103.4\n\n\nEXAM\n\n104.0\n\n85.7\n\n\nFit to Test & Training Data\nALM\n\n217.0\n\n170.3\n\n\nEXAM\n\n127.9\n\n144.9\n\n\nFit to Training Data\nALM\n\n467.7\n\n291.4\n\n\nEXAM\n\n273.3\n\n297.9\n\n\n\n\n\n\n: First Table {#tbl-first}\n\n\n\n\n\n\n\n\nFit_Method\nModel\n\nConstant\n\nVaried\n\n\n\nFit to Test Data\nALM\n\n297.8\n\n2,016.0\n\n\nEXAM\n\n53.9\n\n184.0\n\n\nFit to Test & Training Data\nALM\n\n57.4\n\n132.3\n\n\nEXAM\n\n42.9\n\n127.9\n\n\nFit to Training Data\nALM\n\n51.8\n\n103.5\n\n\nEXAM\n\n51.4\n\n107.0\n\n\n\n\n\n\n: Second Table {#tbl-second}\n\n\n\n\n\n\n\nTable 3: Mean model errors\n\n\n\n\n\n\n(a) Full datasets\n\n\n\nFit_Method\nModel\ncondit\nmean_error\n\n\n\nTest\nALM\nConstant\n199.93250\n\n\nTest\nALM\nVaried\n103.36184\n\n\nTest\nEXAM\nConstant\n104.01000\n\n\nTest\nEXAM\nVaried\n85.67763\n\n\nTest_Train\nALM\nConstant\n216.96875\n\n\nTest_Train\nALM\nVaried\n170.27632\n\n\nTest_Train\nEXAM\nConstant\n127.94250\n\n\nTest_Train\nEXAM\nVaried\n144.86316\n\n\nTrain\nALM\nConstant\n467.73000\n\n\nTrain\nALM\nVaried\n291.38289\n\n\nTrain\nEXAM\nConstant\n273.30000\n\n\nTrain\nEXAM\nVaried\n297.91053\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Intersection of samples with all labels available\n\n\n\nFit_Method\nModel\ncondit\nmean_error\n\n\n\nTest\nALM\nConstant\n297.81814\n\n\nTest\nALM\nVaried\n2,016.00582\n\n\nTest\nEXAM\nConstant\n53.90292\n\n\nTest\nEXAM\nVaried\n184.00079\n\n\nTest_Train\nALM\nConstant\n57.39716\n\n\nTest_Train\nALM\nVaried\n132.32472\n\n\nTest_Train\nEXAM\nConstant\n42.92373\n\n\nTest_Train\nEXAM\nVaried\n127.90159\n\n\nTrain\nALM\nConstant\n51.77211\n\n\nTrain\nALM\nVaried\n103.47686\n\n\nTrain\nEXAM\nConstant\n51.43058\n\n\nTrain\nEXAM\nVaried\n107.03430"
  },
  {
    "objectID": "Analysis/test_pdf.html#markdown-subtable-1",
    "href": "Analysis/test_pdf.html#markdown-subtable-1",
    "title": "HTW Model",
    "section": "Markdown subtable",
    "text": "Markdown subtable\n\n\nTable 7: Main Caption\n\n\n\n\n\n(a) First Table\n\n\n\nCol1\nCol2\nCol3\n\n\n\nA\nB\nC\n\n\nE\nF\nG\n\n\nA\nG\nG\n\n\n\n\n\n\n\n\n\n\n(b) Second Table\n\n\n\nCol1\nCol2\nCol3\n\n\n\nA\nB\nC\n\n\nE\nF\nG\n\n\nA\nG\nG\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 8: Conditional Means and Contrasts\n\n\n\n\n--------------------------------------------\n Fit_Method   Model    condit    mean_error \n------------ ------- ---------- ------------\n    Test       ALM    Constant     297.8    \n\n    Test       ALM     Varied       2016    \n\n    Test      EXAM    Constant      53.9    \n\n    Test      EXAM     Varied       184     \n\n Test_Train    ALM    Constant      57.4    \n\n Test_Train    ALM     Varied      132.3    \n\n Test_Train   EXAM    Constant     42.92    \n\n Test_Train   EXAM     Varied      127.9    \n\n   Train       ALM    Constant     51.77    \n\n   Train       ALM     Varied      103.5    \n\n   Train      EXAM    Constant     51.43    \n\n   Train      EXAM     Varied       107     \n--------------------------------------------\n\n\n\n--------------------------------------------\n Fit_Method   Model    condit    mean_error \n------------ ------- ---------- ------------\n    Test       ALM    Constant     199.9    \n\n    Test       ALM     Varied      103.4    \n\n    Test      EXAM    Constant      104     \n\n    Test      EXAM     Varied      85.68    \n\n Test_Train    ALM    Constant      217     \n\n Test_Train    ALM     Varied      170.3    \n\n Test_Train   EXAM    Constant     127.9    \n\n Test_Train   EXAM     Varied      144.9    \n\n   Train       ALM    Constant     467.7    \n\n   Train       ALM     Varied      291.4    \n\n   Train      EXAM    Constant     273.3    \n\n   Train      EXAM     Varied      297.9    \n--------------------------------------------\n\n\n\n\n\n\n\nTable 9: Conditional Means and Contrasts\n\n\n\n\n\n+------------+-------+----------+------------+\n| Fit_Method | Model |  condit  | mean_error |\n+============+=======+==========+============+\n|    Test    |  ALM  | Constant |   297.8    |\n+------------+-------+----------+------------+\n|    Test    |  ALM  |  Varied  |    2016    |\n+------------+-------+----------+------------+\n|    Test    | EXAM  | Constant |    53.9    |\n+------------+-------+----------+------------+\n|    Test    | EXAM  |  Varied  |    184     |\n+------------+-------+----------+------------+\n| Test_Train |  ALM  | Constant |    57.4    |\n+------------+-------+----------+------------+\n| Test_Train |  ALM  |  Varied  |   132.3    |\n+------------+-------+----------+------------+\n| Test_Train | EXAM  | Constant |   42.92    |\n+------------+-------+----------+------------+\n| Test_Train | EXAM  |  Varied  |   127.9    |\n+------------+-------+----------+------------+\n|   Train    |  ALM  | Constant |   51.77    |\n+------------+-------+----------+------------+\n|   Train    |  ALM  |  Varied  |   103.5    |\n+------------+-------+----------+------------+\n|   Train    | EXAM  | Constant |   51.43    |\n+------------+-------+----------+------------+\n|   Train    | EXAM  |  Varied  |    107     |\n+------------+-------+----------+------------+\n\nTable: test cap1\n\n\n\n\n+------------+-------+----------+------------+\n| Fit_Method | Model |  condit  | mean_error |\n+============+=======+==========+============+\n|    Test    |  ALM  | Constant |   199.9    |\n+------------+-------+----------+------------+\n|    Test    |  ALM  |  Varied  |   103.4    |\n+------------+-------+----------+------------+\n|    Test    | EXAM  | Constant |    104     |\n+------------+-------+----------+------------+\n|    Test    | EXAM  |  Varied  |   85.68    |\n+------------+-------+----------+------------+\n| Test_Train |  ALM  | Constant |    217     |\n+------------+-------+----------+------------+\n| Test_Train |  ALM  |  Varied  |   170.3    |\n+------------+-------+----------+------------+\n| Test_Train | EXAM  | Constant |   127.9    |\n+------------+-------+----------+------------+\n| Test_Train | EXAM  |  Varied  |   144.9    |\n+------------+-------+----------+------------+\n|   Train    |  ALM  | Constant |   467.7    |\n+------------+-------+----------+------------+\n|   Train    |  ALM  |  Varied  |   291.4    |\n+------------+-------+----------+------------+\n|   Train    | EXAM  | Constant |   273.3    |\n+------------+-------+----------+------------+\n|   Train    | EXAM  |  Varied  |   297.9    |\n+------------+-------+----------+------------+\n\n\n\n\n\n\n\nTable 10: Conditional Means and Contrasts\n\n\n\n\n\n| Fit_Method | Model |  condit  | mean_error |\n|:----------:|:-----:|:--------:|:----------:|\n|    Test    |  ALM  | Constant |   297.8    |\n|    Test    |  ALM  |  Varied  |    2016    |\n|    Test    | EXAM  | Constant |    53.9    |\n|    Test    | EXAM  |  Varied  |    184     |\n| Test_Train |  ALM  | Constant |    57.4    |\n| Test_Train |  ALM  |  Varied  |   132.3    |\n| Test_Train | EXAM  | Constant |   42.92    |\n| Test_Train | EXAM  |  Varied  |   127.9    |\n|   Train    |  ALM  | Constant |   51.77    |\n|   Train    |  ALM  |  Varied  |   103.5    |\n|   Train    | EXAM  | Constant |   51.43    |\n|   Train    | EXAM  |  Varied  |    107     |\n\nTable: test cap1\n\n\n\n\n| Fit_Method | Model |  condit  | mean_error |\n|:----------:|:-----:|:--------:|:----------:|\n|    Test    |  ALM  | Constant |   199.9    |\n|    Test    |  ALM  |  Varied  |   103.4    |\n|    Test    | EXAM  | Constant |    104     |\n|    Test    | EXAM  |  Varied  |   85.68    |\n| Test_Train |  ALM  | Constant |    217     |\n| Test_Train |  ALM  |  Varied  |   170.3    |\n| Test_Train | EXAM  | Constant |   127.9    |\n| Test_Train | EXAM  |  Varied  |   144.9    |\n|   Train    |  ALM  | Constant |   467.7    |\n|   Train    |  ALM  |  Varied  |   291.4    |\n|   Train    | EXAM  | Constant |   273.3    |\n|   Train    | EXAM  |  Varied  |   297.9    |\n\nTable: test cap2"
  },
  {
    "objectID": "Model/htw_model_e1.html",
    "href": "Model/htw_model_e1.html",
    "title": "HTW Model e1",
    "section": "",
    "text": "Codepacman::p_load(dplyr,purrr,tidyr,ggplot2, data.table, here, patchwork, conflicted, \n               stringr,future,furrr, knitr, reactable, flextable,ggstance, htmltools,ggdist)\n#conflict_prefer_all(\"dplyr\", quiet = TRUE)\nwalk(c(\"flextable\",\"dplyr\"), conflict_prefer_all, quiet = TRUE)\n\noptions(digits=2, scipen=999, dplyr.summarise.inform=FALSE)\nwalk(c(\"Display_Functions\",\"fun_alm\",\"fun_indv_fit\",\"fun_model\"), ~ source(here::here(paste0(\"Functions/\", .x, \".R\"))))\nCodealm_plot()\n\n\n\n\n\n\nFigure 1: The basic structure of the ALM model.",
    "crumbs": [
      "Model",
      "HTW Model e1"
    ]
  },
  {
    "objectID": "Model/htw_model_e1.html#alm-exam-description",
    "href": "Model/htw_model_e1.html#alm-exam-description",
    "title": "HTW Model e1",
    "section": "ALM & Exam Description",
    "text": "ALM & Exam Description\nALM is a localist neural network model (Page, 2000), with each input node corresponding to a particular stimulus, and each output node corresponding to a particular response value. The units in the input layer activate as a function of their Gaussian similarity to the input stimulus. So, for example, an input stimulus of value 55 would induce maximal activation of the input unit tuned to 55. Depending on the value of the generalization parameter, the nearby units (e.g. 54 and 56; 53 and 57) may also activate to some degree. ALM is structured with input and output nodes that correspond to regions of the stimulus space, and response space, respectively. The units in the input layer activate as a function of their similarity to a presented stimulus. As was the case with the exemplar-based models, similarity in ALM is exponentially decaying function of distance. The input layer is fully connected to the output layer, and the activation for any particular output node is simply the weighted sum of the connection weights between that node and the input activations. The network then produces a response by taking the weighted average of the output units (recall that each output unit has a value corresponding to a particular response). During training, the network receives feedback which activates each output unit as a function of its distance from the ideal level of activation necessary to produce the correct response. The connection weights between input and output units are then updated via the standard delta learning rule, where the magnitude of weight changes are controlled by a learning rate parameter. The EXAM model is an extension of ALM, with the same learning rule and representational scheme for input and output units. The primary difference is that EXAM includes a linear extrapolation mechanism for generating novel responses during testing, a modification necessary to account for human extrapolation patterns in past research Brown & Lacroix (2017). Although this extrapolation rule departs from a strictly similarity-based generalization mechanism, EXAM is distinct from pure rule-based models in that it remains constrained by the weights learned during training.\nSee Table 1 for a full specification of the equations that define ALM and EXAM.\n\n\n\nTable 1: ALM & EXAM Equations\n\n\n\n\n\n\n\n\n\nALM Response Generation\n\n\n\n\nInput Activation\n\\(a_i(X) = \\frac{e^{-c(X-X_i)^2}}{\\sum_{k=1}^M e^{-c(X-X_k)^2}}\\)\nInput nodes activate as a function of Gaussian similarity to stimulus\n\n\nOutput Activation\n\\(O_j(X) = \\sum_{k=1}^M w_{ji} \\cdot a_i(X)\\)\nOutput unit \\(O_j\\) activation is the weighted sum of input activations and association weights\n\n\nOutput Probability\n\\(P[Y_j|X] = \\frac{O_j(X)}{\\sum_{k=1}^M O_k(X)}\\)\nThe response, \\(Y_j\\) probabilites computed via Luce’s choice rule\n\n\nMean Output\n\\(m(X) = \\sum_{j=1}^L Y_j \\cdot \\frac{O_j(x)}{\\sum_{k=1}^M O_k(X)}\\)\nWeighted average of probabilities determines response to X\n\n\n\nALM Learning\n\n\n\nFeedback\n\\(f_j(Z) = e^{-c(Z-Y_j)^2}\\)\nfeedback signal Z computed as similarity between ideal response and observed response\n\n\nmagnitude of error\n\\(\\Delta_{ji}=(f_{j}(Z)-o_{j}(X))a_{i}(X)\\)\nDelta rule to update weights.\n\n\nUpdate Weights\n\\(w_{ji}^{new}=w_{ji}+\\eta\\Delta_{ji}\\)\nUpdates scaled by learning rate parameter \\(\\eta\\).\n\n\n\nEXAM Extrapolation\n\n\n\nInstance Retrieval\n\\(P[X_i|X] = \\frac{a_i(X)}{\\sum_{k=1}^M a_k(X)}\\)\nNovel test stimulus \\(X\\) activates input nodes \\(X_i\\)\n\n\n\nSlope Computation\n\n\\(S =\\) \\(\\frac{m(X_{1})-m(X_{2})}{X_{1}-X_{2}}\\)\n\nSlope value, \\(S\\) computed from nearest training instances\n\n\nResponse\n\\(E[Y|X_i] = m(X_i) + S \\cdot [X - X_i]\\)\nALM response \\(m(X_i)\\) adjusted by slope.",
    "crumbs": [
      "Model",
      "HTW Model e1"
    ]
  },
  {
    "objectID": "Model/htw_model_e1.html#model-fitting-strategy",
    "href": "Model/htw_model_e1.html#model-fitting-strategy",
    "title": "HTW Model e1",
    "section": "Model Fitting Strategy",
    "text": "Model Fitting Strategy\nTo fit ALM and EXAM to our participant data, we employ a similar method to Mcdaniel et al. (2009), wherein we examine the performance of each model after being fit to various subsets of the data. Each model was fit to the data in with separate procedures: 1) fit to maximize predictions of the testing data, 2) fit to maximize predictions of both the training and testing data, 3) fit to maximize predictions of the just the training data. We refer to this fitting manipulations as “Fit Method” in the tables and figures below. It should be emphasized that for all three fit methods, the ALM and EXAM models behave identically - with weights updating only during the training phase.Models to were fit separately to the data of each individual participant. The free parameters for both models are the generalization (\\(c\\)) and learning rate (\\(lr\\)) parameters. Parameter estimation was performed using approximate bayesian computation (ABC), which we describe in detail below.\n\n\n\n\n\n\n Approximate Bayesian Computation\nTo estimate parameters, we used approximate bayesian computation (ABC), enabling us to obtain an estimate of the posterior distribution of the generalization and learning rate parameters for each individual. ABC belongs to the class of simulation-based inference methods (Cranmer et al., 2020), which have begun being used for parameter estimation in cognitive modeling relatively recently (Kangasrääsiö et al., 2019; Turner et al., 2016; Turner & Van Zandt, 2012). Although they can be applied to any model from which data can be simulated, ABC methods are most useful for complex models that lack an explicit likelihood function (e.g. many neural network and evidence accumulation models).\nThe general ABC procedure is to 1) define a prior distribution over model parameters. 2) sample candidate parameter values, \\(\\theta^*\\), from the prior. 3) Use \\(\\theta^*\\) to generate a simulated dataset, \\(Data_{sim}\\). 4) Compute a measure of discrepancy between the simulated and observed datasets, \\(discrep\\)(\\(Data_{sim}\\), \\(Data_{obs}\\)). 5) Accept \\(\\theta^*\\) if the discrepancy is less than the tolerance threshold, \\(\\epsilon\\), otherwise reject \\(\\theta^*\\). 6) Repeat until desired number of posterior samples are obtained.\nAlthough simple in the abstract, implementations of ABC require researchers to make a number of non-trivial decisions as to i) the discrepancy function between observed and simulated data, ii) whether to compute the discrepancy between trial level data, or a summary statistic of the datasets, iii) the value of the minimum tolerance \\(\\epsilon\\) between simulated and observed data. For the present work, we follow the guidelines from previously published ABC tutorials (Farrell & Lewandowsky, 2018; Turner & Van Zandt, 2012). For the test stage, we summarized datasets with mean velocity of each band in the observed dataset as \\(V_{obs}^{(k)}\\) and in the simulated dataset as \\(V_{sim}^{(k)}\\), where \\(k\\) represents each of the six velocity bands. For computing the discrepancy between datasets in the training stage, we aggregated training trials into three equally sized blocks (separately for each velocity band in the case of the varied group). After obtaining the summary statistics of the simulated and observed datasets, the discrepancy was computed as the mean of the absolute difference between simulated and observed datasets (Equation 1 and Equation 2). For the models fit to both training and testing data, discrepancies were computed for both stages, and then averaged together.\n\n\\[\ndiscrep_{Test}(Data_{sim}, Data_{obs}) = \\frac{1}{6} \\sum_{k=1}^{6} |V_{obs}^{(k)} - V_{sim}^{(k)}|\n\\tag{1}\\]\n\\[\n\\begin{aligned} \\\\\ndiscrep_{Train,constant}(Data_{sim}, Data_{obs}) = \\frac{1}{N_{blocks}} \\sum_{j=1}^{N_{blocks}} |V_{obs,constant}^{(j)} - V_{sim,constant}^{(j)}| \\\\ \\\\\ndiscrep_{Train,varied}(Data_{sim}, Data_{obs}) = \\frac{1}{N_{blocks} \\times 3} \\sum_{j=1}^{N_{blocks}} \\sum_{k=1}^{3} |V_{obs,varied}^{(j,k)} - V_{sim,varied}^{(j,k)}|\n\\end{aligned}\n\\tag{2}\\]\n\nThe final component of our ABC implementation is the determination of an appropriate value of \\(\\epsilon\\). The setting of \\(\\epsilon\\) exerts strong influence on the approximated posterior distribution. Smaller values of \\(\\epsilon\\) increase the rejection rate, and improve the fidelity of the approximated posterior, while larger values result in an ABC sampler that simply reproduces the prior distribution. Because the individual participants in our dataset differed substantially in terms of the noisiness of their data, we employed an adaptive tolerance setting strategy to tailor \\(\\epsilon\\) to each individual. The initial value of \\(\\epsilon\\) was set to the overall standard deviation of each individuals velocity values. Thus, sampled parameter values that generated simulated data within a standard deviation of the observed data were accepted, while worse performing parameters were rejected. After every 300 samples the tolerance was allowed to increase only if the current acceptance rate of the algorithm was less than 1%. In such cases, the tolerance was shifted towards the average discrepancy of the 5 best samples obtained thus far. To ensure the acceptance rate did not become overly permissive, \\(\\epsilon\\) was also allowed to decrease every time a sample was accepted into the posterior.\n\n\n\nFor each of the 156 participants from Experiment 1, the ABC algorithm was run until 200 samples of parameters were accepted into the posterior distribution. Obtaining this number of posterior samples required an average of 205,000 simulation runs per participant. Fitting each combination of participant, Model (EXAM & ALM), and fitting method (Test only, Train only, Test & Train) required a total of 192 million simulation runs. To facilitate these intensive computational demands, we used the Future Package in R (Bengtsson, 2021), allowing us to parallelize computations across a cluster of ten M1 iMacs, each with 8 cores.\nModelling Results\n\nCodeds &lt;- readRDS(here::here(\"data/e1_md_11-06-23.rds\"))  |&gt; as.data.table()\nnbins &lt;- 3\ne1Sbjs &lt;- ds |&gt; group_by(id,condit) |&gt; summarise(n=n())\nfd &lt;- readRDS(here(\"data/e1_08-21-23.rds\"))\ntest &lt;- testE1 &lt;-  fd |&gt; filter(expMode2 == \"Test\") \ntestAvg &lt;- testE1 %&gt;% group_by(id, condit, vb, bandInt,bandType,tOrder) %&gt;%\n  summarise(nHits=sum(dist==0),vxAvg=mean(vx),distAvg=mean(dist),sdist=mean(sdist),n=n(),Percent_Hit=nHits/n)\n\ntrainAvg &lt;- fd |&gt; filter(expMode2 == \"Train\") |&gt; group_by(id) |&gt; \n  mutate(tr=trial,x=vb,Block=case_when(expMode2==\"Train\" ~ cut(tr,breaks=seq(1,max(tr), length.out=nbins+1),include.lowest=TRUE,labels=FALSE),\n                                         expMode2==\"Test\" ~ 4)) |&gt; \n  group_by(id,condit,vb,x,Block) |&gt; \n  summarise(dist=mean(dist),y=mean(vx))\n\ninput_layer &lt;&lt;- output_layer &lt;&lt;-  c(100,350,600,800,1000,1200)\nids2 &lt;- c(1,66,36)\nfile_name &lt;- \"n_iter_200_ntry_300_5354\"\n#file_name &lt;- \"n_iter_400_ntry_100_2944\"\n\n\nind_fits &lt;- map(list.files(here(paste0('data/abc_reject/'),file_name),full.names=TRUE), readRDS)\nind_fits_df &lt;- ind_fits |&gt; map(~list(dat=.x[[1]], Model = .x[[\"Model\"]], Fit_Method=.x[[\"Fit_Method\"]]))\nind_fits_df &lt;- ind_fits_df |&gt; map(~rbindlist(.x$dat) |&gt; mutate(Model = .x$Model, Fit_Method = .x$Fit_Method)) |&gt; rbindlist() \n\n\n\nCodegenerate_data &lt;- function(Model, post_samples, data, num_samples = 1, return_dat = \"train_data, test_data\") {\n  # Filter data for the specific id without invalidating selfref\n  sbj_data &lt;- copy(data[id == post_samples$id[1]])\n  simulation_function &lt;- ifelse(Model == \"EXAM\", full_sim_exam, full_sim_alm)\n\n  target_data &lt;- switch(return_dat,\n                        \"test_data\" = copy(sbj_data[expMode2 == \"Test\"]),\n                        \"train_data\" = copy(sbj_data[expMode2 == \"Train\"]),\n                        \"train_data, test_data\" = copy(sbj_data[expMode2 %in% c(\"Test\", \"Train\")]))\n  \n  post_samples &lt;- post_samples[order(mean_error)][1:num_samples, .(c, lr, mean_error, rank = .I)]\n\n  simulated_data_list &lt;- lapply(1:nrow(post_samples), function(i) {\n    params &lt;- post_samples[i]\n    sim_data &lt;- simulation_function(sbj_data, params$c, params$lr, input_layer = input_layer, \n                                    output_layer = output_layer, return_dat = return_dat)\n    sim_data_dt &lt;- data.table(id = sbj_data$id[1], condit = sbj_data$condit[1], \n                              expMode2 = target_data$expMode2, Model = Model,tr=target_data$tr,\n                              y = target_data$y, x = target_data$x, c = params$c, \n                              lr = params$lr, mean_error = params$mean_error, rank = i,\n                              pred = sim_data)\n    return(sim_data_dt)\n  })\n  \n  result_dt &lt;- rbindlist(simulated_data_list)\n  setcolorder(result_dt, c(\"id\", \"condit\", \"expMode2\",\"tr\", \"c\", \"lr\", \"x\", \"y\", \"pred\"))\n  return(result_dt)\n}\n\n#future::plan(multisession)\n\nnestSbjModelFit &lt;- ind_fits_df %&gt;% nest(.by=c(id,Model,Fit_Method))\n\n# organize test data predictions\n# post_dat &lt;- nestSbjModelFit |&gt; mutate(pp=furrr::future_pmap(list(id,Model,Fit_Method,data), ~{\n#    generate_data(..2, ..4 |&gt; mutate(id=..1), ds, num_samples = 50, return_dat=\"test_data\")\n#    })) |&gt; \n#   select(Fit_Method,pp,-data) |&gt;  \n#   unnest(pp) |&gt;  filter(expMode2==\"Test\") |&gt; as.data.table()\n# \n# saveRDS(post_dat, here(\"data/model_cache/post_dat.rds\"))\n\npost_dat &lt;- readRDS(here(\"data/model_cache/post_dat.rds\"))\n\npost_dat_avg &lt;- post_dat |&gt; group_by(id, condit, Model, Fit_Method, x, c, lr, rank) |&gt; \n  mutate(error2 = y - pred) |&gt;\n  summarise(y = mean(y), pred = mean(pred), error = y - pred, error2=mean(error2)) |&gt; as.data.table()\n\nsetorder(post_dat_avg, id, x, rank)\npost_dat_l &lt;- melt(post_dat_avg, id.vars = c(\"id\", \"condit\", \"Model\", \"Fit_Method\", \"x\", \"c\", \"lr\", \"rank\",\"error\"),\n                   measure.vars = c(\"pred\", \"y\"), variable.name = \"Resp\", value.name = \"val\")\npost_dat_l[, Resp := fifelse(Resp == \"y\", \"Observed\",\n                             fifelse(Model == \"ALM\", \"ALM\", \"EXAM\"))]\nsetorder(post_dat_l, id, Resp)\n#rm(post_dat_avg)\n\npost_dat_l &lt;- post_dat_l |&gt; mutate(dist = case_when(\n    val &gt;= x & val &lt;= x + 200 ~ 0,                 \n    val &lt; x ~ abs(x - val),                       \n    val &gt; x + 200 ~ abs(val - (x + 200)),           \n    TRUE ~ NA_real_                                 \n  ), signed_dist = case_when(\n    val &gt;= x & val &lt;= x + 200 ~ 0,                 \n    val &lt; x ~ x - val,                             \n    val &gt; x + 200 ~ val - (x + 200),               \n    TRUE ~ NA_real_                                 \n  ))\n\npost_dat &lt;- post_dat |&gt;  mutate(dist = case_when(\n    y &gt;= x & y &lt;= x + 200 ~ 0,                 \n    y &lt; x ~ abs(x - y),                       \n    y &gt; x + 200 ~ abs(y - (x + 200)),           \n    TRUE ~ NA_real_                                 \n  ), pred_dist = case_when(\n    pred &gt;= x & pred &lt;= x + 200 ~ 0,                 \n    pred &lt; x ~ abs(x - pred),                       \n    pred &gt; x + 200 ~ abs(pred - (x + 200)),           \n    TRUE ~ NA_real_                                 \n  ))\n\n# organize training data predictions\n# pd_train &lt;- nestSbjModelFit |&gt; mutate(pp=furrr::future_pmap(list(id,Model,Fit_Method,data), ~{\n#    generate_data(..2, ..4 |&gt; mutate(id=..1), ds, num_samples = 20, return_dat=\"train_data\")\n#    })) |&gt;\n#   select(Fit_Method,pp,-data) |&gt;\n#   unnest(pp) |&gt; as.data.table() |&gt; filter(expMode2==\"Train\")\n\n#saveRDS(pd_train, here(\"data/model_cache/pd_train.rds\"))\n\npd_train &lt;- readRDS(here(\"data/model_cache/pd_train.rds\"))\n\nnbins &lt;- 3\npd_train &lt;- pd_train |&gt; group_by(id,condit,Model,Fit_Method) |&gt;\n  mutate(Block=cut(tr,breaks=seq(1,max(tr), length.out=nbins+1),include.lowest=TRUE,labels=FALSE))\nsetorder(pd_train, id, x,Block, rank)\n\npd_train_l &lt;- reshape2::melt(pd_train, id.vars = c(\"id\", \"condit\", \"Model\",\"Block\", \"Fit_Method\", \"x\", \"c\", \"lr\", \"rank\"),\n                   measure.vars = c(\"pred\", \"y\"), variable.name = \"Resp\", value.name = \"val\") |&gt; as.data.table()\npd_train_l[, Resp := fifelse(Resp == \"y\", \"Observed\",\n                             fifelse(Model == \"ALM\", \"ALM\", \"EXAM\"))] \nsetorder(pd_train_l, id,Block, Resp) \n\npd_train_l &lt;- pd_train_l  |&gt;\n  mutate(dist = case_when(\n    val &gt;= x & val &lt;= x + 200 ~ 0,                 \n    val &lt; x ~ abs(x - val),                       \n    val &gt; x + 200 ~ abs(val - (x + 200)),           \n    TRUE ~ NA_real_                                 \n  ))\n\n#plan(sequential)\n\n\nGroup level aggregations\n\nCodepost_tabs &lt;- abc_tables(post_dat,post_dat_l)\ntrain_tab &lt;- abc_train_tables(pd_train,pd_train_l)\n# post_tabs$agg_pred_full |&gt; \n#   mutate(Fit_Method=rename_fm(Fit_Method)) |&gt;\n#   flextable::tabulator(rows=c(\"Fit_Method\",\"Model\"), columns=c(\"condit\"),\n#                        `ME` = as_paragraph(mean_error)) |&gt; as_flextable()\n\n#post_tabs$agg_pred_full |&gt; pander::pandoc.table()\n\n# train_tab$agg_pred_full |&gt; \n#   mutate(Fit_Method=rename_fm(Fit_Method)) |&gt;\n#   flextable::tabulator(rows=c(\"Fit_Method\",\"Model\"), columns=c(\"condit\"),\n#                        `ME` = as_paragraph(mean_error)) |&gt; as_flextable()\n# \n\nrbind(post_tabs$agg_pred_full |&gt; mutate(stage=\"Test\"), train_tab$agg_pred_full |&gt; mutate(stage=\"Train\")) |&gt; \n  mutate(Fit_Method=rename_fm(Fit_Method)) |&gt;\n  flextable::tabulator(rows=c(\"stage\",\"Fit_Method\",\"Model\"), columns=c(\"condit\"),\n                       `ME` = as_paragraph(mean_error)) |&gt; as_flextable()\n post_dat  |&gt; group_by(condit,Model,Fit_Method,x) |&gt; \n    mutate(e2=abs(dist-pred_dist)) |&gt; \n    summarise(dist=mean(dist), pred=mean(pred_dist), mean_error=mean(e2)) |&gt;\n    group_by(condit,Model,Fit_Method) |&gt; \n    summarise(mean_error=mean(mean_error)) |&gt; \n    round_tibble(1) |&gt; \n  mutate(Fit_Method=rename_fm(Fit_Method)) |&gt;\n  flextable::tabulator(rows=c(\"Fit_Method\",\"Model\"), columns=c(\"condit\"),\n                       `ME` = as_paragraph(mean_error)) |&gt; as_flextable()\n\n\nTable 2: Mean model errors predicting empirical data from the testing and training stage, aggregated over all participants and velocity bands. Note that Fit Method refers to the subset of the data that the model was trained on\n\n\n\n\n\n\nstage\nFit_Method\nModel\n\nConstant\n\nVaried\n\n\n\nTest\nFit to Test Data\nALM\n\n199.9\n\n103.4\n\n\nEXAM\n\n104.0\n\n85.7\n\n\nFit to Test & Training Data\nALM\n\n217.0\n\n170.3\n\n\nEXAM\n\n127.9\n\n144.9\n\n\nFit to Training Data\nALM\n\n467.7\n\n291.4\n\n\nEXAM\n\n273.3\n\n297.9\n\n\nTrain\nFit to Test Data\nALM\n\n297.8\n\n2,016.0\n\n\nEXAM\n\n53.9\n\n184.0\n\n\nFit to Test & Training Data\nALM\n\n57.4\n\n132.3\n\n\nEXAM\n\n42.9\n\n127.9\n\n\nFit to Training Data\nALM\n\n51.8\n\n103.5\n\n\nEXAM\n\n51.4\n\n107.0\n\n\n\n\n\n\n\n\n\n\nFit_Method\nModel\n\nConstant\n\nVaried\n\n\n\nFit to Test Data\nALM\n\n181.4\n\n172.2\n\n\nEXAM\n\n158.6\n\n163.3\n\n\nFit to Test & Training Data\nALM\n\n180.9\n\n185.5\n\n\nEXAM\n\n169.6\n\n179.5\n\n\nFit to Training Data\nALM\n\n326.1\n\n263.3\n\n\nEXAM\n\n223.6\n\n265.1\n\n\n\n\n\n\n\n\n\n\nCodepost_tabs$et_sum\n\n\net_sum &lt;- post_dat_l |&gt;\n  group_by(id,condit, Fit_Method, Resp) |&gt;\n  summarise(val = mean(val), .groups = 'drop') |&gt;\n  pivot_wider(\n    names_from = Resp,\n    values_from = val,\n    values_fill = list(val = NA)\n  ) |&gt;\n  mutate(\n    ALM_error = round(abs(ALM - Observed),1),\n    EXAM_error = round(abs(EXAM - Observed),1),\n    Best_Model = case_when(\n      ALM_error &lt; EXAM_error ~ \"ALM\",\n      EXAM_error &lt; ALM_error ~ \"EXAM\",\n      TRUE ~ NA_character_  # In case of a tie or missing data\n    )\n  ) |&gt;\n  group_by(condit, Fit_Method) %&gt;%\n  summarise(\n    Avg_ALM_error = round(mean(ALM_error, na.rm = TRUE),1),\n    Avg_EXAM_error = round(mean(EXAM_error, na.rm = TRUE),1),\n    N_Best_ALM = sum(Best_Model == \"ALM\", na.rm = TRUE),\n    N_Best_EXAM = sum(Best_Model == \"EXAM\", na.rm = TRUE)\n  ) %&gt;%\n  mutate(\n    Best_Model = case_when(\n      Avg_ALM_error &lt; Avg_EXAM_error ~ \"ALM\",\n      Avg_EXAM_error &lt; Avg_ALM_error ~ \"EXAM\",\n      TRUE ~ \"Tie\"  # In case of a tie or missing data\n    ))\n\n\n\n\net_sum_x &lt;- post_dat_l |&gt;\n  group_by(id,condit, Fit_Method, Resp,x) |&gt;\n  summarise(val = mean(val), .groups = 'drop') |&gt;\n  pivot_wider(\n    names_from = Resp,\n    values_from = val,\n    values_fill = list(val = NA)\n  ) |&gt;\n  mutate(\n    ALM_error = round(abs(ALM - Observed),1),\n    EXAM_error = round(abs(EXAM - Observed),1),\n    Best_Model = case_when(\n      ALM_error &lt; EXAM_error ~ \"ALM\",\n      EXAM_error &lt; ALM_error ~ \"EXAM\",\n      TRUE ~ NA_character_  # In case of a tie or missing data\n    )\n  ) |&gt;\n  group_by(condit, Fit_Method) %&gt;%\n  summarise(\n    Avg_ALM_error = round(mean(ALM_error, na.rm = TRUE),1),\n    Avg_EXAM_error = round(mean(EXAM_error, na.rm = TRUE),1),\n    N_Best_ALM = sum(Best_Model == \"ALM\", na.rm = TRUE),\n    N_Best_EXAM = sum(Best_Model == \"EXAM\", na.rm = TRUE)\n  ) %&gt;%\n  mutate(\n    Best_Model = case_when(\n      Avg_ALM_error &lt; Avg_EXAM_error ~ \"ALM\",\n      Avg_EXAM_error &lt; Avg_ALM_error ~ \"EXAM\",\n      TRUE ~ \"Tie\"  # In case of a tie or missing data\n    ))\n\n\n\n\net_sum_x_id &lt;- post_dat_l |&gt;\n  group_by(id,condit, Fit_Method, Resp,x) |&gt;\n  summarise(val = mean(val), .groups = 'drop') |&gt;\n  pivot_wider(\n    names_from = Resp,\n    values_from = val,\n    values_fill = list(val = NA)\n  ) |&gt;\n  mutate(\n    ALM_error = round(abs(ALM - Observed),1),\n    EXAM_error = round(abs(EXAM - Observed),1),\n    Best_Model = case_when(\n      ALM_error &lt; EXAM_error ~ \"ALM\",\n      EXAM_error &lt; ALM_error ~ \"EXAM\",\n      TRUE ~ NA_character_  # In case of a tie or missing data\n    )\n  ) |&gt;\n  group_by(condit, Fit_Method) %&gt;%\n  summarise(\n    Avg_ALM_error = round(mean(ALM_error, na.rm = TRUE),1),\n    Avg_EXAM_error = round(mean(EXAM_error, na.rm = TRUE),1),\n    N_Best_ALM = sum(Best_Model == \"ALM\", na.rm = TRUE),\n    N_Best_EXAM = sum(Best_Model == \"EXAM\", na.rm = TRUE)\n  ) %&gt;%\n  mutate(\n    Best_Model = case_when(\n      Avg_ALM_error &lt; Avg_EXAM_error ~ \"ALM\",\n      Avg_EXAM_error &lt; Avg_ALM_error ~ \"EXAM\",\n      TRUE ~ \"Tie\"  # In case of a tie or missing data\n    ))\n\n\n agg_pred_full &lt;-  post_dat  |&gt; group_by(id,condit,Model,Fit_Method,x) |&gt; \n    mutate(e2=abs(y-pred)) |&gt; \n    summarise(y=mean(y), pred=mean(pred), mean_error=mean(e2),ei2=abs(y-pred)) |&gt;\n    group_by(id,condit,Model,Fit_Method) |&gt; \n    summarise(mean_error=mean(mean_error),imean_error=mean(ei2)) |&gt; \n    round_tibble(1) |&gt; \n    group_by(Fit_Method,Model,condit) |&gt; \n   # summarise(mean_error=mean(mean_error),imean_error=mean(imean_error))\n   summarise(mean_error=mean(imean_error))\n\n \n \n   agg_pred_full &lt;-  pd_train  |&gt; group_by(condit,Model,Fit_Method,Block,x) |&gt; \n    mutate(e2=abs(y-pred)) |&gt; \n    summarise(y=mean(y), pred=mean(pred), mean_error=mean(e2),ei2=abs(y-pred)) |&gt;\n    group_by(condit,Model,Fit_Method,Block) |&gt; \n    summarise(mean_error=mean(mean_error), mean_ei2=mean(ei2)) |&gt; \n    group_by(Fit_Method,Model,condit) |&gt;\n    summarise(mean_error=mean(mean_error),mean_ei2=mean(mean_ei2)) \n   \n \n pd_train  |&gt; group_by(id, condit,Model,Fit_Method,Block,x) |&gt; \n    mutate(e2=abs(y-pred)) |&gt; \n    summarise(y=mean(y), pred=mean(pred), mean_error=mean(e2),ei2=abs(y-pred)) |&gt;\n    group_by(condit,Model,Fit_Method,Block) |&gt; \n    summarise(mean_error=mean(mean_error), mean_ei2=mean(ei2)) |&gt; \n    group_by(Fit_Method,Model,condit) |&gt;\n    summarise(mean_error=mean(mean_error),mean_ei2=mean(mean_ei2))   \n\n\n\nCodepost_dat_l |&gt; group_by(condit, Fit_Method,Resp,x) |&gt;mutate(x=as.factor(x)) |&gt;\n summarize(vx=mean(val)) |&gt; ggplot(aes(x=condit,y=vx, fill=x)) + stat_bar + facet_wrap(~Resp+Fit_Method)\n\n\n\n\n\n\nCodepost_dat_l |&gt; group_by(condit, Fit_Method,Resp,x) |&gt;mutate(x=as.factor(x)) |&gt;\n summarize(dist=mean(dist)) |&gt; ggplot(aes(x=condit,y=dist, fill=x)) + stat_bar + facet_wrap(~Resp+Fit_Method)\n\n\n\n\n\n\nCodepost_dat_l |&gt; group_by(id,condit, Fit_Method,Resp,x) |&gt;mutate(x=as.factor(x)) |&gt;\n summarize(dist=mean(dist)) |&gt; ggplot(aes(x=Resp,y=dist, fill=condit)) + stat_bar + facet_wrap(~Fit_Method+x)\n\n\n\n\n\n\nCodepost_dat_l |&gt; group_by(id,condit, Fit_Method,Resp) |&gt;mutate(x=as.factor(x)) |&gt;\n summarize(dist=mean(dist)) |&gt; ggplot(aes(x=Resp,y=dist, fill=condit)) + stat_bar + facet_wrap(~Fit_Method)\n\n\n\n\n\n\nCodepost_dat_l |&gt; group_by(id,condit, Fit_Method,Resp) |&gt;mutate(x=as.factor(x)) |&gt;\n summarize(dist=mean(dist)) |&gt; ggplot(aes(x=Resp,y=dist, fill=condit)) + stat_bar + facet_wrap(~Fit_Method)\n\n\n\n\n\n\n\n\nCodepdl &lt;- post_dat_l |&gt; rename(\"bandInt\"=x) |&gt; left_join(testAvg,by=c(\"id\",\"condit\",\"bandInt\")) \npd &lt;- post_dat |&gt; rename(\"bandInt\"=x) |&gt; left_join(testAvg,by=c(\"id\",\"condit\",\"bandInt\"))\n\n\npdl |&gt; group_by(id,condit, bandType,Resp) |&gt;\n summarize(dist=mean(dist)) |&gt; ggplot(aes(x=Resp,y=dist, fill=condit)) + stat_bar + facet_wrap(~bandType)\n\n\n# mixed effects model of post_dat, predicting mean_error from Model\n# and Fit_Method, with random intercepts for id and condit\n\nlme4::lmer(data=post_dat |&gt; filter(rank==1),mean_error ~ Model*Fit_Method + (1|condit), REML=FALSE) |&gt; summary()\n\nlme4::lmer(data=post_dat |&gt; filter(rank==1),mean_error ~ Model*condit + (1|id), REML=FALSE) |&gt; summary()\n\nlme4::lmer(data=post_dat |&gt; filter(rank==1),mean_error ~ Model*condit*x + (1|id), REML=FALSE) |&gt; summary()\n\nlme4::lmer(data=pd |&gt; filter(rank==1),mean_error ~ Model*bandType + (1|id), REML=FALSE) |&gt; summary()\nlme4::lmer(data=pd |&gt; filter(rank==1),mean_error ~ Model*bandType*condit + (1|id), REML=FALSE) |&gt; summary()\n\nlme4::lmer(data=pd |&gt; filter(rank&lt;=50, condit==\"Varied\",Fit_Method==\"Test_Train\"),mean_error ~ Model*bandType + (1|id), REML=FALSE) |&gt; summary()\nlme4::lmer(data=pd |&gt; filter(rank&lt;=50, condit==\"Constant\",Fit_Method==\"Test_Train\"),mean_error ~ Model*bandType + (1|id), REML=FALSE) |&gt; summary()\n\nlibrary(brms)\noptions(brms.backend=\"cmdstanr\",mc.cores=4)\nb1 &lt;- brm(data=pd |&gt; \n    filter(rank==1),\n    mean_error ~ Model*bandType*condit, \n    chains=2, iter=1000, control=list(adapt_delta=0.92, max_treedepth=11))\nsummary(b1)\n\n\nb2 &lt;- brm(data=pd |&gt; filter(rank==1),mean_error ~ Model*bandInt*condit, chains=2, iter=1000, control=list(adapt_delta=0.92, max_treedepth=11))\nsummary(b2)\n\n\nb3 &lt;- brm(data=pd |&gt; filter(rank==1),\n  mean_error ~ Model*id, \n  file = paste0(here(\"data/model_cache/e1_brms_examEst_ModelxID.rds\")),\n  chains=2, iter=500, control=list(adapt_delta=0.92, max_treedepth=11))\nsummary(b3)\n\n\nb3_coef &lt;- fixef(b3) |&gt; as_tibble() %&gt;% mutate(term=rownames(fixef(b3))) \nexam_coef &lt;- b3_coef |&gt; filter(term==\"ModelEXAM\") |&gt; pull(Estimate)\nhead(b3_coef)\n# A tibble: 6 × 5\n#   Estimate Est.Error  Q2.5   Q97.5 term     \n#      &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    \n# 1   270.        3.42 264.  276.    Intercept\n# 2    -8.68      5.60 -18.5   0.269 ModelEXAM\n# 3   133.        4.69 124.  142.    id2      \n# 4    53.9       4.59  45.8  63.2   id3      \n# 5   -42.6       4.57 -51.7 -33.7   id4 \n\n# extract id's from term column - Intercept is id 1, term=ModelEXAM doesn't have an id, so don't include\nk &lt;- b3_coef |&gt; filter(term!=\"Intercept\" & term!=\"ModelEXAM\") |&gt; mutate(id=as.factor(str_extract(term,\"\\\\d+\"))) |&gt; left_join(testAvg |&gt; filter(bandInt==100) |&gt; ungroup() |&gt; select(-bandType,-vb,-bandInt),by=\"id\") |&gt; \n  mutate(exam_coef=exam_coef) \n\n# add new variable parType, which is set to \"Model\" if term contains \"ModelEXAM\" and \"id\" otherwise\nk &lt;- k |&gt; mutate(parType=case_when(\n  str_detect(term,\"ModelEXAM\") ~ \"Model\",\n  TRUE ~ \"id\"\n))\n\n\nk |&gt; ggplot(aes(x=parType,y=Estimate,fill=condit)) + geom_boxplot()\n\n# plot Model coefficients for each individual\n\nk |&gt; filter(parType==\"Model\") |&gt; mutate(id=reorder(id,Estimate), Estimate=Estimate+exam_coef) |&gt; \n  ggplot(aes(x=id,y=Estimate,fill=condit)) + \n  geom_col() +  ggh4x::facet_grid2(~condit,axes=\"all\",scales=\"free_y\", independent = \"y\") + coord_flip()\n\n# t test for Model coefficients between conditions\nt.test(Estimate ~ condit, data=k |&gt; filter(parType==\"Model\"))\n\n\nk2 &lt;- k |&gt; filter(parType==\"Model\") |&gt; mutate(id=reorder(id,Estimate), Estimate=Estimate+exam_coef) |&gt; \n  select(id,condit,Estimate) |&gt; left_join(testAvg,by=c(\"id\",\"condit\"))\n\nk3 &lt;- k |&gt; filter(parType==\"Model\") |&gt; mutate(id=reorder(id,Estimate), Estimate=Estimate+exam_coef) |&gt; \n  select(id,condit,Estimate) |&gt; left_join(testE1,by=c(\"id\",\"condit\"))\n\n\n# assess group differences, while controlling for the effect of the Model coefficient\n\nlme4::lmer(data=k2,distAvg ~ Estimate + bandInt +condit+ (1|id), REML=FALSE) |&gt; summary()\nlme4::lmer(data=k2,distAvg ~  bandType* condit+ (1|id), REML=FALSE) |&gt; summary()\n\nlme4::lmer(data=k3,dist ~ Estimate + bandInt +condit+ (1|id), REML=FALSE) |&gt; summary()\nlme4::lmer(data=k3,dist ~ Estimate * bandInt * condit+ (1|id), REML=FALSE) |&gt; summary()\nlme4::lmer(data=k3,dist ~ Estimate * bandType * condit+ (1|id), REML=FALSE) |&gt; summary()\nlme4::lmer(data=k3,dist ~ Estimate * bandType * condit+ (1|id) + (1|bandInt), REML=FALSE) |&gt; summary()\nlme4::lmer(data=k3,vx ~ Estimate * bandInt * condit+ (1|id), REML=FALSE) |&gt; summary()\n\n\n# bin k3 in quantiles based on value of Estimate\nk3 |&gt; group_by(condit) |&gt;  mutate(quantile=ntile(Estimate,4)) |&gt; group_by(quantile,condit) |&gt; summarise(dist=mean(dist),.groups=\"drop\")\n\n  k3 |&gt; group_by(condit) |&gt;  mutate(quantile=ntile(Estimate,4)) |&gt; ggplot(aes(x=vb,y=dist,fill=condit)) + stat_bar + facet_wrap(~quantile)\n\n  k2 |&gt; ggplot(aes(x=Estimate,y=distAvg,col=condit)) + geom_point() + geom_smooth(method=\"lm\",se=FALSE) + facet_wrap(~vb)\n  \nfe &lt;- fixef(e1_vxBMM)[,1]\nfixed_effect_bandInt &lt;- fixef(e1_vxBMM)[,1][\"bandInt\"]\nfixed_effect_interaction &lt;- fixef(e1_vxBMM)[,1][\"conditVaried:bandInt\"]\n\ne1_slopes &lt;- readRDS(paste0(here::here(\"data/model_cache/e1_testVxBand_RF_5k.rds\")))  \nre &lt;-data.frame(ranef(e1_slopes, pars = \"bandInt\")$id[, ,'bandInt']) |&gt; tibble::rownames_to_column(\"id\") |&gt; \n  left_join(e1Sbjs,by=\"id\") |&gt;\n  mutate(adjust= fixef(e1_slopes)[,1][\"bandInt\"] + \n           fixef(e1_slopes)[,1][\"conditVaried:bandInt\"]*(condit==\"Varied\"),slope = Estimate + adjust )\n\nid_est &lt;- k |&gt; filter(parType==\"Model\") |&gt; transmute(id=reorder(id,Estimate), exam_est=Estimate+exam_coef) |&gt; \n  left_join(re,by=\"id\")\n\nid_est |&gt; ggplot(aes(x=slope,y=exam_est,fill=condit)) + geom_point() + geom_smooth(method=\"lm\",se=FALSE) + facet_wrap(~condit)\n\n# combine with testE1, and assess whether slope or exam_est is a better predictor of dist\nlme4::lmer(data=.,dist ~ slope + exam_est + (1|id), REML=FALSE) |&gt; summary()\n\n# assess whether the effect of slope on dist is different between conditions\nid_est |&gt; left_join(testE1,by=c(\"id\",\"condit\")) %&gt;%  lme4::lmer(data=.,dist ~ slope * condit + (1|id), REML=FALSE) |&gt; summary()\nid_est |&gt; left_join(testE1,by=c(\"id\",\"condit\")) %&gt;%  lme4::lmer(data=.,dist ~ exam_est * condit + (1|id), REML=FALSE) |&gt; summary()\n\n# see whether exam_est or slope can predict condit better (condit is a factor)\nid_est |&gt; left_join(testE1,by=c(\"id\",\"condit\")) %&gt;%  lme4::lmer(data=.,condit ~ slope + exam_est + (1|id), REML=FALSE) |&gt; summary()\n#Error in mkRespMod(fr, REML = REMLpass) : response must be numeric\n# try logistic regression or classification\nid_est |&gt; left_join(testE1,by=c(\"id\",\"condit\")) %&gt;% glm(data=.,condit ~ slope + exam_est, family=\"binomial\") |&gt; summary()\n# coefficients:\n#             Estimate Std. Error z value             Pr(&gt;|z|)    \n# (Intercept) 0.203035   0.046429   4.373            0.0000123 ***\n# slope       3.050911   0.107725  28.321 &lt; 0.0000000000000002 ***\n# exam_est    0.145142   0.003311  43.834 &lt; 0.0000000000000002 ***\n\n\n\nCodeet_sum_dist &lt;- post_dat_l |&gt;\n  group_by(id,condit, Fit_Method, Resp) |&gt;\n  summarise(val = mean(dist), .groups = 'drop') |&gt;\n  pivot_wider(\n    names_from = Resp,\n    values_from = val,\n    values_fill = list(val = NA)\n  ) |&gt;\n  mutate(\n    ALM_error = round(abs(ALM - Observed),1),\n    EXAM_error = round(abs(EXAM - Observed),1),\n    Best_Model = case_when(\n      ALM_error &lt; EXAM_error ~ \"ALM\",\n      EXAM_error &lt; ALM_error ~ \"EXAM\",\n      TRUE ~ NA_character_  # In case of a tie or missing data\n    )\n  ) |&gt;\n  group_by(condit, Fit_Method) %&gt;%\n  summarise(\n    Avg_ALM_error = round(mean(ALM_error, na.rm = TRUE),1),\n    Avg_EXAM_error = round(mean(EXAM_error, na.rm = TRUE),1),\n    N_Best_ALM = sum(Best_Model == \"ALM\", na.rm = TRUE),\n    N_Best_EXAM = sum(Best_Model == \"EXAM\", na.rm = TRUE)\n  ) %&gt;%\n  mutate(\n    Best_Model = case_when(\n      Avg_ALM_error &lt; Avg_EXAM_error ~ \"ALM\",\n      Avg_EXAM_error &lt; Avg_ALM_error ~ \"EXAM\",\n      TRUE ~ \"Tie\"  # In case of a tie or missing data\n    )\n  )\n\n\net_sum_vx &lt;- post_dat_l |&gt;\n  group_by(id,condit, Fit_Method, Resp) |&gt;\n  summarise(val = mean(val), .groups = 'drop') |&gt;\n  pivot_wider(\n    names_from = Resp,\n    values_from = val,\n    values_fill = list(val = NA)\n  ) |&gt;\n  mutate(\n    ALM_error = round(abs(ALM - Observed),1),\n    EXAM_error = round(abs(EXAM - Observed),1),\n    Best_Model = case_when(\n      ALM_error &lt; EXAM_error ~ \"ALM\",\n      EXAM_error &lt; ALM_error ~ \"EXAM\",\n      TRUE ~ NA_character_  # In case of a tie or missing data\n    )\n  ) |&gt;\n  group_by(condit, Fit_Method) %&gt;%\n  summarise(\n    Avg_ALM_error = round(mean(ALM_error, na.rm = TRUE),1),\n    Avg_EXAM_error = round(mean(EXAM_error, na.rm = TRUE),1),\n    N_Best_ALM = sum(Best_Model == \"ALM\", na.rm = TRUE),\n    N_Best_EXAM = sum(Best_Model == \"EXAM\", na.rm = TRUE)\n  ) %&gt;%\n  mutate(\n    Best_Model = case_when(\n      Avg_ALM_error &lt; Avg_EXAM_error ~ \"ALM\",\n      Avg_EXAM_error &lt; Avg_ALM_error ~ \"EXAM\",\n      TRUE ~ \"Tie\"  # In case of a tie or missing data\n    )\n  )\n\n\nThe posterior distributions of the \\(c\\) and \\(lr\\) parameters are shown Figure 3 (i.e. these plots combine all the posterior samples from all of the subjects). There were substantial individual differences in the posteriors of both parameters, with the within-group individual differences generally swamped any between-group or between-model differences. The magnitude of these individual differences remains even if we consider only the single best parameter set for each subject.\nWe used the posterior distribution of \\(c\\) and \\(lr\\) parameters to generate a posterior predictive distribution of the observed data for each participant, which then allows us to compare the empirical data to the full range of predictions from each model. Model residuals are shown in the upper panels of Figure 2. The pattern of training stage residual errors are unsurprising across the combinations of models and fitting method . Differences between ALM and EXAM are generally minor (the two models have identical learning mechanisms). The differences in the magnitude of residuals across the three fitting methods are also straightforward, with massive errors for the ‘fit to Test Only’ model, and the smallest errors for the ‘fit to train only’ models. It is also noteworthy that the residual errors are generally larger for the first block of training, which is likely due to the initial values of the ALM weights being unconstrained by whatever initial biases participants tend to bring to the task. Future work may explore the ability of the models to capture more fine grained aspects of the learning trajectories. However for the present purposes, our primary interest is in the ability of ALM and EXAM to account for the testing patterns while being constrained, or not constrained, by the training data. All subsequent analyses and discussion will thus focus on the testing stage.\nThe residuals of the model predictions for the testing stage (Figure 2) also show an unsurprising pattern across fitting methods - with models fit only to the test data showing the best performance, followed by models fit to both training and test data, and with models fit only to the training data showing the worst performance (note that y axes are scaled different between plots). Unsurprisingly, the advantage of EXAM is strongest for extrapolation positions (the three smallest bands for both groups - as well as the two highest bands for the Constant group). Although EXAM tends to perform better for both Constant and Varied participants (see also Table 2), the relative advantage of EXAM is generally larger for the Constant group - a pattern consistent across all three fitting methods.\nPanel B of Figure 2 directly compares the aggregated observed data to the posterior predictive distributions for the testing stage. Of interest are a) the extent to which the median estimates of the ALM and EXAM posteriors deviate from the observed medians for each velocity band; b) the ability of ALM and EXAM to discriminate between velocity bands; c) the relative performance of models that are constrained by the training data (i.e. the ‘fit to train only’ and ‘fit to both’ models) compared to the ‘fit to test only’ models; and d) the extent to which the variance of the posterior predictive distributions mimics the variance of the observed data.\nConsidering first the models fit to only the testing data, which reflect the best possible performance of ALM and EXAM at capturing the group-aggregated testing patterns. For the varied group, both ALM and EXAM are able to capture the median values of the observed data within the 66% credible intervals, and the spread of model predictions generally matches that of the observed data. For the constant group, only EXAM is able to capture the median range of values across the velocity bands, with ALM generally underestimating human velocoties in the upper bands, and overestimating in the lower bands. In the case of band 100, the median ALM prediction appears to match that of our participants - however this is due to a large subset of participants have ALM predictions near 0 for band 100, a pattern we will explore further in our considertation of individual patterns below. Models fit to both training and testing data show a similar pattern to only the testing data display the same basic pattern as those fit to only the testing data, albeit with slightly larger residuals. However models fit to only the training data display markedly worse performance at accounting for the key testing patterns.\n\n** explain how the constant group ALM predictions for band 100 look deceptively good due to aggregation of a large subset of subjects having ALM predictions of 0 for vb100, and a large subset with ALM predictions close to their position 800 value. This is relected by much greater variance of the ALM esimates in the posterior predictive plot\n** comment on how much constrained by the training data has a worse impact on the EXAM predictions for varied than for constant - perhaps due to the varied training data being much noisier than the constant training data.\n** comment on EXAM doing a better job mimicing the within-condition variance of the observed data\n** comment on the % of Constant subjects being best accounted for by EXAM being higher.\n** does EXAM do better for the Constant group because the constant group performs better? Or does training with a single example encourage an exam sort of strategy?\n\n\nCode##| layout: [[45,-5, 45], [100]]\n##| fig-subcap: [\"Model Residuals - training data\", \"Model Residuals - testing data\",\"Full posterior predictive distributions vs. observed data from participants.\"]\ntrain_resid &lt;- pd_train |&gt; group_by(id,condit,Model,Fit_Method, Block) |&gt; \n  summarise(y = mean(y), pred = mean(pred), error = y - pred) |&gt;\n  ggplot(aes(x = Block, y = abs(error), fill=Model)) + \n  stat_bar + \n  ggh4x::facet_nested_wrap(rename_fm(Fit_Method)~condit, scales=\"free\",ncol=2) +\n  scale_fill_manual(values=wes_palette(\"AsteroidCity2\"))+\n  labs(title=\"Model Residual Errors - Training Stage\", y=\"RMSE\", x= \"Training Block\") +\n  theme(legend.title = element_blank(), legend.position=\"top\")\n\ntest_resid &lt;-  post_dat |&gt; \n   group_by(id,condit,x,Model,Fit_Method,rank) |&gt;\n   summarize(error=mean(abs(y-pred)),n=n()) |&gt;\n   group_by(id,condit,x,Model,Fit_Method) |&gt;\n   summarize(error=mean(error)) |&gt;\n  mutate(vbLab = factor(paste0(x,\"-\",x+200))) |&gt;\n  ggplot(aes(x = vbLab, y = abs(error), fill=Model)) + \n  stat_bar + \n  scale_fill_manual(values=wes_palette(\"AsteroidCity2\"))+\n  ggh4x::facet_nested_wrap(rename_fm(Fit_Method)~condit, axes = \"all\",ncol=2,scale=\"free\") +\n  labs(title=\"Model Residual Errors - Testing Stage\",y=\"RMSE\", x=\"Velocity Band\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\ngroup_pred &lt;- post_dat_l |&gt; \n  mutate(vbLab = factor(paste0(x,\"-\",x+200),levels=levels(testAvg$vb))) |&gt;\n  ggplot(aes(x=val,y=vbLab,col=Resp)) + \n  stat_pointinterval(position=position_dodge(.5), alpha=.9) + \n  scale_color_manual(values=wes_palette(\"AsteroidCity2\"))+\n  ggh4x::facet_nested_wrap(rename_fm(Fit_Method)~condit, axes = \"all\",ncol=2,scale=\"free\") +\n  labs(title=\"Posterior Predictions - Testing Stage\",y=\"Velocity Band (lower bound)\", x=\"X Velocity\") +\ntheme(legend.title=element_blank(),axis.text.y = element_text(angle = 45, hjust = 0.5, vjust = 0.5))\n\n\n((train_resid | test_resid) / group_pred) +\n  plot_layout(heights=c(1,1.5)) & \n  plot_annotation(tag_levels = list(c('A1','A2','B')),tag_suffix = ') ') & \n  theme(plot.tag.position = c(0, 1))\n\n\n\n\n\n\nFigure 2: A) Model residuals for each combination of training condition, fit method, and model. Residuals reflect the difference between observed and predicted values. Lower values indicate better model fit. Note that y axes are scaled differently between facets. B) Full posterior predictive distributions vs. observed data from participants.Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median.",
    "crumbs": [
      "Model",
      "HTW Model e1"
    ]
  },
  {
    "objectID": "Model/htw_model_e1.html#deviation-predictions",
    "href": "Model/htw_model_e1.html#deviation-predictions",
    "title": "HTW Model e1",
    "section": "Deviation Predictions",
    "text": "Deviation Predictions\n\nCode post_dat_l |&gt; \n  mutate(vbLab = factor(paste0(x,\"-\",x+200),levels=levels(testAvg$vb))) |&gt;\n  ggplot(aes(x=condit,y=dist,fill=vbLab)) + \n  stat_bar + \n  #facet_wrap(~Resp)\n  ggh4x::facet_nested_wrap(rename_fm(Fit_Method)~Resp, axes = \"all\",ncol=3,scale=\"free\")\n\n\n\n\n\n\nCodepost_dat_l |&gt; \n  mutate(vbLab = factor(paste0(x,\"-\",x+200),levels=levels(testAvg$vb))) |&gt;\n  ggplot(aes(x=Resp,y=dist,fill=vbLab)) + \n  stat_bar + \n  #facet_wrap(~Resp)\n  ggh4x::facet_nested_wrap(rename_fm(Fit_Method)~condit, axes = \"all\",ncol=2,scale=\"free\")\n\n\n\n\n\n\nCodep1 &lt;- post_dat_l |&gt; \n  filter(Fit_Method==\"Test_Train\") |&gt; \n  mutate(vbLab = factor(paste0(x,\"-\",x+200),levels=levels(testAvg$vb))) |&gt;\n  ggplot(aes(x=Resp,y=dist,fill=vbLab)) + \n  stat_bar + \n  #facet_wrap(~Resp)\n  ggh4x::facet_nested_wrap(~condit, axes = \"all\",ncol=2,scale=\"free\")\n \n\np2 &lt;- post_dat_l |&gt; \n  filter(Fit_Method==\"Test_Train\") |&gt; \n  mutate(vbLab = factor(paste0(x,\"-\",x+200),levels=levels(testAvg$vb))) |&gt;\n  ggplot(aes(x=Resp,y=val,fill=vbLab)) + \n  stat_bar + \n  #facet_wrap(~Resp)\n  ggh4x::facet_nested_wrap(~condit, axes = \"all\",ncol=2,scale=\"free\")\n \np1/p2\n\n\n\n\n\n\nCode post_dat_l |&gt; filter(Fit_Method==\"Test_Train\") |&gt; \n  mutate(vbLab = factor(paste0(x,\"-\",x+200),levels=levels(testAvg$vb))) |&gt;\n  ggplot(aes(x=Resp,y=dist,fill=condit)) + \n  stat_bar + \n  #facet_wrap(~Resp)\n  ggh4x::facet_nested_wrap(~vbLab, axes = \"all\",ncol=2,scale=\"free\")\n\n\n\n\n\n\nCode post_dat_l |&gt; filter(Fit_Method==\"Test_Train\") |&gt; \n  mutate(vbLab = factor(paste0(x,\"-\",x+200),levels=levels(testAvg$vb))) |&gt;\n  ggplot(aes(x=Resp,y=val,fill=condit)) + \n  stat_bar + \n  #facet_wrap(~Resp)\n  ggh4x::facet_nested_wrap(~vbLab, axes = \"all\",ncol=2,scale=\"free\")\n\n\n\n\n\n\n\n\nCodec_post &lt;- post_dat_avg %&gt;%\n    group_by(id, condit, Model, Fit_Method, rank) %&gt;%\n    slice_head(n = 1) |&gt;\n    ggplot(aes(y=log(c), x = Fit_Method,col=condit)) + stat_pointinterval(position=position_dodge(.2)) +\n    ggh4x::facet_nested_wrap(~Model) + labs(title=\"c parameter\") +\n  theme(legend.title = element_blank(), legend.position=\"right\",plot.title=element_text(hjust=.4))\n\nlr_post &lt;- post_dat_avg %&gt;%\n    group_by(id, condit, Model, Fit_Method, rank) %&gt;%\n    slice_head(n = 1) |&gt;\n    ggplot(aes(y=lr, x = Fit_Method,col=condit)) + stat_pointinterval(position=position_dodge(.4)) +\n    ggh4x::facet_nested_wrap(~Model) + labs(title=\"learning rate parameter\") +\n  theme(legend.title = element_blank(), legend.position = \"none\",plot.title=element_text(hjust=.5))\nc_post + lr_post\n\n\n\n\n\n\nFigure 3: Posterior Distributions of \\(c\\) and \\(lr\\) parameters. Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median. Note that the y axes of the plots for the c parameter are scaled logarithmically.\n\n\n\n\nAccounting for individual patterns\nTo more accurately assess the relative abilities of ALM and EXAM to capture important empirical patterns - we will now examine the predictions of both models for the subset of individual participants shown in Figure 4. Panel A presents three varied and constant participants who demonstrated a reasonable degree of discrimination between the 6 velocity bands during testing.\n\n** comment on the different ways ALM can completely fail to mimic discrimination patterns (sbj. 35; sbj. 137),and on how it can sometimes partially succeed (sbj. 11; 14,74)\n** comment on how EXAM can somtimes mimic non-monotonic spacing between bands due to associative stregth from training (i.e. subject 47)\n** compare c values to slope parameters from the statistical models earlier in paper\n\n\nCodecId_tr &lt;- c(137, 181, 11)\nvId_tr &lt;- c(14, 193, 47)\ncId_tt &lt;- c(11, 93, 35)\nvId_tt &lt;- c(1,14,74)\n# filter(id %in% (filter(bestTestEXAM,group_rank&lt;=9, Fit_Method==\"Test\")\n\ntestIndv &lt;- post_dat_l |&gt; filter(id %in% c(cId_tt,vId_tt), Fit_Method==\"Test_Train\") |&gt; \n   mutate(x=as.factor(x), Resp=as.factor(Resp)) |&gt;\n  group_by(id,condit,Fit_Method,Model,Resp) |&gt;\n   mutate(flab=paste0(\"Subject: \",id)) |&gt;\n  ggplot(aes(x = Resp, y = val, fill=x)) + \n  stat_bar_sd + ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",ncol=3) +\n  labs(title=\"Individual Participant fits from Test & Train Fitting Method\",\n       y=\"X Velocity\",fill=\"Target Velocity\") +\n   guides(fill = guide_legend(nrow = 1)) + \n  theme(legend.position = \"bottom\",axis.title.x = element_blank())\n\n\ntrainIndv &lt;- post_dat_l |&gt; filter(id %in% c(cId_tr,vId_tr), Fit_Method==\"Train\") |&gt; \n   mutate(x=as.factor(x), Resp=as.factor(Resp), flab=paste0(\"Subject: \",id)) |&gt;\n  group_by(id,condit,Fit_Method,Model,Resp) |&gt;\n  ggplot(aes(x = Resp, y = val, fill=x)) + \n  stat_bar + \n  ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",ncol=3) +\n  labs(title=\"Individual Participant fits from Train Only Fitting Method\", y=\"X Velocity\",\n       fill=\"Target Velocity\") +\n     guides(fill = guide_legend(nrow = 1)) + \n  theme(legend.position = \"bottom\",axis.title.x = element_blank())\n\n\n(testIndv  / trainIndv) +\n  plot_annotation(tag_levels = list(c('A','B')),tag_suffix = ') ') & \n  theme(plot.tag.position = c(0, 1))\n\n\n\n\n\n\nFigure 4: Model predictions alongside observed data for a subset of individual participants. A) 3 constant and 3 varied participants fit to both the test and training data. B) 3 constant and 3 varied subjects fit to only the trainign data.\n\n\n\n\n\nCode# could compute best model for each posterior parameter - examine consistency\n# then I'd have an error bar for each subject in the model error diff. figure\n\ntid1 &lt;- post_dat  |&gt; group_by(id,condit,Model,Fit_Method,x) |&gt; \n  mutate(e2=abs(y-pred)) |&gt; \n  summarise(y1=mean(y), pred1=mean(pred),mean_error=abs(y1-pred1)) |&gt;\n  group_by(id,condit,Model,Fit_Method) |&gt; \n  summarise(mean_error=mean(mean_error)) |&gt; \n  arrange(id,condit,Fit_Method) |&gt;\n  round_tibble(1) \n\nbest_id &lt;- tid1 |&gt; \n  group_by(id,condit,Fit_Method) |&gt; mutate(best=ifelse(mean_error==min(mean_error),1,0)) \n\nlowest_error_model &lt;- best_id %&gt;%\n  group_by(id, condit,Fit_Method) %&gt;%\n  summarise(Best_Model = Model[which.min(mean_error)],\n            Lowest_error = min(mean_error),\n            differential = min(mean_error) - max(mean_error)) %&gt;%\n  ungroup()\n\n\nerror_difference&lt;- best_id %&gt;%\n  select(id, condit, Model,Fit_Method, mean_error) %&gt;%\n  pivot_wider(names_from = Model, values_from = c(mean_error)) %&gt;%\n  mutate(Error_difference = (ALM - EXAM))\n\nfull_comparison &lt;- lowest_error_model |&gt; left_join(error_difference, by=c(\"id\",\"condit\",\"Fit_Method\"))  |&gt; \n  group_by(condit,Fit_Method,Best_Model) |&gt; mutate(nGrp=n(), model_rank = nGrp - rank(Error_difference) ) |&gt; \n  arrange(Fit_Method,-Error_difference)\n\nfull_comparison |&gt; filter(Fit_Method==\"Test_Train\") |&gt; \n  ungroup() |&gt;\n  mutate(id = reorder(id, Error_difference)) %&gt;%\n  ggplot(aes(y=id,x=Error_difference,fill=Best_Model))+\n  geom_col() +\n  ggh4x::facet_grid2(~condit,axes=\"all\",scales=\"free_y\", independent = \"y\")+\n  labs(fill=\"Best Model\",x=\"Mean Model Error Difference (ALM - EXAM)\",y=\"Participant\")\n\n\n\n# full_comparison |&gt; filter(Fit_Method==\"Test_Train\") |&gt; \n#   ungroup() |&gt;\n#   mutate(id = reorder(id, Error_difference)) |&gt;\n#   left_join(post_dat_avg |&gt; filter(x==100) |&gt; select(-x) |&gt; ungroup(), by=c(\"id\",\"condit\")) |&gt;\n#   ggplot(aes(y=id,x=c,fill=Best_Model))+\n#   stat_pointinterval(position=position_dodge(.1))\n\n\n\n\n\n\nFigure 5: Difference in model errors for each participant, with models fit to both train and test data. Positive values favor EXAM, while negative values favor ALM.\n\n\n\n\nSubjects with biggest differential favoring ALM\n\nCodevAlm &lt;- c(29,70,68); cAlm &lt;- c(73,49,128)\n\npost_dat_l |&gt; filter(id %in% c(vAlm,cAlm), Fit_Method==\"Test_Train\") |&gt; \n   mutate(x=as.factor(x), Resp=as.factor(Resp)) |&gt;\n  group_by(id,condit,Fit_Method,Model,Resp) |&gt;\n   mutate(flab=paste0(\"Subject: \",id)) |&gt;\n  ggplot(aes(x = Resp, y = val, fill=x)) + \n  stat_bar_sd + ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",ncol=3) +\n  labs(title=\"Subjects with biggest differential favoring ALM\",\n       y=\"X Velocity\",fill=\"Target Velocity\") +\n   guides(fill = guide_legend(nrow = 1)) + \n  theme(legend.position = \"bottom\",axis.title.x = element_blank())\n\n\n\n\n\n\n\nSubjects with biggest differential favoring EXAM\n\nCodevAlm &lt;- c(23,155,184); cAlm &lt;- c(119,85,175)\n\npost_dat_l |&gt; filter(id %in% c(vAlm,cAlm), Fit_Method==\"Test_Train\") |&gt; \n   mutate(x=as.factor(x), Resp=as.factor(Resp)) |&gt;\n  group_by(id,condit,Fit_Method,Model,Resp) |&gt;\n   mutate(flab=paste0(\"Subject: \",id)) |&gt;\n  ggplot(aes(x = Resp, y = val, fill=x)) + \n  stat_bar_sd + ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",ncol=3) +\n  labs(title=\"Subjects with biggest differential favoring EXAM\",\n       y=\"X Velocity\",fill=\"Target Velocity\") +\n   guides(fill = guide_legend(nrow = 1)) + \n  theme(legend.position = \"bottom\",axis.title.x = element_blank())\n\n\n\n\n\n\n\nSubjects with no clear best model\n\nCodevAlm &lt;- c(129,192,105); cAlm &lt;- c(101, 109,134)\n\npost_dat_l |&gt; filter(id %in% c(vAlm,cAlm), Fit_Method==\"Test_Train\") |&gt; \n   mutate(x=as.factor(x), Resp=as.factor(Resp)) |&gt;\n  group_by(id,condit,Fit_Method,Model,Resp) |&gt;\n   mutate(flab=paste0(\"Subject: \",id)) |&gt;\n  ggplot(aes(x = Resp, y = val, fill=x)) + \n  stat_bar_sd + ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",ncol=3) +\n  labs(title=\"Subjects with no clear best model\",\n       y=\"X Velocity\",fill=\"Target Velocity\") +\n   guides(fill = guide_legend(nrow = 1)) + \n  theme(legend.position = \"bottom\",axis.title.x = element_blank())\n\n\n\n\n\n\n\n\nCodevAlm &lt;- c(29,70,68); cAlm &lt;- c(73,49,128)\n\ndifAlm &lt;-  post_dat_avg  |&gt; filter(x==100,id %in% c(vAlm,cAlm), Fit_Method==\"Test_Train\") |&gt;\n    group_by(id, condit, Model, rank) %&gt;%\n      mutate(flab=paste0(\"Subject: \",id)) |&gt;\n    ggplot(aes(y=log(c), x = id,col=Model)) + \n  stat_pointinterval(position=position_dodge(.5)) +\n   # ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",scales=\"free_y\",ncol=3) + \n      labs(title=\"c parameter - sbjs. with biggest diff. favoring ALM\") +\n  theme(legend.title = element_blank(), legend.position=\"right\",plot.title=element_text(hjust=.4)) +ylim(c(-11,-4))\n\n\nvAlm &lt;- c(23,155,184); cAlm &lt;- c(119,85,175)\n\ndifExam &lt;- post_dat_avg  |&gt; filter(x==100,id %in% c(vAlm,cAlm), Fit_Method==\"Test_Train\") |&gt;\n    group_by(id, condit, Model, rank) %&gt;%\n      mutate(flab=paste0(\"Subject: \",id)) |&gt;\n    ggplot(aes(y=log(c), x = id,col=Model)) + \n  stat_pointinterval(position=position_dodge(.1)) +\n   # ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",scales=\"free_y\",ncol=3) + \n      labs(title=\"c parameter - sbjs. with biggest diff. favoring EXAM\") +\n  theme(legend.title = element_blank(), legend.position=\"right\",plot.title=element_text(hjust=.4)) +ylim(c(-11,-4))\n\ndifAlm/difExam\n\n\n\n\n\n\nCodevAlm &lt;- c(29,70,68); cAlm &lt;- c(73,49,128)\n\ndifAlm &lt;-  post_dat_avg  |&gt; filter(x==100,id %in% c(vAlm,cAlm), Fit_Method==\"Test_Train\") |&gt;\n    group_by(id, condit, Model, rank) %&gt;%\n      mutate(flab=paste0(\"Subject: \",id)) |&gt;\n    ggplot(aes(y=lr, x = id,col=Model)) + \n  stat_pointinterval(position=position_dodge(.5)) +\n   # ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",scales=\"free_y\",ncol=3) + \n      labs(title=\"lr parameter - sbjs. with biggest diff. favoring ALM\") +\n  theme(legend.title = element_blank(), legend.position=\"right\",plot.title=element_text(hjust=.4))+ylim(c(0,12))\n\n\nvAlm &lt;- c(23,155,184); cAlm &lt;- c(119,85,175)\n\ndifExam &lt;- post_dat_avg  |&gt; filter(x==100,id %in% c(vAlm,cAlm), Fit_Method==\"Test_Train\") |&gt;\n    group_by(id, condit, Model, rank) %&gt;%\n      mutate(flab=paste0(\"Subject: \",id)) |&gt;\n    ggplot(aes(y=lr, x = id,col=Model)) + \n  stat_pointinterval(position=position_dodge(.1)) +\n   # ggh4x::facet_nested_wrap(condit~flab, axes = \"all\",scales=\"free_y\",ncol=3) + \n      labs(title=\"lr parameter - sbjs. with biggest diff. favoring EXAM\") +\n  theme(legend.title = element_blank(), legend.position=\"right\",plot.title=element_text(hjust=.4)) +ylim(c(0,12))\n\ndifAlm/difExam\n\n\n\n\n\n\n\n\nCode# \n# \n# full_comparison |&gt; filter(Fit_Method==\"Test_Train\") |&gt;\n#   ungroup() |&gt;\n#   mutate(id = reorder(id, Error_difference)) %&gt;%\n#   ggplot(aes(y=id,x=Error_difference,fill=Best_Model))+\n#   geom_col()+\n#   ggh4x::facet_grid2(~condit,axes=\"all\",scales=\"free_y\", independent = \"y\")\n# \n\n# d &lt;- testAvg |&gt; left_join(full_comparison, by=c(\"id\",\"condit\")) |&gt; filter(Fit_Method==\"Test_Train\")\n# \n# \n# \n# d |&gt; ggplot(aes(x=vb,y=vx,fill=condit)) + stat_bar + facet_wrap(Fit_Method~Best_Model2,ncol=2)\n# \n# d |&gt; \n#   group_by(condit,Fit_Method,Best_Model) |&gt; \n#   mutate(nGrp2=n()) |&gt;\n#   filter(abs(Error_difference)&gt;15) |&gt; \n#   ggplot(aes(x=vb,y=dist,fill=condit)) + \n#   stat_bar + facet_wrap(Fit_Method~Best_Model,ncol=2)\n# \n# d |&gt; group_by(condit,Fit_Method,Best_Model) %&gt;% tally() |&gt; mutate(n=n/6)\n# \n# d |&gt; group_by(condit,Fit_Method,Best_Model) |&gt; filter(abs(Error_difference)&gt;15) |&gt; tally() |&gt; mutate(n=n/6)\n# \n# d |&gt; group_by(condit,Fit_Method) |&gt; mutate(m=mean(Error_difference), \n#                                               sd=sd(Error_difference), \n#                                               n=n()/6,se=sd/sqrt(n)) |&gt;\n#    group_by(condit,Fit_Method,Best_Model) |&gt; \n#  # filter(abs(Error_difference)&gt;(2.5*se)) |&gt; \n#   ggplot(aes(x=vb,y=dist,fill=condit)) + \n#   stat_bar + facet_wrap(Fit_Method~Best_Model,ncol=2)\n#   \n\n\nTo add to appendix\n\nCodepost_tabs$agg_x_full |&gt; flextable::tabulator(rows=c(\"Fit_Method\",\"x\"), columns=c(\"condit\",\"Model\"),\n                       `X` = as_paragraph(mean_error)) |&gt; as_flextable()\n\n\n\n\n\n\nFit_Method\nx\n\nConstant\n\nVaried\n\n\n\nALM\n\nEXAM\n\nALM\n\nEXAM\n\n\n\n\nTest\n100\n\n203.3\n\n191.4\n\n233.5\n\n194.8\n\n\n350\n\n249.8\n\n169.0\n\n213.2\n\n193.5\n\n\n600\n\n264.1\n\n199.5\n\n222.4\n\n219.2\n\n\n800\n\n218.2\n\n214.3\n\n243.9\n\n222.9\n\n\n1,000\n\n315.9\n\n245.3\n\n224.4\n\n222.3\n\n\n1,200\n\n409.1\n\n275.9\n\n249.8\n\n237.2\n\n\nTest_Train\n100\n\n195.0\n\n213.2\n\n238.1\n\n217.2\n\n\n350\n\n241.4\n\n183.9\n\n241.0\n\n207.1\n\n\n600\n\n255.3\n\n190.5\n\n270.5\n\n230.0\n\n\n800\n\n244.9\n\n222.0\n\n270.3\n\n257.9\n\n\n1,000\n\n355.3\n\n265.1\n\n276.0\n\n272.2\n\n\n1,200\n\n437.3\n\n297.0\n\n313.8\n\n319.9\n\n\nTrain\n100\n\n519.3\n\n430.2\n\n495.7\n\n498.8\n\n\n350\n\n466.6\n\n310.9\n\n398.6\n\n405.2\n\n\n600\n\n445.4\n\n243.0\n\n347.3\n\n349.0\n\n\n800\n\n260.9\n\n261.2\n\n298.5\n\n300.0\n\n\n1,000\n\n667.3\n\n352.9\n\n311.0\n\n311.0\n\n\n1,200\n\n809.3\n\n443.5\n\n361.3\n\n361.3\n\n\n\n\n\nCode# post_dat  |&gt; group_by(id,condit,Model,Fit_Method,x) |&gt; \n#   mutate(e2=abs(y-pred)) |&gt; \n#   summarise(y1=mean(y), pred1=mean(pred)) |&gt;\n#   group_by(condit,Model,Fit_Method,x) |&gt; \n#   summarise(y=mean(y1), pred=mean(pred1),mean_error=abs(y-pred)) |&gt; \n#   round_tibble(1) |&gt; pander::pandoc.table()\n\n\n# post_dat  |&gt; group_by(id,condit,Model,Fit_Method,x) |&gt;\n#   mutate(e2=abs(y-pred)) |&gt;\n#   summarise(y1=mean(y), pred1=mean(pred)) |&gt;\n#   group_by(condit,Model,Fit_Method) |&gt;\n#   summarise(y=mean(y1), pred=mean(pred1),mean_error=abs(y-pred)) |&gt;\n#   round_tibble(1) |&gt; pander::pandoc.table()\n# \n# post_dat  |&gt; group_by(id,condit,Model,Fit_Method,x) |&gt; \n#   mutate(e2=abs(y-pred),Fit_Method=rename_fm(Fit_Method)) |&gt; \n#   summarise(y1=mean(y), pred1=mean(pred)) |&gt;\n#   group_by(condit,Model,Fit_Method) |&gt; \n#   summarise(y=mean(y1), pred=mean(pred1),mean_error=abs(y-pred)) |&gt; \n#   select(-y,-pred) |&gt;\n#   arrange(condit,Fit_Method) |&gt;\n#   round_tibble(1) |&gt; pander::pandoc.table()\n# \n# \n# \n# post_dat  |&gt; group_by(id,condit,Model,Fit_Method,x) |&gt; \n#   mutate(e2=abs(y-pred),Fit_Method=rename_fm(Fit_Method)) |&gt; \n#   summarise(y1=mean(y), pred1=mean(pred)) |&gt;\n#   group_by(condit,Model,Fit_Method,x) |&gt; \n#   summarise(y2=mean(y1), pred2=mean(pred1)) |&gt; \n#   group_by(condit,Model,Fit_Method) |&gt; \n#   summarise(y=mean(y2), pred=mean(pred2),mean_error=abs(y-pred)) |&gt; \n#   select(-y,-pred) |&gt;\n#   arrange(condit,Fit_Method) |&gt;\n#   round_tibble(1) |&gt; pander::pandoc.table()\n# \n# \n# post_dat  |&gt; group_by(id,condit,Model,Fit_Method,x) |&gt; \n#   mutate(e2=abs(y-pred),Fit_Method=rename_fm(Fit_Method)) |&gt; \n#   summarise(y1=mean(y), pred1=mean(pred),mean_error=abs(y1-pred1)) |&gt;\n#   group_by(id,condit,Model,Fit_Method) |&gt; \n#   summarise(mean_error=mean(mean_error)) |&gt; \n#   group_by(condit,Model,Fit_Method) |&gt;\n#   summarise(mean_error=mean(mean_error)) |&gt; \n#   arrange(condit,Fit_Method) |&gt;\n#   round_tibble(1) |&gt; pander::pandoc.table()",
    "crumbs": [
      "Model",
      "HTW Model e1"
    ]
  },
  {
    "objectID": "Model/htw_model_e1.html#comparison-to-project-1",
    "href": "Model/htw_model_e1.html#comparison-to-project-1",
    "title": "HTW Model e1",
    "section": "Comparison to Project 1",
    "text": "Comparison to Project 1\nDifferences between the tasks\nThere are a number of differences between Project 1’s Hit The Target (HTT), and Project 2’s Hit The Wall (HTW) tasks.\n\nTask Space Complexity: In HTW, the task space is also almost perfectly smooth, at least for the continuous feedback subjects, if they throw 100 units too hard, they’ll be told that they were 100 units too hard. Whereas in HTT,  it was possible to produce xy velocity combinations that were technically closer to the empirical solution space than other throws, but which resulted in worse feedback due to striking the barrier.\nPerceptual Distinctiveness: HTT offers perceptually distinct varied conditions that directly relate to the task’s demands, which may increase the sallience between training positions encounted by the varied group. In contrast, HTW’s varied conditions differ only in the numerical values displayed, lacking the same level of perceptual differentiation. Conversely in HTW, the only difference between conditions for the varied group are the numbers displayed at the top of the screen which indicate the current target band(e.g. 800-1000, or 1000-1200)\nIn HTW, our primary testing stage of interest has no feedback, whereas in HTT testing always included feedback (the intermittent testing in HTT expt 1 being the only exception). Of course, we do collect testing with feedback data at the end of HTW, but we haven’t focused on that data at all in our modelling work thus far. It’s also interesting to recall that the gap between varied and constant in HTW does seem to close substantially in the testing-with-feedback stage. The difference between no-feedback and feedback testing might be relevant if the benefits of variation have anything to do with improving subsequent learning (as opposed to subsequent immediate performance), OR if the benefits of constant training rely on having the most useful anchor, having the most useful anchor might be a lot less helpful if you’re getting feedback from novel positions and can thus immediately begin to form position-specific anchors for the novelties, rather than relying on a training anchor. \nHTW and HTT both have a similar amount of training trials (~200), and thus the constant groups acquire a similar amount of experience with their single position/velocity in both experiments. However, the varied conditions in both HTT experiments train on 2 positions, whereas the varied group in HTW trains on 3 velocity bands. This means that in HTT the varied group gets half as much experience on any one position as the constant group, and in HTW they only get 1/3 as much experience in any one position. There are likely myriad ways in which this might impact the success of the varied group regardless of how you think the benefits of variation might be occurring, e.g. maybe they also need to develop a coherent anchor, maybe they need more experience in order to extract a function, or more experience in order to properly learn to tune their c parameter. \n\n\n\n\n\n\nFigure 1: The basic structure of the ALM model.\nFigure 2: A) Model residuals for each combination of training condition, fit method, and model. Residuals reflect the difference between observed and predicted values. Lower values indicate better model fit. Note that y axes are scaled differently between facets. B) Full posterior predictive distributions vs. observed data from participants.Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median.\nFigure 3: Posterior Distributions of \\(c\\) and \\(lr\\) parameters. Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median. Note that the y axes of the plots for the c parameter are scaled logarithmically.\nFigure 4: Model predictions alongside observed data for a subset of individual participants. A) 3 constant and 3 varied participants fit to both the test and training data. B) 3 constant and 3 varied subjects fit to only the trainign data.\nFigure 5: Difference in model errors for each participant, with models fit to both train and test data. Positive values favor EXAM, while negative values favor ALM.",
    "crumbs": [
      "Model",
      "HTW Model e1"
    ]
  },
  {
    "objectID": "Model/e1-docusaurus.md.html",
    "href": "Model/e1-docusaurus.md.html",
    "title": "HTW Modeling",
    "section": "",
    "text": "Codepacman::p_load(dplyr,purrr,tidyr,ggplot2, data.table, here, patchwork, conflicted, \n               stringr,future,furrr, knitr, reactable, flextable,ggstance, htmltools,ggdist)\n#conflict_prefer_all(\"dplyr\", quiet = TRUE)\nwalk(c(\"flextable\",\"dplyr\"), conflict_prefer_all, quiet = TRUE)\n#options(brms.backend=\"cmdstanr\",mc.cores=4)\noptions(digits=2, scipen=999, dplyr.summarise.inform=FALSE)\nwalk(c(\"Display_Functions\",\"fun_alm\",\"fun_indv_fit\",\"fun_model\", \"prep_model_data\"), ~source(here::here(paste0(\"Functions/\", .x, \".R\"))))\nCodeinvisible(list2env(load_sbj_data(), envir = .GlobalEnv))\ninvisible(list2env(load_e1(), envir = .GlobalEnv))\ne1Sbjs &lt;- e1 |&gt; group_by(id,condit) |&gt; summarise(n=n())",
    "crumbs": [
      "Model",
      "HTW Modeling"
    ]
  },
  {
    "objectID": "Model/e1-docusaurus.md.html#alm-exam-description",
    "href": "Model/e1-docusaurus.md.html#alm-exam-description",
    "title": "HTW Modeling",
    "section": "ALM & Exam Description",
    "text": "ALM & Exam Description\nALM is a localist neural network model (Page, 2000), with each input node corresponding to a particular stimulus, and each output node corresponding to a particular response value. The units in the input layer activate as a function of their Gaussian similarity to the input stimulus. So, for example, an input stimulus of value 55 would induce maximal activation of the input unit tuned to 55. Depending on the value of the generalization parameter, the nearby units (e.g. 54 and 56; 53 and 57) may also activate to some degree. ALM is structured with input and output nodes that correspond to regions of the stimulus space, and response space, respectively. The units in the input layer activate as a function of their similarity to a presented stimulus. As was the case with the exemplar-based models, similarity in ALM is exponentially decaying function of distance. The input layer is fully connected to the output layer, and the activation for any particular output node is simply the weighted sum of the connection weights between that node and the input activations. The network then produces a response by taking the weighted average of the output units (recall that each output unit has a value corresponding to a particular response). During training, the network receives feedback which activates each output unit as a function of its distance from the ideal level of activation necessary to produce the correct response. The connection weights between input and output units are then updated via the standard delta learning rule, where the magnitude of weight changes are controlled by a learning rate parameter. The EXAM model is an extension of ALM, with the same learning rule and representational scheme for input and output units. The primary difference is that EXAM includes a linear extrapolation mechanism for generating novel responses during testing, a modification necessary to account for human extrapolation patterns in past research Brown & Lacroix (2017). Although this extrapolation rule departs from a strictly similarity-based generalization mechanism, EXAM is distinct from pure rule-based models in that it remains constrained by the weights learned during training.\nSee Table 1 for a full specification of the equations that define ALM and EXAM.\n\n\n\nTable 1: ALM & EXAM Equations\n\n\n\n\n\n\n\n\n\nALM Response Generation\n\n\n\n\nInput Activation\n\\(a_i(X) = \\frac{e^{-c(X-X_i)^2}}{\\sum_{k=1}^M e^{-c(X-X_k)^2}}\\)\nInput nodes activate as a function of Gaussian similarity to stimulus\n\n\nOutput Activation\n\\(O_j(X) = \\sum_{k=1}^M w_{ji} \\cdot a_i(X)\\)\nOutput unit \\(O_j\\) activation is the weighted sum of input activations and association weights\n\n\nOutput Probability\n\\(P[Y_j|X] = \\frac{O_j(X)}{\\sum_{k=1}^M O_k(X)}\\)\nThe response, \\(Y_j\\) probabilites computed via Luce’s choice rule\n\n\nMean Output\n\\(m(X) = \\sum_{j=1}^L Y_j \\cdot \\frac{O_j(x)}{\\sum_{k=1}^M O_k(X)}\\)\nWeighted average of probabilities determines response to X\n\n\n\nALM Learning\n\n\n\nFeedback\n\\(f_j(Z) = e^{-c(Z-Y_j)^2}\\)\nfeedback signal Z computed as similarity between ideal response and observed response\n\n\nmagnitude of error\n\\(\\Delta_{ji}=(f_{j}(Z)-o_{j}(X))a_{i}(X)\\)\nDelta rule to update weights.\n\n\nUpdate Weights\n\\(w_{ji}^{new}=w_{ji}+\\eta\\Delta_{ji}\\)\nUpdates scaled by learning rate parameter \\(\\eta\\).\n\n\n\nEXAM Extrapolation\n\n\n\nInstance Retrieval\n\\(P[X_i|X] = \\frac{a_i(X)}{\\sum_{k=1}^M a_k(X)}\\)\nNovel test stimulus \\(X\\) activates input nodes \\(X_i\\)\n\n\n\nSlope Computation\n\n\\(S =\\) \\(\\frac{m(X_{1})-m(X_{2})}{X_{1}-X_{2}}\\)\n\nSlope value, \\(S\\) computed from nearest training instances\n\n\nResponse\n\\(E[Y|X_i] = m(X_i) + S \\cdot [X - X_i]\\)\nALM response \\(m(X_i)\\) adjusted by slope.",
    "crumbs": [
      "Model",
      "HTW Modeling"
    ]
  },
  {
    "objectID": "Model/e1-docusaurus.md.html#model-fitting-strategy",
    "href": "Model/e1-docusaurus.md.html#model-fitting-strategy",
    "title": "HTW Modeling",
    "section": "Model Fitting Strategy",
    "text": "Model Fitting Strategy\nTo fit ALM and EXAM to our participant data, we employ a similar method to Mcdaniel et al. (2009), wherein we examine the performance of each model after being fit to various subsets of the data. Each model was fit to the data in with separate procedures: 1) fit to maximize predictions of the testing data, 2) fit to maximize predictions of both the training and testing data, 3) fit to maximize predictions of the just the training data. We refer to this fitting manipulations as “Fit Method” in the tables and figures below. It should be emphasized that for all three fit methods, the ALM and EXAM models behave identically - with weights updating only during the training phase.Models to were fit separately to the data of each individual participant. The free parameters for both models are the generalization (\\(c\\)) and learning rate (\\(lr\\)) parameters. Parameter estimation was performed using approximate bayesian computation (ABC), which we describe in detail below.\n\n\n\n\n\n\n Approximate Bayesian Computation\nTo estimate parameters, we used approximate bayesian computation (ABC), enabling us to obtain an estimate of the posterior distribution of the generalization and learning rate parameters for each individual. ABC belongs to the class of simulation-based inference methods (Cranmer et al., 2020), which have begun being used for parameter estimation in cognitive modeling relatively recently (Kangasrääsiö et al., 2019; Turner et al., 2016; Turner & Van Zandt, 2012). Although they can be applied to any model from which data can be simulated, ABC methods are most useful for complex models that lack an explicit likelihood function (e.g. many neural network and evidence accumulation models).\nThe general ABC procedure is to 1) define a prior distribution over model parameters. 2) sample candidate parameter values, \\(\\theta^*\\), from the prior. 3) Use \\(\\theta^*\\) to generate a simulated dataset, \\(Data_{sim}\\). 4) Compute a measure of discrepancy between the simulated and observed datasets, \\(discrep\\)(\\(Data_{sim}\\), \\(Data_{obs}\\)). 5) Accept \\(\\theta^*\\) if the discrepancy is less than the tolerance threshold, \\(\\epsilon\\), otherwise reject \\(\\theta^*\\). 6) Repeat until desired number of posterior samples are obtained.\nAlthough simple in the abstract, implementations of ABC require researchers to make a number of non-trivial decisions as to i) the discrepancy function between observed and simulated data, ii) whether to compute the discrepancy between trial level data, or a summary statistic of the datasets, iii) the value of the minimum tolerance \\(\\epsilon\\) between simulated and observed data. For the present work, we follow the guidelines from previously published ABC tutorials (Farrell & Lewandowsky, 2018; Turner & Van Zandt, 2012). For the test stage, we summarized datasets with mean velocity of each band in the observed dataset as \\(V_{obs}^{(k)}\\) and in the simulated dataset as \\(V_{sim}^{(k)}\\), where \\(k\\) represents each of the six velocity bands. For computing the discrepancy between datasets in the training stage, we aggregated training trials into three equally sized blocks (separately for each velocity band in the case of the varied group). After obtaining the summary statistics of the simulated and observed datasets, the discrepancy was computed as the mean of the absolute difference between simulated and observed datasets (Equation 1 and Equation 2). For the models fit to both training and testing data, discrepancies were computed for both stages, and then averaged together.\n\n\\[\ndiscrep_{Test}(Data_{sim}, Data_{obs}) = \\frac{1}{6} \\sum_{k=1}^{6} |V_{obs}^{(k)} - V_{sim}^{(k)}|\n\\tag{1}\\]\n\\[\n\\begin{aligned} \\\\\ndiscrep_{Train,constant}(Data_{sim}, Data_{obs}) = \\frac{1}{N_{blocks}} \\sum_{j=1}^{N_{blocks}} |V_{obs,constant}^{(j)} - V_{sim,constant}^{(j)}| \\\\ \\\\\ndiscrep_{Train,varied}(Data_{sim}, Data_{obs}) = \\frac{1}{N_{blocks} \\times 3} \\sum_{j=1}^{N_{blocks}} \\sum_{k=1}^{3} |V_{obs,varied}^{(j,k)} - V_{sim,varied}^{(j,k)}|\n\\end{aligned}\n\\tag{2}\\]\n\nThe final component of our ABC implementation is the determination of an appropriate value of \\(\\epsilon\\). The setting of \\(\\epsilon\\) exerts strong influence on the approximated posterior distribution. Smaller values of \\(\\epsilon\\) increase the rejection rate, and improve the fidelity of the approximated posterior, while larger values result in an ABC sampler that simply reproduces the prior distribution. Because the individual participants in our dataset differed substantially in terms of the noisiness of their data, we employed an adaptive tolerance setting strategy to tailor \\(\\epsilon\\) to each individual. The initial value of \\(\\epsilon\\) was set to the overall standard deviation of each individuals velocity values. Thus, sampled parameter values that generated simulated data within a standard deviation of the observed data were accepted, while worse performing parameters were rejected. After every 300 samples the tolerance was allowed to increase only if the current acceptance rate of the algorithm was less than 1%. In such cases, the tolerance was shifted towards the average discrepancy of the 5 best samples obtained thus far. To ensure the acceptance rate did not become overly permissive, \\(\\epsilon\\) was also allowed to decrease every time a sample was accepted into the posterior.\n\n\n\nFor each of the 156 participants from Experiment 1, the ABC algorithm was run until 200 samples of parameters were accepted into the posterior distribution. Obtaining this number of posterior samples required an average of 205,000 simulation runs per participant. Fitting each combination of participant, Model (EXAM & ALM), and fitting method (Test only, Train only, Test & Train) required a total of 192 million simulation runs. To facilitate these intensive computational demands, we used the Future Package in R (Bengtsson, 2021), allowing us to parallelize computations across a cluster of ten M1 iMacs, each with 8 cores.\nModelling Results\nGroup level Patterns\n\nCodepost_tabs &lt;- abc_tables(post_dat,post_dat_l)\ntrain_tab &lt;- abc_train_tables(pd_train,pd_train_l)\n\n\n\nrbind(post_tabs$agg_pred_full |&gt; mutate(stage=\"Test\"), train_tab$agg_pred_full |&gt; mutate(stage=\"Train\")) |&gt; \n  mutate(Fit_Method=rename_fm(Fit_Method)) |&gt;\n  flextable::tabulator(rows=c(\"stage\",\"Fit_Method\",\"Model\"), columns=c(\"condit\"),\n                       `ME` = as_paragraph(mean_error)) |&gt; as_flextable()\n # post_dat  |&gt; group_by(condit,Model,Fit_Method,x) |&gt; \n #    mutate(e2=abs(dist-pred_dist)) |&gt; \n #    summarise(dist=mean(dist), pred=mean(pred_dist), mean_error=mean(e2)) |&gt;\n #    group_by(condit,Model,Fit_Method) |&gt; \n #    summarise(mean_error=mean(mean_error)) |&gt; \n #    round_tibble(1) |&gt; \n #  mutate(Fit_Method=rename_fm(Fit_Method)) |&gt;\n #  flextable::tabulator(rows=c(\"Fit_Method\",\"Model\"), columns=c(\"condit\"),\n #                       `ME` = as_paragraph(mean_error)) |&gt; as_flextable()\n\n\nTable 2: Mean model errors predicting empirical data from the testing and training stage, aggregated over all participants and velocity bands. Note that Fit Method refers to the subset of the data that the model was trained on\n\n\n\n\n\n\nstage\nFit_Method\nModel\n\nConstant\n\nVaried\n\n\n\nTest\nFit to Test Data\nALM\n\n276.7\n\n231.2\n\n\nEXAM\n\n215.9\n\n215.0\n\n\nFit to Test & Training Data\nALM\n\n288.2\n\n268.3\n\n\nEXAM\n\n228.6\n\n250.7\n\n\nFit to Training Data\nALM\n\n528.1\n\n368.7\n\n\nEXAM\n\n340.3\n\n370.9\n\n\nTrain\nFit to Test Data\nALM\n\n851.2\n\n3,049.9\n\n\nEXAM\n\n711.9\n\n1,047.5\n\n\nFit to Test & Training Data\nALM\n\n229.7\n\n324.7\n\n\nEXAM\n\n233.4\n\n331.3\n\n\nFit to Training Data\nALM\n\n216.1\n\n301.8\n\n\nEXAM\n\n216.0\n\n302.3\n\n\n\n\n\n\n\n\n\n\nCodec_post &lt;- post_dat_avg %&gt;%\n    group_by(id, condit, Model, Fit_Method, rank) %&gt;%\n    slice_head(n = 1) |&gt;\n    ggplot(aes(y=log(c), x = Fit_Method,col=condit)) + stat_pointinterval(position=position_dodge(.2)) +\n    ggh4x::facet_nested_wrap(~Model) + labs(title=\"c parameter\") +\n  theme(legend.title = element_blank(), legend.position=\"right\",plot.title=element_text(hjust=.4))\n\nlr_post &lt;- post_dat_avg %&gt;%\n    group_by(id, condit, Model, Fit_Method, rank) %&gt;%\n    slice_head(n = 1) |&gt;\n    ggplot(aes(y=lr, x = Fit_Method,col=condit)) + stat_pointinterval(position=position_dodge(.4)) +\n    ggh4x::facet_nested_wrap(~Model) + labs(title=\"learning rate parameter\") +\n  theme(legend.title = element_blank(), legend.position = \"none\",plot.title=element_text(hjust=.5))\nc_post + lr_post\n\n\n\n\n\n\nFigure 1: Posterior Distributions of \\(c\\) and \\(lr\\) parameters. Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median. Note that the y axes of the plots for the c parameter are scaled logarithmically.\n\n\n\n\n\nCode##| layout: [[45,-5, 45], [100]]\n##| fig-subcap: [\"Model Residuals - training data\", \"Model Residuals - testing data\",\"Full posterior predictive distributions vs. observed data from participants.\"]\ntrain_resid &lt;- pd_train |&gt; group_by(id,condit,Model,Fit_Method, Block) |&gt; \n  summarise(y = mean(y), pred = mean(pred), error = y - pred) |&gt;\n  ggplot(aes(x = Model, y = abs(error), fill=factor(Block))) + \n  stat_bar + \n  ggh4x::facet_nested_wrap(rename_fm(Fit_Method)~condit, scales=\"free\",ncol=2) +\n  scale_fill_manual(values=wes_palette(\"AsteroidCity2\"))+\n  labs(title=\"Model Residual Errors - Training Stage\", y=\"RMSE\", x= \"Model\") +\n  theme(legend.title = element_blank(), legend.position=\"top\")\n\ntest_resid &lt;-  post_dat |&gt; \n   group_by(id,condit,x,Model,Fit_Method,rank) |&gt;\n   summarize(error=mean(abs(y-pred)),n=n()) |&gt;\n   group_by(id,condit,x,Model,Fit_Method) |&gt;\n   summarize(error=mean(error)) |&gt;\n  mutate(vbLab = factor(paste0(x,\"-\",x+200))) |&gt;\n  ggplot(aes(x = Model, y = abs(error), fill=vbLab)) + \n  stat_bar + \n  scale_fill_manual(values=wes_palette(\"AsteroidCity2\"))+\n  ggh4x::facet_nested_wrap(rename_fm(Fit_Method)~condit, axes = \"all\",ncol=2,scale=\"free\") +\n  labs(title=\"Model Residual Errors - Testing Stage\",y=\"RMSE\", x=\"Velocity Band\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5)) \n\n\n\n(train_resid / test_resid) +\n  #plot_layout(heights=c(1,1.5)) & \n  plot_annotation(tag_levels = list(c('A','B')),tag_suffix = ') ') \n\n\n\n\n\n\nFigure 2: Model residuals for each combination of training condition, fit method, and model. Residuals reflect the difference between observed and predicted values. Lower values indicate better model fit. Note that y axes are scaled differently between facets.\n\n\n\n\nThe posterior distributions of the \\(c\\) and \\(lr\\) parameters are shown Figure 1, and model predictions are shown alongside the empirical data in fig-cm-vx-pat and fig-cm-dev-pat (i.e. these plots combine all the posterior samples from all of the subjects). There were substantial individual differences in the posteriors of both parameters, with the within-group individual differences generally swamped any between-group or between-model differences. The magnitude of these individual differences remains even if we consider only the single best parameter set for each subject.\nWe used the posterior distribution of \\(c\\) and \\(lr\\) parameters to generate a posterior predictive distribution of the observed data for each participant, which then allows us to compare the empirical data to the full range of predictions from each model. Aggregated residuals are displayed in Table 2. The pattern of training stage residual errors are unsurprising across the combinations of models and fitting method . Differences in training performance between ALM and EXAM are generally minor (the two models have identical learning mechanisms). The differences in the magnitude of residuals across the three fitting methods are also straightforward, with massive errors for the ‘fit to Test Only’ model, and the smallest errors for the ‘fit to train only’ models. It is also noteworthy that the residual errors are generally larger for the first block of training, which is likely due to the initial values of the ALM weights being unconstrained by whatever initial biases participants tend to bring to the task. Future work may explore the ability of the models to capture more fine grained aspects of the learning trajectories. However for the present purposes, our primary interest is in the ability of ALM and EXAM to account for the testing patterns while being constrained, or not constrained, by the training data. All subsequent analyses and discussion will thus focus on the testing stage.\nThe residuals of the model predictions for the testing stage (Figure 2) also show an unsurprising pattern across fitting methods - with models fit only to the test data showing the best performance, followed by models fit to both training and test data, and with models fit only to the training data showing the worst performance (note that y axes are scaled different between plots). Unsurprisingly, the advantage of EXAM is strongest for extrapolation positions (the three smallest bands for both groups - as well as the two highest bands for the Constant group). Although EXAM tends to perform better for both Constant and Varied participants (see also Table 2), the relative advantage of EXAM is generally larger for the Constant group - a pattern consistent across all three fitting methods.\nPanel B of Figure 2 directly compares the aggregated observed data to the posterior predictive distributions for the testing stage. Of interest are a) the extent to which the median estimates of the ALM and EXAM posteriors deviate from the observed medians for each velocity band; b) the ability of ALM and EXAM to discriminate between velocity bands; c) the relative performance of models that are constrained by the training data (i.e. the ‘fit to train only’ and ‘fit to both’ models) compared to the ‘fit to test only’ models;\nConsidering first the models fit to only the testing data, which reflect the best possible performance of ALM and EXAM at capturing the group-aggregated testing patterns. For the varied group, both ALM and EXAM are able to capture the median values of the observed data within the 66% credible intervals, and the spread of model predictions generally matches that of the observed data. For the constant group, only EXAM is able to capture the median range of values across the velocity bands, with ALM generally underestimating human velocoties in the upper bands, and overestimating in the lower bands. In the case of band 100, the median ALM prediction appears to match that of our participants - however this is due to a large subset of participants have ALM predictions near 0 for band 100, a pattern we will explore further in our considertation of individual patterns below. Models fit to both training and testing data show a similar pattern to only the testing data display the same basic pattern as those fit to only the testing data, albeit with slightly larger residuals. However models fit to only the training data display markedly worse performance at accounting for the key testing patterns.\n\n** explain how the constant group ALM predictions for band 100 look deceptively good due to aggregation of a large subset of subjects having ALM predictions of 0 for vb100, and a large subset with ALM predictions close to their position 800 value. This is relected by much greater variance of the ALM esimates in the posterior predictive plot\n** comment on how much constrained by the training data has a worse impact on the EXAM predictions for varied than for constant - perhaps due to the varied training data being much noisier than the constant training data.\n** comment on EXAM doing a better job mimicing the within-condition variance of the observed data\n** comment on the % of Constant subjects being best accounted for by EXAM being higher.\n** does EXAM do better for the Constant group because the constant group performs better? Or does training with a single example encourage an exam sort of strategy?\n\n\nCode#post_dat_l |&gt; group_by(id,condit,x) |&gt; filter(Resp==\"Observed\") |&gt; slice_head(n=1)\n\npemp1 &lt;- e1 |&gt; filter(expMode2==\"Test\") |&gt; mutate(Resp=\"Observed\") |&gt; \n  ggplot(aes(x=condit,y=vx, fill=vb)) + \n  stat_bar+ \n  labs(y=\"vx\", x=\"Condition\") + ggh4x::facet_nested_wrap(~Resp)\n\nlayout &lt;- \"\n#A#\n#B#\nCCC\n\"\n\npmod1 &lt;- post_dat_l |&gt; filter(!(Resp==\"Observed\")) |&gt; \n  group_by(id,condit, Fit_Method,Resp,x) |&gt; \n  mutate(x=as.factor(x)) |&gt;\n summarize(vx=mean(val)) |&gt; \n  ggplot(aes(x=condit,y=vx, fill=x)) + \n  stat_bar + \n    ggh4x::facet_nested_wrap(~Resp+rename_fm(Fit_Method), axes = \"all\",ncol=3,scale=\"free\") + \n  theme(legend.position = \"none\",plot.title = element_text(hjust=.55) ) + labs(title=\"Model Predictions\", y=\"vx\", x=\"Condition\")\n\n(pemp1) / plot_spacer() / pmod1 + \n  plot_layout(design = layout, heights = unit(c(5,-5, 8), c('cm','null')))\n\n\n\n\n\n\nFigure 3\n\n\n\n\n\nCodepemp1 &lt;- e1 |&gt; filter(expMode2==\"Test\") |&gt; mutate(Resp=\"Observed\") |&gt; \n  ggplot(aes(x=condit,y=dist, fill=vb)) + \n  stat_bar+ theme(legend.position=\"top\")\n  labs(y=\"Absolute Deviation\", x=\"Condition\") + ggh4x::facet_nested_wrap(~Resp)\n\nNULL\n\nCodelayout &lt;- \"\n#A#\n#B#\nCCC\n\"\n\npmod1 &lt;- post_dat_l |&gt; filter(!(Resp==\"Observed\")) |&gt; \n  group_by(id,condit, Fit_Method,Resp,x) |&gt; \n  mutate(x=as.factor(x)) |&gt;\n summarize(dist=mean(dist)) |&gt; \n  ggplot(aes(x=condit,y=dist, fill=x)) + \n  stat_bar + \n    ggh4x::facet_nested_wrap(~Resp+rename_fm(Fit_Method), axes = \"all\",ncol=3) + \n  theme(legend.position = \"none\",plot.title = element_text(hjust=.55) ) + labs(title=\"Model Predictions\", y=\"Absolute Deviation\", x=\"Condition\")\n\n\n# (pemp1) / plot_spacer() / pmod1 + \n#   plot_layout(design = layout, heights = unit(c(4,-5, 9), c('cm','null')))\n\n(pemp1) / plot_spacer() / pmod1 + \n  plot_layout(design = layout, heights = unit(c(5,-5, 8), c('cm','null')))\n\n# (pemp1) / pmod1 + plot_layout(design = layout,heights = unit(c(2,3),c(\"null\",\"null\")))\n# \n# \n# (pemp1) / plot_spacer() / pmod1 + \n#   plot_layout(design = layout, heights = unit(c(6,-5, 8), c('cm','null')))\n\n\n\n\n\n\nFigure 4: Posterior predictives for absolute deviation from target (accuracy). Observed data is shown on top, and predictions from each combination of model and fitting method are shown below.\n\n\n\n\nAccounting for individual patterns\nTo more accurately assess the relative abilities of ALM and EXAM to capture important empirical patterns - we will now examine the predictions of both models for the subset of individual participants shown in ?@fig-htw-indv-pred. Panel A presents three varied and constant participants who demonstrated a reasonable degree of discrimination between the 6 velocity bands during testing.\n\n** comment on the different ways ALM can completely fail to mimic discrimination patterns (sbj. 35; sbj. 137),and on how it can sometimes partially succeed (sbj. 11; 14,74)\n** comment on how EXAM can somtimes mimic non-monotonic spacing between bands due to associative stregth from training (i.e. subject 47)\n** compare c values to slope parameters from the statistical models earlier in paper\n\n\nCode# 175, 185, 134, 155, 68, 93, 74\n\n\n\nCodee2_model &lt;- load_e2()\n\n\n\ne3_model &lt;- load_e3()\n\n\n\n\n\n\n\nFigure 1: Posterior Distributions of \\(c\\) and \\(lr\\) parameters. Points represent median values, thicker intervals represent 66% credible intervals and thin intervals represent 95% credible intervals around the median. Note that the y axes of the plots for the c parameter are scaled logarithmically.\nFigure 2: Model residuals for each combination of training condition, fit method, and model. Residuals reflect the difference between observed and predicted values. Lower values indicate better model fit. Note that y axes are scaled differently between facets.\nFigure 3: \nFigure 4: Posterior predictives for absolute deviation from target (accuracy). Observed data is shown on top, and predictions from each combination of model and fitting method are shown below.",
    "crumbs": [
      "Model",
      "HTW Modeling"
    ]
  }
]