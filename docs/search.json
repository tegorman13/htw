[
  {
    "objectID": "DeLosh97_Sim.html",
    "href": "DeLosh97_Sim.html",
    "title": "Simulating DeLosh 1997",
    "section": "",
    "text": "Code\n#lapply(c('tidyverse','data.table','igraph','ggraph','kableExtra'),library,character.only=TRUE))\npacman::p_load(tidyverse,data.table,igraph,ggraph,kableExtra)\nCode\n#https://nrennie.rbind.io/blog/2022-06-06-creating-flowcharts-with-ggplot2/\ninNodes &lt;- seq(1,6,1) %&gt;% as.integer()\noutNodes &lt;- seq(300,1000,50)%&gt;% as.integer()\nstim &lt;- \"Stim\"\nresp &lt;- \"Response\"\ninFlow &lt;- tibble(expand.grid(from=stim,to=inNodes)) %&gt;% mutate_all(as.character)\noutFlow &lt;- tibble(expand.grid(from=outNodes,to=resp)) %&gt;% mutate_all(as.character)\n\ngd &lt;- tibble(expand.grid(from=inNodes,to=outNodes)) %&gt;% mutate_all(as.character) %&gt;%\n  rbind(inFlow,.) %&gt;% rbind(.,outFlow)\n\ng = graph_from_data_frame(gd,directed=TRUE)\ncoords2=layout_as_tree(g)\ncolnames(coords2)=c(\"y\",\"x\")\nodf &lt;- as_tibble(coords2) %&gt;% \n  mutate(label=vertex_attr(g,\"name\"),\n         type=c(\"stim\",rep(\"Input\",length(inNodes)),rep(\"Output\",length(outNodes)),\"Resp\"),\n         x=x*-1) %&gt;%\n  mutate(y=ifelse(type==\"Resp\",0,y),xmin=x-.05,xmax=x+.05,ymin=y-.35,ymax=y+.35)\n\nplot_edges = gd %&gt;% mutate(id=row_number()) %&gt;%\n  pivot_longer(cols=c(\"from\",\"to\"),names_to=\"s_e\",values_to=(\"label\")) %&gt;%\n                 mutate(label=as.character(label)) %&gt;% \n  group_by(id) %&gt;%\n  mutate(weight=sqrt(rnorm(1,mean=0,sd=10)^2)/10) %&gt;%\n  left_join(odf,by=\"label\") %&gt;%\n  mutate(xmin=xmin+.02,xmax=xmax-.02)\n\nggplot() + geom_rect(data = odf,\n            mapping = aes(xmin = xmin, ymin = ymin, \n                          xmax = xmax, ymax = ymax, \n                          fill = type, colour = type),alpha = 0.5) +\n  geom_text(data=odf,aes(x=x,y=y,label=label,size=3)) +\n  geom_path(data=plot_edges,mapping=aes(x=x,y=y,group=id,alpha=weight)) +\n  # geom_rect(aes(xmin=-1.05,xmax=-.95,ymin=-10,ymax=5),color=\"red\",alpha=.1)+\n  # geom_rect(aes(xmin=-0.05,xmax=.05,ymin=-10,ymax=5),color=\"blue\",alpha=.1) +\n  theme_void()"
  },
  {
    "objectID": "DeLosh97_Sim.html#alm-definition",
    "href": "DeLosh97_Sim.html#alm-definition",
    "title": "Simulating DeLosh 1997",
    "section": "ALM Definition",
    "text": "ALM Definition\n\n\n\nInput Activation\n\\[\na_i(X)=\\exp \\left|-\\gamma \\cdot\\left[X-X_i\\right]^2\\right|\n\\]\n\n\nOutput activation\n\\[\no_j(X)=\\Sigma_{i=1, M} w_{j i} \\cdot a_i(X)\n\\]\n\n\nOutput Probability\n\\[\nP\\left[Y_j \\mid X\\right]=o_j(X) / \\Sigma_{k=1, L} o_k(X)\n\\]\n\n\nMean Response\n\\[\nm(X)=\\Sigma_{j=1, L} Y_j \\cdot P\\left[Y_j \\mid X\\right]\n\\]\n\n\nGenerate Response\n\n\nToggle Code\nalm.response &lt;- function(input=1,c) {\ninput.activation &lt;- exp(-c*(input.layer - input)^2)\ninput.activation &lt;&lt;- input.activation/sum(input.activation)\n#print(length(input.activation)); print(dim(weight.mat))\noutput.activation &lt;&lt;- weight.mat %*% input.activation\noutput.probability &lt;&lt;- output.activation/sum(output.activation)\nmean.response &lt;&lt;- sum(output.layer * output.probability)\nmean.response\n}\n\n\n     \n\n\nUpdate Weights Based on Feedback\n\n\nToggle Code\nalm.update &lt;- function(corResp,c,lr){\n  fz &lt;- exp(-c*(output.layer - corResp)^2)\n  teacherSignal &lt;- (fz - output.activation)*lr\n  #print(length(teacherSignal)); print(length(fz))\n  wChange &lt;- teacherSignal %*% t(input.activation)\n  weight.mat &lt;&lt;- weight.mat + (wChange)\n  weight.mat[weight.mat&lt;0]=0 # prevent negative values\n # weight.mat[weight.mat&gt;1]=1\n  weight.mat &lt;&lt;- weight.mat\n}\n\nalm.trial &lt;- function(input, corResp,c,lr){\n  alm.response(input,c)\n  alm.update(corResp,c,lr)\n # print(paste0(\"input=\",input,\"; corResp=\",corResp,\"; mean.response=\",mean.response))\n  mean.response\n}\n\n\n\n\n\nFeedback Signal\n\\[\nf_j(Z)=e^{-c\\cdot(Z-Y_j)^2}\n\\]\n\n\nWeight Updates\n\\[\nw_{ji}(t+1)=w_{ji}(t)+\\alpha \\cdot {f_i(Z(t))-O_j(X(t))} \\cdot a_i(X(t))\n\\]\n\n\n\nExam Generalization\n\n\nToggle Code\nexam.response &lt;- function(input,c){\n  # Find the index of the input node with the highest activation\n  trainVec = sort(unique(xt))\n  nearestTrain &lt;- trainVec[which.min(abs(input - trainVec))]\n  aresp &lt;- alm.response(nearestTrain,c)\n  #max.index &lt;- which.max(input.activation)\n  xUnder = ifelse(min(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) - 1])\n  xOver = ifelse(max(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) + 1])\n\n  mUnder &lt;- alm.response(xUnder,c)\n  mOver &lt;- alm.response(xOver,c)\n \n   exam.output = round(aresp + ((mOver - mUnder) / (xOver - xUnder)) * (input - nearestTrain), 3)\n  # Determine the input nodes and associated weights for computing the slope\n  exam.output\n}\n\n\n\n\n\nInput node actvation\n\\[\nP[X_i|X] = \\frac{a_i(X)}{\\\\sum_{k=1}^Ma_k(X)}\n\\]\n\n\nSlope Computation\n\\[\nE[Y|X_i]=m(X_i) + \\bigg[\\frac{m(X_{i+1})-m(X_{i-1})}{X_{i+1} - X_{i-1}} \\bigg]\\cdot[X-X_i]\n\\]\n\n\n\nPrepare Simulation Data\n\n\nToggle Code\n# function to generate data, from either linear, exponential, quadratic or sinusoidal functions\n\ngenerate.data &lt;- function(x, type = \"linear\", noise = NA) {\n  if (type == \"linear\") {\n    y &lt;- round(2.2*x + 30,0)\n  }\n  else if (type == \"exponential\") {\n    y &lt;- round(200*(1-exp(-x/25)),0)\n  }\n  else if (type == \"sinusoidal\") {\n    y &lt;- sin(2 * pi * x) \n  }\n  else if (type == \"quadratic\") {\n    y &lt;- round(210 - ((x-50)^2)/12,0)\n  }\n  else {\n    stop(\"type must be linear, exponential, quadratic, or sinusoidal\")\n  }\n  # if noise is specified, add noise to the y values\n  if(!is.na(noise)) {\n    y &lt;- y + round(rnorm(length(y), 0, noise),2)\n  }\n  data.frame(x, y,type)\n}\n\nenvTypes &lt;- c(\"linear\", \"exponential\", \"quadratic\")\n\nlowDensityTrainBlock &lt;- c(30.5, 36.0, 41.0, 46.5, 53.5, 59.0, 64.0, 69.5)\nmedDensityTrainBlock &lt;- c(\n    30.0, 31.5, 33.0, 34.5, 36.5, 38.5, 41.0, 43.5, 46.0,\n    48.5, 51.5, 54.0, 56.5, 59.0, 61.5, 63.5, 65.5, 67.0, 68.5, 70.0\n)\nhighDensityTrainBlock &lt;- c(\n    30.0, 30.5, 31.0, 32.0, 33.0, 33.5, 34.5, 35.5,\n    36.5, 37.0, 38.0, 38.5, 39.5, 40.5, 41.5, 42.0, 43.0,\n    43.5, 44.5, 45.5, 46.5, 47.0, 48.0, 48.5, 49.0, 51.0, 51.5, 52.0,\n    53.0, 53.5, 54.5, 55.5, 56.5, 57.0, 58.0, 58.5, 59.5, 60.5, 61.5, \n    62.0, 63.0,63.5, 64.5, 65.5, 66.5, 67.0, 68.0, 69.0, 69.5, 70.0\n)\n# low density has 25 training blocks, medium has 10 blocks, high has 4 blocks. \n\n# generate training data, for each combination of environment type and density. Use purrr map functions. Rep each dataset by its number of blocks.\nlowTrain &lt;- map_dfr(envTypes, ~ generate.data(rep(lowDensityTrainBlock,25), type = .x)) %&gt;% group_by(type) %&gt;% mutate(block = rep(1:25, each = 8),trial=seq(1,200))\n\nmedTrain &lt;- map_dfr(envTypes, ~ generate.data(rep(medDensityTrainBlock,10), type = .x)) %&gt;% group_by(type) %&gt;% mutate(block = rep(1:10, each = 20),trial=seq(1,200))\n\nhighTrain &lt;- map_dfr(envTypes, ~ generate.data(rep(highDensityTrainBlock,4), type = .x)) %&gt;% group_by(type) %&gt;% mutate(block = rep(1:4, each = 50),trial=seq(1,200))\n\n# nTrainExamples &lt;- 10\n# trainLowBound &lt;-20; trainHIghBound &lt;- 80\n# nBlock &lt;- 5 # number of times each training example is presented\n# sample training data from function, nTrainExamples., between trainLowBound and trainHIghBound\n# xt &lt;- runif(nTrainExamples, trainLowBound, trainHIghBound)\n# trainVec &lt;- rep(xt, nBlock)\n\n\n\n\nSimulation Functions\n\n\nCode\n# simulation function\nalm.sim &lt;- function(dat, c, lr,testRange=seq(0,100,.5)){\n  \ninput.layer &lt;&lt;- matrix(seq(0,100,.5) ) # half step units for inputs, from 0 to 100\noutput.layer &lt;&lt;- matrix(seq(0,250,1)) # single step units for outputs, from 0 to 250\nweight.mat &lt;&lt;- matrix(0.0000000,nrow=length(output.layer),ncol=length(input.layer )) # weights initialized to 0 (as in Delosh 1997)\n\nxt&lt;&lt;-dat$x\n# run training\nst &lt;- map2_dbl(dat$x, dat$y, ~alm.trial(.x,.y,c,lr))\n# append training data to the data frame\ndat &lt;- dat %&gt;% mutate(almResp = st)\n\nreturn(list(d=dat,wm=weight.mat,c=c,lr=lr)) # final weightmat is probs incorrect for all but last\n}\n\n\nsimOrganize &lt;- function(simOut){\n  dat &lt;- simOut$d\n  weight.mat &lt;&lt;- simOut$wm\n  c &lt;- simOut$c\n  lr &lt;- simOut$lr\n\n  trainX &lt;- unique(dat$x)\n  xt &lt;&lt;- trainX\n  \n almResp &lt;- generate.data(seq(0,100,.5), type = first(dat$type)) %&gt;% rowwise() %&gt;% \n mutate(model=\"ALM\",resp = alm.response(x,c))\n\n examResp &lt;- generate.data(seq(0,100,.5), type = first(dat$type)) %&gt;% rowwise() %&gt;% \n mutate(model=\"EXAM\",resp = exam.response(x,c))\n\n bind_rows(almResp,examResp) %&gt;% \n mutate(type=first(dat$type),\n        c=c,lr=lr,\n type=factor(type,levels=c(\"linear\",\"exponential\",\"quadratic\"))) %&gt;%\n # compute test_region, equal to \"train\" if x is within trainX, interpolate if within trainX range, else \"extrapolate\"\n  mutate(test_region = ifelse(x %in% trainX, \"train\", ifelse(x &gt; min(trainX) & x &lt; max(trainX), \"interpolate\", \"extrapolate\")))\n\n}\n\n\n\n\nSimulate Training:\n\n\nCode\n# split by type, then send each training dataset to simulation function\nlowSim &lt;- map(envTypes, ~ alm.sim(lowTrain %&gt;% filter(type == .x), c = 1.4, lr = .4))\n\nmedSim &lt;- map(envTypes, ~ alm.sim(medTrain %&gt;% filter(type == .x), c = 1.4, lr = .4))\n\nhighSim &lt;- map(envTypes, ~ alm.sim(highTrain %&gt;% filter(type == .x), c = 1.4, lr = .4))\n\n\nsimAll &lt;- rbind(bind_rows(lowSim %&gt;% map(\"d\")) %&gt;% mutate(density = \"low\"), \n                bind_rows(medSim %&gt;% map(\"d\")) %&gt;% mutate(density = \"med\"), \n                bind_rows(highSim %&gt;% map(\"d\")) %&gt;% mutate(density = \"high\"))\n\n\n\nsimAll &lt;- simAll %&gt;% mutate(stage=as.numeric(cut(trial,breaks=20,labels=seq(1,20))),\n                                      dev=sqrt((y-almResp)^2),\n                                  #reorder density factor levels\n                            density=factor(density,levels=c(\"low\",\"med\",\"high\")),\n                            type=factor(type,levels=c(\"linear\",\"exponential\",\"quadratic\"))) %&gt;%\n                            dplyr::relocate(density,type,stage)\n\nsimAll %&gt;% ggplot(aes(x=block,y=dev,color=type)) + stat_summary(geom=\"line\",fun=mean,alpha=.4)+\n  stat_summary(geom=\"point\",fun=mean,alpha=.4)+\n  stat_summary(geom=\"errorbar\",fun.data=mean_cl_normal,alpha=.4)+facet_wrap(~density, scales=\"free_x\")\n\n\n\n\n\nPredictions for Generalization\n\n\nCode\nlowSimTest &lt;- map_dfr(lowSim,simOrganize) %&gt;% mutate(density = \"low\")\nmedSimTest &lt;- map_dfr(medSim,simOrganize) %&gt;% mutate(density = \"med\")\nhighSimTest &lt;- map_dfr(highSim,simOrganize) %&gt;% mutate(density = \"high\")\n\nsimTestAll &lt;- rbind(lowSimTest,medSimTest,highSimTest) %&gt;% group_by(type,density,model) %&gt;%\n  mutate(type=factor(type,levels=c(\"linear\",\"exponential\",\"quadratic\")),\n         density=factor(density,levels=c(\"low\",\"med\",\"high\"))) %&gt;%\n  dplyr::relocate(density,type,test_region)\n\nsimTestAll %&gt;% ggplot(aes(x=x,y=y)) + \n  geom_point(aes(x=x,y=resp,shape=model,color=model),alpha=.7,size=1) + \n  geom_line(aes(x=x,y=y),alpha=.4)+ \n  #geom_point(aes(x=x,y=y,color=test_region),alpha=.2)+ \n  geom_point(data=simTestAll %&gt;% filter(test_region==\"train\"),aes(x=x,y=y),color=\"black\",size=1,alpha=1) +\n # geom_point(data=simTestAll %&gt;% filter(test_region %in% c(\"interpolate\",\"extrapolate\")),aes(x=x,y=y,color=test_region),alpha=.6) +\n  # geom_point(data=simTestAll %&gt;% filter(test_region==\"extrapolate\"),aes(x=x,y=y),color=\"purple\",alpha=.3) +\n  facet_grid(density~type) + \n  theme_bw() + theme(legend.position=\"bottom\")\n\n\n\n\n\nCode\n#lowSimTest %&gt;% filter(model==\"EXAM\" & type==\"linear\")\n#rm(list= ls()[sapply(ls(), function(x) class(get(x))) != 'function'])\n#rm(weight.mat,input.activation,output.probability,output.activation,mean.response,xt)\n# \n# simAll %&gt;% ggplot(aes(x=block,y=dev)) + stat_summary(geom=\"line\",fun=mean,alpha=.3)+stat_summary(geom=\"point\",fun=mean)+\n#   stat_summary(geom=\"errorbar\",fun.data=mean_cl_normal)+facet_wrap(density~type, scales=\"free_x\")\n\n\nCollpasing Across Density Levels gives us:\n\n\nCode\nsimTestAll %&gt;% group_by(type,model,x,y) %&gt;% summarise(resp=mean(resp))  %&gt;% ggplot(aes(x=x,y=y)) + \n  geom_point(aes(x=x,y=resp,shape=model,color=model),alpha=.7,size=1) + \n  geom_line(aes(x=x,y=y),alpha=.4)+ \n  facet_grid(~type) + \n  theme_bw() + theme(legend.position=\"bottom\")\n\n\n\n\nMaster Function for full simulation\n\n\nCode\n# Function that goes through every step of generating data, simulating training, and simulating generalization\nfull.sim &lt;- function(c,lr,noise)\n{\n  \nenvTypes &lt;- c(\"linear\", \"exponential\", \"quadratic\")\nlowDensityTrainBlock &lt;- c(30.5, 36.0, 41.0, 46.5, 53.5, 59.0, 64.0, 69.5)\nmedDensityTrainBlock &lt;- c(\n    30.0, 31.5, 33.0, 34.5, 36.5, 38.5, 41.0, 43.5, 46.0,\n    48.5, 51.5, 54.0, 56.5, 59.0, 61.5, 63.5, 65.5, 67.0, 68.5, 70.0\n)\nhighDensityTrainBlock &lt;- c(\n    30.0, 30.5, 31.0, 32.0, 33.0, 33.5, 34.5, 35.5,\n    36.5, 37.0, 38.0, 38.5, 39.5, 40.5, 41.5, 42.0, 43.0,\n    43.5, 44.5, 45.5, 46.5, 47.0, 48.0, 48.5, 49.0, 51.0, 51.5, 52.0,\n    53.0, 53.5, 54.5, 55.5, 56.5, 57.0, 58.0, 58.5, 59.5, 60.5, 61.5, \n    62.0, 63.0,63.5, 64.5, 65.5, 66.5, 67.0, 68.0, 69.0, 69.5, 70.0\n)\n# low density has 25 training blocks, medium has 10 blocks, high has 4 blocks. \n# generate training data, for each combination of environment type and density. Use purrr map functions. Rep each dataset by its number of blocks.\nlowTrain &lt;- map_dfr(envTypes, ~ generate.data(rep(lowDensityTrainBlock,25), type = .x, noise)) %&gt;% group_by(type) %&gt;% mutate(block = rep(1:25, each = 8),trial=seq(1,200))\nmedTrain &lt;- map_dfr(envTypes, ~ generate.data(rep(medDensityTrainBlock,10), type = .x, noise)) %&gt;% group_by(type) %&gt;% mutate(block = rep(1:10, each = 20),trial=seq(1,200))\nhighTrain &lt;- map_dfr(envTypes, ~ generate.data(rep(highDensityTrainBlock,4), type = .x, noise)) %&gt;% group_by(type) %&gt;% mutate(block = rep(1:4, each = 50),trial=seq(1,200))\n  \nlowSim &lt;- map(envTypes, ~ alm.sim(lowTrain %&gt;% filter(type == .x), c = 1.4, lr = .4))\nmedSim &lt;- map(envTypes, ~ alm.sim(medTrain %&gt;% filter(type == .x), c = 1.4, lr = .4))\nhighSim &lt;- map(envTypes, ~ alm.sim(highTrain %&gt;% filter(type == .x), c = 1.4, lr = .4))\n\nsimAll &lt;- rbind(bind_rows(lowSim %&gt;% map(\"d\")) %&gt;% mutate(density = \"low\"), \n                bind_rows(medSim %&gt;% map(\"d\")) %&gt;% mutate(density = \"med\"), \n                bind_rows(highSim %&gt;% map(\"d\")) %&gt;% mutate(density = \"high\"))\n\nsimAll &lt;- simAll %&gt;% mutate(stage=as.numeric(cut(trial,breaks=20,labels=seq(1,20))),\n                                      dev=sqrt((y-almResp)^2),\n                                  #reorder density factor levels\n                            density=factor(density,levels=c(\"low\",\"med\",\"high\")),\n                            type=factor(type,levels=c(\"linear\",\"exponential\",\"quadratic\"))) %&gt;%\n                            dplyr::relocate(density,type,stage)\n\nlowSimTest &lt;- map_dfr(lowSim,simOrganize) %&gt;% mutate(density = \"low\")\nmedSimTest &lt;- map_dfr(medSim,simOrganize) %&gt;% mutate(density = \"med\")\nhighSimTest &lt;- map_dfr(highSim,simOrganize) %&gt;% mutate(density = \"high\")\n\nsimTestAll &lt;- rbind(lowSimTest,medSimTest,highSimTest) %&gt;% group_by(type,density,model) %&gt;%\n  mutate(type=factor(type,levels=c(\"linear\",\"exponential\",\"quadratic\")),\n         density=factor(density,levels=c(\"low\",\"med\",\"high\"))) %&gt;%\n  dplyr::relocate(density,type,test_region)\n\nreturn(list(simAll=list(simAll),simTestAll=list(simTestAll)))\n  \n}\n\n\n\n\nSimulations with noise\n\n\nCode\nk = full.sim(c=1.4,lr=.4,noise=2.0)\nk4 = full.sim(c=1.4,lr=.4,noise=4.0)\n\n# run simulation with noise=10, 3 times, average results together. \nk10 = map_dfr(1:3, ~ full.sim(c=1.4,lr=.4,noise=10.0)) %&gt;% group_by(type,density,model) %&gt;%\n  mutate(type=factor(type,levels=c(\"linear\",\"exponential\",\"quadratic\")),\n         density=factor(density,levels=c(\"low\",\"med\",\"high\"))) %&gt;%\n  dplyr::relocate(density,type,test_region)\n\n\n\nk %&gt;% pluck(\"simAll\") %&gt;% ggplot(aes(x=block,y=dev,color=type)) + stat_summary(geom=\"line\",fun=mean,alpha=.4)+\n  stat_summary(geom=\"point\",fun=mean,alpha=.4)+\n  stat_summary(geom=\"errorbar\",fun.data=mean_cl_normal,alpha=.4)+facet_wrap(~density, scales=\"free_x\")\n\n\nk4 %&gt;% pluck(\"simAll\") %&gt;% ggplot(aes(x=block,y=dev,color=type)) + stat_summary(geom=\"line\",fun=mean,alpha=.4)+\n  stat_summary(geom=\"point\",fun=mean,alpha=.4)+\n  stat_summary(geom=\"errorbar\",fun.data=mean_cl_normal,alpha=.4)+facet_wrap(~density, scales=\"free_x\")\n\n\nk %&gt;% pluck(\"simTestAll\") %&gt;%ggplot(aes(x=x,y=y)) + \n  geom_point(aes(x=x,y=resp,shape=model,color=model),alpha=.7,size=1) + \n  geom_line(aes(x=x,y=y),alpha=.4)+ \n  geom_point(data=simTestAll %&gt;% filter(test_region==\"train\"),aes(x=x,y=y),color=\"black\",size=1,alpha=1) +\n  facet_grid(density~type) + \n  theme_bw() + theme(legend.position=\"bottom\")\n\nk4 %&gt;% pluck(\"simTestAll\") %&gt;%ggplot(aes(x=x,y=y)) + \n  geom_point(aes(x=x,y=resp,shape=model,color=model),alpha=.7,size=1) + \n  geom_line(aes(x=x,y=y),alpha=.4)+ \n  geom_point(data=simTestAll %&gt;% filter(test_region==\"train\"),aes(x=x,y=y),color=\"black\",size=1,alpha=1) +\n  facet_grid(density~type) + \n  theme_bw() + theme(legend.position=\"bottom\")\n\nk10 %&gt;% pluck(\"simTestAll\") %&gt;%ggplot(aes(x=x,y=y)) + \n  geom_point(aes(x=x,y=resp,shape=model,color=model),alpha=.7,size=1) + \n  geom_line(aes(x=x,y=y),alpha=.4)+ \n  geom_point(data=simTestAll %&gt;% filter(test_region==\"train\"),aes(x=x,y=y),color=\"black\",size=1,alpha=1) +\n  facet_grid(density~type) + \n  theme_bw() + theme(legend.position=\"bottom\")\n\n\n\n\nCode\n# label each each simulation with its density level (low, med, high), then combine all 3\nlowSimTest &lt;- lowSimTest %&gt;% mutate(density = \"low\")\nmedSimTest &lt;- medSimTest %&gt;% mutate(density = \"med\")\nhighSimTest &lt;- highSimTest %&gt;% mutate(density = \"high\")\n\nsimTest &lt;- bind_rows(lowSimTest,medSimTest,highSimTest)\n\n# extract element d from each list, and bind rows, remove Nan's, group by type, mutate new variable \"Stage\", which is set to first for block 1, last for final block, and middle for all other glocks, pipe to ggplot, plotting y and almResp in different colors, facet by type and stage (only first and last block)\nls2=bind_rows(lowSim %&gt;% map(\"d\")) %&gt;% filter(!is.na(almResp)) %&gt;% \n  group_by(type) %&gt;% \n  mutate(stage = ifelse(block == 1, \"first\", ifelse(block == 25, \"last\", \"middle\")),\n         stage2=cut(trial,breaks=20,labels=seq(1,20)),\n         dev=sqrt((y-almResp)^2))\n \nls2 %&gt;% ggplot() + geom_point(aes(x=stage2,y=dev))+facet_grid(~type)\n\n\n\nls2 %&gt;% filter(stage %in% c(\"first\",\"last\")) %&gt;% ggplot() + geom_point(aes(x=x,y=y),color=\"red\",alpha=.3) + \ngeom_point(aes(x=x,y=almResp),color=\"blue\",alpha=.4)+ \nfacet_grid(type~stage) + theme_bw() + theme(legend.position=\"bottom\")\n\n\nlowSimTest %&gt;% ggplot() + geom_point(aes(x=x,y=resp,color=model)) + geom_line(aes(x=x,y=y),alpha=.3)+ facet_grid(~type) + theme_bw() + theme(legend.position=\"bottom\")\n\n# make grid of each combination of train dataset and envType\nsimGrid &lt;- expand.grid(envTypes=envTypes,trainData=c(\"lowTrain\",\"medTrain\",\"highTrain\"))\n\n# map over the grid, for each row of simGrid, filter the training dataset by the envType, and then run the simulation function, and then bind rows of the output data frame.\nsimOut &lt;- map2(c(\"lowTrain\",\"medTrain\",\"highTrain\"),envTypes, ~ alm.sim(get(.x) %&gt;% filter(type == .y), c = 1.4, lr = .4))\n\n# simOut &lt;- map(c(\"lowTrain\",\"medTrain\",\"highTrain\"), ~ map_dfr(envTypes, ~ alm.sim(get(.) %&gt;% filter(type == .x), c = 1.4, lr = .4) %&gt;% simOrganize))\n# \n# simOut &lt;- map_dfr(simGrid, ~ alm.sim(get(.x$trainData) %&gt;% filter(type == .x$envTypes), c = 1.4, lr = .4) %&gt;% simOrganize)\n# \n# for each training dataset in c(lowTrain,medTrain,highTrain), run simulation function, separately for each type, and then bind rows of the output data frame.\n\n\n\n\nPrimary Functions"
  },
  {
    "objectID": "External.html",
    "href": "External.html",
    "title": "External",
    "section": "",
    "text": "External Links\n\n\n\nRegression in Keras\nuncertainty in deep learning \nRobinson Codebook\npainbrow\nNN Flex\nb-splines\n\n\n\n\n\n\nMahr Posts\n\n\n\nPolypoly\nsplines\n\n\nHock Function Learn with NN\nAutoencoder with Tensorflow\nConnected Scatterplot\n\n\n\n\n\n\n\n\nQuarto Tools to add\n\n\n\n\n\nggpage\nquartoDocSetup\nquartoLayout\n\n\n\n\n\n\n\n\n\n\nNutshell items\n\n\n\n\n\n\n:link to senseless paragraph\n\n:link to wikipedia article\n:link to invisible sections\n\n\n\n\n\n\n\n\n\n:ggpage\n:quartoDocSetup\n:quartoLayout"
  },
  {
    "objectID": "External.html#another",
    "href": "External.html#another",
    "title": "External",
    "section": "another",
    "text": "another\n\n\n\n\n\n\nPDF Views\n\n\n\n\n\n\nMain\nInformation Sampling Explains Bayesian Learners’ biases in correlation judgement \n\n\n\nAlt\n\n\n\n\nNeural Network Model of Continual Learning with Cognitive Control\n\n\n\nGeometry of Map-Like Representations Under Dynamic-Cognitive Control\n\n\n\n\n\n\n\nPage Embed\nVideo"
  },
  {
    "objectID": "External.html#callouts",
    "href": "External.html#callouts",
    "title": "External",
    "section": "Callouts",
    "text": "Callouts\n\n\n\n\n\n\nPay Attention\n\n\n\nUsing callouts is an effective way to highlight content that your reader give special consideration or attention.\n\n\n\n\n\n\n\n\nPay Attention\n\n\n\nUsing callouts is an effective way to highlight content that your reader give special consideration or attention.\n\n\n\n\n\n\n\n\nVideo Page\n\n\n\nVideo"
  },
  {
    "objectID": "External.html#test-grid",
    "href": "External.html#test-grid",
    "title": "External",
    "section": "Test Grid",
    "text": "Test Grid\n\n\nThis column takes 1/3 of the page\n\n\n\n\n\n\n\n\nModel To-do\n\n\n\n\nALM\nEXAM\nApproximate Bayes?\n\n\n\n\n\n\n\n\n\nAnalysis To-do\n\n\n\n\nDiscrimination\nMixed Models?"
  },
  {
    "objectID": "External.html#alt-column-approach",
    "href": "External.html#alt-column-approach",
    "title": "External",
    "section": "Alt column approach",
    "text": "Alt column approach\n\n\n\n\n\n\n\n\n\nModel To-do\n\n\n\n\n\n\nTrain Predict Transfer vs. Full Fit\nSeparate ALM and EXAM Fits\nALM + Prior Knowledge\nEmpirical Learning Model\nNoise Parameter\nModel Recovery\nApproximate Bayes?\n\n\n\n\n\n\n\n\n\n\n\n\nAnalysis To-do\n\n\n\n\n\n\nDiscrimination\nMixed Models?"
  },
  {
    "objectID": "External.html#test",
    "href": "External.html#test",
    "title": "External",
    "section": "Test",
    "text": "Test\nThis is a senseless paragraph"
  },
  {
    "objectID": "External.html#testing-links",
    "href": "External.html#testing-links",
    "title": "External",
    "section": "Testing Links",
    "text": "Testing Links\n\n:link to senseless paragraph\n\n:link to wikipedia article\n:link to invisible sections"
  },
  {
    "objectID": "External.html#end",
    "href": "External.html#end",
    "title": "External",
    "section": "end",
    "text": "end\n\nlibrary(flashCard)\ndf1 &lt;- data.frame(\n  front = c(\"Title front\",\"contentfront\", \"content second line\"),\n  back =c(\"Title back\",\"content back\", \"second line\")\n)\nflashCard(df1, elementId = \"card\", front_text_color = \"white\")"
  },
  {
    "objectID": "Functions/index.html",
    "href": "Functions/index.html",
    "title": "Quarto Shiny ALM",
    "section": "",
    "text": "Association Parameter\n\n\n\n\n\nUpdate Parameter\n\n\n\n\n\nTraining Repetitions\n\n\n\n\n\nNoise\n\n\n\n\n\nTraining Items\n\n\n\n1\n\n\n\n5\n\n\n\n8\n\n\n\n12\n\n\n\n16\n\n\n\n19\n\n\n\n23\n\n\n\n27\n\n\n\n30\n\n\n\n34\n\n\n\n38\n\n\n\n41\n\n\n\n45\n\n\n\n49\n\n\n\n52\n\n\n\n56\n\n\n\n60\n\n\n\n63\n\n\n\n67\n\n\n\n71\n\n\n\n74\n\n\n\n78\n\n\n\n82\n\n\n\n85\n\n\n\n89\n\n\n\n93\n\n\n\n97\n\n\n\n100\n\n\n\n104\n\n\n\n108\n\n\n\n111\n\n\n\n115\n\n\n\n119\n\n\n\n122\n\n\n\n126\n\n\n\n130\n\n\n\n133\n\n\n\n137\n\n\n\n141\n\n\n\n144\n\n\n\n148\n\n\n\n152\n\n\n\n155\n\n\n\n159\n\n\n\n163\n\n\n\n166\n\n\n\n170\n\n\n\n174\n\n\n\n177\n\n\n\n181\n\n\n\n\n\n\nFunction Form\n\n\n\n\nLinear\n\n\n\n\n\nQuadratic\n\n\n\n\n\nExponential\n\n\n\n\n\n\n\nNumber of Repetitions\n\n\n\n\nRun Simulation\n\n\n\n\n\n\n\n\n\nAverage Model Performance\n\n\n\n\n\n\nModel Performance by Item Type"
  },
  {
    "objectID": "HTW_ToDo.html",
    "href": "HTW_ToDo.html",
    "title": "HTW To-do and Notes",
    "section": "",
    "text": "Model To-do\n\n\n\n\n\n\nFit to Train then Predict Transfer vs. Fitting to all stages\nSeparate ALM and EXAM Fits\nALM + Prior Knowledge (initial anchor at 0)\nEmpirical Learning Model\nIndividual vs. Group fits\nUsing Cognitive Model parameters to predict testing Vx vs. Deviation vs. Discrimination\nModel Recovery?\nApproximate Bayes?\n\n\n\n\n\n\n\n\n\n\n\n\nAnalysis To-do\n\n\n\n\nDiscrimination\nMixed Models?\n\n\n\n\n\n\n\n\n\nSite to-do\n\n\n\n\nConfigure react tables"
  },
  {
    "objectID": "HTW_ToDo.html#notes",
    "href": "HTW_ToDo.html#notes",
    "title": "HTW To-do and Notes",
    "section": "Notes",
    "text": "Notes\n\n\n\n\n\n\nHuman Regression or Rule\n\n\n\n\n\n\n\n\n\n\n\n\nALM & EXAM Implementations\n\n\n\n\n\n\n\n\n\n\n\n\nALM Likelihood\n\n\n\n\n\n\n\n\n\n\n\n\nHTW DP"
  },
  {
    "objectID": "Task.html",
    "href": "Task.html",
    "title": "HTW Task",
    "section": "",
    "text": "need to create a demo version without consent form. And maybe separate windows for the different versions.\n\n\n\n\nHTW_Task\n\n\n\nMain Body\n\n   –&gt;"
  },
  {
    "objectID": "discrim.html",
    "href": "discrim.html",
    "title": "Testing Discrimination Analysis",
    "section": "",
    "text": "Code\nlapply(c('tidyverse','data.table','lme4','lmerTest','knitr','kableExtra','cowplot','gghalves'),library,character.only = TRUE)\nd &lt;- readRDS('dPrune-01-19-23.rds')\n\ndtest &lt;- d %&gt;% filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) %&gt;% group_by(id,lowBound) %&gt;% \n  mutate(nBand=n(),band=bandInt,id=factor(id)) %&gt;% group_by(id) %&gt;% mutate(nd=n_distinct(lowBound))\n# unique(dtest[dtest$nd==4,]$sbjCode) # 7 in wrong condition\ndtest &lt;- dtest %&gt;% group_by(id,lowBound) %&gt;% filter(nBand&gt;=5 & nd==6)\n# for any id that has at least 1 nBand &gt;=5, remove all rows with that id. \ndtest &lt;- dtest %&gt;% group_by(id) %&gt;% filter(!id %in% unique(dtest$id[dtest$nBand&lt;5]))\n\ndtestAgg &lt;- dtest %&gt;% group_by(id,condit,catOrder,feedbackType,vb,band,lowBound,highBound,input) %&gt;% mutate(vxCapped=ifelse(vx&gt;1600,1600,vx)) %&gt;%\n  summarise(vxMean=mean(vx),devMean=mean(dist),vxMed=median(vx),devMed=median(dist),\n            vxMeanCap=mean(vxCapped),.groups = \"keep\")"
  },
  {
    "objectID": "discrim.html#quick-reminder-of-general-patterns",
    "href": "discrim.html#quick-reminder-of-general-patterns",
    "title": "Testing Discrimination Analysis",
    "section": "Quick Reminder of General Patterns",
    "text": "Quick Reminder of General Patterns\n\n\nCode\nfig1aCap=str_wrap(\"Figure 1a: Bands 100-300, 350-550 and 600-800 are novel extrapolations for both Original Order. Translucent rectangles indicate the correct band \" ,width=170)\n\nfig1bCap=str_wrap(\"Figure 1b: Bands 800-1000, 1000-1200,  and 1200-1400 are novel extrapolations for both Reverse Order. Translucent rectangles indicate the correct band \" ,width=170)\n\nplotDist &lt;- function(df,title=\"\",fcap=\"\"){\n  rectWidth=30\n  df %&gt;%ggplot()+aes(x = band, y = vxMeanCap, fill=vb) +\n    # Set the color mapping in this layer so the points don't get a color\n   geom_half_violin(color=NA)+ # remove border color\n  geom_half_boxplot(position=position_nudge(x=-0.05),side=\"r\",outlier.shape = NA,center=TRUE,\n                    errorbar.draw = FALSE,width=20)+\n  geom_half_point(transformation = position_jitter(width = 0.05, height = 0.05),size=.3,aes(color=vb))+\n  facet_wrap(~condit,scale=\"free_x\")+\n    geom_rect(aes(xmin=band-rectWidth,xmax=band+rectWidth,ymin=band,ymax=highBound,fill=vb),alpha=.01)+\n    geom_segment(aes(x=band-rectWidth,xend=band+rectWidth,y=highBound,yend=highBound),alpha=.8,linetype=\"dashed\")+\n    geom_segment(aes(x=band-rectWidth,xend=band+rectWidth,y=band,yend=band),alpha=.8,linetype=\"dashed\")+\n    labs(x = \"Velocity Band\", y = \"vxMean\",caption=fcap) +\n    scale_y_continuous(expand=expansion(add=100),breaks=round(seq(0,2000,by=200),2))+\n    scale_x_continuous(labels=sort(unique(df$band)),breaks=sort(unique(df$band)))+\n    ggtitle(title) + theme(legend.position = \"none\")+theme_classic()+guides(fill=\"none\",color=\"none\")+\n  theme(plot.caption=element_text(hjust=0,face=\"italic\"))\n}\n\n\n#dtestAgg %&gt;% plotDist()\ndtestAgg %&gt;% filter(catOrder==\"orig\") %&gt;% plotDist(title=\"Empirical Vx - Original Order\",fcap=fig1aCap)\n\n\n\n\n\nCode\ndtestAgg %&gt;% filter(catOrder==\"rev\") %&gt;% plotDist(title=\"Empirical Vx - Reverse Order\",fcap=fig1bCap)"
  },
  {
    "objectID": "discrim.html#naive-model-that-fits-single-slope-and-intercept-to-all-subjects",
    "href": "discrim.html#naive-model-that-fits-single-slope-and-intercept-to-all-subjects",
    "title": "Testing Discrimination Analysis",
    "section": "naive model that fits single slope and intercept to all subjects",
    "text": "naive model that fits single slope and intercept to all subjects\n\n\nCode\n# Fit a model on all the data pooled together\nm_pooled &lt;- lm(vxMean ~ band, dtestAgg) \n# Repeat the intercept and slope terms for each participant\ndf_pooled &lt;- tibble(\n  Model = \"Complete pooling\",\n  id = unique(dtestAgg$id),\n  Intercept = coef(m_pooled)[1], \n  Slope_band = coef(m_pooled)[2]\n)\n#head(df_pooled)\n\n# print the coefficents and residual of the model\nsummary(m_pooled)\n\n\n\nCall:\nlm(formula = vxMean ~ band, data = dtestAgg)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-879.55 -214.41  -43.26  177.10 1300.93 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 480.69135   12.55505   38.29   &lt;2e-16 ***\nband          0.59085    0.01641   36.00   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 302.9 on 2450 degrees of freedom\nMultiple R-squared:  0.346, Adjusted R-squared:  0.3457 \nF-statistic:  1296 on 1 and 2450 DF,  p-value: &lt; 2.2e-16"
  },
  {
    "objectID": "discrim.html#fit-no-pooling-model-individual-fit-for-each-subject",
    "href": "discrim.html#fit-no-pooling-model-individual-fit-for-each-subject",
    "title": "Testing Discrimination Analysis",
    "section": "Fit no pooling model (individual fit for each subject)",
    "text": "Fit no pooling model (individual fit for each subject)\n\n\nCode\ndf_no_pooling &lt;- lmList(vxMean ~ band | id, dtestAgg) %&gt;% \n  coef() %&gt;% rownames_to_column(\"id\") %&gt;% \n  rename(Intercept = `(Intercept)`, Slope_band = band) %&gt;% \n  add_column(Model = \"No pooling\")\n\n# print average coefficients and average residual for the model\nsummary(df_no_pooling)\n\n\n      id              Intercept        Slope_band         Model          \n Length:418         Min.   :-461.2   Min.   :-0.4938   Length:418        \n Class :character   1st Qu.: 185.9   1st Qu.: 0.2338   Class :character  \n Mode  :character   Median : 397.0   Median : 0.5976   Mode  :character  \n                    Mean   : 475.1   Mean   : 0.6059                     \n                    3rd Qu.: 733.3   3rd Qu.: 0.9334                     \n                    Max.   :1657.5   Max.   : 2.3819                     \n\n\nCode\n# print average residual of no pooling model\nsummary(df_no_pooling$vxMean ~ df_no_pooling$band | df_no_pooling$id)\n\n\n Length   Class    Mode \n      3 formula    call \n\n\nCode\n# sort the dataframe by the value of slope_band, highest to lowest\ntestSlopeIndv &lt;- df_no_pooling %&gt;% arrange(desc(Slope_band))\n\n# Add a condit column to the dataframe, matching condition based on the value in dtestAgg for each sbjCode\ntestSlopeIndv &lt;- testSlopeIndv %&gt;% \n  left_join(dtestAgg %&gt;% ungroup() %&gt;% select(id, condit) %&gt;% distinct(), by = \"id\") \n\n# Add a rank column to the dataframe, based on the value of slope_band. Smallest rank for highest value.\ntestSlopeIndv &lt;- testSlopeIndv %&gt;% group_by(condit) %&gt;% \n  mutate(nGrp=n(),rank = nGrp -rank(Slope_band) +1,\n         quantile = cut(rank, breaks = 4, labels = c(\"1st\", \"2nd\", \"3rd\", \"4th\")),\n         quintile=cut(rank,breaks=5,labels=c(\"1st\", \"2nd\", \"3rd\", \"4th\",\"5th\")),\n         decile=cut(rank,breaks=10,labels=c(1:10))) %&gt;% #select(-n)%&gt;%\n  arrange(rank)\n\n# Reorder the sbjCode column so that the sbjCode with the highest slope_band is first\ntestSlopeIndv$id &lt;- factor(testSlopeIndv$id, levels = testSlopeIndv$id)\n\n#head(testSlopeIndv)"
  },
  {
    "objectID": "discrim.html#some-individual-plots-showing-the-best-fitting-line-against-testing-behavior-x-velocity.",
    "href": "discrim.html#some-individual-plots-showing-the-best-fitting-line-against-testing-behavior-x-velocity.",
    "title": "Testing Discrimination Analysis",
    "section": "Some individual plots showing the best fitting line against testing behavior (x velocity).",
    "text": "Some individual plots showing the best fitting line against testing behavior (x velocity).\n\nSample of high, and low discriminating subjects (i.e. highest and lowest slopes)\nMean Vx for each band shown via dot.\ncorrect bands shown with translucent rectangles\n\n\n\nCode\n# create plotting function that takes in a dataframe, and returns ggplot object\n#rewrite plotSlope function to take line color as a function argument, and set the color of abline to that argument\n\nplotSlope &lt;- function(df,title=\"\",colour=NULL){\n  rectWidth=50\n  df %&gt;%ggplot()+aes(x = band, y = vxMean) +\n    # Set the color mapping in this layer so the points don't get a color\n    geom_abline(\n      aes(intercept = Intercept, slope = Slope_band),\n      size = .75,colour=colour,alpha=.2\n    ) +geom_point(aes(color=vb)) +facet_wrap(\"id\") +\n    geom_rect(aes(xmin=band-rectWidth,xmax=band+rectWidth,ymin=band,ymax=highBound,fill=vb),alpha=.1)+\n    geom_segment(aes(x=band-rectWidth,xend=band+rectWidth,y=highBound,yend=highBound),alpha=1,linetype=\"dashed\")+\n    geom_segment(aes(x=band-rectWidth,xend=band+rectWidth,y=band,yend=band),alpha=1,linetype=\"dashed\")+\n    labs(x = \"Velocity Band\", y = \"vxMean\") +\n    scale_x_continuous(labels=sort(unique(df$band)),breaks=sort(unique(df$band)))+\n    ggtitle(title) + theme(legend.position = \"none\")+theme_classic()+guides(fill=\"none\",color=\"none\")\n}\n\ntv&lt;-testSlopeIndv %&gt;% left_join(dtestAgg, by = c(\"id\",\"condit\")) %&gt;% filter(condit==\"Varied\",rank&lt;=6) %&gt;% \n   plotSlope(.,colour=\"black\",title=\"Largest Individually fit Varied Sbj. Slopes\")\ntc&lt;-testSlopeIndv %&gt;% left_join(dtestAgg, by = c(\"id\",\"condit\")) %&gt;% filter(condit==\"Constant\",rank&lt;=6) %&gt;% \n   plotSlope(.,colour=\"black\",title=\"Largest Individually fit Constant Sbj. Slopes\")\nbv&lt;-testSlopeIndv %&gt;% left_join(dtestAgg, by = c(\"id\",\"condit\")) %&gt;% filter(condit==\"Varied\",rank&gt;=nGrp-5) %&gt;% \n   plotSlope(.,colour=\"black\",title=\"Smallest Varied Sbj. Slopes\")\nbc&lt;-testSlopeIndv %&gt;% left_join(dtestAgg, by = c(\"id\",\"condit\")) %&gt;% filter(condit==\"Constant\",rank&gt;=nGrp-5) %&gt;% \n   plotSlope(.,colour=\"black\",title=\"Smallest Constant Sbj. Slopes.\")\n \ntitle = ggdraw()+draw_label(\"Highest and Lowest Slope Values\",fontface = 'bold',x=0,hjust=0)+theme(plot.margin = margin(0, 0, 0, .5))\nplot_grid(title,NULL,tv,tc,bv,bc,NULL,ncol=2,rel_heights = c(.1,1,1))"
  },
  {
    "objectID": "discrim.html#fit-partial-pooling-model-linear-mixed-model-with-random-slope-and-intercept",
    "href": "discrim.html#fit-partial-pooling-model-linear-mixed-model-with-random-slope-and-intercept",
    "title": "Testing Discrimination Analysis",
    "section": "Fit partial pooling model (linear mixed model with random slope and intercept)",
    "text": "Fit partial pooling model (linear mixed model with random slope and intercept)\n\n\nCode\nbm1 &lt;- lmer(vxMed ~ 1 + band + (1 + band | id), dtestAgg, control = lmerControl(optimizer = \"bobyqa\", optCtrl = list(maxfun = 3e5)))\narm::display(bm1)\n\n\nlmer(formula = vxMed ~ 1 + band + (1 + band | id), data = dtestAgg, \n    control = lmerControl(optimizer = \"bobyqa\", optCtrl = list(maxfun = 3e+05)))\n            coef.est coef.se\n(Intercept) 457.18    18.94 \nband          0.61     0.02 \n\nError terms:\n Groups   Name        Std.Dev. Corr  \n id       (Intercept) 369.23         \n          band          0.45   -0.79 \n Residual             136.75         \n---\nnumber of obs: 2452, groups: id, 418\nAIC = 33227.2, DIC = 33219.1\ndeviance = 33217.1 \n\n\nCode\ndf_partial_pooling &lt;- coef(bm1)[[\"id\"]] %&gt;% \n  rownames_to_column(\"id\") %&gt;% \n  as_tibble() %&gt;% \n  rename(Intercept = `(Intercept)`, Slope_band = band) %&gt;% \n  add_column(Model = \"Partial pooling\")\n\nhead(df_partial_pooling)\n\n\n# A tibble: 6 × 4\n  id    Intercept Slope_band Model          \n  &lt;chr&gt;     &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;          \n1 1          558.      0.555 Partial pooling\n2 2         1158.      0.231 Partial pooling\n3 3         1033.     -0.141 Partial pooling\n4 4          250.      0.949 Partial pooling\n5 5          504.      0.596 Partial pooling\n6 6          224.      1.07  Partial pooling\n\n\nCode\nsummary(bm1)\n\n\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: vxMed ~ 1 + band + (1 + band | id)\n   Data: dtestAgg\nControl: lmerControl(optimizer = \"bobyqa\", optCtrl = list(maxfun = 3e+05))\n\nREML criterion at convergence: 33215.2\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-3.4482 -0.4578 -0.0161  0.4422  5.0822 \n\nRandom effects:\n Groups   Name        Variance  Std.Dev. Corr \n id       (Intercept) 1.363e+05 369.2342      \n          band        2.060e-01   0.4539 -0.79\n Residual             1.870e+04 136.7458      \nNumber of obs: 2452, groups:  id, 418\n\nFixed effects:\n             Estimate Std. Error        df t value Pr(&gt;|t|)    \n(Intercept) 457.17775   18.93837 422.24016   24.14   &lt;2e-16 ***\nband          0.60869    0.02345 418.74433   25.95   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n     (Intr)\nband -0.797\noptimizer (bobyqa) convergence code: 0 (OK)\nModel failed to converge with max|grad| = 3.29001 (tol = 0.002, component 1)\nModel is nearly unidentifiable: very large eigenvalue\n - Rescale variables?\nModel is nearly unidentifiable: large eigenvalue ratio\n - Rescale variables?\n\n\n\n\nCode\n# filter to only retain the no pooling and partial pooling models. \n# Compare the average slope and intercepts between constant and varied condits. Use barplots with standard error bars\n\ndf_models &lt;- bind_rows(df_pooled, df_no_pooling, df_partial_pooling) %&gt;% \n  left_join(dtestAgg, by = c(\"id\"))\n\n\nWarning in left_join(., dtestAgg, by = c(\"id\")): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 1 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n\n\nCode\ngrpAvg&lt;-  df_models %&gt;% filter(Model %in% c(\"No pooling\", \"Partial pooling\")) %&gt;% group_by(id,Model) %&gt;% slice(1) %&gt;%\n  group_by(Model, condit) %&gt;% \n  summarise(\n    n= n(),\n    Intercept = mean(Intercept), \n    Slope_band = mean(Slope_band),\n  ) %&gt;% mutate( Intercept_se = sd(Intercept)/sqrt(n),\n    Slope_band_se = sd(Slope_band)/sqrt(n), .groups=\"keep\") \n#head(grpAvg)\n\n\n p1=grpAvg %&gt;% ggplot() + \n  aes(x = Model, y = Slope_band, fill = condit) +\n  geom_col(position = \"dodge\") + \n  geom_errorbar(aes(ymin = Slope_band - Slope_band_se, ymax = Slope_band + Slope_band_se), width = 0.2, position = position_dodge(0.9)) +\n  labs(x = \"Model\", y = \"Slope (band)\") + \n  theme(legend.position = \"top\", legend.justification = \"left\")+ggtitle(\"Comparing Slopes between Conditions - Both pooling models\")\n \n \n \n p2=grpAvg %&gt;% ggplot() + \n  aes(x = Model, y = Intercept, fill = condit) +\n  geom_col(position = \"dodge\") + \n  geom_errorbar(aes(ymin = Intercept - Intercept_se, ymax = Intercept + Intercept_se), width = 0.2, position = position_dodge(0.9)) +\n  labs(x = \"Model\", y = \"Intercept\") + \n  theme(legend.position = \"top\", legend.justification = \"left\")+ggtitle(\"Comparing Intercepts between Conditions - Both pooling models\")\n  \n\n\n# For the partial pooling model, visualize the correlation between the intercept and slope for each subject.\n# Use geom_smooth to fit a linear model to the data, and plot the line of best fit.\n\np3=df_models %&gt;% filter(Model == \"Partial pooling\") %&gt;% \n  ggplot() + \n  aes(x = Intercept, y = Slope_band) + \n  geom_point() + \n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(x = \"Intercept\", y = \"Slope (band)\") + \n  theme(legend.position = \"top\", legend.justification = \"left\")+ggtitle(\"Correlation between Fit Slope and Intercept (Mixed Effects model)\")\n\n\n  # For the partial pooling model, visualize the correlation between slope and devMean for each subject.\n# Use geom_smooth to fit a linear model to the data, and plot the line of best fit.\n\np4=df_models %&gt;% filter(Model == \"Partial pooling\") %&gt;% \n  ggplot() + \n  aes(x = Slope_band, y = devMean) + \n  geom_point() + \n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(x = \"Slope (band)\", y = \"devMean\") + \n  theme(legend.position = \"top\", legend.justification = \"left\")+ggtitle(\"Correlation between Fit Slope and testing performance (Mixed Effects model)\")\n\n\n# For the partial pooling model, visualize the correlation between Intercept and devMean for each subject.\n\np5=df_models %&gt;% filter(Model == \"Partial pooling\") %&gt;% \n  ggplot() + \n  aes(x = Intercept, y = devMean) + \n  geom_point() + \n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(x = \"Intercept\", y = \"devMean\") + \n  theme(legend.position = \"top\", legend.justification = \"left\")+ggtitle(\"Correlation between Fit Intercept and testing performance (Mixed Effects model)\")\n\n\n\ntitle = ggdraw()+draw_label(\"Examining the Fit Slopes and Intercepts\",fontface = 'bold',x=0,hjust=0)+theme(plot.margin = margin(0, 0, 0, .5))\nplot_grid(title,NULL,p1,p2,p3,p4,p5,ncol=2,rel_heights = c(.15,1,1,1))"
  },
  {
    "objectID": "discrim.html#correlation-between-fit-parameters-slope-and-intercept-and-testing-vx",
    "href": "discrim.html#correlation-between-fit-parameters-slope-and-intercept-and-testing-vx",
    "title": "Testing Discrimination Analysis",
    "section": "Correlation between fit parameters (Slope and Intercept) and testing Vx",
    "text": "Correlation between fit parameters (Slope and Intercept) and testing Vx\n\nNoteworthy that The correlation between slope and Vx is strongest for the slowest bands (100-300 and 350-550), for both original and reverse ordered groups. The slow positions are extrapolation for the Original ordered group, and trained by the reverse ordered group.\nFairly similar patterns for Slope and Intercept\n\n\n\nCode\n# For the partial pooling model, visualize the correlation between slope and devMean for each subject. Facet by vb~catOrder. Group and color by condit. \n# Use geom_smooth to fit a linear model to the data, and plot the line of best fit.\n\ndf_models %&gt;% filter(Model == \"Partial pooling\") %&gt;% \n  ggplot() + \n  aes(x = Slope_band, y = vxMed, color = condit) + \n  geom_point() + \n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(x = \"Slope (band)\", y = \"Median Vx\") + \n  theme(legend.position = \"top\", legend.justification = \"left\") +\n  facet_grid(catOrder~vb)+ ggtitle(\"Correlation between Slope and Median VX\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nCode\ndf_models %&gt;% filter(Model == \"Partial pooling\") %&gt;% \n  ggplot() + \n  aes(x = Intercept, y = vxMed, color = condit) + \n  geom_point() + \n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(x = \"Intercept\", y = \"Median Vx\") + \n  theme(legend.position = \"top\", legend.justification = \"left\") +\n  facet_grid(catOrder~vb)+ ggtitle(\"Correlation between Intercept and Median Vx\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nCorrelation between parameters and Mean Deviation.\n\nHere we see a powerful effect of slope for the slow bands (larger slopes tend to have smaller deviation)\n\n\n\nCode\n# For the partial pooling model, visualize the correlation between slope and devMean for each subject. Facet by vb~catOrder. Group and color by condit. \n# Use geom_smooth to fit a linear model to the data, and plot the line of best fit.\n\ndf_models %&gt;% filter(Model == \"Partial pooling\") %&gt;% \n  ggplot() + \n  aes(x = Slope_band, y = devMean, color = condit) + \n  geom_point() + \n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(x = \"Slope (band)\", y = \"devMean\") + \n  theme(legend.position = \"top\", legend.justification = \"left\") +\n  facet_grid(catOrder~vb)+ ggtitle(\"Correlation between Slope and Mean Deviation\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nCode\ndf_models %&gt;% filter(Model == \"Partial pooling\") %&gt;% \n  ggplot() + \n  aes(x = Intercept, y = devMean, color = condit) + \n  geom_point() + \n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(x = \"Intercept\", y = \"devMean\") + \n  theme(legend.position = \"top\", legend.justification = \"left\") +\n  facet_grid(catOrder~vb)+ ggtitle(\"Correlation between Intercept and Mean Deviation\")\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "htw_dp.html",
    "href": "htw_dp.html",
    "title": "Project 2",
    "section": "",
    "text": "In project 1, we applied model-based techniques to quantify and control for the similarity between training and testing experience, which in turn enabled us to account for the difference between varied and constant training via an extended version of a similarity based generalization model. In project 2, we will go a step further, implementing a full process model capable of both 1) producing novel responses and 2) modeling behavior in both the learning and testing stages of the experiment. Project 2 also places a greater emphasis on extrapolation performance following training - as varied training has often been purported to be particularly beneficial in such situations. Extrapolation has long been a focus of the literature on function learning (Brehmer 1974; Carroll 1963). Central questions of the function learning literature have included the relative difficulties of learning various functional forms (e.g. linear vs.bilinear vs. quadratic), and the relative effectiveness of rule-based vs. association-based exemplar models vs. various hybrid models (Bott and Heit 2004; DeLosh, McDaniel, and Busemeyer 1997; Jones et al. 2018; Kalish, Lewandowsky, and Kruschke 2004; M. A. Mcdaniel and Busemeyer 2005; M. Mcdaniel et al. 2009). However the issue of training variation has received surprisingly little attention in this area."
  },
  {
    "objectID": "htw_dp.html#participants",
    "href": "htw_dp.html#participants",
    "title": "Project 2",
    "section": "Participants",
    "text": "Participants\nData was collected from 647 participants (after exclusions). The results shown below consider data from subjects in our initial experiment, which consisted of 196 participants (106 constant, 90 varied). The follow-up experiments entailed minor manipulations: 1) reversing the velocity bands that were trained on vs. novel during testing; 2) providing ordinal rather than numerical feedback during training (e.g. correct, too low, too high). The data from these subsequent experiments are largely consistently with our initial results shown below."
  },
  {
    "objectID": "htw_dp.html#task",
    "href": "htw_dp.html#task",
    "title": "Project 2",
    "section": "Task",
    "text": "Task\nWe developed a novel visuomotor extrapolation task, termed the “Hit The Wall” (HTW) task, wherein participants learned to launch a projectile such that it hit a rectangle at the far end of the screen with an appropriate amount of force. Although the projectile had both x and y velocity components, only the x-dimension was relevant for the task.  Link to task demo"
  },
  {
    "objectID": "htw_dp.html#design",
    "href": "htw_dp.html#design",
    "title": "Project 2",
    "section": "Design",
    "text": "Design\n\n90 training trials split evenly divided between velocity bands. Varied training with 3 velocity bands and Constant training with 1 band.\nNo-feedback testing from 3 novel extrapolation bands. 15 trials each.  \nNo-feedbacd testing from the 3 bands used during the training phase (2 of which were novel for the constant group). 9 trials each.\nFeedback testing for each of the 3 extrapolation bands. 10 trials each.\n\n\n\n\n\nExperiment Procedure"
  },
  {
    "objectID": "htw_dp.html#training",
    "href": "htw_dp.html#training",
    "title": "Project 2",
    "section": "Training",
    "text": "Training\nTraining performance is shown in Results Figure 2A. All groups show improvement from each of their training velocity-bands (i.e. decreasing average distance from target). In the velocity band trained at by both groups (800-1000), the constant group maintains a superior level of performance from the early through the final stages of training. This difference is unsurprising given that the constant group had 3x more practice trials from that band.\n\n\nCode\n#fig.cap=\"\\\\label{fig:figs}training performance\"\n\n#title=paste0(\"HTW Training\")\nfigpatch::fig(\"Assets/Training-1.png\")\n\n\n\n\n\nCode\n  #fig_lab(.,title,pos=\"top\",fontface='bold',size=12,hjust=.01)"
  },
  {
    "objectID": "htw_dp.html#testing",
    "href": "htw_dp.html#testing",
    "title": "Project 2",
    "section": "Testing",
    "text": "Testing\nFor evaluating testing performance, we consider 3 separate metrics. 1) The average absolute deviation from the correct velocity, 2) The % of throws in which the wall was hit with the correct velocity and 3) The average x velocity produced.\nResults Figure 2B shows the average velocity produced for all 6 bands that were tested. At least at the aggregate level, both conditions were able to differentiate all 6 bands in the correct order, despite only having received training feedback for 1/6 (constant) or 3/6 (varied) bands during training. Participants in both groups also had a bias towards greatly overestimating the correct velocity for band 100-300, for which both groups had an average of greater than 500.\n\n\nCode\n# fig2aCap=str_wrap(\"Figure 2B: Bands 100-300, 350-550 and 600-800 are novel extrapolations for both groups. Band 800-1000 was a training band for both groups. Bands 1000-1200, and 1200-1400 were trained for the varied group, and novel for the constant group.  Top figure displays mean deviation from correct velocity. Bottom figure displays the average % of trials where participants hit the wall with the correct velocity. Error bars indicate standard error of the mean. \" ,width=170)\n\n\nfigpatch::fig(\"Assets/Testing_Vx-1.png\") \n\n\n\n\n\nAs is reflected in Results Figure 2C, the constant group performed significantly better than the varied group at the 3 testing bands of greatest interest. Both groups tended to perform worse for testing bands further away from their training conditions. The varied group had a slight advantage for bands 1000-1200 and 1200-1400, which were repeats from training for the varied participants, but novel for the constant participants.\n\n\nCode\nfigpatch::fig(\"Assets/Test_Performance-1.png\") \n\n\n\n\n\nCode\n# \n# gtitle=\"2C. Testing Performance\"\n# title = ggdraw()+draw_label(gtitle,fontface = 'bold',x=0,hjust=0)+theme(plot.margin = margin(0, 0, 0, 7))\n# captionText=str_wrap(\"Figure 2C: Bands 100-300, 350-550 and 600-800 are novel extrapolations for both groups. Band 800-1000 was a training band for both groups. Bands 1000-1200, and 1200-1400 were trained for the varied group, and novel for the constant group.  Right side figure displays mean deviation from correct velocity band (lower values correspond to better performance). Bottom Left displays the average % of trials where participants hit the wall with the correct velocity (higher values correspond got better performance). Error bars indicate standard error of the mean. \",150)\n# capt=ggdraw()+draw_label(captionText,fontface = 'italic',x=0,hjust=0,size=11)+theme(plot.margin = margin(0, 0, 0, 1))\n# \n# plot_grid(title,NULL,leg,NULL,gbDev,gbHit,capt,NULL,ncol=2,rel_heights=c(.1,.1,1,.1),rel_widths=c(1,1))"
  },
  {
    "objectID": "htw_dp.html#alm-exam-description",
    "href": "htw_dp.html#alm-exam-description",
    "title": "Project 2",
    "section": "ALM & Exam Description",
    "text": "ALM & Exam Description\nDelosh et al. (1997) introduced the associative learning model (ALM), a connectionist model within the popular class of radial-basis networks. ALM was inspired by, and closely resembles Kruschke’s influential ALCOVE model of categorization (Kruscke 1992).\nALM is a localist neural network model, with each input node corresponding to a particular stimulus, and each output node corresponding to a particular response value. The units in the input layer activate as a function of their Gaussian similarity to the input stimulus. So, for example, an input stimulus of value 55 would induce maximal activation of the input unit tuned to 55. Depending on thevalue of the generalization parameter, the nearby units (e.g. 54 and 56; 53 and 57) may also activate to some degree. ALM is structured with input and output nodes that correspond to regions of the stimulus space, and response space, respectively. The units in the input layer activate as a function of their similarity to a presented stimulus. As was the case with the exemplar-based models, similarity in ALM is exponentially decaying function of distance. The input layer is fully connected to the output layer, and the activation for any particular output node is simply the weighted sum of the connection weights between that node and the input activations. The network then produces a response by taking the weighted average of the output units (recall that each output unit has a value corresponding to a particular response). During training, the network receives feedback which activates each output unit as a function of its distance from the ideal level of activation necessary to produce the correct response. The connection weights between input and output units are then updated via the standard delta learning rule, where the magnitude of weight changes are controlled by a learning rate parameter.\nSee Table 2A for a full specification of the equations that define ALM and EXAM."
  },
  {
    "objectID": "htw_dp.html#model-equations",
    "href": "htw_dp.html#model-equations",
    "title": "Project 2",
    "section": "Model Equations",
    "text": "Model Equations\n\n\nCode\ntext_tbl &lt;- data.frame(\n    'Step'=c(\"Input Activation\",\"Output Activation\",\"Output Probability\",\"Mean Output\",\"Feedback Activation\",\"Update Weights\",\"Extrapolation\",\"\"),\n    'Equation' = c(\"$a_i(X) = \\\\frac{e^{-c \\\\cdot (X-X_i)^2}}{ \\\\sum_{k=1}^Me^{-c \\\\cdot (X-X_i)^2}}$\", \n                   '$O_j(X) = \\\\sum_{k=1}^Mw_{ji} \\\\cdot a_i(X)$',\n                   '$P[Y_j | X] = \\\\frac{O_i(X)}{\\\\sum_{k=1}^Mo_k(X)}$',\n                   \"$m(x) = \\\\sum_{j=1}^LY_j \\\\cdot \\\\bigg[\\\\frac{O_j(X)}{\\\\sum_{k=1}^Lo_k(X)}\\\\bigg]$\",\n                   \"$f_j(Z)=e^{-c\\\\cdot(Z-Y_j)^2}$\",\n                   \"$w_{ji}(t+1)=w_{ji}(t)+\\\\alpha \\\\cdot {f_i(Z(t))-O_j(X(t))} \\\\cdot a_i(X(t))$\",\n                   \"$P[X_i|X] = \\\\frac{a_i(X)}{\\\\sum_{k=1}^Ma_k(X)}$\",\n                   \"$E[Y|X_i]=m(X_i) + \\\\bigg[\\\\frac{m(X_{i+1})-m(X_{i-1})}{X_{i+1} - X_{i-1}} \\\\bigg] \\\\cdot[X-X_i]$\"),\n    \n    'Description'= c(\n            \"Activation of each input node, $X_i$, is a function of the Gaussian similarity between the node value and stimulus X. \",\n            \"Activation of each Output unit $O_j$ is the weighted sum of the input activations and association weights\",\n            \"Each output node has associated response, $Y_j$. The probability of response $Y_j$ is determined by the ratio of output activations\",\n            \"The response to stimulus x is the weighted average of the response probabilities\",\n            \"After responding, feedback signal Z is presented, activating each output node via the Gaussian similarity to the ideal response  \",\n            \"Delta rule to update weights. Magnitude of weight changes controlled by learning rate parameter alpha.\",\n            \"Novel test stimulus X activates input nodes associated with trained stimuli\",\n            \"Slope value computed from nearest training instances and then added to the response associated with the nearest training instance,m(x)\")\n)\ntext_tbl$Step=cell_spec(text_tbl$Step,font_size=12)\ntext_tbl$Equation=cell_spec(text_tbl$Equation,font_size=18)\nalmTable=kable(text_tbl, 'html', \n  booktabs=T, escape = F, align='l',\n  caption = '&lt;span style = \"color:black;\"&gt;&lt;center&gt;&lt;strong&gt;Table 1: ALM & EXAM Equations&lt;/strong&gt;&lt;/center&gt;&lt;/span&gt;',\n  col.names=c(\"\",\"Equation\",\"Description\")) %&gt;%\n  kable_styling(position=\"left\",bootstrap_options = c(\"hover\")) %&gt;%\n  column_spec(1, bold = F,border_right=T) %&gt;%\n  column_spec(2, width = '10cm')%&gt;%\n  column_spec(3, width = '15cm') %&gt;%\n  pack_rows(\"ALM Activation & Response\",1,4,bold=FALSE,italic=TRUE) %&gt;%\n  pack_rows(\"ALM Learning\",5,6,bold=FALSE,italic=TRUE) %&gt;%\n  pack_rows(\"EXAM\",7,8,bold=FALSE,italic=TRUE)\n  #save_kable(file=\"almTable.html\",self_contained=T)\n#almTable\n\n\ncat(almTable)\n\n\n\n\n\n\nTable 1: ALM & EXAM Equations\n\n\n\n\n\n\n\n\nEquation\n\n\nDescription\n\n\n\n\n\n\nALM Activation & Response\n\n\n\n\nInput Activation\n\n\n\\(a_i(X) = \\frac{e^{-c \\cdot (X-X_i)^2}}{ \\sum_{k=1}^Me^{-c \\cdot (X-X_i)^2}}\\)\n\n\nActivation of each input node, \\(X_i\\), is a function of the Gaussian similarity between the node value and stimulus X.\n\n\n\n\nOutput Activation\n\n\n\\(O_j(X) = \\sum_{k=1}^Mw_{ji} \\cdot a_i(X)\\)\n\n\nActivation of each Output unit \\(O_j\\) is the weighted sum of the input activations and association weights\n\n\n\n\nOutput Probability\n\n\n\\(P[Y_j | X] = \\frac{O_i(X)}{\\sum_{k=1}^Mo_k(X)}\\)\n\n\nEach output node has associated response, \\(Y_j\\). The probability of response \\(Y_j\\) is determined by the ratio of output activations\n\n\n\n\nMean Output\n\n\n\\(m(x) = \\sum_{j=1}^LY_j \\cdot \\bigg[\\frac{O_j(X)}{\\sum_{k=1}^Lo_k(X)}\\bigg]\\)\n\n\nThe response to stimulus x is the weighted average of the response probabilities\n\n\n\n\nALM Learning\n\n\n\n\nFeedback Activation\n\n\n\\(f_j(Z)=e^{-c\\cdot(Z-Y_j)^2}\\)\n\n\nAfter responding, feedback signal Z is presented, activating each output node via the Gaussian similarity to the ideal response\n\n\n\n\nUpdate Weights\n\n\n\\(w_{ji}(t+1)=w_{ji}(t)+\\alpha \\cdot {f_i(Z(t))-O_j(X(t))} \\cdot a_i(X(t))\\)\n\n\nDelta rule to update weights. Magnitude of weight changes controlled by learning rate parameter alpha.\n\n\n\n\nEXAM\n\n\n\n\nExtrapolation\n\n\n\\(P[X_i|X] = \\frac{a_i(X)}{\\sum_{k=1}^Ma_k(X)}\\)\n\n\nNovel test stimulus X activates input nodes associated with trained stimuli\n\n\n\n\n\n\n\n\\(E[Y|X_i]=m(X_i) + \\bigg[\\frac{m(X_{i+1})-m(X_{i-1})}{X_{i+1} - X_{i-1}} \\bigg] \\cdot[X-X_i]\\)\n\n\nSlope value computed from nearest training instances and then added to the response associated with the nearest training instance,m(x)"
  },
  {
    "objectID": "htw_dp.html#model-fitting-and-comparison",
    "href": "htw_dp.html#model-fitting-and-comparison",
    "title": "Project 2",
    "section": "Model Fitting and Comparison",
    "text": "Model Fitting and Comparison\nFollowing the procedure used by McDaniel & Busemeyer (2009), we will assess the ability of both ALM and EXAM to account for the empirical data when fitting the models to 1) only the training data, and 2) both training and testing data. Models will be fit directly to the trial by trial data of each individual participants, both by minimizing the root-mean squared deviation (RMSE), and by maximizing log likelihood. Because ALM has been shown to do poorly at accounting for human patterns extrapolation (DeLosh, McDaniel, and Busemeyer 1997), we will also fit the extended EXAM version of the model, which operates identically to ALM during training, but includes a linear extrapolation mechanism for generating novel responses during testing."
  },
  {
    "objectID": "SimReplications.html",
    "href": "SimReplications.html",
    "title": "General Simulations",
    "section": "",
    "text": "Functions\n\n\nCode\npacman::p_load(tidyverse,reshape2)\n\n#test2\ninput.activation&lt;-function(x.target, association.parameter){\n  return(exp(-1*association.parameter*(x.target-x.plotting)^2))\n}\n\noutput.activation&lt;-function(x.target, weights, association.parameter){\n  return(weights%*%input.activation(x.target, association.parameter))\n}\n\nmean.prediction&lt;-function(x.target, weights, association.parameter){\n  probability&lt;-output.activation(x.target, weights, association.parameter)/sum(output.activation(x.target, weights, association.parameter))\n  return(y.plotting%*%probability) # integer prediction\n}\n# function to generate exam predictions\nexam.prediction&lt;-function(x.target, weights, association.parameter){\n  trainVec = sort(unique(x.learning))\n  nearestTrain = trainVec[which.min(abs(trainVec-x.target))]\n  aresp = mean.prediction(nearestTrain, weights, association.parameter)\n  xUnder = ifelse(min(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) - 1])\n  xOver = ifelse(max(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) + 1])\n  mUnder = mean.prediction(xUnder, weights, association.parameter)\n  mOver = mean.prediction(xOver, weights, association.parameter)\n  exam.output = round(aresp + ((mOver - mUnder) / (xOver - xUnder)) * (x.target - nearestTrain), 3)\n  exam.output\n}\n  \nupdate.weights&lt;-function(x.new, y.new, weights, association.parameter, update.parameter){\n  y.feedback.activation&lt;-exp(-1*association.parameter*(y.new-y.plotting)^2)\n  x.feedback.activation&lt;-output.activation(x.new, weights, association.parameter)\n  return(weights+update.parameter*(y.feedback.activation-x.feedback.activation)%*%t(input.activation(x.new, association.parameter)))\n}\n\nlearn.alm&lt;-function(y.learning, association.parameter=0.05, update.parameter=0.5){\n  weights&lt;-matrix(rep(0.00, length(y.plotting)*length(x.plotting)), nrow=length(y.plotting), ncol=length(x.plotting))\n  for (i in 1:length(y.learning)){\n    weights&lt;-update.weights(x.learning[i], y.learning[i], weights, association.parameter, update.parameter)\n    resp=mean.prediction(x.learning[i],weights,association.parameter)\n    weights[weights&lt;0]=0\n  }\n  alm.predictions&lt;-sapply(x.plotting, mean.prediction, weights=weights, association.parameter=association.parameter)\n  exam.predictions &lt;- sapply(x.plotting, exam.prediction, weights=weights, association.parameter=association.parameter)\n  return(list(alm.predictions=alm.predictions, exam.predictions=exam.predictions))\n}\n\n\n\n\nCode\n# Average of 100 simulations:\n# get alm and exam predictions for full range of x.plotting, averaged over 100 simulations\nnSim&lt;-10\noutput &lt;- replicate(nSim, list(learn.alm(f.learning + rnorm(length(f.learning), sd=0.1), \n                                         association.parameter=0.05, update.parameter=0.5)))\n\n#alm.predictions&lt;-do.call(rbind, lapply(output, function(x) x$alm.predictions))\nalm.predictions &lt;- Reduce(rbind,output %&gt;% map(\"alm.predictions\"))\nexam.predictions &lt;- Reduce(rbind,output %&gt;% map(\"exam.predictions\"))\n\nalm.predictions.avg&lt;-apply(alm.predictions, 2, mean)\nexam.predictions.avg&lt;-apply(exam.predictions, 2, mean)\ndfAvg&lt;-data.frame(x=x.plotting, f=f.plotting, alm=alm.predictions.avg, exam=exam.predictions.avg)\ndfAvg&lt;-reshape2::melt(dfAvg, id.vars=\"x\")\ndfAvg$model&lt;-factor(dfAvg$variable, levels=c(\"f\", \"alm\", \"exam\"))\nggplot(dfAvg, aes(x=x, y=value, color=model)) + geom_line() + geom_point(data=data.frame(x=x.learning, f=f.learning), aes(x=x, y=f), color=\"red\", size=2) + theme_bw() + theme(legend.position=\"topright\")\n\n\nalm.predictions&lt;-as.data.frame(alm.predictions) %&gt;% mutate(sim=seq(1:nSim))\nalm.predictions&lt;-pivot_longer(alm.predictions, cols=1:ncol(alm.predictions)-1, \n                              names_to=c(\"sim\"), values_to=\"alm\",names_repair = \"unique\") \ncolnames(alm.predictions)=c(\"sim\",\"x\",\"pred\")\nalm.predictions &lt;- alm.predictions %&gt;% mutate(stim = as.numeric(gsub(\"V\", \"\", x)),model=\"alm\",x=x.plotting[stim])\n\n\nexam.predictions&lt;-as.data.frame(exam.predictions) %&gt;% mutate(sim=seq(1:nSim))\nexam.predictions&lt;-pivot_longer(exam.predictions, cols=1:ncol(exam.predictions)-1, \n                               names_to=c(\"sim\"), values_to=\"exam\",names_repair = \"unique\")\ncolnames(exam.predictions)=c(\"sim\",\"x\",\"pred\")\nexam.predictions &lt;- exam.predictions %&gt;% mutate(stim = as.numeric(gsub(\"V\", \"\", x)),model=\"exam\",x=x.plotting[stim])\n\n\ndf&lt;- rbind(alm.predictions,exam.predictions)\n\nggplot(df, aes(x=x, y=pred, color=sim)) + geom_line(alpha=.2) + facet_wrap(~model) + theme_bw() + \n  geom_point(data=data.frame(x=x.learning, f=f.learning), aes(x=x, y=f), color=\"red\", size=2)+\n  geom_line(data=data.frame(x=x.plotting, f=f.plotting),aes(x=x,y=f),color=\"black\")+\n  geom_line(data=dfAvg %&gt;% filter(model!=\"f\"),aes(x=x,y=value),color=\"green\")\n\n\n\n\nParameter Recovery\n\n\nCode\n# | eval: false\n\ntrainRep=1\n\nx.plotting&lt;&lt;-seq(0,100, .5)\ny.plotting&lt;&lt;-seq(0, 210, by=2)\nf.plotting&lt;-as.numeric(x.plotting*2.2+30)\nx.learning&lt;-rep(x.plotting[20*c(4:7)+1])\nf.learning&lt;-rep(f.plotting[20*c(4:7)+1])\n\n\nparmVec &lt;- expand.grid(assoc=c(.1,0.5),update=c(0.2,1),noise=c(0),trainRep=c(1,2))\nparmVec &lt;- expand.grid(assoc=c(.01),update=c(0.5),noise=c(30),trainRep=c(1,2,3,4))\n\nparmVec$sim &lt;- 1:nrow(parmVec)\nnSim=nrow(parmVec)\n\nnRep=10\noutput &lt;- list()\nfor (i in 1:nrow(parmVec)){\n  x.learning&lt;-rep(x.plotting[20*c(4:7)+1],times=parmVec$trainRep[i])\n  f.learning&lt;-rep(f.plotting[20*c(4:7)+1],times=parmVec$trainRep[i])\n  #noise.learning &lt;- rnorm(n_distinct(f.learning),sd=parmVec$noise[i])\n  output[[i]] &lt;- replicate(nRep, list(learn.alm(f.learning+rep(rnorm(n_distinct(f.learning),sd=parmVec$noise[i]),times=parmVec$trainRep[i]), \n                                         association.parameter=parmVec$assoc[i], update.parameter=parmVec$update[i])))\n}\n\n# \n# nRep=3\n# output &lt;- list()\n# for (i in 1:nrow(parmVec)){\n#   output[[i]] &lt;- replicate(nRep, list(learn.alm(f.learning + rnorm(length(f.learning), sd=10), \n#                                          association.parameter=parmVec$assoc[i], update.parameter=parmVec$update[i])))\n# }\n\n\n\n#output[[i]] &lt;- replicate(nRep, list(learn.alm(f.learning + rnorm(length(f.learning), sd=10)\n\n# convert list of dataframes to a list of lists, each list is a simulation, each element is a dataframe\noutput1 &lt;- lapply(output, function(x) lapply(x, as.data.frame)) # 10 dfs x 9 lists\noutput2 &lt;- lapply(output1, function(x) Reduce(rbind,x))# 1 df x 9 lists\noutput3 &lt;- lapply(output2, function(x) mutate(x, x=rep(x.plotting,nRep),y=rep(f.plotting,nRep),\n                                              repN=rep(seq(1,nRep),each=length(x.plotting))))\no4 &lt;- Reduce(rbind,output3) %&gt;% \n  mutate(sim=rep(seq(1,nrow(parmVec)),each=nRep*length(x.plotting))) %&gt;%\n  left_join(.,parmVec,by=\"sim\") %&gt;%\n  mutate(pvec=paste0(\"c=\",assoc,\"_lr=\",update,\"_noise=\",noise,\"_nrep=\",trainRep),pv=factor(pvec),rn=factor(repN)) \n\noMeans &lt;- o4 %&gt;% group_by(pv,x,y) %&gt;% \n  summarise(alm.predictions=mean(alm.predictions),exam.predictions=mean(exam.predictions),.groups=\"keep\")\n\no4 %&gt;% ggplot(aes(x=x,y=alm.predictions,color=rn))+geom_line(alpha=.7)+\n   scale_color_manual(values=rep(\"grey\",nRep))+\n  theme(legend.position=\"none\")+\n  geom_point(data=data.frame(x=x.learning,y=f.learning),aes(x=x,y=y),color=\"red\")+\n  geom_line(data=o4,aes(x=x,y=y),color=\"black\",alpha=.5, linetype=2)+\n  geom_line(data=oMeans,aes(x=x,y=alm.predictions),color=\"black\")+\n  facet_wrap(~pv, scales=\"free_y\")\n\n\n\n\n\nCode\no4 %&gt;% ggplot(aes(x=x,y=exam.predictions,color=rn))+ geom_line()+ #geom_line(color=\"grey\",alpha=.4)+\n  scale_color_manual(values=rep(\"grey\",nRep))+\n  theme(legend.position=\"none\")+\n  geom_point(data=data.frame(x=x.learning,y=f.learning),aes(x=x,y=y),color=\"red\")+\n  geom_line(data=o4,aes(x=x,y=y),color=\"black\",alpha=.5,linetype=2)+\n  geom_line(data=oMeans,aes(x=x,y=exam.predictions),color=\"black\")+\n  facet_wrap(~pv, scales=\"free_y\")\n\n\n\n\n\n\n\nShiny App\n\n\nCode\n# | eval: false\n\nx.plotting&lt;&lt;-seq(0,90, .5)\ny.plotting&lt;&lt;-seq(0, 210, by=2)\nf.plotting&lt;-as.numeric(x.plotting * 2.2 + 30)\nx.learning&lt;-x.plotting[10*c(3:9)+1]\nf.learning&lt;-f.plotting[10*c(3:9)+1]\n\n# Single Simulation\n# get alm and exam predictions for full range of x.plotting\noutput&lt;-learn.alm(f.learning)\nalm.predictions&lt;-output$alm.predictions\nexam.predictions&lt;-output$exam.predictions\n\n# plot the results\nplot(x.plotting, f.plotting, type=\"l\", col=\"blue\", lwd=.5, xlab=\"x\", ylab=\"f(x)\")\npoints(x.learning, f.learning, col=\"red\", pch=19)\nlines(x.plotting, alm.predictions, col=\"green\", lwd=2)\nlines(x.plotting, exam.predictions, col=\"purple\", lwd=2)\nlegend(\"topright\", legend=c(\"f(x)\", \"training data\", \"ALM\", \"Exam\"), col=c(\"blue\", \"red\", \"green\", \"purple\"), lty=1.5, cex=0.8)\n\n\n\n\n\nCode\n#function to plot in greyscale\nplot.grey&lt;-function(predictions){\n  lines(x.plotting, predictions, col=\"grey\")\n}\n\n# # plot alm avg and individual simulations\n# plot(x.plotting, f.plotting, type=\"l\", col=\"blue\", lwd=2, xlab=\"x\", ylab=\"f(x)\")\n# points(x.learning, f.learning, col=\"red\", pch=19)\n# lines(x.plotting, alm.predictions.avg, col=\"green\", lwd=2)\n# apply(alm.predictions,1,plot.grey)\n# legend(\"topright\", legend=c(\"f(x)\", \"training data\", \"ALM\"), col=c(\"blue\", \"red\", \"green\"), lty=1.5, cex=0.8)\n# \n# # plot exam avg and individual simulations\n# plot(x.plotting, f.plotting, type=\"l\", col=\"blue\", lwd=2, xlab=\"x\", ylab=\"f(x)\")\n# points(x.learning, f.learning, col=\"red\", pch=19)\n# lines(x.plotting, exam.predictions.avg, col=\"purple\", lwd=2)\n# apply(exam.predictions,1,plot.grey)\n# legend(\"topright\", legend=c(\"f(x)\", \"training data\", \"Exam\"), col=c(\"blue\", \"red\", \"purple\"), lty=1.5, cex=0.8)"
  },
  {
    "objectID": "ALM_Shiny.html",
    "href": "ALM_Shiny.html",
    "title": "Shiny App",
    "section": "",
    "text": "Shiny App Simulating ALM and EXAM  \n\n\nYou can play with the embedded version of the app below, or go to direct link\nYou can adjust the values of the Association parameter (i.e. the c parameter), and the Update parameter, (i.e. the learning rate parameter). The App also allows you to control the number and location of training instances. And the shape of the true function (linear, quadratic or exponential)\n\n\nAlternatively, you can run the app locally by copying the code below into a .R file.\n\n\nShow App Code\npacman::p_load(tidyverse,shiny,reactable,shinydashboard,shinydashboardPlus)\n\ninput.activation&lt;-function(x.target, association.parameter){\n  #return(exp(-1*association.parameter*(100*x.target-100*x.plotting)^2))\n  return(exp(-1*association.parameter*(x.target-x.plotting)^2))\n}\n\noutput.activation&lt;-function(x.target, weights, association.parameter){\n  return(weights%*%input.activation(x.target, association.parameter))\n}\n\nmean.prediction&lt;-function(x.target, weights, association.parameter){\n  probability&lt;-output.activation(x.target, weights, association.parameter)/sum(output.activation(x.target, weights, association.parameter))\n  return(y.plotting%*%probability)\n}\n# function to generate exam predictions\nexam.prediction&lt;-function(x.target, weights, association.parameter){\n  trainVec = sort(unique(x.learning))\n  nearestTrain = trainVec[which.min(abs(trainVec-x.target))]\n  aresp = mean.prediction(nearestTrain, weights, association.parameter)\n  xUnder = ifelse(min(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) - 1])\n  xOver = ifelse(max(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) + 1])\n  mUnder = mean.prediction(xUnder, weights, association.parameter)\n  mOver = mean.prediction(xOver, weights, association.parameter)\n  exam.output = round(aresp + ((mOver - mUnder) / (xOver - xUnder)) * (x.target - nearestTrain), 3)\n  exam.output\n}\n\nupdate.weights&lt;-function(x.new, y.new, weights, association.parameter, update.parameter){\n  y.feedback.activation&lt;-exp(-1*association.parameter*(y.new-y.plotting)^2)\n  x.feedback.activation&lt;-output.activation(x.new, weights, association.parameter)\n  return(weights+update.parameter*(y.feedback.activation-x.feedback.activation)%*%t(input.activation(x.new, association.parameter)))\n}\n\nlearn.alm&lt;-function(y.learning, association.parameter=0.05, update.parameter=0.5){\n  weights&lt;-matrix(rep(0.00, length(y.plotting)*length(x.plotting)), nrow=length(y.plotting), ncol=length(x.plotting))\n  for (i in 1:length(y.learning)){\n    weights&lt;-update.weights(x.learning[i], y.learning[i], weights, association.parameter, update.parameter)\n    weights[weights&lt;0]=0\n  }\n  alm.predictions&lt;-sapply(x.plotting, mean.prediction, weights=weights, association.parameter=association.parameter)\n  exam.predictions &lt;- sapply(x.plotting, exam.prediction, weights=weights, association.parameter=association.parameter)\n  return(list(alm.predictions=alm.predictions, exam.predictions=exam.predictions))\n  #return(list(alm.predictions=alm.predictions, exam.predictions=exam.predictions,wmFinal=weights))\n}\n\n\n\nx.plotting&lt;&lt;-seq(0,90, .5)\ny.plotting&lt;&lt;-seq(0, 210, by=2)\ntrainOptions=round(seq(1,length(x.plotting),length.out=50),0)\ntrainItems=trainOptions[c(10,11,12)]\n\n\n# Define UI for application\n# \nui &lt;- dashboardPage(\n\n  skin = \"black\",\n  dashboardHeader(title = \"ALM Simulation App\"),\n  dashboardSidebar(\n    sidebarMenu(\n      menuItem(\"Home\", tabName = \"home\", icon = icon(\"home\")),\n      menuItem(\"Code\", tabName = \"code\", icon = icon(\"code\"))\n    )\n  ),\n  dashboardBody(\n    tabItems(\n      tabItem(tabName = \"home\",\n              fluidRow(\n                column(4,\n                       box(\n                         title = \"Simulation Parameters\",\n                         status = \"primary\",\n                         solidHeader = TRUE,\n                         collapsible = TRUE,\n                         collapsed = FALSE,\n                         width = 12,\n                         sliderInput(\"assoc\", \"Association Parameter:\",\n                                     min = 0, max = 1, value = 0.5, step = 0.1),\n                         sliderInput(\"update\", \"Update Parameter:\",\n                                     min = 0, max = 1, value = 0.5, step = 0.1),\n                         sliderInput(\"trainRep\", \"Training Repetitions:\",\n                                     min = 1, max = 10, value = 1, step = 1),\n                         sliderInput(\"Noise\",\"Noise Level:\",\n                                     min = 0, max = 2, value = 0.00, step = 0.1),\n                         checkboxGroupInput(\"trainItems\", \"Training Items:\", choices = trainOptions, selected = trainOptions[c(10,15,35)],inline=TRUE),\n                         # radio buttons for selecting function form\n                         radioButtons(\"functionForm\", \"Function Form:\",\n                                      choices = c(\"Linear\", \"Quadratic\", \"Exponential\"),\n                                      selected = \"Quadratic\"),\n                        # numericInput(\"nRep\", \"Number of Replications:\", value = 1, min = 1, max = 100),\n                         actionButton(\"run\", \"Run Simulation\")\n                       )\n                ),\n                column(8,\n                       box(\n                         title = \"Model Performance\",\n                         status = \"primary\",\n                         solidHeader = TRUE,\n                         collapsible = TRUE,\n                         collapsed = FALSE,\n                          width = 12,\n                         plotOutput(\"plot\"),\n                         h4(\"Average Model Performance\"),\n                         reactableOutput(\"table\"),\n                         h4(\"Model Performance by Item Type\"),\n                         reactableOutput(\"table2\")\n                       )\n                )\n              )\n      ),\n      tabItem(tabName = \"code\",\n              fluidRow(\n                column(12,\n                       box(\n                         title = \"Code\",\n                         status = \"primary\",\n                         solidHeader = TRUE,\n                         collapsible = TRUE,\n                         collapsed = FALSE,\n                         width = 12,\n                         verbatimTextOutput(\"code\")\n                       )\n                )\n                )\n        )\n    )\n    )\n)\n\nserver &lt;- function(input, output, session) {\n  \nobserveEvent(input$run, {\n     assoc = input$assoc\n     update = input$update\n     #nRep = input$nRep\n     nRep=1\n     Noise = input$Noise\n     functionForm = input$functionForm\n     trainRep = input$trainRep\n     trainItems &lt;- input$trainItems\n     trainItems &lt;- as.numeric(trainItems)\n\n     if (functionForm == \"Linear\") {\n         f.plotting &lt;&lt;- as.numeric(x.plotting * 2.2 + 30)\n     } else if (functionForm == \"Quadratic\") {\n         f.plotting &lt;&lt;- as.numeric(210 - ((x.plotting - 50)^2) / 12)\n     } else if (functionForm == \"Exponential\") {\n         # f.plotting&lt;&lt;-as.numeric(scale(200*(1-exp(-x.plotting/25))))\n         f.plotting &lt;&lt;- as.numeric(200 * (1 - exp(-x.plotting / 25)))\n     }\n\n     y.plotting &lt;&lt;- seq(0, max(f.plotting), by = 1)\n     x.learning &lt;&lt;- rep(x.plotting[trainItems], times = trainRep)\n     f.learning &lt;&lt;- rep(f.plotting[trainItems], times = trainRep)\n\n     output_list &lt;- replicate(nRep, list(learn.alm(f.learning + rnorm(length(f.learning), sd = Noise),\n         association.parameter = assoc, update.parameter = update\n     )))\n\n     # weight.mat = output_list[[1]]$wmFinal\n     # output_list = list(output_list[[1]][1], output_list[[1]][2])\n\n     output_df &lt;- lapply(output_list, function(x) as.data.frame(x))\n     output_df &lt;- Reduce(rbind, output_df) %&gt;% mutate(x = x.plotting, y = f.plotting)\n     output_df &lt;- output_df %&gt;%\n         pivot_longer(names_to = \"Model\", values_to = \"Prediction\", cols = c(alm.predictions, exam.predictions)) %&gt;%\n         rbind(data.frame(data.frame(x = x.plotting, y = f.plotting, Model = \"True Function\", Prediction = f.plotting)), .)\n    \n   output$plot &lt;- renderPlot({\n      ggplot(data = output_df, aes(x = x, y = Prediction,color=Model),alpha=.2) + \n        geom_line(aes(linetype=Model,alpha=Model)) + \n        geom_point(data = data.frame(x.learning, f.learning), \n                   aes(x = x.learning,y = f.learning),color=\"black\",size=4,shape=4) +\n        # geom_line(data = data.frame(x.plotting, f.plotting), \n        #           aes(x = x.plotting, y = f.plotting),linetype=2, color = \"black\",alpha=.3) + \n        scale_color_manual(values = c(\"red\", \"blue\", \"black\"))+\n        scale_alpha_manual(values=c(.8,.8,.4))+\n        scale_linetype_manual(values=c(1,1,2))+\n        ggtitle(paste(\"Association Parameter:\", assoc, \" Update Parameter:\", update, \" Train Reps:\", trainRep, \" Noise:\", Noise))\n    }) \n    # table 1 reports the summary stats for all items. Table uses GT library to make gt table\n    output$table &lt;- renderReactable({\n      output_df %&gt;% group_by(Model) %&gt;% filter(Model !=\"True Function\") %&gt;%\n        summarise(MeanDeviation = mean(abs(Prediction - y)), \n                  RMSD = sqrt(mean((Prediction -y)^2)),Correlation = cor(Prediction, y)) %&gt;%\n        mutate(across(where(is.numeric), round, 1)) %&gt;%\n        reactable::reactable(compact=TRUE,bordered = TRUE, highlight = TRUE, resizable=TRUE)\n    })\n    # table 2 reports the summary stats separately for training items, interpolation items, and extrapolation items\n    output$table2 &lt;- renderReactable({\n      output_df %&gt;% filter(Model !=\"True Function\") %&gt;% \n        mutate(ItemType = ifelse(x %in% x.learning, \"Training\", ifelse(x &gt; min(x.learning) & x &lt; max(x.learning), \"Interpolation\", \"Extrapolation\"))) %&gt;%\n        group_by(ItemType,Model) %&gt;%\n        summarise(MeanDeviation = mean(abs(Prediction - y)), \n                  RMSD = sqrt(mean((Prediction -y)^2)),Correlation = cor(Prediction, y)) %&gt;% \n        mutate(across(where(is.numeric), round, 1)) %&gt;%\n        reactable::reactable(compact=TRUE,bordered = TRUE, highlight = TRUE, resizable=TRUE) \n    })\n\n})\n}\n    \n    \n# Run the application\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "htw_exam.html",
    "href": "htw_exam.html",
    "title": "ALM & EXAM Fitting",
    "section": "",
    "text": "Code\npacman::p_load(tidyverse,data.table,igraph,ggraph,kableExtra)\n\nd &lt;- readRDS('dPrune-01-19-23.rds')\n\ndtest &lt;- d %&gt;% filter(expMode %in% c(\"test-Nf\",\"test-train-nf\")) %&gt;% group_by(id,lowBound) %&gt;% \n  mutate(nBand=n(),band=bandInt,id=factor(id)) %&gt;% group_by(id) %&gt;% mutate(nd=n_distinct(lowBound))\n# unique(dtest[dtest$nd==4,]$sbjCode) # 7 in wrong condition\ndtest &lt;- dtest %&gt;% group_by(id,lowBound) %&gt;% filter(nBand&gt;=5 & nd==6)\n# for any id that has at least 1 nBand &gt;=5, remove all rows with that id. \ndtest &lt;- dtest %&gt;% group_by(id) %&gt;% filter(!id %in% unique(dtest$id[dtest$nBand&lt;5]))\n\ndtestAgg &lt;- dtest %&gt;% group_by(id,condit,catOrder,feedbackType,vb,band,lowBound,highBound,input) %&gt;% mutate(vxCapped=ifelse(vx&gt;1600,1600,vx)) %&gt;%\n  summarise(vxMean=mean(vx),devMean=mean(dist),vxMed=median(vx),devMed=median(dist),\n            vxMeanCap=mean(vxCapped),.groups = \"keep\")\n\n# select first row for each id in d, then create histogram for nTrain\n#  d  %&gt;% group_by(id) %&gt;% slice(1) %&gt;% ggplot(aes(nTrain)) + geom_histogram() + facet_wrap(~condit)\n  \nds &lt;- d %&gt;% filter(expMode %in% c(\"train\",\"train-Nf\",\"test-Nf\",\"test-train-nf\")) %&gt;% \nfilter(!id %in% unique(dtest$id[dtest$nBand&lt;5])) %&gt;% select(id,condit,catOrder,feedbackType,expMode,trial,vb,band,lowBound,highBound,input,vx,dist,vxb) \n\ndst &lt;- ds %&gt;% filter(expMode==\"train\",catOrder==\"orig\")\n\n\n\n\nCode\nalm.response &lt;- function(input=1,c) {\ninput.activation &lt;- exp(-c*(input.layer - input)^2)\ninput.activation &lt;&lt;- input.activation/sum(input.activation)\n#print(length(input.activation)); print(dim(weight.mat))\noutput.activation &lt;&lt;- weight.mat %*% input.activation\noutput.probability &lt;&lt;- output.activation/sum(output.activation)\nmean.response &lt;&lt;- sum(output.layer * output.probability)\nmean.response\n}\n\nalm.update &lt;- function(corResp,c,lr){\n  fz &lt;- exp(-c*(output.layer - corResp)^2)\n  teacherSignal &lt;- (fz - output.activation)*lr\n  #print(length(teacherSignal)); print(length(fz))\n  wChange &lt;- teacherSignal %*% t(input.activation)\n  weight.mat &lt;&lt;- weight.mat + (wChange)\n  weight.mat[weight.mat&lt;0]=0\n # weight.mat[weight.mat&gt;1]=1\n  weight.mat &lt;&lt;- weight.mat\n}\n\nalm.trial &lt;- function(input, corResp,c,lr){\n  alm.response(input,c)\n  alm.update(corResp,c,lr)\n  print(paste0(\"input=\",input,\"; corResp=\",corResp,\"; mean.response=\",mean.response))\n  mean.response\n}\n\nhtw_exam_response &lt;- function(input,c){\n  # Find the index of the input node with the highest activation\n  trainVec = c(0,sort(unique(xt))) # add 0 to the training vector\n  nearestTrain &lt;- trainVec[which.min(abs(input - trainVec))]\n  aresp &lt;- alm.response(nearestTrain,c)\n  #max.index &lt;- which.max(input.activation)\n  xUnder = ifelse(min(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) - 1])\n  xOver = ifelse(max(trainVec) == nearestTrain, nearestTrain, trainVec[which(trainVec == nearestTrain) + 1])\n\n  mUnder &lt;- alm.response(xUnder,c)\n  mOver &lt;- alm.response(xOver,c)\n \n   exam.output = round(aresp + ((mOver - mUnder) / (xOver - xUnder)) * (input - nearestTrain), 3)\n  # Determine the input nodes and associated weights for computing the slope\n  exam.output\n}\n\n\n\n# simulation function\nhtw_alm_sim &lt;- function(dat, c, lr,testRange=seq(0,100,.5)){\ninput.layer &lt;&lt;- matrix(seq(1,7,1) ) # half step units for inputs, from 0 to 100\noutput.layer &lt;&lt;- matrix(seq(50,1600,50)) # single step units for outputs, from 0 to 250\nweight.mat &lt;&lt;- matrix(0.00001,nrow=length(output.layer),ncol=length(input.layer )) # weights initialized to 0 (as in Delosh 1997)\nxt&lt;&lt;-dat$x\n# run training\nst &lt;- map2_dbl(dat$x, dat$y, ~alm.trial(.x,.y,c,lr))\n# append training data to the data frame\ndat &lt;- dat %&gt;% mutate(almResp = st)\n# test final weights on the full range of inputs\nalmResp &lt;- map_dbl(testRange, ~alm.response(.x,c)) \nexamResp &lt;- map_dbl(testRange,~exam.response(.x,c))\n\nreturn(list(d=dat, alm=almResp,exam=examResp,wm=weight.mat,c=c,lr=lr)) # final weightmat is probs incorrect for all but last\n}\n\nsimOrganize &lt;- function(simOut){\n\n  dat &lt;- simOut$d\n  weight.mat &lt;&lt;- simOut$wm\n  c &lt;- simOut$c\n  lr &lt;- simOut$lr\n\n  almResp &lt;- generate.data(seq(0,100,.5), type = first(dat$type)) %&gt;% rowwise() %&gt;% \n mutate(model=\"ALM\",resp = alm.response(x,c))\n\nexamResp &lt;- generate.data(seq(0,100,.5), type = first(dat$type)) %&gt;% rowwise() %&gt;% \n mutate(model=\"EXAM\",resp = exam.response(x,c))\n\n bind_rows(almResp,examResp) %&gt;% \n mutate(type=first(dat$type),c=c,lr=lr,\n type=factor(type,levels=c(\"linear\",\"exponential\",\"quadratic\")))\n\n}\n\n\n\ncreate learning models for condit and varied groups.\nWe can model the relation between performance and the number of practice trials as a power law function, or exponential function. Aggregatign over ids in dst. The models predict dist as an exponential decay function of trial number. Band is an additional predictor.\n\\[\nf_p(t) = \\alpha + \\beta t^{r} \\enspace\n\\] \\[\nf_e(t) = \\alpha + \\beta e^{rt} \\enspace\n\\]\n\n\nCode\n# fit exponential decay model as a function of trial number\n\nfit_exp &lt;- function(trial,dist,input){\n    # fit exponential decay model as a function of trial number, band is an additional predictor\n    fit &lt;- nls(dist ~ yf + (y0-yf) * exp(-r*trial) + beta2*input, start = list(yf = 300, y0 = 364, beta2=0, r = .1), data = data.frame(trial=trial,dist=dist,input=input))\n\n    # extract parameters\n    alpha &lt;- coef(fit)[1]\n    beta &lt;- coef(fit)[2]\n    beta2 &lt;- coef(fit)[3]\n    r &lt;- coef(fit)[4]\n    sigma_e &lt;- summary(fit)$sigma\n\n    # compute negative log likelihood\n    nllh &lt;- negative_llh_exp(dist, trial, alpha, beta, r, sigma_e)\n\n    # return parameters and negative log likelihood\n    return(list(alpha=alpha,beta=beta,beta2=beta2,r=r,sigma_e=sigma_e,nllh=nllh))\n}\n\n# Compute group averages for dist over trial and band. dst \n\navgTrain &lt;- dst %&gt;% group_by(id,condit,trial,band,input) %&gt;% summarise(dist=mean(dist)) %&gt;% ungroup() %&gt;% group_by(condit,trial,band) %&gt;% summarise(dist=mean(dist)) %&gt;% ungroup()\n \n# plot group averages\nggplot(avgTrain,aes(x=trial,y=dist)) + geom_line(aes(group=band,color=band)) +facet_grid(~condit)\n\navgTrain %&gt;% filter(condit==\"Constant\") %&gt;% nls(dist ~ yf + (y0-yf) * exp(-r*trial), start = list(yf = 120, y0 = 364, r = .1), data = .) %&gt;% summary()\n\n\navgTrain %&gt;% filter(condit==\"Constant\") %&gt;% nls(dist ~ SSasymp(trial, yf, y0, log_alpha),data=.)\n\n# fit exponential decay model for each condit\nfit_condit &lt;- avgTrain %&gt;% group_by(condit) %&gt;% do(fit_exp(trial=.$trial,dist=.$dist,input=.$input))\n\n# fit exponential model"
  }
]